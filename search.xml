<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CentOS7部署_Seata单节点</title>
      <link href="/2022/04/28/alibaba/seata/centos7%E9%83%A8%E7%BD%B2_Seata%E5%8D%95%E8%8A%82%E7%82%B9/"/>
      <url>/2022/04/28/alibaba/seata/centos7%E9%83%A8%E7%BD%B2_Seata%E5%8D%95%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><blockquote><p>Seata 是阿里巴巴开源的分布式事务中间伯，一种分布式事务解决方案，具有高性能和易于使用的微服务架构</p><p>因 Seata 是基于 Java 开发的，所以需要先在机器上准备 Java 环境，并且提前安装好 Nacos (单机或集群都可)</p></blockquote><p>注：每个 Spring Cloud Alibaba 版本及其自身所适配的各组件对应版本，建议安装前请根据项目要求进行版本选择；</p><p><strong>服务部署流程：</strong></p><ul><li>下载程序项目文件</li><li>打开 <code>config/file.conf</code> 修改 <code>mode=&quot;db&quot;</code>，数据库连接信息（URL\USERNAME\PASSWORD）</li><li>创建新数据库 <code>seata_db</code>，新建表 <code>/script/server/db/mysql.sql</code>（<a href="https://github.com/seata/seata/tree/1.3.0/script/server/db">seata提供的资源信息</a>）</li><li>修改并导入 seata 全局参数 <code>/script/config-center/config.txt</code>（<a href="https://github.com/seata/seata/tree/1.3.0/script/config-center">seata提供的资源信息</a>）</li><li>启动服务并创建开机自启服务</li></ul><h3 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h3><p>1）官方站下载，版本自行选择下载并上传服务器，在此选择 <a href="https://www.oracle.com/java/technologies/downloads/#java8">Jdk1.8</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xf jdk-8u331-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">$ <span class="built_in">mv</span> /usr/local/jdk1.8.0_331 /usr/local/java</span><br></pre></td></tr></table></figure><p>2）配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">JRE_HOME=/usr/local/java/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="安装-Seata"><a href="#安装-Seata" class="headerlink" title="安装 Seata"></a>安装 Seata</h3><p>1）下载并解压，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/seata/seata/releases/download/v1.3.0/seata-server-1.3.0.tar.gz</span><br><span class="line">$ tar -xf seata-server-1.3.0.tar.gz -C /usr/local/</span><br><span class="line"></span><br><span class="line">$ wget https://github.com/seata/seata/archive/refs/heads/1.3.0.zip</span><br><span class="line">$ unzip seata-1.3.0.zip</span><br><span class="line">$ <span class="built_in">mv</span> seata-1.3.0/script /usr/local/seata</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/seata</span><br></pre></td></tr></table></figure><p>2）创建日志目录并修改配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ mkdir log</span><br><span class="line">$ vim conf/logback.xml</span><br><span class="line"># 修改成刚创建的目录</span><br><span class="line">29     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/usr/local/seata/log&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>3）修改配置文件，存储方式选择 db，配置数据库连接信息，以及处理事务的全局性表</p><blockquote><p>注意：driverClassName 驱动的配置需要根据 mysql 的版本决定</p><ul><li>mysql5.+ 使用 driverClassName &#x3D; “com.mysql.jdbc.Driver”</li><li>mysql8 使用 driverClassName &#x3D; “com.mysql.cj.jdbc.Driver”</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim conf/file.conf</span><br><span class="line"><span class="comment">## transaction log store, only used in seata-server</span></span><br><span class="line">store &#123;</span><br><span class="line">  <span class="comment">## store mode: file、db、redis</span></span><br><span class="line">  mode = <span class="string">&quot;db&quot;</span>   <span class="comment"># 修改存储模式,默认为file</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## database store property</span></span><br><span class="line">  db &#123;</span><br><span class="line">    <span class="comment">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)/BasicDataSource(dbcp)/HikariDataSource(hikari) etc.</span></span><br><span class="line">    datasource = <span class="string">&quot;druid&quot;</span></span><br><span class="line">    <span class="comment">## mysql/oracle/postgresql/h2/oceanbase etc.</span></span><br><span class="line">    dbType = <span class="string">&quot;mysql&quot;</span></span><br><span class="line">    driverClassName = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span><br><span class="line">    <span class="comment"># 修改数据库源的地址</span></span><br><span class="line">    url = <span class="string">&quot;jdbc:mysql://188.188.4.44:3306/seata_db&quot;</span></span><br><span class="line">    user = <span class="string">&quot;seata&quot;</span></span><br><span class="line">    password = <span class="string">&quot;seata&quot;</span></span><br><span class="line">    minConn = 5</span><br><span class="line">    maxConn = 30</span><br><span class="line">    globalTable = <span class="string">&quot;global_table&quot;</span></span><br><span class="line">    branchTable = <span class="string">&quot;branch_table&quot;</span></span><br><span class="line">    lockTable = <span class="string">&quot;lock_table&quot;</span></span><br><span class="line">    queryLimit = 100</span><br><span class="line">    maxWait = 5000</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>4）创建数据库，并导入全局性表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database seata_db character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user &#x27;seata&#x27;@&#x27;%&#x27; identified by &#x27;seata&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on seata_db.* to &#x27;seata&#x27;@&#x27;%&#x27;;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line">mysql&gt; use seata_db;</span><br><span class="line">mysql&gt; source /usr/local/seata/script/server/db/mysql.sql;</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><p>5）修改 <code>seata/conf/registry.conf</code> 文件，配置选用的 a.注册中心类型(nacos)、注册中心的连接信息；b.配置中心的类型，配置中心的连接信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/seata/conf</span><br><span class="line">$ vim registry.conf</span><br><span class="line"><span class="comment"># 注册中心</span></span><br><span class="line">registry &#123;</span><br><span class="line">  <span class="comment"># file 、nacos 、eureka、redis、zk、consul、etcd3、sofa</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">&quot;nacos&quot;</span>  <span class="comment"># 修改连接方式，默认为file</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 仅修改nacos配置</span></span><br><span class="line">  nacos &#123;</span><br><span class="line">    application = <span class="string">&quot;seata-server&quot;</span></span><br><span class="line">    serverAddr = <span class="string">&quot;188.188.4.44:8848&quot;</span></span><br><span class="line">    group = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    namespace = <span class="string">&quot;&quot;</span></span><br><span class="line">    cluster = <span class="string">&quot;default&quot;</span></span><br><span class="line">    username = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    password = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置中心</span></span><br><span class="line">config &#123;</span><br><span class="line">  <span class="comment"># file、nacos 、apollo、zk、consul、etcd3</span></span><br><span class="line">  <span class="built_in">type</span> = <span class="string">&quot;nacos&quot;</span></span><br><span class="line"></span><br><span class="line">  nacos &#123;</span><br><span class="line">    serverAddr = <span class="string">&quot;188.188.4.44:8848&quot;</span></span><br><span class="line">    namespace = <span class="string">&quot;&quot;</span></span><br><span class="line">    group = <span class="string">&quot;SEATA_GROUP&quot;</span></span><br><span class="line">    username = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">    password = <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>6）修改 <code>script/config-center/config.txt</code> 配置文件，配置 seata 事务的相关属性</p><blockquote><p>注意事项：</p><ol><li>下载源码时注意对应版本</li><li>my_test_tx_group 需要与 bootstrap.yml 或者 application.yml 中配置的 seata.tx-service-group 的值一致</li><li>配置的 default 必须要等于 registry.conf 中配置的 cluster&#x3D;”default”</li><li>store.mode&#x3D;db配置为db的方式，则需要配置db数据库方式的连接信息 store.db.url、store.db.user、store.db.password，此数据库存储下存放的表 global_table、branch_table、lock_table，用于记录全局性的事务信息</li><li>store.db.driverClassName 的配置连接方式，注意 MySQL 版本驱动配置</li><li>service.default.grouplist&#x3D;ip:port 为访问 seata 服务器的地址和端口，仅注册中心为 file 时使用，默认端口 8091</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim seata/script/config-center/config.txt</span><br><span class="line">transport.type=TCP</span><br><span class="line">transport.server=NIO</span><br><span class="line">transport.heartbeat=<span class="literal">true</span></span><br><span class="line">transport.enableClientBatchSendRequest=<span class="literal">false</span></span><br><span class="line">transport.threadFactory.bossThreadPrefix=NettyBoss</span><br><span class="line">transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker</span><br><span class="line">transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler</span><br><span class="line">transport.threadFactory.shareBossWorker=<span class="literal">false</span></span><br><span class="line">transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector</span><br><span class="line">transport.threadFactory.clientSelectorThreadSize=1</span><br><span class="line">transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread</span><br><span class="line">transport.threadFactory.bossThreadSize=1</span><br><span class="line">transport.threadFactory.workerThreadSize=default</span><br><span class="line">transport.shutdown.wait=3</span><br><span class="line"><span class="comment"># 事务分组:异地容错机制</span></span><br><span class="line"><span class="comment"># my_test_tx_group可自定义,如guangzhou、shanghai</span></span><br><span class="line"><span class="comment"># default必须对应registry的cluster</span></span><br><span class="line">service.vgroupMapping.my_test_tx_group=default</span><br><span class="line">service.default.grouplist=127.0.0.1:8091</span><br><span class="line">service.enableDegrade=<span class="literal">false</span></span><br><span class="line">service.disableGlobalTransaction=<span class="literal">false</span></span><br><span class="line">client.rm.asyncCommitBufferLimit=10000</span><br><span class="line">client.rm.lock.retryInterval=10</span><br><span class="line">client.rm.lock.retryTimes=30</span><br><span class="line">client.rm.lock.retryPolicyBranchRollbackOnConflict=<span class="literal">true</span></span><br><span class="line">client.rm.reportRetryCount=5</span><br><span class="line">client.rm.tableMetaCheckEnable=<span class="literal">false</span></span><br><span class="line">client.rm.sqlParserType=druid</span><br><span class="line">client.rm.reportSuccessEnable=<span class="literal">false</span></span><br><span class="line">client.rm.sagaBranchRegisterEnable=<span class="literal">false</span></span><br><span class="line">client.tm.commitRetryCount=5</span><br><span class="line">client.tm.rollbackRetryCount=5</span><br><span class="line">client.tm.degradeCheck=<span class="literal">false</span></span><br><span class="line">client.tm.degradeCheckAllowTimes=10</span><br><span class="line">client.tm.degradeCheckPeriod=2000</span><br><span class="line"><span class="comment"># mode改为db </span></span><br><span class="line">store.mode=db</span><br><span class="line">store.file.dir=file_store/data</span><br><span class="line">store.file.maxBranchSessionSize=16384</span><br><span class="line">store.file.maxGlobalSessionSize=512</span><br><span class="line">store.file.fileWriteBufferCacheSize=16384</span><br><span class="line">store.file.flushDiskMode=async</span><br><span class="line">store.file.sessionReloadReadSize=100</span><br><span class="line">store.db.datasource=druid</span><br><span class="line">store.db.dbType=mysql</span><br><span class="line">store.db.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"><span class="comment"># 改为创建的seata数据库,用户名和密码</span></span><br><span class="line">store.db.url=jdbc:mysql://188.188.4.44:3306/seata_db?useUnicode=<span class="literal">true</span></span><br><span class="line">store.db.user=seata</span><br><span class="line">store.db.password=seata</span><br><span class="line">store.db.minConn=5</span><br><span class="line">store.db.maxConn=30</span><br><span class="line">store.db.globalTable=global_table</span><br><span class="line">store.db.branchTable=branch_table</span><br><span class="line">store.db.queryLimit=100</span><br><span class="line">store.db.lockTable=lock_table</span><br><span class="line">store.db.maxWait=5000</span><br><span class="line">store.redis.host=127.0.0.1</span><br><span class="line">store.redis.port=6379</span><br><span class="line">store.redis.maxConn=10</span><br><span class="line">store.redis.minConn=1</span><br><span class="line">store.redis.database=0</span><br><span class="line">store.redis.password=null</span><br><span class="line">store.redis.queryLimit=100</span><br><span class="line">server.recovery.committingRetryPeriod=1000</span><br><span class="line">server.recovery.asynCommittingRetryPeriod=1000</span><br><span class="line">server.recovery.rollbackingRetryPeriod=1000</span><br><span class="line">server.recovery.timeoutRetryPeriod=1000</span><br><span class="line">server.maxCommitRetryTimeout=-1</span><br><span class="line">server.maxRollbackRetryTimeout=-1</span><br><span class="line">server.rollbackRetryTimeoutUnlockEnable=<span class="literal">false</span></span><br><span class="line">client.undo.dataValidation=<span class="literal">true</span></span><br><span class="line">client.undo.logSerialization=jackson</span><br><span class="line">client.undo.onlyCareUpdateColumns=<span class="literal">true</span></span><br><span class="line">server.undo.logSaveDays=7</span><br><span class="line">server.undo.logDeletePeriod=86400000</span><br><span class="line">client.undo.logTable=undo_log</span><br><span class="line">client.log.exceptionRate=100</span><br><span class="line">transport.serialization=seata</span><br><span class="line">transport.compressor=none</span><br><span class="line">metrics.enabled=<span class="literal">false</span></span><br><span class="line">metrics.registryType=compact</span><br><span class="line">metrics.exporterList=prometheus</span><br><span class="line">metrics.exporterPrometheusPort=9898</span><br></pre></td></tr></table></figure><p>导入全局参数，可忽略参数直接指定 Nacos 地址即可；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh <span class="variable">$&#123;SEATAPATH&#125;</span>/script/config-center/nacos-config.sh -h 188.188.4.44 -p 8848 -g SEATA_GROUP -t 787964a5-e21d-4eb8-9999-9bcc9244bd48</span><br><span class="line">-h:默认host，指定nacos远程地址</span><br><span class="line">-p:port，指定nacos远程端口</span><br><span class="line">-g:配置分组，默认值为<span class="string">&#x27;SEATA_GROUP&#x27;</span> </span><br><span class="line">-t:租户信息，对应Nacos命名空间ID字段，默认值为空</span><br></pre></td></tr></table></figure><p>7）浏览器登录 Nacos 查看服务是否添加成功；</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220428134312399.png" alt="image-20220428134312399"></p><p>8）启动 Seata Server 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">nohup</span> sh seata-server.sh -p 8091 -h 188.188.4.44 &gt; /tmp/seata.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">参数</th><th align="left">全写</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="center">-h</td><td align="left">–host</td><td align="left">指定在注册中心注册的 IP</td><td align="left">不指定时获取当前的 IP，外部访问部署在云环境和容器中的 server 建议指定</td></tr><tr><td align="center">-p</td><td align="left">–port</td><td align="left">指定 server 启动的端口</td><td align="left">默认为 8091</td></tr><tr><td align="center">-m</td><td align="left">–storeMode</td><td align="left">事务日志存储方式</td><td align="left">支持<code>file</code>,<code>db</code>,<code>redis</code>，默认为 <code>file</code> 注:redis需seata-server 1.3版本及以上</td></tr><tr><td align="center">-n</td><td align="left">–serverNode</td><td align="left">用于指定seata-server节点ID</td><td align="left">如 <code>1</code>,<code>2</code>,<code>3</code>…, 默认为 <code>1</code></td></tr><tr><td align="center">-e</td><td align="left">–seataEnv</td><td align="left">指定 seata-server 运行环境</td><td align="left">如 <code>dev</code>, <code>test</code> 等, 服务启动时会使用 <code>registry-dev.conf</code> 这样的配置</td></tr></tbody></table><p>9）配置 systemd 服务，并设置开机启动</p><blockquote><p>如果 java 没有安装在 usr 文件夹下需要添加连接 <code>ln -s /usr/local/java/bin/java /usr/bin/java</code>，否则无法启动 </p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建启动脚本</span></span><br><span class="line">$ vim /usr/local/seata/bin/seata-start.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 上述连接无添加时，可在脚本上指定java环境</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/</span><br><span class="line">sh /usr/local/seata/bin/seata-server.sh -p 8091 -h 188.188.4.44</span><br><span class="line">$ <span class="built_in">chmod</span> +x !$</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加 nacos 服务运行用户</span></span><br><span class="line">$ useradd -s /sbin/nologin -M seata</span><br><span class="line">$ <span class="built_in">chown</span> -R seata:seata /usr/local/seata</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 service 文件</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt; /usr/lib/systemd/system/seata.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=seata</span></span><br><span class="line"><span class="string">Documentation=https://seata.io/zh-cn/</span></span><br><span class="line"><span class="string">After=network.targe</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=seata</span></span><br><span class="line"><span class="string">Group=seata</span></span><br><span class="line"><span class="string">Type=simple</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/seata/bin/seata-start.sh</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now seata.service &amp;&amp; systemctl status seata</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220428135904871.png" alt="image-20220428135904871"></p>]]></content>
      
      
      <categories>
          
          <category> springcloudalibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Nacos单节点</title>
      <link href="/2022/04/26/alibaba/nacos/cenots7%E9%83%A8%E7%BD%B2_Nacos%E5%8D%95%E8%8A%82%E7%82%B9/"/>
      <url>/2022/04/26/alibaba/nacos/cenots7%E9%83%A8%E7%BD%B2_Nacos%E5%8D%95%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>64 bit OS，支持 Linux&#x2F;Unix&#x2F;Mac&#x2F;Windows，推荐选用 Linux&#x2F;Unix&#x2F;Mac</li><li>64 bit JDK 1.8+；<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">下载</a> &amp; <a href="https://docs.oracle.com/cd/E19182-01/820-7851/inst_cli_jdk_javahome_t/">配置</a></li><li>Maven 3.2.x+；<a href="https://maven.apache.org/download.cgi">下载</a> &amp; <a href="https://maven.apache.org/settings.html">配置</a></li></ul><h3 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h3><blockquote><p>自行下载并上传服务器</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xf jdk-8u331-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">$ <span class="built_in">mv</span> /usr/local/jdk1.8.0_331 /usr/local/java</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">JRE_HOME=/usr/local/java/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><blockquote><p>自行下载并上传服务器</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xf apache-maven-3.8.5-bin.tar.gz -C /usr/local/</span><br><span class="line">$ <span class="built_in">mv</span> /usr/local/apache-maven-3.8.5 /usr/local/maven</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># maven</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:/usr/local/mysql/bin:<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>修改 <code>Maven Setting.xml</code> 配置文件，配置参考 <a href="https://developer.aliyun.com/mvn/guide">阿里云云效 Maven</a> 使用指南</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /usr/local/maven/repo                            //创建本地仓库目录</span><br><span class="line">$ vim /usr/local/maven/conf/settings.xml</span><br><span class="line">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line">  --&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/usr/local/maven/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span>  //取消注释并修改本地仓库位置</span><br><span class="line">  </span><br><span class="line"># 添加阿里云公共仓库</span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><p>1）删除旧版本的 MySQL 及相关配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa mysql</span><br><span class="line">$ rpm -qa | grep mariadb </span><br><span class="line">$ rpm -e --nodeps mariadb-libs  <span class="comment"># 文件名</span></span><br><span class="line">$ <span class="built_in">rm</span> -rf /etc/my.cnf</span><br></pre></td></tr></table></figure><p>2）安装相关依赖环境并下载源码包(自行下载上传)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/c0ba76101ab1f2a92413ab7f929c8356.png" alt="image-20220401102821310"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install ncurses-devel cmake libaio-devel openssl-devel</span><br></pre></td></tr></table></figure><p>3）解压目录并根据需求进行配置安装(基于 cmake 进行配置)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xf mysql-boost-5.7.37.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> mysql-5.7.37</span><br><span class="line"></span><br><span class="line">$ cmake . \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/mysql/data \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DEXTRA_CHARSETS=all \</span><br><span class="line">-DDEFAULT_CHARSET=utf8mb4 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8mb4_general_ci \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_BOOST=boost</span><br><span class="line"></span><br><span class="line">$ make -j2 &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>4）数据初始化，创建一个数据库专用账号 mysql(其所属组也为 mysql)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd -r -s /sbin/nologin mysql</span><br><span class="line">$ <span class="built_in">id</span> mysql</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建mysql-files目录并修改权限</span></span><br><span class="line">$ <span class="built_in">mkdir</span> mysql-files</span><br><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql /usr/local/mysql</span><br><span class="line">$ <span class="built_in">chmod</span> 750 mysql-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库初始化操作，记录密码</span></span><br><span class="line">$ bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line">...</span><br><span class="line">2022-04-03T02:43:31.295939Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: ygnt<span class="comment">#l2X(fzx</span></span><br></pre></td></tr></table></figure><p>5）拷贝 mysql.server 脚本到 <code>/etc/init.d</code> 目录，编写 MySQL 配置文件，然后启动数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">$ service mysql start</span><br><span class="line">Starting MySQL.Logging to <span class="string">&#x27;/usr/local/mysql/data/Dev-Pc.err&#x27;</span>.</span><br><span class="line"> SUCCESS!</span><br><span class="line"></span><br><span class="line">$ vim my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">$ service mysql restart</span><br><span class="line">Shutting down MySQL.. SUCCESS! </span><br><span class="line">Starting MySQL. SUCCESS!</span><br></pre></td></tr></table></figure><p>6）重置管理员密码并设置安全配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ bin/mysqladmin -uroot password &#x27;newpassword&#x27; -p</span><br><span class="line">Enter password:</span><br><span class="line">mysqladmin: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.</span><br><span class="line"></span><br><span class="line"># 重置后测试是否成功登录</span><br><span class="line">$ bin/mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.7.37 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2022, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; exit</span><br><span class="line"></span><br><span class="line">$ bin/mysql_secure_installation</span><br><span class="line"># 第一项回车跳过外，其他都选y</span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Enter password for user root: </span><br><span class="line">The &#x27;validate_password&#x27; plugin is installed on the server.</span><br><span class="line">The subsequent steps will run with the existing configuration</span><br><span class="line">of the plugin.</span><br><span class="line">Using existing password for root.</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50 </span><br><span class="line">Change the password for root ? ((Press y|Y for Yes, any other key for No) : </span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br></pre></td></tr></table></figure><p>7）添加服务至开机启动并配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chkconfig --add mysql</span><br><span class="line">$ chkconfig mysql on</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="安装-Nacos"><a href="#安装-Nacos" class="headerlink" title="安装 Nacos"></a>安装 Nacos</h3><p>1）在 GitHub 上下载编译好的 nacos 安装包，下载地址: <a href="https://github.com/alibaba/nacos/releases">Release</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xvf nacos-server-2.0.3.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><p>2）登录 MySQL ，创建数据库并初始化 <a href="https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql">SQL 数据源</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database nacos_db character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user &#x27;nacos&#x27;@&#x27;%&#x27; identified by &#x27;nacos&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on nacos_db.* to &#x27;nacos&#x27;@&#x27;%&#x27;;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"># 切换数据库，执行nacos初始化数据脚本</span><br><span class="line">mysql&gt; use nacos_db;</span><br><span class="line">mysql&gt; source /usr/local/nacos/conf/nacos-mysql.sql;</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| nacos_db           |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>3）配置 nacos 后端数据库，在 nacos 的 conf 目录下修改 <a href="https://github.com/alibaba/nacos/blob/master/distribution/conf/application.properties">application.properties 配置文件</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nacos/conf/application.properties</span><br><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line">spring.datasource.platform=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line">db.num=1</span><br><span class="line"></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="comment"># 注意：数据库地址、库名、时区的修改</span></span><br><span class="line">db.url.0=jdbc:mysql://188.188.4.44:3306/nacos_db?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span>&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">db.user.0=nacos</span><br><span class="line">db.password.0=nacos</span><br></pre></td></tr></table></figure><p>4）脚本默认的启动方式为集群模式，需要修改成 standalone</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ./nacos/bin/startup.sh</span><br><span class="line"><span class="comment"># 将55行的MODE改成standalone,单机启动</span></span><br><span class="line"> 54 <span class="built_in">export</span> SERVER=<span class="string">&quot;nacos-server&quot;</span> </span><br><span class="line"> 55 <span class="built_in">export</span> MODE=<span class="string">&quot;standalone&quot;</span></span><br><span class="line"> 56 <span class="built_in">export</span> FUNCTION_MODE=<span class="string">&quot;all&quot;</span></span><br><span class="line"> 57 <span class="built_in">export</span> MEMBER_LIST=<span class="string">&quot;&quot;</span></span><br><span class="line"> 58 <span class="built_in">export</span> EMBEDDED_STORAGE=<span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>5）启动服务并测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh /usr/local/nacos/bin/startup.sh</span><br><span class="line">/usr/local/java/bin/java -Djava.ext.dirs=/usr/local/java/jre/lib/ext:/usr/local/java/lib/ext  -Xms512m -Xmx512m -Xmn256m -Dnacos.standalone=<span class="literal">true</span> -Dnacos.member.list= -Xloggc:/usr/local/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/usr/local/nacos/plugins/health,/usr/local/nacos/plugins/cmdb -Dnacos.home=/usr/local/nacos -jar /usr/local/nacos/target/nacos-server.jar  --spring.config.additional-location=file:/usr/local/nacos/conf/ --logging.config=/usr/local/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288</span><br><span class="line">nacos is starting with standalone</span><br><span class="line">nacos is starting，you can check the /usr/local/nacos/logs/start.out</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">tail</span> -f /usr/local/nacos/logs/start.out</span><br><span class="line">2022-04-27 14:43:22,299 INFO Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@3a08078c, org.springframework.security.web.context.SecurityContextPersistenceFilter@2b289ac9, org.springframework.security.web.header.HeaderWriterFilter@31ceba99, org.springframework.security.web.csrf.CsrfFilter@859ea42, org.springframework.security.web.authentication.logout.LogoutFilter@4487c0c2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@73d3e555, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@18460128, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@53830483, org.springframework.security.web.session.SessionManagementFilter@bbf9e07, org.springframework.security.web.access.ExceptionTranslationFilter@2af46afd]</span><br><span class="line"></span><br><span class="line">2022-04-27 14:43:22,443 INFO Initializing ExecutorService <span class="string">&#x27;taskScheduler&#x27;</span></span><br><span class="line"></span><br><span class="line">2022-04-27 14:43:22,464 INFO Exposing 16 endpoint(s) beneath base path <span class="string">&#x27;/actuator&#x27;</span></span><br><span class="line"></span><br><span class="line">2022-04-27 14:43:22,593 INFO Tomcat started on port(s): 8848 (http) with context path <span class="string">&#x27;/nacos&#x27;</span></span><br><span class="line"></span><br><span class="line">2022-04-27 14:43:22,597 INFO Nacos started successfully <span class="keyword">in</span> stand alone mode. use external storage</span><br><span class="line"></span><br><span class="line">2022-04-27 14:43:33,951 INFO Initializing Servlet <span class="string">&#x27;dispatcherServlet&#x27;</span></span><br><span class="line"></span><br><span class="line">2022-04-27 14:43:33,967 INFO Completed initialization <span class="keyword">in</span> 15 ms</span><br></pre></td></tr></table></figure><p>6）打开浏览器访问 nacos，默认账密 <code>nacos/nacos</code></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220427144340103.png" alt="image-20220427144340103"></p><p>7）配置 systemd 管理 nacos</p><p><strong>注：</strong>虽然系统已配置了 java 环境，并且直接调用 <code>startup.sh</code> 也能成功启动，但使用服务 <code>service</code> 就无法启动，原因是服务脚本的环境与系统环境变量不能共享</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 nacos 服务运行用户</span></span><br><span class="line">$ useradd -s /sbin/nologin -M nacos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 nacos 目录权限</span></span><br><span class="line">$ <span class="built_in">chown</span> -R nacos:nacos /usr/local/nacos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件，注释并增加实际java路径</span></span><br><span class="line">[ ! -e <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/bin/java&quot;</span> ] &amp;&amp; JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=$HOME/jdk/java</span></span><br><span class="line"><span class="comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/usr/java</span></span><br><span class="line"><span class="comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/opt/taobao/java</span></span><br><span class="line"><span class="comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; unset JAVA_HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 service 文件</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt; /usr/lib/systemd/system/nacos.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=nacos</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">Environment=&quot;JAVA_HOME=/usr/local/java&quot;</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/nacos/bin/startup.sh</span></span><br><span class="line"><span class="string">ExecReload=/usr/local/nacos/bin/shutdown.sh</span></span><br><span class="line"><span class="string">ExecStop=/usr/local/nacos/bin/shutdown.sh</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string">User=nacos</span></span><br><span class="line"><span class="string">Group=nacos</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now nacos.service &amp;&amp; systemctl status nacos</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> springcloudalibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Redis哨兵模式</title>
      <link href="/2022/04/25/redis/centos7%E9%83%A8%E7%BD%B2_Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/25/redis/centos7%E9%83%A8%E7%BD%B2_Redis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Redis 常用的集群方案，有三种集群模式，</p><h3 id="集群介绍"><a href="#集群介绍" class="headerlink" title="集群介绍"></a>集群介绍</h3><p><strong>Redis 的几种常见使用方式有：</strong></p><ul><li>Redis 单副本</li><li>Redis 多副本(主从)</li><li>Redis Sentinel(哨兵)</li><li>Redis Cluster</li><li>Redis 自研</li></ul><ol><li><p><strong>Redis 单副本</strong></p><p>Redis 单副本，采用单个 Redis 节点部署架构，没有备用节点实时同步数据，不提供数据持久化和备份策略，适用于数据可靠性要求不高的纯缓存业务场景</p></li><li><p><strong>Redis 多副本(主从)</strong></p><p>Redis 多副本，采用主从(replication)部署结构，相较于单副本而言最大的特点就是主从实例间数据实时同步，并且提供数据持久化和备份策略。主从实例部署在不同的物理服务器上，根据公司的基础环境配置，可以实现同时对外提供服务和读写分离策略</p></li><li><p><strong>Redis Sentinel(哨兵)</strong></p><p>Redis Sentinel 集群是由若干 Sentinel 节点组成的分布式集群，可以实现故障发现、故障自动转移、配置中心和客户端通知。Redis Sentinel 的节点数量要满足 2n+1(n&gt;&#x3D;1)的奇数个</p></li><li><p><strong>Redis Cluster</strong></p><p>Redis Cluster 集群节点最小配置 6 个节点以上(3 主 3 从)，其中主节点提供读写操作，从节点作为备用节点，不提供请求，只作为故障转移使用。采用虚拟槽分区，所有的键根据哈希函数映射到 0～16383 个整数槽内，每个节点负责维护一部分槽以及槽所印映射的键值数据</p></li><li><p><strong>Redis 自研</strong></p><p>Redis 自研的高可用解决方案，主要体现在配置中心、故障探测和 failover 的处理机制上，通常需要根据企业业务的实际线上环境来定制化</p></li></ol><h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><blockquote><p>哨兵模式是一种特殊的模式，首先 Redis 提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是<strong>哨兵通过发送命令，等待 Redis 服务器响应，从而监控运行的多个 Redis 实例</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220425100918585.png" alt="image-20220425100918585"></p><p><strong>Redis 哨兵的作用</strong></p><ul><li>通过发送命令，让 Redis 服务器返回监控其运行状态，包括主服务器和从服务器</li><li>当哨兵监测到 master 宕机，会自动将 slave 切换成 master，然后通过<strong>发布订阅模式</strong>通知其他的从服务器，修改配置文件，让它们切换主机</li></ul><blockquote><p>Redis 安装过程不再演示，主要演示配置 3个哨后和一主二从的 Redis 服务</p><p>一个哨兵进程对 Redis 服务器进行监控，可能会出现问题，为此可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220425101155331.png" alt="image-20220425101155331"></p><table><thead><tr><th>服务类型</th><th>是否是主服务器</th><th>IP地址</th><th>端口</th></tr></thead><tbody><tr><td>Redis(M)</td><td>是</td><td>188.188.4.210</td><td>6379</td></tr><tr><td>Redis(S)</td><td>否</td><td>188.188.4.211</td><td>6379</td></tr><tr><td>Redis(S)</td><td>否</td><td>188.188.4.212</td><td>6379</td></tr><tr><td>Sentinel</td><td>-</td><td>188.188.4.210</td><td>26379</td></tr><tr><td>Sentinel</td><td>-</td><td>188.188.4.211</td><td>26379</td></tr><tr><td>Sentinel</td><td>-</td><td>188.188.4.212</td><td>26379</td></tr></tbody></table><h3 id="配置主从"><a href="#配置主从" class="headerlink" title="配置主从"></a>配置主从</h3><p>1）配置 Redis 主从服务，修改 <code>redis.conf</code> 文件(从服务器比主服务器多一个 slaveof 的配置和密码)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Master</span></span><br><span class="line">$ vim /usr/local/redis/etc/redis.conf</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0                 <span class="comment"># 配置Redis服务器可跨网络访问</span></span><br><span class="line">requirepass 123456           <span class="comment"># 设置密码</span></span><br><span class="line">logfile <span class="string">&quot;/usr/local/redis/log/redis.log&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Slave</span></span><br><span class="line">$ vim /usr/local/redis/etc/redis.conf</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0                 <span class="comment"># 配置Redis服务器可跨网络访问</span></span><br><span class="line">requirepass 123456           <span class="comment"># 设置密码</span></span><br><span class="line">logfile <span class="string">&quot;/usr/local/redis/log/redis.log&quot;</span></span><br><span class="line">replicaof 188.188.4.210 6379 <span class="comment"># 指定Master服务器</span></span><br><span class="line">masterauth 123456            <span class="comment"># Master服务器密码</span></span><br></pre></td></tr></table></figure><p>2）分别重启主从节点的 Redis 服务，出现如下界面代表主从配置成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart redis &amp;&amp; systemctl status redis</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220425144815428.png" alt="image-20220425144815428"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220425144855451.png" alt="image-20220425144855451"></p><p>3）测试功能，登录主节点，运行 info replication 也可以看到配置的从节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Master</span></span><br><span class="line">$ redis-cli</span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=188.188.4.211,port=6379,state=online,offset=462,lag=1</span><br><span class="line">slave1:ip=188.188.4.212,port=6379,state=online,offset=462,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:e6390266fdecd75b7f42fcfb8dc7781683ccf4f1</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:462</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:462</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Slave</span></span><br><span class="line">$ redis-cli </span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:slave</span><br><span class="line">master_host:188.188.4.210</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_read_repl_offset:546</span><br><span class="line">slave_repl_offset:546</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:e6390266fdecd75b7f42fcfb8dc7781683ccf4f1</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:546</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:546</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h3 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h3><p>1）配置 3个哨兵，每个哨兵配置一样(Redis 解压包内有 <code>sentinel.conf</code> 配置文件，直接 copy 修改)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/local/src/redis-6.2.6/sentinel.conf /usr/local/redis/etc/</span><br><span class="line">$ vim sentinel.conf</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0                                 <span class="comment"># 监听IP地址</span></span><br><span class="line">protected-mode no                            <span class="comment"># 关闭保护模式</span></span><br><span class="line">daemonize <span class="built_in">yes</span>                                <span class="comment"># 以守护进程方式运行</span></span><br><span class="line">logfile <span class="string">&quot;/usr/local/redis/log/sentinel.log&quot;</span>  <span class="comment"># 日志地址</span></span><br><span class="line"><span class="comment"># 配置监听的主服务器，这里sentinel monitor代表监控，mymaster代表服务器的名称，可以自定义，</span></span><br><span class="line"><span class="comment"># 188.188.4.210代表监控的主服务器，6379代表端口，1代表主挂了，从机投票接替，设2时表示只有两个或两个以上的哨兵认为主服务器不可用的时候，才会进行failover操作</span></span><br><span class="line">sentinel monitor mymaster 188.188.4.210 6379 2  </span><br><span class="line">sentinel auth-pass mymaster 123456</span><br></pre></td></tr></table></figure><p>2）启动所有主机的哨兵，查看日志可以看到哨兵之间互相都可发现，并且监控起了master</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过哨兵模式的配置文件来启动哨兵</span></span><br><span class="line">$ redis-sentinel /usr/local/redis/etc/sentinel.conf</span><br></pre></td></tr></table></figure><p>注意启动的顺序。首先是主机的 Redis 服务进程，然后启动从机的服务进程，最后启动3个哨兵的服务进程</p><p>3）查看日志信息确认哨兵是否正常工作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">tail</span> -f sentinel.log </span><br><span class="line">3409:X 25 Apr 2022 15:23:46.930 <span class="comment"># Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=3409, just started</span></span><br><span class="line">3409:X 25 Apr 2022 15:23:46.930 <span class="comment"># Configuration loaded</span></span><br><span class="line">3409:X 25 Apr 2022 15:23:46.931 * monotonic clock: POSIX clock_gettime</span><br><span class="line">3409:X 25 Apr 2022 15:23:46.932 * Running mode=sentinel, port=26379.</span><br><span class="line">3409:X 25 Apr 2022 15:23:46.932 <span class="comment"># Sentinel ID is 788515206623e806df3b5b6786a0527c6dfcc121</span></span><br><span class="line">3409:X 25 Apr 2022 15:23:46.932 <span class="comment"># +monitor master mymaster 188.188.4.210 6379 quorum 2</span></span><br><span class="line">3409:X 25 Apr 2022 15:24:16.964 <span class="comment"># +sdown sentinel 704d2de7c32d1f3b5f7a18ae0a68c55d86ec02d6 188.188.4.211 26379 @ mymaster 188.188.4.210 6379</span></span><br><span class="line">3409:X 25 Apr 2022 15:24:16.964 <span class="comment"># +sdown sentinel dbbe42b84b9b3cfdcc163a0413d1070f438b81eb 188.188.4.212 26379 @ mymaster 188.188.4.210 6379</span></span><br><span class="line">3409:X 25 Apr 2022 15:24:32.585 <span class="comment"># -sdown sentinel 704d2de7c32d1f3b5f7a18ae0a68c55d86ec02d6 188.188.4.211 26379 @ mymaster 188.188.4.210 6379</span></span><br><span class="line">3409:X 25 Apr 2022 15:24:52.380 <span class="comment"># -sdown sentinel dbbe42b84b9b3cfdcc163a0413d1070f438b81eb 188.188.4.212 26379 @ mymaster 188.188.4.210 6379</span></span><br></pre></td></tr></table></figure><p>通过上述信息可以看到哨兵模式监控的主机(4.210)，和另两个哨兵模式监控的两个从机(4.211、4.212)</p><p>4）测试哨兵模式，让 Master 模拟宕机</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Master操作</span></span><br><span class="line">$ redis-cli </span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; shutdown</span><br><span class="line">not connected&gt; </span><br></pre></td></tr></table></figure><p>可以查看日志，发现哨兵已开始进行投票，<code>+switch-master</code> 即就是主从切换的过程，而 <code>4.211</code> 成为 Master</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220425153225939.png" alt="image-20220425153225939"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Slave 188.188.4.211查看info replication,已成为Master</span></span><br><span class="line">$ redis-cli </span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"><span class="comment"># Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:1</span><br><span class="line">slave0:ip=188.188.4.212,port=6379,state=online,offset=199663,lag=1</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:4d8626cb58b9764b63c9235b4a1881a20f12b5e0</span><br><span class="line">master_replid2:7c661bd49f2ff3a277d158bee04e230dfb5794c0</span><br><span class="line">master_repl_offset:199663</span><br><span class="line">second_repl_offset:155919</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:199663</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><p>5）配置开机自启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt; /usr/lib/systemd/system/sentinel.service &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=Redis persistent key-value database</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">After=network-online.target</span></span><br><span class="line"><span class="string">Wants=network-online.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/redis/bin/redis-sentinel /usr/local/redis/etc/sentinel.conf </span></span><br><span class="line"><span class="string">ExecStop=/usr/local/redis/bin/redis-cli -h 127.0.0.1 -p 26379 shutdown</span></span><br><span class="line"><span class="string">#需要先创建用户</span></span><br><span class="line"><span class="string">#User=redis</span></span><br><span class="line"><span class="string">#Group=redis</span></span><br><span class="line"><span class="string">#RuntimeDirectory=redis</span></span><br><span class="line"><span class="string">#RuntimeDirectoryMode=0755</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now sentinel.service</span><br></pre></td></tr></table></figure><h3 id="示例参考"><a href="#示例参考" class="headerlink" title="示例参考"></a>示例参考</h3><p>通过 Jedis 进行使用的，同样也可以使用 Spring 进行配置 RedisTemplate 使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Redis哨兵模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> liu</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSentinels</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;resource&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSentinel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">10</span>);</span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">5</span>);</span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 哨兵信息</span></span><br><span class="line">        Set&lt;String&gt; sentinels = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;192.168.11.128:26379&quot;</span>,<span class="string">&quot;192.168.11.129:26379&quot;</span>,<span class="string">&quot;192.168.11.130:26379&quot;</span>));</span><br><span class="line">        <span class="comment">// 创建连接池</span></span><br><span class="line">        <span class="type">JedisSentinelPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisSentinelPool</span>(<span class="string">&quot;mymaster&quot;</span>, sentinels,jedisPoolConfig,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取客户端</span></span><br><span class="line">        <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> pool.getResource();</span><br><span class="line">        <span class="comment">// 执行两个命令</span></span><br><span class="line">        jedis.set(<span class="string">&quot;mykey&quot;</span>, <span class="string">&quot;myvalue&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;mykey&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;bean id = <span class="string">&quot;poolConfig&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 最大空闲数 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;!-- 最大连接数 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxTotal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">    &lt;!-- 最大等待时间 --&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWaitMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;poolConfig&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;poolConfig&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sentinelConfig&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sentinelConfig&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="variable constant_">JDK</span>序列化器 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdkSerializationRedisSerializer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="title class_">String</span>序列化器 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stringRedisSerializer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;redisTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;connectionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;keySerializer&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;stringRedisSerializer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultSerializer&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;stringRedisSerializer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;valueSerializer&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jdkSerializationRedisSerializer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- 哨兵配置 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sentinelConfig&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.connection.RedisSentinelConfiguration&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 服务名称 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;master&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mymaster&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 哨兵服务IP和端口 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sentinels&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.11.128&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26379&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.11.129&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26379&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.data.redis.connection.RedisNode&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.11.130&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26379&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>其他配置参考顶</strong></p><table><thead><tr><th>配置项</th><th>参数类型</th><th>作用</th></tr></thead><tbody><tr><td>port</td><td>整数</td><td>启动哨兵进程端口</td></tr><tr><td>dir</td><td>文件夹目录</td><td>哨兵进程服务临时文件夹，默认为&#x2F;tmp，要保证有可写入的权限</td></tr><tr><td>sentinel down-after-milliseconds</td><td>&lt;服务名称&gt;&lt;毫秒数（整数）&gt;</td><td>指定哨兵在监控Redis服务时，当Redis服务在一个默认毫秒数内都无法回答时，单个哨兵认为的主观下线时间，默认为30000（30秒）</td></tr><tr><td>sentinel parallel-syncs</td><td>&lt;服务名称&gt;&lt;服务器数（整数）&gt;</td><td>指定可以有多少个Redis服务同步新的主机，一般而言，这个数字越小同步时间越长，而越大，则对网络资源要求越高</td></tr><tr><td>sentinel failover-timeout</td><td>&lt;服务名称&gt;&lt;毫秒数（整数）&gt;</td><td>指定故障切换允许的毫秒数，超过这个时间，就认为故障切换失败，默认为3分钟</td></tr><tr><td>sentinel notification-script</td><td>&lt;服务名称&gt;&lt;脚本路径&gt;</td><td>指定sentinel检测到该监控的redis实例指向的实例异常时，调用的报警脚本。该配置项可选，比较常用</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/24/haproxy/haproxy/"/>
      <url>/2022/04/24/haproxy/haproxy/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># Global settings</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">global                                             # 全局配置</span><br><span class="line">    log         127.0.0.1 local2                   # 开启日志，日志等级为local2</span><br><span class="line">    chroot      /var/lib/haproxy                   # 程序主目录</span><br><span class="line">    pidfile     /var/run/haproxy.pid               # pid文件生成位置</span><br><span class="line">    maxconn     4000                               # 并发最大连接数</span><br><span class="line">    user        haproxy                            # 用户</span><br><span class="line">    group       haproxy                            # 用户组</span><br><span class="line">    daemon                                         # 以守护进程的方式运行</span><br><span class="line"></span><br><span class="line">    # turn on stats unix socket                    # 启用统计数据Unix套接字</span><br><span class="line">    stats socket /var/lib/haproxy/stats</span><br><span class="line"></span><br><span class="line">defaults                                           # 默认配置</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global                 # 日志与全局配置相同</span><br><span class="line">    option                  httplog                # 日志采用http日志格式</span><br><span class="line">    option                  dontlognull            # 日志中不记录空连接</span><br><span class="line">    option http-server-close                       # 每次请求完毕后主动关闭http通道</span><br><span class="line">    option forwardfor       except 127.0.0.0/8     </span><br><span class="line">    option                  redispatch             # serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span><br><span class="line">    retries                 3                      # 3次连接失败就认为服务不可用，也可以通过后面设置</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"></span><br><span class="line">frontend  main *:5000</span><br><span class="line">    acl url_static       path_beg       -i /static /images /javascript /stylesheets</span><br><span class="line">    acl url_static       path_end       -i .jpg .gif .png .css .js</span><br><span class="line"></span><br><span class="line">    use_backend static          if url_static</span><br><span class="line">    default_backend             app</span><br><span class="line"></span><br><span class="line">backend static</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server      static 127.0.0.1:4331 check</span><br><span class="line"></span><br><span class="line">backend app</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server  app1 127.0.0.1:5001 check</span><br><span class="line">    server  app2 127.0.0.1:5002 check</span><br><span class="line">    server  app3 127.0.0.1:5003 check</span><br><span class="line">    server  app4 127.0.0.1:5004 check</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置_二进制方式升级Containerd版本</title>
      <link href="/2022/04/24/docker/docker%E9%85%8D%E7%BD%AE_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E5%BC%8F%E5%8D%87%E7%BA%A7Containerd%E7%89%88%E6%9C%AC/"/>
      <url>/2022/04/24/docker/docker%E9%85%8D%E7%BD%AE_%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%B9%E5%BC%8F%E5%8D%87%E7%BA%A7Containerd%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>当前模拟环境 Harbor 的 Docker Version: 20.10.12，Containerd 1.4.13，目的将现版本升级至目前最新版本</p></blockquote><p>1）先确认现 Docker &amp; Containerd 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker info</span><br><span class="line">Client:</span><br><span class="line"> Context:    default</span><br><span class="line"> Debug Mode: <span class="literal">false</span></span><br><span class="line"> Plugins:</span><br><span class="line">  app: Docker App (Docker Inc., v0.9.1-beta3)</span><br><span class="line">  buildx: Docker Buildx (Docker Inc., v0.7.1-docker)</span><br><span class="line">  scan: Docker Scan (Docker Inc., v0.12.0)</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 13</span><br><span class="line">  Running: 13</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 18</span><br><span class="line"> Server Version: 20.10.12</span><br><span class="line">...</span><br><span class="line">$ containerd -v</span><br><span class="line">containerd containerd.io 1.4.13 9cc61520f4cd876b86e77edfeb88fbcd536d1f9d</span><br></pre></td></tr></table></figure><p>2）到 Github 下载二进制 Containerd</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/containerd/containerd/releases/download/v1.6.2/containerd-1.6.2-linux-amd64.tar.gz</span><br><span class="line">$ tar -zxvf containerd-1.6.2-linux-amd64.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> bin &amp;&amp; <span class="built_in">ls</span> </span><br><span class="line">containerd  containerd-shim  containerd-shim-runc-v1  containerd-shim-runc-v2  containerd-stress  ctr</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220424103104237.png" alt="image-20220424103104237"></p><p>2）解压并替换 Containerd 二进制文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl stop docker</span><br><span class="line"><span class="comment"># 替换其中的5个文件</span></span><br><span class="line">$ <span class="built_in">cp</span> -r containerd /usr/bin/containerd</span><br><span class="line">$ <span class="built_in">cp</span> -r containerd-shim /usr/bin/containerd-shim</span><br><span class="line">$ <span class="built_in">cp</span> -r containerd-shim-runc-v1 /usr/bin/containerd-shim-runc-v1</span><br><span class="line">$ <span class="built_in">cp</span> -r containerd-shim-runc-v2 /usr/bin/containerd-shim-runc-v2</span><br><span class="line">$ <span class="built_in">cp</span> -r ctr /usr/bin/ctr</span><br></pre></td></tr></table></figure><p>3）重新启动并查看状态及配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl start docker</span><br><span class="line">$ systemctl start docker.socket</span><br><span class="line">$ systemctl status docker</span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sun 2022-04-24 11:10:54 CST; 20s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line">  Process: 2073 ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 1947 (dockerd)</span><br><span class="line">    Tasks: 9</span><br><span class="line">   Memory: 40.5M</span><br><span class="line">   CGroup: /system.slice/docker.service</span><br><span class="line">           └─1947 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line"></span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top dockerd[1947]: time=<span class="string">&quot;2022-04-24T11:10:54.340921086+08:00&quot;</span> level=info msg=<span class="string">&quot;[graphdriver] using prior storage driver: overlay2&quot;</span></span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top dockerd[1947]: time=<span class="string">&quot;2022-04-24T11:10:54.355095533+08:00&quot;</span> level=warning msg=<span class="string">&quot;Your kernel does not support cgroup blkio weight&quot;</span></span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top dockerd[1947]: time=<span class="string">&quot;2022-04-24T11:10:54.355124772+08:00&quot;</span> level=warning msg=<span class="string">&quot;Your kernel does not support cgroup blkio weight_device&quot;</span></span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top dockerd[1947]: time=<span class="string">&quot;2022-04-24T11:10:54.355299671+08:00&quot;</span> level=info msg=<span class="string">&quot;Loading containers: start.&quot;</span></span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top dockerd[1947]: time=<span class="string">&quot;2022-04-24T11:10:54.461840706+08:00&quot;</span> level=info msg=<span class="string">&quot;Default bridge (docker0) is assigned with an IP address 172.17.0.0/16. Daemon option --bip can...red IP address&quot;</span></span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top dockerd[1947]: time=<span class="string">&quot;2022-04-24T11:10:54.501882592+08:00&quot;</span> level=info msg=<span class="string">&quot;Loading containers: done.&quot;</span></span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top dockerd[1947]: time=<span class="string">&quot;2022-04-24T11:10:54.518322840+08:00&quot;</span> level=info msg=<span class="string">&quot;Docker daemon&quot;</span> commit=459d0df graphdriver(s)=overlay2 version=20.10.12</span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top dockerd[1947]: time=<span class="string">&quot;2022-04-24T11:10:54.518380340+08:00&quot;</span> level=info msg=<span class="string">&quot;Daemon has completed initialization&quot;</span></span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top systemd[1]: Started Docker Application Container Engine.</span><br><span class="line">Apr 24 11:10:54 harbor.yuikuen.top dockerd[1947]: time=<span class="string">&quot;2022-04-24T11:10:54.550268757+08:00&quot;</span> level=info msg=<span class="string">&quot;API listen on /var/run/docker.sock&quot;</span></span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line"></span><br><span class="line">$ containerd -v</span><br><span class="line">containerd github.com/containerd/containerd v1.6.2 de8046a5501db9e0e478e1c10cbcfb21af4c6b2d</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查原容器服务是否正常</span></span><br><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE                                  COMMAND                  CREATED          STATUS                             PORTS                                                                 NAMES</span><br><span class="line">197e52e1f1ff   goharbor/notary-server-photon:v2.4.1   <span class="string">&quot;/bin/sh -c &#x27;migrate…&quot;</span>   11 seconds ago   Up 6 seconds                                                                                             notary-server</span><br><span class="line">0af0405dca12   goharbor/nginx-photon:v2.4.1           <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   11 seconds ago   Up 5 seconds (health: starting)    0.0.0.0:4443-&gt;4443/tcp, 0.0.0.0:80-&gt;8080/tcp, 0.0.0.0:443-&gt;8443/tcp   nginx</span><br><span class="line">8089eafc211b   goharbor/harbor-jobservice:v2.4.1      <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   11 seconds ago   Up 6 seconds (health: starting)                                                                          harbor-jobservice</span><br><span class="line">8ea483d13ac9   goharbor/notary-signer-photon:v2.4.1   <span class="string">&quot;/bin/sh -c &#x27;migrate…&quot;</span>   11 seconds ago   Up 7 seconds                                                                                             notary-signer</span><br><span class="line">db6adc68e91a   goharbor/harbor-core:v2.4.1            <span class="string">&quot;/harbor/entrypoint.…&quot;</span>   11 seconds ago   Up 6 seconds (health: starting)                                                                          harbor-core</span><br><span class="line">416de0f54c67   goharbor/trivy-adapter-photon:v2.4.1   <span class="string">&quot;/home/scanner/entry…&quot;</span>   11 seconds ago   Up 7 seconds (health: starting)                                                                          trivy-adapter</span><br><span class="line">99ecaafbcac1   goharbor/chartmuseum-photon:v2.4.1     <span class="string">&quot;./docker-entrypoint…&quot;</span>   11 seconds ago   Up 9 seconds (health: starting)                                                                          chartmuseum</span><br><span class="line">f1e60f7bfb3e   goharbor/harbor-db:v2.4.1              <span class="string">&quot;/docker-entrypoint.…&quot;</span>   11 seconds ago   Up 8 seconds (health: starting)                                                                          harbor-db</span><br><span class="line">367495a5e36f   goharbor/harbor-registryctl:v2.4.1     <span class="string">&quot;/home/harbor/start.…&quot;</span>   11 seconds ago   Up 9 seconds (health: starting)                                                                          registryctl</span><br><span class="line">fefda5b38573   goharbor/redis-photon:v2.4.1           <span class="string">&quot;redis-server /etc/r…&quot;</span>   11 seconds ago   Up 8 seconds (health: starting)                                                                          redis</span><br><span class="line">2f85b211a411   goharbor/harbor-portal:v2.4.1          <span class="string">&quot;nginx -g &#x27;daemon of…&quot;</span>   11 seconds ago   Up 8 seconds (health: starting)                                                                          harbor-portal</span><br><span class="line">273aea174f4d   goharbor/registry-photon:v2.4.1        <span class="string">&quot;/home/harbor/entryp…&quot;</span>   11 seconds ago   Up 8 seconds (health: starting)                                                                          registry</span><br><span class="line">38ab1d9c353d   goharbor/harbor-log:v2.4.1             <span class="string">&quot;/bin/sh -c /usr/loc…&quot;</span>   11 seconds ago   Up 10 seconds (health: starting)   127.0.0.1:1514-&gt;10514/tcp                                             harbor-log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> containerd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_RabbitMQ集群+HAProxy+Keepalived(Yum)</title>
      <link href="/2022/04/23/rabbitmq/centos7%E9%83%A8%E7%BD%B2_RabbitMQ%E9%9B%86%E7%BE%A4+HAProxy+Keepalived(Yum)/"/>
      <url>/2022/04/23/rabbitmq/centos7%E9%83%A8%E7%BD%B2_RabbitMQ%E9%9B%86%E7%BE%A4+HAProxy+Keepalived(Yum)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一般单节点负载过高会导致服务响应过慢，使用集群方式则能够避免这种情况，通过 HAProxy 实现负载均衡，再使用 Keepalived 服务实现虚拟 VIP-IP 异常漂移，任一节点服务宕机均不会影响服务的正常运行</p></blockquote><h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><p>RabbitMQ 集群可使得 RabbitMQ 节点宕机时，消费者和生产者都可以正常继续运行，并且可以承载更多的业务量，增加系统吞吐量；<br>客户端通过虚拟 IP 进行访问 HAProxy，再通过 Keepalived 将其发放到 Master 节点上的 HAProxy，若 Master 节点上的 HAProxy 宕机，则会发放到 Slave 节点上，之后访问到 RabbitMQ 集群</p><ul><li>集群规划图如下所示：</li></ul><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220419181421.png" style="zoom: 67%;" /><ul><li>配置信息</li></ul><table><thead><tr><th>IP</th><th>主机名</th><th>服务</th></tr></thead><tbody><tr><td>188.188.4.210</td><td>ssd-dev01</td><td>RabbitMQ</td></tr><tr><td>188.188.4.211</td><td>ssd-dev02</td><td>RabbitMQ+HAProxy+Keepalived</td></tr><tr><td>188.188.4.212</td><td>ssd-dev03</td><td>RabbitMQ+HAProxy+Keepalived</td></tr></tbody></table><ul><li>配置 IP 地址和主机之间的映射</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有节点提前配置hostname</span></span><br><span class="line">$ hostnamectl set-hostname ssd-dev01 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname ssd-dev02 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname ssd-dev03 &amp;&amp; bash</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">188.188.4.210 ssd-dev01</span></span><br><span class="line"><span class="string">188.188.4.211 ssd-dev02</span></span><br><span class="line"><span class="string">188.188.4.212 ssd-dev03</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ul><li>版本信息</li></ul><blockquote><p>安装方法很多，可自行选择，如使用 <code>yum -y install</code> 命令进行安装，本文选择源码安装的原因主要是方便管理，建议实际生产中尽量使用源码安装，方便后期运维管理</p></blockquote><ol><li>Linux 版本：CentOS Linux release 7.9.2009 (Core)</li><li>erlang 版本：Erlang-23.3.4.11</li><li>RabbitMQ 版本：RabbitMQ_Server-3.8.29</li><li>HAProxy 版本：Haproxy-2.5.5</li><li>Keepalived 版本：Keepalived-2.2.7</li></ol><h3 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h3><blockquote><p>安装前建议参考 <a href="https://github.com/rabbitmq/erlang-rpm">Erlang Github 官方说明</a>，Readme 上有说明版本的兼容性问题</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ yum -y install socat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在此选用了rpm方式安装，因为二进制源码安装会报错，需要修改配置文件的环境变量</span></span><br><span class="line">$ wget https://github.com/rabbitmq/erlang-rpm/releases/download/v23.3.4.11/erlang-23.3.4.11-1.el7.x86_64.rpm</span><br><span class="line">$ rpm -i erlang-23.3.4.11-1.el7.x86_64.rpm</span><br><span class="line">warning: erlang-23.3.4.11-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Signature, key ID cc4bbe5b: NOKEY</span><br><span class="line"></span><br><span class="line">$ erl -version</span><br><span class="line">Erlang (SMP,ASYNC_THREADS,HIPE) (BEAM) emulator version 11.2.2.10</span><br></pre></td></tr></table></figure><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><p>1）下载程序并配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.29/rabbitmq-server-generic-unix-3.8.29.tar.xz</span><br><span class="line">$ tar -xvf rabbitmq-server-generic-unix-3.8.29.tar -C /opt/</span><br><span class="line">$ <span class="built_in">cd</span> /opt &amp;&amp; <span class="built_in">mv</span> rabbitmq_server-3.8.29 rabbitmq</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export PATH=/opt/rabbitmq/sbin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>2）创建用户并修改权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd rabbitmq</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /opt/rabbitmq/var/lib/rabbitmq /opt/rabbitmq/var/log/rabbitmq</span><br><span class="line">$ <span class="built_in">chown</span> rabbitmq.rabbitmq -R /opt/rabbitmq</span><br></pre></td></tr></table></figure><p>3）创建配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加浏览器管理插件，默认安装是没有管理页面</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /opt/rabbitmq/etc/rabbitmq/enabled_plugins &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[rabbitmq_management].</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意$hostname自行修改节点实际hostname</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /opt/rabbitmq/etc/rabbitmq/rabbitmq-env.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">RABBITMQ_NODENAME=rabbit@$hostname</span></span><br><span class="line"><span class="string">RABBITMQ_NODE_IP_ADDRESS=0.0.0.0</span></span><br><span class="line"><span class="string">RABBITMQ_NODE_PORT=5672</span></span><br><span class="line"><span class="string">RABBITMQ_LOG_BASE=/opt/rabbitmq/var/log/rabbitmq</span></span><br><span class="line"><span class="string">RABBITMQ_MNESIA_BASE=/opt/rabbitmq/var/lib/rabbitmq/mnesia</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /opt/rabbitmq/etc/rabbitmq/rabbitmq.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">listeners.tcp.default = 5672</span></span><br><span class="line"><span class="string">num_acceptors.tcp = 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">management.tcp.port = 15672</span></span><br><span class="line"><span class="string">management.tcp.ip   = 0.0.0.0</span></span><br><span class="line"><span class="string">management.http_log_dir = /opt/rabbitmq/var/log/rabbitmq/management_access</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vm_memory_high_watermark.absolute = 512MiB</span></span><br><span class="line"><span class="string">vm_memory_high_watermark_paging_ratio = 0.3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">loopback_users.guest = true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>4）配置开机自启动服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/systemd/system/rabbitmq-server.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=RabbitMQ broker</span></span><br><span class="line"><span class="string">After=syslog.target network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=notify</span></span><br><span class="line"><span class="string">User=rabbitmq</span></span><br><span class="line"><span class="string">Group=rabbitmq</span></span><br><span class="line"><span class="string">UMask=0027</span></span><br><span class="line"><span class="string">NotifyAccess=all</span></span><br><span class="line"><span class="string">TimeoutStartSec=3600</span></span><br><span class="line"><span class="string">LimitNOFILE=32768</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string">RestartSec=10</span></span><br><span class="line"><span class="string">WorkingDirectory=/opt/rabbitmq/var/lib/rabbitmq</span></span><br><span class="line"><span class="string">ExecStart=/opt/rabbitmq/sbin/rabbitmq-server</span></span><br><span class="line"><span class="string">ExecStop=/opt/rabbitmq/sbin/rabbitmqctl shutdown</span></span><br><span class="line"><span class="string">SuccessExitStatus=69</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>5）设置 Cookie 并启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;rabbitmq-cluster-cookie&quot;</span> &gt;&gt; ~/.erlang.cookie</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;rabbitmq-cluster-cookie&quot;</span> &gt;&gt; /home/rabbitmq/.erlang.cookie</span><br><span class="line">$ <span class="built_in">chown</span> rabbitmq.rabbitmq /home/rabbitmq/.erlang.cookie</span><br><span class="line">$ <span class="built_in">chmod</span> 600 ~/.erlang.cookie /home/rabbitmq/.erlang.cookie</span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now rabbitmq-server</span><br><span class="line">$ systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><p>6）添加 RabbitMQ 账密，并分配权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查用户列表</span></span><br><span class="line">$ rabbitmqctl list_users</span><br><span class="line">Listing <span class="built_in">users</span> ...</span><br><span class="line">usertags</span><br><span class="line">guest[administrator]</span><br><span class="line">rabbitmq_user[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># RabbitMQ 有默认用户密码，guest/guest该用户密码只能在本地登陆，若在浏览器中登陆，须创建新用户密码</span></span><br><span class="line">$ rabbitmqctl add_user rabbitmq_user rabbitmq_pwd</span><br><span class="line">Adding user <span class="string">&quot;rabbitmq_user&quot;</span> ...</span><br><span class="line">Done. Don<span class="string">&#x27;t forget to grant the user permissions to some virtual hosts! See &#x27;</span>rabbitmqctl <span class="built_in">help</span> set_permissions<span class="string">&#x27; to learn more.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 为rabbitmq_user用户添加管理员角色</span></span><br><span class="line"><span class="string">$ rabbitmqctl set_user_tags rabbitmq_user administrator </span></span><br><span class="line"><span class="string">Setting tags for user &quot;rabbitmq_user&quot; to [administrator] ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置rabbitmq_user用户权限，允许访问vhost及read/write</span></span><br><span class="line"><span class="string">$ rabbitmqctl set_permissions -p / rabbitmq_user &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span></span><br><span class="line"><span class="string">Setting permissions for user &quot;rabbitmq_user&quot; in vhost &quot;/&quot; ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 检查权限列表</span></span><br><span class="line"><span class="string">$ rabbitmqctl list_permissions -p /</span></span><br><span class="line"><span class="string">Listing permissions for vhost &quot;/&quot; ...</span></span><br><span class="line"><span class="string">userconfigurewriteread</span></span><br><span class="line"><span class="string">rabbitmq_user.*.*.*</span></span><br><span class="line"><span class="string">guest.*.*.*</span></span><br></pre></td></tr></table></figure><h3 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h3><p>1）RabbitMQ 集群添加节点，分别在 ssd-dev02、ssd-dev03 上执行如下命令，将其加入集群中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssd-dev02操作</span></span><br><span class="line">$ rabbitmqctl stop_app</span><br><span class="line">$ rabbitmqctl join_cluster --ram rabbit@ssd-dev01</span><br><span class="line">$ rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssd-dev03操作</span></span><br><span class="line">$ rabbitmqctl stop_app</span><br><span class="line">$ rabbitmqctl join_cluster --ram rabbit@ssd-dev01</span><br><span class="line">$ rabbitmqctl start_app</span><br></pre></td></tr></table></figure><p>2）验证集群是否配置成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rabbitmqctl cluster_status</span><br><span class="line">Cluster status of node rabbit@ssd-dev01 ...</span><br><span class="line">Basics</span><br><span class="line"></span><br><span class="line">Cluster name: rabbit@ssd-dev01</span><br><span class="line"></span><br><span class="line">Disk Nodes</span><br><span class="line"></span><br><span class="line">rabbit@ssd-dev01</span><br><span class="line"></span><br><span class="line">RAM Nodes</span><br><span class="line"></span><br><span class="line">rabbit@ssd-dev02</span><br><span class="line">rabbit@ssd-dev03</span><br><span class="line"></span><br><span class="line">Running Nodes</span><br><span class="line"></span><br><span class="line">rabbit@ssd-dev01</span><br><span class="line">rabbit@ssd-dev02</span><br><span class="line">rabbit@ssd-dev03</span><br><span class="line"></span><br><span class="line">Versions</span><br><span class="line"></span><br><span class="line">rabbit@ssd-dev01: RabbitMQ 3.8.2 on Erlang 23.3.4.11</span><br><span class="line">rabbit@ssd-dev02: RabbitMQ 3.8.2 on Erlang 23.3.4.11</span><br><span class="line">rabbit@ssd-dev03: RabbitMQ 3.8.2 on Erlang 23.3.4.11</span><br><span class="line">...(略)</span><br></pre></td></tr></table></figure><p>或使用任一节点在浏览器上打开 IP:15672 管理页面，如下图显示绿色表示成功</p><p>3）配置镜像队列，配置可<a href="https://www.rabbitmq.com/ha.html">参考文档</a>，<code>policy</code> 策略的意思就是要设置 Exchanges 或者 queue 的数据需要如何复制、同步，可通过命令方式和管理页面方式实现。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># policy配置格式，命令行配置镜像队列，在任一节点上执行如下命令，示例如下</span></span><br><span class="line">$ rabbitmqctl set_policy [-p ] [--priority ] [--apply-to ] </span><br><span class="line">$ rabbitmqctl set_policy ha-all <span class="string">&quot;^&quot;</span> <span class="string">&#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步virtual host为 &quot;/&quot;下名称前缀为 &quot;mirroring&quot;的交换机和队列，并且自动保存到两个节点上</span></span><br><span class="line">$ rabbitmqctl set_policy -p / --priority 1 --apply-to all myPolicy <span class="string">&quot;^mirroring&quot;</span> <span class="string">&#x27;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:3,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="安装-Haproxy"><a href="#安装-Haproxy" class="headerlink" title="安装 Haproxy"></a>安装 Haproxy</h3><p>1）解压编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install glibc glibc-devel pcre pcre-devel openssl openssl-devel systemd-devel zlib-devel</span><br><span class="line">$ wget https://www.haproxy.org/download/2.5/src/haproxy-2.5.5.tar.gz</span><br><span class="line">$ tar -zxvf haproxy-2.5.5.tar.gz &amp;&amp; <span class="built_in">cd</span> haproxy-2.5.5</span><br><span class="line">$ make ARCH=x86_64 \</span><br><span class="line">  TARGET=linux-glibc \</span><br><span class="line">  USE_PCRE=1 \</span><br><span class="line">  USE_OPENSSL=1 \</span><br><span class="line">  USE_ZLIB=1 \</span><br><span class="line">  USE_SYSTEMD=1 \</span><br><span class="line">  USE_CPU_AFFINITY=1 \</span><br><span class="line">  PREFIX=/opt/haproxy</span><br><span class="line">$ make install PREFIX=/opt/haproxy  </span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>ARCH&#x3D;x86_64 表示使用 ARCH 指定框架，可选项</li><li>TARGET&#x3D;linux-glibc 通用 linux 内核</li><li>USE_PCRE&#x3D;1 PCRE 支持正则表达式，用于用户请求的 uri</li><li>USE_OPENSSL&#x3D;1 https，证书</li><li>USE_ZLIB&#x3D;1 开启压缩</li><li>USE_SYSTEMD&#x3D;1 使用 systemd 启动 haproxy 主进程</li><li>PREFIX&#x3D;&#x2F;opt&#x2F;haproxy 指定安装路径</li></ul><p>2）设置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export PATH=/opt/haproxy/sbin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line">$ haproxy -v</span><br><span class="line">HAProxy version 2.5.5-384c5c5 2022/03/14 - https://haproxy.org/</span><br><span class="line">Status: stable branch - will stop receiving fixes around Q1 2023.</span><br><span class="line">Known bugs: http://www.haproxy.org/bugs/bugs-2.5.5.html</span><br><span class="line">Running on: Linux 5.4.188-1.el7.elrepo.x86_64 <span class="comment">#1 SMP Mon Mar 28 09:10:07 EDT 2022 x86_64</span></span><br></pre></td></tr></table></figure><p>3）创建配置文件，节点2 &amp; 节点3 配置一样</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /etc/haproxy</span><br><span class="line">$ vim /etc/haproxy/haproxy.cfg</span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Global settings</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line">global</span><br><span class="line"><span class="built_in">log</span> 127.0.0.1 local0 info</span><br><span class="line">pidfile /opt/haproxy/haproxy.pid          <span class="comment"># haproxy的pid存放路径,启动进程的用户必须有权限访问此文件</span></span><br><span class="line">maxconn 4000                              <span class="comment"># 最大连接数，默认4000</span></span><br><span class="line">daemon                                    <span class="comment"># 创建1个进程进入deamon模式运行。此参数要求将运行模式设置为daemon</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># defaults settings</span></span><br><span class="line"><span class="comment">#---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 注意：因为要使用tcp的负载，屏蔽掉与http相关的默认配置</span></span><br><span class="line">defaults</span><br><span class="line">mode http                                 <span class="comment"># 默认的模式mode &#123; tcp|http|health &#125;，tcp是4层，http是7层，health只会返回OK</span></span><br><span class="line"><span class="built_in">log</span> global</span><br><span class="line">option httplog                            <span class="comment"># 采用http日志格式</span></span><br><span class="line">option dontlognull                        <span class="comment"># 启用该项，日志中将不会记录空连接。所谓空连接就是在上游的负载均衡器</span></span><br><span class="line">option http-server-close                  <span class="comment"># 每次请求完毕后主动关闭http通道</span></span><br><span class="line">option forwardfor except 127.0.0.0/8      <span class="comment"># 如果后端服务器需要获得客户端真实ip需要配置的参数，可以从Http Header中获得客户端ip</span></span><br><span class="line">option redispatch                         <span class="comment"># serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span></span><br><span class="line">retries 3                                 <span class="comment"># 3次连接失败就认为服务不可用，也可以通过后面设置</span></span><br><span class="line"><span class="built_in">timeout</span> http-request 10s </span><br><span class="line"><span class="built_in">timeout</span> queue 1m</span><br><span class="line"><span class="built_in">timeout</span> connect 10s                       <span class="comment"># 连接超时时间</span></span><br><span class="line"><span class="built_in">timeout</span> client 1m                         <span class="comment"># 客户端连接超时时间</span></span><br><span class="line"><span class="built_in">timeout</span> server 1m                         <span class="comment"># 服务器端连接超时时间</span></span><br><span class="line"><span class="built_in">timeout</span> http-keep-alive 10s</span><br><span class="line"><span class="built_in">timeout</span> check 10s</span><br><span class="line">maxconn 3000                              <span class="comment"># 最大连接数</span></span><br><span class="line"><span class="comment">#--------------------------------------------------------</span></span><br><span class="line"><span class="comment">### haproxy 监控页面地址是：http://IP:1080/hastatus</span></span><br><span class="line">listen admin_stats</span><br><span class="line">    <span class="built_in">bind</span> *:1080                           <span class="comment"># 监听的地址和端口，默认端口1080</span></span><br><span class="line">    mode http                             <span class="comment"># 模式</span></span><br><span class="line">    option tcplog</span><br><span class="line">    stats refresh 5s                      <span class="comment"># 页面自动刷新间隔,每隔5s刷新</span></span><br><span class="line">    stats uri /hastatus                   <span class="comment"># 访问路径，在域名后面添加/stats可以查看haproxy监控状态,默认为/haproxy?stats</span></span><br><span class="line">    stats realm welcome login\ Haproxy    <span class="comment"># 提示信息，空格之前加\</span></span><br><span class="line">    stats auth admin:123456               <span class="comment"># 登陆用户名和密码</span></span><br><span class="line">    stats hide-version                    <span class="comment"># 隐藏软件版本号</span></span><br><span class="line">    stats admin <span class="keyword">if</span> TRUE                   <span class="comment"># 当通过认证才可管理</span></span><br><span class="line"><span class="comment">#-------------------------------------------------</span></span><br><span class="line">frontend rabbitmq</span><br><span class="line">    mode tcp</span><br><span class="line">    <span class="built_in">bind</span> *:5679</span><br><span class="line">    <span class="built_in">timeout</span> client 168h</span><br><span class="line">    default_backend rabbitmq_nodes</span><br><span class="line">    <span class="built_in">log</span> global</span><br><span class="line">    option tcplog</span><br><span class="line">backend rabbitmq_nodes</span><br><span class="line">    mode tcp</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ssd-dev01 188.188.4.210:5672 check inter 2000 rise 2 fall 3 weight 1  <span class="comment">#节点一</span></span><br><span class="line">    server ssd-dev02 188.188.4.211:5672 check inter 2000 rise 2 fall 3 weight 1  <span class="comment">#节点二</span></span><br><span class="line">    server ssd-dev03 188.188.4.212:5672 check inter 2000 rise 2 fall 3 weight 1  <span class="comment">#节点三</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#rabbitmq 集群配置</span></span><br><span class="line">listen rabbitmq_admin</span><br><span class="line">    <span class="built_in">bind</span>  0.0.0.0:15679</span><br><span class="line">    mode http</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ssd-dev01 188.188.4.210:15672 check inter 2000 rise 2 fall 3 weight 1  <span class="comment">#节点一</span></span><br><span class="line">    server ssd-dev02 188.188.4.211:15672 check inter 2000 rise 2 fall 3 weight 1  <span class="comment">#节点二</span></span><br><span class="line">    server ssd-dev03 188.188.4.212:15672 check inter 2000 rise 2 fall 3 weight 1  <span class="comment">#节点三</span></span><br></pre></td></tr></table></figure><p>开启日志记录：安装 Haproxy 之后，默认是没有开启日志记录的，需要根据 rsyslog 通过 udp 的方式获取 Haproxy 日志信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/rsyslog.conf</span><br><span class="line">    <span class="comment"># 打开以下两行注解，开启 514 USP监听</span></span><br><span class="line">    <span class="variable">$ModLoad</span> imudp</span><br><span class="line">    <span class="variable">$UDPServerRun</span> 514</span><br><span class="line">    <span class="comment"># 添加日志目录 (local0与haproxy.cfg中global log保持一致)</span></span><br><span class="line">    local2.*   /var/log/haproxy/haproxy.log</span><br><span class="line"></span><br><span class="line">$ vim /etc/sysconfig/rsyslog</span><br><span class="line">    <span class="comment"># 修改如下内容（若没有则添加）</span></span><br><span class="line">    SYSLOGD_OPTIONS=<span class="string">&quot;-r -m 0 -c 2&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 重启生效</span></span><br><span class="line">$ systemctl restart rsyslog &amp;&amp; systemctl status rsyslog</span><br></pre></td></tr></table></figure><p>3）启动并查看状态，配置开机自启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">Configuration file is valid</span><br><span class="line">$ lsof -i:1080</span><br><span class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">haproxy 3296 root    4u  IPv4  26318      0t0  TCP *:socks (LISTEN)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /usr/lib/systemd/system/haproxy.service &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=HAProxy Load Balancer</span></span><br><span class="line"><span class="string">After=syslog.target network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStartPre=/opt/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg -c</span></span><br><span class="line"><span class="string">ExecStart=/opt/haproxy/sbin/haproxy -Ws -f /etc/haproxy/haproxy.cfg -p /opt/haproxy/haproxy.pid</span></span><br><span class="line"><span class="string">ExecReload=/bin/kill -USR2 \$MAINPID</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now haproxy &amp;&amp; systemctl status haproxy</span><br></pre></td></tr></table></figure><p>4）使用浏览器访问 IP:1080&#x2F;hastatus，输入账密即可访问 Haproxy 监控界面</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220423152212703.png" alt="image-20220423152212703"></p><h3 id="安装-Keepalived"><a href="#安装-Keepalived" class="headerlink" title="安装 Keepalived"></a>安装 Keepalived</h3><p>1）安装依赖并下载程序解压</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y gcc openssl-devel popt-devel ipvsadm libnl3-devel net-snmp-devel libnl libnl-devel libnfnetlink-devel</span><br><span class="line">$ wget https://www.keepalived.org/software/keepalived-2.2.7.tar.gz</span><br><span class="line">$ tar -xf keepalived-2.2.7.tar.gz &amp;&amp; <span class="built_in">cd</span> keepalived-2.2.7</span><br></pre></td></tr></table></figure><p>2）编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --prefix=/opt/keepalived</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>3）创建配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /etc/keepalived</span><br><span class="line"><span class="comment"># keepalived默认读取的配置文件</span></span><br><span class="line">$ <span class="built_in">cp</span> /opt/keepalived/etc/keepalived/keepalived.conf.sample /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="comment"># 配置启动服务</span></span><br><span class="line">$ <span class="built_in">cp</span> /usr/local/src/keepalived-2.2.7/keepalived/etc/init.d/keepalived /etc/init.d</span><br><span class="line">$ <span class="built_in">cp</span> /opt/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span><br><span class="line">$ <span class="built_in">cp</span> /opt/keepalived/sbin/keepalived /usr/sbin/</span><br></pre></td></tr></table></figure><p>4）节点2 &amp; 节点3 修改配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssd-dev02</span></span><br><span class="line">$ vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   script_user root</span><br><span class="line">   enable_script_security</span><br><span class="line">   router_id node1</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line"><span class="comment">#   vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment">#keepalived角色，MASTER表示主节点 BACKUP从节点</span></span><br><span class="line">    state MASTER</span><br><span class="line"><span class="comment">#指定检测的网卡</span></span><br><span class="line">    interface ens192</span><br><span class="line"><span class="comment">#虚拟路由的id，主备节点设置相同</span></span><br><span class="line">    virtual_router_id 240</span><br><span class="line"><span class="comment">#优先级，主节点的优先级需要设置的比从节点高</span></span><br><span class="line">    priority 100</span><br><span class="line"><span class="comment">#设置主备之间的检查时间，单位s</span></span><br><span class="line">    advert_int 1</span><br><span class="line"><span class="comment">#定义验证类型和密码</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 另一个节点的ip</span></span><br><span class="line">unicast_peer &#123;</span><br><span class="line">188.188.4.212</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#虚拟ip</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.4.200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 188.188.4.200 1080 &#123;</span><br><span class="line">    virtual_server </span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 188.188.4.211 1080 &#123;</span><br><span class="line">        weight 1</span><br><span class="line"><span class="comment"># 监控脚本</span></span><br><span class="line">        notify_down /etc/keepalived/check.sh</span><br><span class="line">TCP_CHECK &#123;</span><br><span class="line">  connect_timeout 10</span><br><span class="line">  retry 3</span><br><span class="line">  connect_port 1080</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssd-dev03</span></span><br><span class="line">$ vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   script_user root</span><br><span class="line">   enable_script_security</span><br><span class="line">   router_id node2</span><br><span class="line">   vrrp_skip_check_adv_addr</span><br><span class="line"><span class="comment">#   vrrp_strict</span></span><br><span class="line">   vrrp_garp_interval 0</span><br><span class="line">   vrrp_gna_interval 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment">#keepalived角色，MASTER表示主节点 BACKUP从节点</span></span><br><span class="line">    state BACKUP</span><br><span class="line"><span class="comment">#指定检测的网卡</span></span><br><span class="line">    interface ens192</span><br><span class="line"><span class="comment">#虚拟路由的id，主备节点设置相同</span></span><br><span class="line">    virtual_router_id 240</span><br><span class="line"><span class="comment">#优先级，主节点的优先级需要设置的比从节点高</span></span><br><span class="line">    priority 90</span><br><span class="line"><span class="comment">#设置主备之间的检查时间，单位s</span></span><br><span class="line">    advert_int 1</span><br><span class="line"><span class="comment">#定义验证类型和密码</span></span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment"># 另一个节点的ip</span></span><br><span class="line">unicast_peer &#123;</span><br><span class="line">188.188.4.211</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#虚拟ip</span></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.4.200</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 188.188.4.200 1080 &#123;</span><br><span class="line">    virtual_server </span><br><span class="line">    delay_loop 6</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 188.188.4.212 1080 &#123;</span><br><span class="line">        weight 1</span><br><span class="line"><span class="comment"># 监控脚本</span></span><br><span class="line">        notify_down /etc/keepalived/check.sh</span><br><span class="line">TCP_CHECK &#123;</span><br><span class="line">  connect_timeout 10</span><br><span class="line">  retry 3</span><br><span class="line">  connect_port 1080</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）创建 check 脚本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 脚本内容 监听haproxy端口1080</span></span><br><span class="line">$ <span class="built_in">cat</span> /etc/keepalived/check.sh</span><br><span class="line"><span class="comment">#! /bin/bash</span></span><br><span class="line">counter=$(ss -tanlp | grep <span class="string">&quot;LISTEN&quot;</span> | grep <span class="string">&quot;1080&quot;</span>|<span class="built_in">wc</span> -l)</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;counter&#125;</span>&quot;</span> -eq 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   pkill keepalived</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chmod</span> +x /etc/keepalived/check.sh</span><br></pre></td></tr></table></figure><p>6）启动并设置开机自启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /etc/init.d/keepalived start</span><br><span class="line">$ systemctl <span class="built_in">enable</span> keepalived &amp;&amp; systemctl status keepalived</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq-cluster </tag>
            
            <tag> haproxy </tag>
            
            <tag> keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_RabiitMQ集群+Nginx负载均衡</title>
      <link href="/2022/04/22/rabbitmq/centos7%E9%83%A8%E7%BD%B2_RabiitMQ%E9%9B%86%E7%BE%A4+Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/2022/04/22/rabbitmq/centos7%E9%83%A8%E7%BD%B2_RabiitMQ%E9%9B%86%E7%BE%A4+Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><blockquote><p>搭建集群前，需要在各个节点安装好 RabbitMQ，具体安装参考 <code>RabbitMQ 各部署方式</code>，本文使用镜像模式+Nginx 作负载均衡</p></blockquote><ul><li>Linux 版本：CentOS Linux release 7.9.2009 (Core)</li><li>erlang 版本：Erlang-23.3.4.11</li><li>RabbitMQ 版本：RabbitMQ_Server-3.8.2</li><li>Nginx 版本：Nginx-1.21.4</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220419155223.png"></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><table><thead><tr><th>IP</th><th>主机名</th><th>服务</th></tr></thead><tbody><tr><td>188.188.4.210</td><td>ssd-dev01</td><td>RabbitMQ</td></tr><tr><td>188.188.4.211</td><td>ssd-dev02</td><td>RabbitMQ+HAProxy+Keepalived</td></tr><tr><td>188.188.4.212</td><td>ssd-dev03</td><td>RabbitMQ+HAProxy+Keepalived</td></tr></tbody></table><ul><li>配置 IP 地址和主机之间的映射</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有节点提前配置hostname</span></span><br><span class="line">$ hostnamectl set-hostname ssd-dev01 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname ssd-dev02 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname ssd-dev03 &amp;&amp; bash</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">188.188.4.210 ssd-dev01</span></span><br><span class="line"><span class="string">188.188.4.211 ssd-dev02</span></span><br><span class="line"><span class="string">188.188.4.212 ssd-dev03</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h3><ul><li>下载程序并安装相关依赖</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install socat</span><br><span class="line"></span><br><span class="line">$ wget https://github.com/rabbitmq/erlang-rpm/releases/download/v23.3.4.11/erlang-23.3.4.11-1.el7.x86_64.rpm</span><br><span class="line">$ rpm -i erlang-23.3.4.11-1.el7.x86_64.rpm</span><br><span class="line">warning: erlang-23.3.4.11-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Signature, key ID cc4bbe5b: NOKEY</span><br><span class="line"></span><br><span class="line">$ erl -version</span><br><span class="line">Erlang (SMP,ASYNC_THREADS,HIPE) (BEAM) emulator version 11.2.2.10</span><br></pre></td></tr></table></figure><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><blockquote><p>安装前需要确认 Erlang 安装成功，如未注明指定节点，默认所有节点操作一样；<br>[RabbitMQ 官网下载地址]:<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220419155441.png"></p><p>1）下载程序并配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.29/rabbitmq-server-generic-unix-3.8.29.tar.xz</span><br><span class="line">$ tar -xvf rabbitmq-server-generic-unix-3.8.29.tar -C /opt</span><br><span class="line">$ <span class="built_in">cd</span> /opt &amp;&amp; <span class="built_in">mv</span> rabbitmq_server-3.8.29 rabbitmq</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export PATH=/opt/rabbitmq/sbin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>2）创建用户并修改权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd rabbitmq</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /opt/rabbitmq/var/lib/rabbitmq /opt/rabbitmq/var/log/rabbitmq</span><br><span class="line">$ <span class="built_in">chown</span> rabbitmq.rabbitmq -R /opt/rabbitmq</span><br></pre></td></tr></table></figure><p>3）创建配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加浏览器管理插件，默认安装是没有管理页面</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /opt/rabbitmq/etc/rabbitmq/enabled_plugins &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[rabbitmq_management].</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注意$hostname自行修改节点实际hostname</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /opt/rabbitmq/etc/rabbitmq/rabbitmq-env.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">RABBITMQ_NODENAME=rabbit@$hostname</span></span><br><span class="line"><span class="string">RABBITMQ_NODE_IP_ADDRESS=0.0.0.0</span></span><br><span class="line"><span class="string">RABBITMQ_NODE_PORT=5672</span></span><br><span class="line"><span class="string">RABBITMQ_LOG_BASE=/opt/rabbitmq/var/log/rabbitmq</span></span><br><span class="line"><span class="string">RABBITMQ_MNESIA_BASE=/opt/rabbitmq/var/lib/rabbitmq/mnesia</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /opt/rabbitmq/etc/rabbitmq/rabbitmq.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">listeners.tcp.default = 5672</span></span><br><span class="line"><span class="string">num_acceptors.tcp = 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">management.tcp.port = 15672</span></span><br><span class="line"><span class="string">management.tcp.ip   = 0.0.0.0</span></span><br><span class="line"><span class="string">management.http_log_dir = /opt/rabbitmq/var/log/rabbitmq/management_access</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vm_memory_high_watermark.absolute = 512MiB</span></span><br><span class="line"><span class="string">vm_memory_high_watermark_paging_ratio = 0.3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">loopback_users.guest = true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>4）配置开机自启服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/systemd/system/rabbitmq-server.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=RabbitMQ broker</span></span><br><span class="line"><span class="string">After=syslog.target network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=notify</span></span><br><span class="line"><span class="string">User=rabbitmq</span></span><br><span class="line"><span class="string">Group=rabbitmq</span></span><br><span class="line"><span class="string">UMask=0027</span></span><br><span class="line"><span class="string">NotifyAccess=all</span></span><br><span class="line"><span class="string">TimeoutStartSec=3600</span></span><br><span class="line"><span class="string">LimitNOFILE=32768</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string">RestartSec=10</span></span><br><span class="line"><span class="string">WorkingDirectory=/opt/rabbitmq/var/lib/rabbitmq</span></span><br><span class="line"><span class="string">ExecStart=/opt/rabbitmq/sbin/rabbitmq-server</span></span><br><span class="line"><span class="string">ExecStop=/opt/rabbitmq/sbin/rabbitmqctl shutdown</span></span><br><span class="line"><span class="string">SuccessExitStatus=69</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>5）设置 Cookie 并启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;rabbitmq-cluster-cookie&quot;</span> &gt;&gt; ~/.erlang.cookie</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;rabbitmq-cluster-cookie&quot;</span> &gt;&gt; /home/rabbitmq/.erlang.cookie</span><br><span class="line">$ <span class="built_in">chown</span> rabbitmq.rabbitmq /home/rabbitmq/.erlang.cookie</span><br><span class="line">$ <span class="built_in">chmod</span> 600 ~/.erlang.cookie /home/rabbitmq/.erlang.cookie</span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now rabbitmq-server</span><br><span class="line">$ systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><p>6）添加 RabbitMQ 账密，并分配权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查用户列表</span></span><br><span class="line">$ rabbitmqctl list_users</span><br><span class="line">Listing <span class="built_in">users</span> ...</span><br><span class="line">usertags</span><br><span class="line">guest[administrator]</span><br><span class="line">rabbitmq_user[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># RabbitMQ 有默认用户密码，guest/guest该用户密码只能在本地登陆，若在浏览器中登陆，须创建新用户密码</span></span><br><span class="line">$ rabbitmqctl add_user rabbitmq_user rabbitmq_pwd</span><br><span class="line">Adding user <span class="string">&quot;rabbitmq_user&quot;</span> ...</span><br><span class="line">Done. Don<span class="string">&#x27;t forget to grant the user permissions to some virtual hosts! See &#x27;</span>rabbitmqctl <span class="built_in">help</span> set_permissions<span class="string">&#x27; to learn more.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 为rabbitmq_user用户添加管理员角色</span></span><br><span class="line"><span class="string">$ rabbitmqctl set_user_tags rabbitmq_user administrator </span></span><br><span class="line"><span class="string">Setting tags for user &quot;rabbitmq_user&quot; to [administrator] ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置rabbitmq_user用户权限，允许访问vhost及read/write</span></span><br><span class="line"><span class="string">$ rabbitmqctl set_permissions -p / rabbitmq_user &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span></span><br><span class="line"><span class="string">Setting permissions for user &quot;rabbitmq_user&quot; in vhost &quot;/&quot; ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 检查权限列表</span></span><br><span class="line"><span class="string">$ rabbitmqctl list_permissions -p /</span></span><br><span class="line"><span class="string">Listing permissions for vhost &quot;/&quot; ...</span></span><br><span class="line"><span class="string">userconfigurewriteread</span></span><br><span class="line"><span class="string">rabbitmq_user.*.*.*</span></span><br><span class="line"><span class="string">guest.*.*.*</span></span><br></pre></td></tr></table></figure><h3 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h3><blockquote><p>前面已定义了 <code>.erlang.cookie</code> 文件内容，该文件相当于密钥令牌，集群中各节点通过该令牌进行相互认证</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 分别在三个节点上查看该文件内容是否相同</span></span><br><span class="line">$ more /root/.erlang.cookie</span><br><span class="line">rabbitmq-cluster-cookie</span><br></pre></td></tr></table></figure><p>1）RabbitMQ 集群添加节点，分别在 ssd-dev02、ssd-dev03 上执行如下命令，将其加入集群中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssd-dev02操作</span></span><br><span class="line">$ rabbitmqctl stop_app</span><br><span class="line">$ rabbitmqctl join_cluster --ram rabbit@ssd-dev01</span><br><span class="line">$ rabbitmqctl start_app</span><br><span class="line"></span><br><span class="line"><span class="comment"># ssd-dev03操作</span></span><br><span class="line">$ rabbitmqctl stop_app</span><br><span class="line">$ rabbitmqctl join_cluster --ram rabbit@ssd-dev01</span><br><span class="line">$ rabbitmqctl start_app</span><br></pre></td></tr></table></figure><p>2）验证集群是否配置成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rabbitmqctl cluster_status</span><br><span class="line">Cluster status of node rabbit@ssd-dev01 ...</span><br><span class="line">Basics</span><br><span class="line"></span><br><span class="line">Cluster name: rabbit@ssd-dev01</span><br><span class="line"></span><br><span class="line">Disk Nodes</span><br><span class="line"></span><br><span class="line">rabbit@ssd-dev01</span><br><span class="line"></span><br><span class="line">RAM Nodes</span><br><span class="line"></span><br><span class="line">rabbit@ssd-dev02</span><br><span class="line">rabbit@ssd-dev03</span><br><span class="line"></span><br><span class="line">Running Nodes</span><br><span class="line"></span><br><span class="line">rabbit@ssd-dev01</span><br><span class="line">rabbit@ssd-dev02</span><br><span class="line">rabbit@ssd-dev03</span><br><span class="line"></span><br><span class="line">Versions</span><br><span class="line"></span><br><span class="line">rabbit@ssd-dev01: RabbitMQ 3.8.2 on Erlang 23.3.4.11</span><br><span class="line">rabbit@ssd-dev02: RabbitMQ 3.8.2 on Erlang 23.3.4.11</span><br><span class="line">rabbit@ssd-dev03: RabbitMQ 3.8.2 on Erlang 23.3.4.11</span><br><span class="line">...(略)</span><br></pre></td></tr></table></figure><p>或使用任一节点在浏览器上打开 IP:15672 管理页面，如下图显示绿色表示成功</p><p>3）配置镜像队列</p><p>通过命令方式和管理页面方式实现：同步 <code>virtual host</code> 为 “&#x2F;“ 下名称前缀为 “mirroring” 的交换机和队列，并且自动保存到另两节点上</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># policy配置格式，命令行配置镜像队列，在任一节点上执行如下命令</span></span><br><span class="line">$ rabbitmqctl set_policy [-p ] [--priority ] [--apply-to ] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 同步virtual host为 &quot;/&quot;下名称前缀为 &quot;mirroring&quot;的交换机和队列，并且自动保存到两个节点上</span></span><br><span class="line">$ rabbitmqctl set_policy -p / --priority 1 --apply-to all myPolicy <span class="string">&quot;^mirroring&quot;</span> <span class="string">&#x27;&#123;&quot;ha-mode&quot;:&quot;exactly&quot;,&quot;ha-params&quot;:2,&quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载依赖并编辑安装</span></span><br><span class="line">$ yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class="line">$ wget http://nginx.org/download/nginx-1.21.4.tar.gz</span><br><span class="line">$ tar -xf nginx-1.21.4.tar.gz &amp;&amp; <span class="built_in">cd</span> nginx-1.21.4</span><br><span class="line">$ ./configure --prefix=/usr/local/nginx </span><br><span class="line">$ make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置关机自启</span></span><br><span class="line">$ vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now nginx &amp;&amp; systemctl status nginx &amp;&amp; systemctl status nginx</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/local/nginx/conf/nginx.conf /usr/local/nginx/conf/nginx.conf.bak.$(<span class="built_in">date</span> +%F_%T)</span><br><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment"># 增加一行</span></span><br><span class="line">include /usr/local/nginx/vhosts/*.conf;</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/nginx/vhosts/rabbitmq.conf</span><br><span class="line">upstream rabbitmq &#123;</span><br><span class="line">    server 188.188.4.210:15672  max_fails=2 fail_timeout=1;</span><br><span class="line">    server 188.188.4.211:15672  max_fails=2 fail_timeout=1;</span><br><span class="line">    server 188.188.4.212:15672  max_fails=2 fail_timeout=1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"> listen 81;</span><br><span class="line"> <span class="comment">#server_name rabbitmq.yuikuen.top;</span></span><br><span class="line"> server_name 127.0.0.1;</span><br><span class="line"> charset utf-8;</span><br><span class="line"></span><br><span class="line"> location / &#123;</span><br><span class="line">   proxy_pass http://rabbitmq;</span><br><span class="line">        proxy_set_header           Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header           X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header           X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_connect_timeout 300s;</span><br><span class="line">        proxy_send_timeout 300s;</span><br><span class="line">        proxy_read_timeout 300s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220422155817147.png" alt="image-20220422155817147"></p><p><strong>上图为未加入集群的负载情况，仅代表 Nginx 负载成功</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220422173216354.png" alt="image-20220422173216354"></p><p><strong>最终效果如上图所示</strong></p>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_RabiitMQ(RPM)</title>
      <link href="/2022/04/22/rabbitmq/centos7%E9%83%A8%E7%BD%B2_RabiitMQ(RPM)/"/>
      <url>/2022/04/22/rabbitmq/centos7%E9%83%A8%E7%BD%B2_RabiitMQ(RPM)/</url>
      
        <content type="html"><![CDATA[<h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><blockquote><p>RabbitMQ 采用 Erlang 语言开发，所以在安装 RabbitMQ 前，需要安装 Erlang</p></blockquote><ul><li>Linux 版本：CentOS Linux release 7.9.2009 (Core)</li><li>erlang 版本：Erlang-23.3.4.11</li><li>RabbitMQ 版本：RabbitMQ_Server-3.8.29</li></ul><blockquote><p>RabbitMQ 采用 Erlang 语言开发，所以在安装 RabbitMQ 之前，需要安装 Erlang。而安装前建议参考 <a href="https://github.com/rabbitmq/erlang-rpm">Erlang Github 官方说明</a>，Readme 上有说明版本的兼容性问题。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220422152149503.png" alt="image-20220422152149503"></p><h3 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install socat</span><br><span class="line"></span><br><span class="line">$ wget https://github.com/rabbitmq/erlang-rpm/releases/download/v23.3.4.11/erlang-23.3.4.11-1.el7.x86_64.rpm</span><br><span class="line">$ rpm -i erlang-23.3.4.11-1.el7.x86_64.rpm</span><br><span class="line">warning: erlang-23.3.4.11-1.el7.x86_64.rpm: Header V4 RSA/SHA256 Signature, key ID cc4bbe5b: NOKEY</span><br><span class="line"></span><br><span class="line">$ erl -version</span><br><span class="line">Erlang (SMP,ASYNC_THREADS,HIPE) (BEAM) emulator version 11.2.2.10</span><br></pre></td></tr></table></figure><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.8.29/rabbitmq-server-3.8.29-1.el7.noarch.rpm</span><br><span class="line"></span><br><span class="line">$ rpm -i rabbitmq-server-3.8.29-1.el7.noarch.rpm</span><br><span class="line">warning: rabbitmq-server-3.8.29-1.el7.noarch.rpm: Header V4 RSA/SHA512 Signature, key ID 6026dfca: NOKEY</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now rabbitmq-server</span><br><span class="line">$ systemctl status rabbitmq-server</span><br><span class="line">● rabbitmq-server.service - RabbitMQ broker</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/rabbitmq-server.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Fri 2022-04-22 15:30:27 CST; 7s ago</span><br><span class="line"> Main PID: 1514 (beam.smp)</span><br><span class="line">   Status: <span class="string">&quot;Initialized&quot;</span></span><br><span class="line">   CGroup: /system.slice/rabbitmq-server.service</span><br><span class="line">           ├─1514 /usr/lib64/erlang/erts-11.2.2.10/bin/beam.smp -W w -MBas ageffcbf -MHas ageffcbf -MBlmbcs 512 -MHlmbcs 512 -MMmcs 30 -P 1048576 -t 5000000 -stbt db ...</span><br><span class="line">           ├─1529 erl_child_setup 32768</span><br><span class="line">           ├─1558 /usr/lib64/erlang/erts-11.2.2.10/bin/epmd -daemon</span><br><span class="line">           ├─1585 inet_gethost 4</span><br><span class="line">           └─1586 inet_gethost 4</span><br><span class="line"></span><br><span class="line">Apr 22 15:30:24 Dev-Pc rabbitmq-server[1514]: TLS Library: OpenSSL - OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">Apr 22 15:30:24 Dev-Pc rabbitmq-server[1514]: Doc guides:  https://rabbitmq.com/documentation.html</span><br><span class="line">Apr 22 15:30:24 Dev-Pc rabbitmq-server[1514]: Support:     https://rabbitmq.com/contact.html</span><br><span class="line">Apr 22 15:30:24 Dev-Pc rabbitmq-server[1514]: Tutorials:   https://rabbitmq.com/getstarted.html</span><br><span class="line">Apr 22 15:30:24 Dev-Pc rabbitmq-server[1514]: Monitoring:  https://rabbitmq.com/monitoring.html</span><br><span class="line">Apr 22 15:30:24 Dev-Pc rabbitmq-server[1514]: Logs: /var/log/rabbitmq/rabbit@Dev-Pc.<span class="built_in">log</span></span><br><span class="line">Apr 22 15:30:24 Dev-Pc rabbitmq-server[1514]: /var/log/rabbitmq/rabbit@Dev-Pc_upgrade.<span class="built_in">log</span></span><br><span class="line">Apr 22 15:30:24 Dev-Pc rabbitmq-server[1514]: Config file(s): (none)</span><br><span class="line">Apr 22 15:30:27 Dev-Pc rabbitmq-server[1514]: Starting broker... completed with 0 plugins.</span><br><span class="line">Apr 22 15:30:27 Dev-Pc systemd[1]: Started RabbitMQ broker.</span><br><span class="line"></span><br><span class="line">$ lsof -i:5672</span><br><span class="line">COMMAND   PID     USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">beam.smp 1514 rabbitmq   95u  IPv6  23013      0t0  TCP *:amqp (LISTEN)</span><br></pre></td></tr></table></figure><p><strong>配置文件可查看 <code>rabbitmq-server.service</code> 文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /usr/lib/systemd/system/rabbitmq-server.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=RabbitMQ broker</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">User=rabbitmq</span><br><span class="line">Group=rabbitmq</span><br><span class="line">UMask=0027</span><br><span class="line">NotifyAccess=all</span><br><span class="line">TimeoutStartSec=600</span><br><span class="line"></span><br><span class="line"><span class="comment"># To override LimitNOFILE, create the following file:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># /etc/systemd/system/rabbitmq-server.service.d/limits.conf</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># with the following content:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># [Service]</span></span><br><span class="line"><span class="comment"># LimitNOFILE=65536</span></span><br><span class="line"></span><br><span class="line">LimitNOFILE=32768</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: systemd on CentOS 7 complains about in-line comments,</span></span><br><span class="line"><span class="comment"># so only append them here</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Restart:</span></span><br><span class="line"><span class="comment"># The following setting will automatically restart RabbitMQ</span></span><br><span class="line"><span class="comment"># in the event of a failure. systemd service restarts are not a</span></span><br><span class="line"><span class="comment"># replacement for service monitoring. Please see</span></span><br><span class="line"><span class="comment"># https://www.rabbitmq.com/monitoring.html</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">WorkingDirectory=/var/lib/rabbitmq</span><br><span class="line">ExecStart=/usr/sbin/rabbitmq-server</span><br><span class="line">ExecStop=/usr/sbin/rabbitmqctl shutdown</span><br><span class="line"><span class="comment"># See rabbitmq/rabbitmq-server-release#51</span></span><br><span class="line">SuccessExitStatus=69</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ问题_Systemctl启动报错</title>
      <link href="/2022/04/21/rabbitmq/rabbitmq%E9%97%AE%E9%A2%98_systemctl%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/"/>
      <url>/2022/04/21/rabbitmq/rabbitmq%E9%97%AE%E9%A2%98_systemctl%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述：在使用命令 <code>systemctl daemon-reload &amp;&amp; systemctl enable --now rabbitmq-server</code> 启动 Rabbitmq 时,报</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now rabbitmq-server</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/rabbitmq-server.service to /etc/systemd/system/rabbitmq-server.service.</span><br><span class="line">Job <span class="keyword">for</span> rabbitmq-server.service failed because the control process exited with error code. See <span class="string">&quot;systemctl status rabbitmq-server.service&quot;</span> and <span class="string">&quot;journalctl -xe&quot;</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p>根据上述错误信息，使用 <code>journalctl -xe</code> 命令查看启动失败日志：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Apr 21 18:05:55 rabbitmq systemd[1]: Starting RabbitMQ broker...</span><br><span class="line">-- Subject: Unit rabbitmq-server.service has begun start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit rabbitmq-server.service has begun starting up.</span><br><span class="line">Apr 21 18:05:55 rabbitmq rabbitmq-server[54795]: /opt/rabbitmq/sbin/rabbitmq-server: line 73: <span class="built_in">exec</span>: erl: not found</span><br><span class="line">Apr 21 18:05:55 rabbitmq systemd[1]: rabbitmq-server.service: main process exited, code=exited, status=127/n/a</span><br><span class="line">Apr 21 18:05:55 rabbitmq systemd[1]: Failed to start RabbitMQ broker.</span><br><span class="line">-- Subject: Unit rabbitmq-server.service has failed</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit rabbitmq-server.service has failed.</span><br></pre></td></tr></table></figure><p>通过上面描述中，发现是 rabbitmq-server 文件第 73 没有找到 erlang</p><p><strong>解决方法：在 rabbitmq-server 文件第 73行前添加 erlang 的环境变量</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    check_start_params</span><br><span class="line">    <span class="comment"># 在73行前增加erlang的环境变量</span></span><br><span class="line">    <span class="built_in">export</span> PATH=/opt/erlang/bin:<span class="variable">$PATH</span></span><br><span class="line">    <span class="built_in">exec</span> erl \</span><br><span class="line">        -pa <span class="string">&quot;<span class="variable">$RABBITMQ_SERVER_CODE_PATH</span>&quot;</span> \</span><br><span class="line">        <span class="variable">$&#123;RABBITMQ_START_RABBIT&#125;</span> \</span><br><span class="line">        -boot <span class="string">&quot;<span class="variable">$&#123;SASL_BOOT_FILE&#125;</span>&quot;</span> \</span><br><span class="line">        +W w \</span><br><span class="line">        <span class="variable">$&#123;RABBITMQ_DEFAULT_ALLOC_ARGS&#125;</span> \</span><br><span class="line">        <span class="variable">$&#123;RABBITMQ_SERVER_ERL_ARGS&#125;</span> \</span><br><span class="line">        <span class="variable">$&#123;RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS&#125;</span> \</span><br><span class="line">        <span class="variable">$&#123;RABBITMQ_SERVER_START_ARGS&#125;</span> \</span><br><span class="line">        -syslog logger <span class="string">&#x27;[]&#x27;</span> \</span><br><span class="line">        -syslog syslog_error_logger <span class="literal">false</span> \</span><br><span class="line">        -kernel prevent_overlapping_partitions <span class="literal">false</span> \</span><br><span class="line">        <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行启动命令，再查看 rabbitmq 状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status rabbitmq-server</span><br><span class="line">● rabbitmq-server.service - RabbitMQ broker</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/rabbitmq-server.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Fri 2022-04-22 09:20:53 CST; 11min ago</span><br><span class="line">  Process: 2080 ExecStop=/opt/rabbitmq/sbin/rabbitmqctl shutdown (code=exited, status=127)</span><br><span class="line"> Main PID: 2088 (beam.smp)</span><br><span class="line">   CGroup: /system.slice/rabbitmq-server.service</span><br><span class="line">           ├─2088 /opt/erlang/lib/erlang/erts-12.2/bin/beam.smp -W w -MBas ageffcbf -MHas ageffcbf -MBlmbcs 512 -MHlmbcs 512 -MMmcs 30 -P 1048576 -t 5000000 -stbt db ...</span><br><span class="line">           ├─2099 erl_child_setup 32768</span><br><span class="line">           ├─2129 /opt/erlang/lib/erlang/erts-12.2/bin/epmd -daemon</span><br><span class="line">           ├─2156 inet_gethost 4</span><br><span class="line">           └─2157 inet_gethost 4</span><br><span class="line"></span><br><span class="line">Apr 22 09:20:53 rabbitmq rabbitmq-server[2088]: Doc guides:  https://rabbitmq.com/documentation.html</span><br><span class="line">Apr 22 09:20:53 rabbitmq rabbitmq-server[2088]: Support:     https://rabbitmq.com/contact.html</span><br><span class="line">Apr 22 09:20:53 rabbitmq rabbitmq-server[2088]: Tutorials:   https://rabbitmq.com/getstarted.html</span><br><span class="line">Apr 22 09:20:53 rabbitmq rabbitmq-server[2088]: Monitoring:  https://rabbitmq.com/monitoring.html</span><br><span class="line">Apr 22 09:20:53 rabbitmq rabbitmq-server[2088]: Logs: /opt/rabbitmq/var/log/rabbitmq/rabbit@rabbitmq.log</span><br><span class="line">Apr 22 09:20:53 rabbitmq rabbitmq-server[2088]: /opt/rabbitmq/var/log/rabbitmq/rabbit@rabbitmq_upgrade.log</span><br><span class="line">Apr 22 09:20:53 rabbitmq rabbitmq-server[2088]: &lt;stdout&gt;</span><br><span class="line">Apr 22 09:20:53 rabbitmq rabbitmq-server[2088]: Config file(s): /opt/rabbitmq/etc/rabbitmq/rabbitmq.conf</span><br><span class="line">Apr 22 09:20:53 rabbitmq rabbitmq-server[2088]: Starting broker... completed with 0 plugins.</span><br><span class="line">Apr 22 09:20:53 rabbitmq systemd[1]: Started RabbitMQ broker.</span><br><span class="line"></span><br><span class="line">$ ss -lntp|grep 5672</span><br><span class="line">LISTEN     0      128          *:25672                    *:*                   <span class="built_in">users</span>:((<span class="string">&quot;beam.smp&quot;</span>,pid=2088,fd=18))</span><br><span class="line">LISTEN     0      128       [::]:5672                  [::]:*                   <span class="built_in">users</span>:((<span class="string">&quot;beam.smp&quot;</span>,pid=2088,fd=33))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_RabiitMQ(二进制)</title>
      <link href="/2022/04/21/rabbitmq/centos7%E9%83%A8%E7%BD%B2_RabiitMQ(%E4%BA%8C%E8%BF%9B%E5%88%B6)/"/>
      <url>/2022/04/21/rabbitmq/centos7%E9%83%A8%E7%BD%B2_RabiitMQ(%E4%BA%8C%E8%BF%9B%E5%88%B6)/</url>
      
        <content type="html"><![CDATA[<h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><blockquote><p>RabbitMQ 采用 Erlang 语言开发，所以在安装 RabbitMQ 前，需要安装 Erlang</p></blockquote><ul><li>Linux 版本：CentOS Linux release 7.9.2009 (Core)</li><li>erlang 版本：Erlang-24.2</li><li>RabbitMQ 版本：RabbitMQ_Server-3.9.14</li></ul><h3 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220419155223.png"></p><p>1）下载程序并安装相关依赖</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://erlang.org/download/otp_src_24.2.tar.gz</span><br><span class="line">$ yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel gtk2-devel binutils-devel unixODBC unixODBC-devel xz socat</span><br></pre></td></tr></table></figure><p>2）解压编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -zxvf otp_src_24.2.tar.gz &amp;&amp; <span class="built_in">cd</span> otp_src_24.2</span><br><span class="line">$ ./configure prefix=/opt/erlang</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>3）配置环境变量并验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export PATH=/opt/erlang/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line">$ erl -version</span><br><span class="line">Erlang (SMP,ASYNC_THREADS) (BEAM) emulator version 12.2</span><br></pre></td></tr></table></figure><h3 id="安装-RabbitMQ"><a href="#安装-RabbitMQ" class="headerlink" title="安装 RabbitMQ"></a>安装 RabbitMQ</h3><blockquote><p>安装前需要确认 Erlang 安装成功<br>[RabbitMQ 官网下载地址]:<a href="https://www.rabbitmq.com/download.html">https://www.rabbitmq.com/download.html</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220419155441.png"></p><p>1）下载程序并配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.9.14/rabbitmq-server-generic-unix-3.9.14.tar.xz</span><br><span class="line">$ tar -xvf rabbitmq-server-generic-unix-3.9.14.tar -C /opt</span><br><span class="line">$ <span class="built_in">cd</span> /opt &amp;&amp; <span class="built_in">mv</span> rabbitmq_server-3.9.14 rabbitmq</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export PATH=/opt/rabbitmq/sbin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>2）创建用户并修改权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hostnamectl set-hostname rabbitmq &amp;&amp; bash</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;127.0.0.1 rabbitmq&#x27;</span> &gt;&gt; /etc/hosts</span><br><span class="line"></span><br><span class="line">$ useradd rabbitmq</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /opt/rabbitmq/var/lib/rabbitmq /opt/rabbitmq/var/log/rabbitmq</span><br><span class="line">$ <span class="built_in">chown</span> rabbitmq.rabbitmq -R /opt/rabbitmq</span><br></pre></td></tr></table></figure><p>3）创建配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加浏览器管理插件，默认安装是没有管理页面</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /opt/rabbitmq/etc/rabbitmq/enabled_plugins &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[rabbitmq_management].</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /opt/rabbitmq/etc/rabbitmq/rabbitmq-env.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">RABBITMQ_NODENAME=rabbit@rabbitmq</span></span><br><span class="line"><span class="string">RABBITMQ_NODE_IP_ADDRESS=0.0.0.0</span></span><br><span class="line"><span class="string">RABBITMQ_NODE_PORT=5672</span></span><br><span class="line"><span class="string">RABBITMQ_LOG_BASE=/opt/rabbitmq/var/log/rabbitmq</span></span><br><span class="line"><span class="string">RABBITMQ_MNESIA_BASE=/opt/rabbitmq/var/lib/rabbitmq/mnesia</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /opt/rabbitmq/etc/rabbitmq/rabbitmq.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">listeners.tcp.default = 5672</span></span><br><span class="line"><span class="string">num_acceptors.tcp = 10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">management.tcp.port = 15672</span></span><br><span class="line"><span class="string">management.tcp.ip   = 0.0.0.0</span></span><br><span class="line"><span class="string">management.http_log_dir = /opt/rabbitmq/var/log/rabbitmq/management_access</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vm_memory_high_watermark.absolute = 512MiB</span></span><br><span class="line"><span class="string">vm_memory_high_watermark_paging_ratio = 0.3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">loopback_users.guest = true</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>4）配置开机自启服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/systemd/system/rabbitmq-server.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=RabbitMQ broker</span></span><br><span class="line"><span class="string">After=syslog.target network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=notify</span></span><br><span class="line"><span class="string">User=rabbitmq</span></span><br><span class="line"><span class="string">Group=rabbitmq</span></span><br><span class="line"><span class="string">UMask=0027</span></span><br><span class="line"><span class="string">NotifyAccess=all</span></span><br><span class="line"><span class="string">TimeoutStartSec=3600</span></span><br><span class="line"><span class="string">LimitNOFILE=32768</span></span><br><span class="line"><span class="string">Restart=on-failure</span></span><br><span class="line"><span class="string">RestartSec=10</span></span><br><span class="line"><span class="string">WorkingDirectory=/opt/rabbitmq/var/lib/rabbitmq</span></span><br><span class="line"><span class="string">ExecStart=/opt/rabbitmq/sbin/rabbitmq-server</span></span><br><span class="line"><span class="string">ExecStop=/opt/rabbitmq/sbin/rabbitmqctl shutdown</span></span><br><span class="line"><span class="string">SuccessExitStatus=69</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>5）设置 Cookie 并启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;rabbitmq-cluster-cookie&quot;</span> &gt;&gt; ~/.erlang.cookie</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;rabbitmq-cluster-cookie&quot;</span> &gt;&gt; /home/rabbitmq/.erlang.cookie</span><br><span class="line">$ <span class="built_in">chown</span> rabbitmq.rabbitmq /home/rabbitmq/.erlang.cookie</span><br><span class="line">$ <span class="built_in">chmod</span> 600 ~/.erlang.cookie /home/rabbitmq/.erlang.cookie</span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now rabbitmq-server</span><br><span class="line">$ systemctl status rabbitmq-server</span><br></pre></td></tr></table></figure><p><strong>注：如启动报错，请根据错误提示进行排查，如下问题：erl: command not found 环境没找到</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ journalctl -xe</span><br><span class="line">-- Unit rabbitmq-server.service has begun starting up.</span><br><span class="line">Apr 22 14:30:47 rabbitmq rabbitmq-server[1507]: /opt/rabbitmq/sbin/rabbitmq-server: line 187: erl: <span class="built_in">command</span> not found</span><br><span class="line">Apr 22 14:30:47 rabbitmq systemd[1]: rabbitmq-server.service: main process exited, code=exited, status=127/n/a</span><br><span class="line">Apr 22 14:30:47 rabbitmq systemd[1]: Failed to start RabbitMQ broker.</span><br><span class="line">-- Subject: Unit rabbitmq-server.service has failed</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http://lists.freedesktop.org/mailman/listinfo/systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit rabbitmq-server.service has failed.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解决方法，增加erl环境变量指定export PATH=/opt/erlang/bin:$PATH</span></span><br><span class="line">185 <span class="comment"># NOTIFY_SOCKET is needed here to prevent epmd from impersonating the</span></span><br><span class="line">186 <span class="comment"># success of our startup sequence to systemd.</span></span><br><span class="line">187 <span class="built_in">export</span> PATH=/opt/erlang/bin:<span class="variable">$PATH</span></span><br><span class="line">188 NOTIFY_SOCKET= \</span><br><span class="line">189 RABBITMQ_CONFIG_FILE=<span class="variable">$RABBITMQ_CONFIG_FILE</span> \</span><br><span class="line">190 ERL_CRASH_DUMP=<span class="variable">$ERL_CRASH_DUMP</span> \</span><br><span class="line">191 RABBITMQ_CONFIG_ARG_FILE=<span class="variable">$RABBITMQ_CONFIG_ARG_FILE</span> \</span><br><span class="line">192 RABBITMQ_DIST_PORT=<span class="variable">$RABBITMQ_DIST_PORT</span> \</span><br><span class="line">193     <span class="variable">$&#123;ERL_DIR&#125;</span>erl -pa <span class="string">&quot;<span class="variable">$RABBITMQ_EBIN_ROOT</span>&quot;</span> \</span><br><span class="line">194     -boot <span class="string">&quot;<span class="variable">$&#123;CLEAN_BOOT_FILE&#125;</span>&quot;</span> \</span><br><span class="line">195     -noinput \</span><br><span class="line">196     -hidden \</span><br><span class="line">197     -s rabbit_prelaunch \</span><br><span class="line">198     <span class="variable">$&#123;RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS&#125;</span> \</span><br><span class="line">199     <span class="variable">$&#123;RABBITMQ_NAME_TYPE&#125;</span> <span class="variable">$&#123;RABBITMQ_PRELAUNCH_NODENAME&#125;</span> \</span><br><span class="line">200     -conf_advanced <span class="string">&quot;<span class="variable">$&#123;RABBITMQ_ADVANCED_CONFIG_FILE&#125;</span>&quot;</span> \</span><br><span class="line">201     -rabbit feature_flags_file <span class="string">&quot;\&quot;<span class="variable">$RABBITMQ_FEATURE_FLAGS_FILE</span>\&quot;&quot;</span> \</span><br><span class="line">202     -rabbit enabled_plugins_file <span class="string">&quot;\&quot;<span class="variable">$RABBITMQ_ENABLED_PLUGINS_FILE</span>\&quot;&quot;</span> \</span><br><span class="line">203     -rabbit plugins_dir <span class="string">&quot;\&quot;<span class="variable">$RABBITMQ_PLUGINS_DIR</span>\&quot;&quot;</span> \</span><br><span class="line">204     -extra <span class="string">&quot;<span class="variable">$&#123;RABBITMQ_NODENAME&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure><p>6）添加 RabbitMQ 账密，并分配权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查用户列表</span></span><br><span class="line">$ rabbitmqctl list_users</span><br><span class="line">Listing <span class="built_in">users</span> ...</span><br><span class="line">usertags</span><br><span class="line">guest[administrator]</span><br><span class="line">rabbitmq_user[]</span><br><span class="line"></span><br><span class="line"><span class="comment"># RabbitMQ 有默认用户密码，guest/guest该用户密码只能在本地登陆，若在浏览器中登陆，须创建新用户密码</span></span><br><span class="line">$ rabbitmqctl add_user rabbitmq_user rabbitmq_pwd</span><br><span class="line">Adding user <span class="string">&quot;rabbitmq_user&quot;</span> ...</span><br><span class="line">Done. Don<span class="string">&#x27;t forget to grant the user permissions to some virtual hosts! See &#x27;</span>rabbitmqctl <span class="built_in">help</span> set_permissions<span class="string">&#x27; to learn more.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 为rabbitmq_user用户添加管理员角色</span></span><br><span class="line"><span class="string">$ rabbitmqctl set_user_tags rabbitmq_user administrator </span></span><br><span class="line"><span class="string">Setting tags for user &quot;rabbitmq_user&quot; to [administrator] ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置rabbitmq_user用户权限，允许访问vhost及read/write</span></span><br><span class="line"><span class="string">$ rabbitmqctl set_permissions -p / rabbitmq_user &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span></span><br><span class="line"><span class="string">Setting permissions for user &quot;rabbitmq_user&quot; in vhost &quot;/&quot; ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 检查权限列表</span></span><br><span class="line"><span class="string">$ rabbitmqctl list_permissions -p /</span></span><br><span class="line"><span class="string">Listing permissions for vhost &quot;/&quot; ...</span></span><br><span class="line"><span class="string">userconfigurewriteread</span></span><br><span class="line"><span class="string">rabbitmq_user.*.*.*</span></span><br><span class="line"><span class="string">guest.*.*.*</span></span><br></pre></td></tr></table></figure><p>7）浏览器登陆 RabbitMQ 管理界面，访问 IP:15672 进行登陆，若出现 <code>ReferenceError:disable_stats is not defined</code>，可 <code>ctrl+f5</code> 清除页面缓存后重新登陆</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220419170741.png"></p>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql配置_从库设置只读模式</title>
      <link href="/2022/04/16/mysql/mysql%E9%85%8D%E7%BD%AE_%E4%BB%8E%E5%BA%93%E8%AE%BE%E7%BD%AE%E5%8F%AA%E8%AF%BB%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/04/16/mysql/mysql%E9%85%8D%E7%BD%AE_%E4%BB%8E%E5%BA%93%E8%AE%BE%E7%BD%AE%E5%8F%AA%E8%AF%BB%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MySQL 设置了主从复制，为了保证数据一致性，防止从库乱写入，需要设置从库为只读状态</p></blockquote><p>1）查看默认读写状态</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global variables like &quot;%read_only%&quot;;</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| innodb_read_only      | OFF   |</span><br><span class="line">| read_only             | OFF   |</span><br><span class="line">| super_read_only       | OFF   |</span><br><span class="line">| transaction_read_only | OFF   |</span><br><span class="line">| tx_read_only          | OFF   |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">5 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><p>2）设置只读</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global read_only=1;         # 普通用户设置只读</span><br><span class="line">mysql&gt; set global super_read_only=1;   # 超级用户设置只读</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 再查看状态，已设置为只读</span><br><span class="line">mysql&gt; show global variables like &quot;%read_only%&quot;;</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| Variable_name         | Value |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">| innodb_read_only      | OFF   |</span><br><span class="line">| read_only             | ON    |</span><br><span class="line">| super_read_only       | ON    |</span><br><span class="line">| transaction_read_only | OFF   |</span><br><span class="line">| tx_read_only          | OFF   |</span><br><span class="line">+-----------------------+-------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>3）创建一个库查看是否设置成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database test;</span><br><span class="line">ERROR 1290 (HY000): The MySQL server is running with the --super-read-only option so it cannot execute this statement</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>主从复制不受影响，可正常写入，如在做数据恢复的时候希望从库也无法进行任何写入，需要进行锁表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush tables with read unlock;    # 锁表</span><br><span class="line">mysql&gt; unlock tables;                    # 解锁</span><br></pre></td></tr></table></figure><p><strong>设置在 my.cnf 使用 MySQL 重启也能生效</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">read_only=1</span><br><span class="line">super_read_only=1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL配置_主从复制</title>
      <link href="/2022/04/15/mysql/mysql%E9%85%8D%E7%BD%AE_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/04/15/mysql/mysql%E9%85%8D%E7%BD%AE_%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>MySQL 主从复制的方式有多种，本文主要介绍基于日志 binlog 的主从复制方式</p></blockquote><h3 id="概要说明"><a href="#概要说明" class="headerlink" title="概要说明"></a>概要说明</h3><ol><li><strong>MySQL 主从复制（也称 A&#x2F;B 复制） 的原理</strong></li></ol><ul><li>Master 将数据改变记录到二进制日志 <code>binary log</code> 中(配置文件 <code>log-bin</code> 指定的文件，叫做二进制事件 <code>binary log events</code>)</li><li>Slave 通过 I&#x2F;O 线程读取 Master 中的 <code>binary log events</code> 并写入到它的中继日志 <code>relay log</code></li><li>Slave 重做中继日志中的事件，把中继日志中的事件信息逐条在本地执行，完成数据在本地的存储，从而实现数据重放</li></ul><ol start="2"><li><strong>主从配置注意事项</strong></li></ol><ul><li>主从服务器操作系统版本和位数一致；</li><li>Master 和 Slave 数据库的版本要一致；</li><li>Master 和 Slave 数据库中的数据要一致；</li><li>Master 开启二进制日志，Master 和 Slave 的 Server_id 在局域网内必须唯一；</li></ul><ol start="3"><li><strong>主从配置操作步骤</strong></li></ol><ul><li>Master 配置<ul><li>安装数据库</li><li>修改数据库配置文件，指明 Server_id，开启二进制日志 <code>log-bin</code></li><li>启动数据库，查看当前是哪个日志，<code>Position</code> 号是多少</li><li>登录数据库，授权数据复制用户(IP 地址为从机 IP 地址，如双向主从，需授权本机 IP 地址，此时自己的 IP 地址就是从 IP 地址)</li><li>备份数据库(记得加锁和解锁)</li><li>传送备份数据到 Slave 上；</li><li>启动数据库</li></ul></li><li>Slave 配置<ul><li>安装数据库</li><li>修改数据库配置文件，指明 Server_id(如双向主从，也需开启二进制日志 <code>log-bin</code>)</li><li>启动数据库，还原备份；</li><li>查看当前是哪个日志，<code>Positiion</code> 号是多少(单向主从此步不需要，双向主从需要)</li><li>指定 Master 地址、用户、密码等信息</li><li>开户同步，查看状态</li></ul></li></ul><h3 id="实验操作"><a href="#实验操作" class="headerlink" title="实验操作"></a>实验操作</h3><ul><li>Master IP：188.188.4.210</li><li>Slave    IP：188.188.4.211</li><li>MySQL 版本：MySQL 5.7.37</li></ul><h4 id="Master-配置"><a href="#Master-配置" class="headerlink" title="Master 配置"></a>Master 配置</h4><p>1）编辑主节点数据库配置文件</p><p><strong>日志格式</strong>指二进制日志的三种格式</p><ul><li>binlog_format&#x3D;statement</li><li>binlog_format&#x3D;rox</li><li>binlog_format&#x3D;mixed</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/mysql/my.cnf          <span class="comment"># 一般默认为/etc/my.cnf，具体以实际环境为准</span></span><br><span class="line">[mysqld]</span><br><span class="line">lower_case_table_names=1               <span class="comment"># 表名不区分大小写</span></span><br><span class="line">binlog_format=MIXED                    <span class="comment"># 复制模式，日志格式</span></span><br><span class="line"></span><br><span class="line">server-id=1                            <span class="comment"># [必须]服务器唯一ID,默认是1，多主从时注意不可重复</span></span><br><span class="line">log-bin=mysql-bin                      <span class="comment"># 开启二进制日志，可指定存储位置，默认mysql目录</span></span><br><span class="line">log-bin-index=mysql-bin.index          <span class="comment"># 打开二进制日志文件索引</span></span><br><span class="line"></span><br><span class="line">//以下非必须项，仅供参考</span><br><span class="line">sync_binlog=1                          <span class="comment"># 控制数据库binlog刷到磁盘上，0不控制，性能最好，1每次事务提交都会刷到日志文件中，性能最差但最安全</span></span><br><span class="line">expire_logs_days=7                     <span class="comment"># 保留天数，以防日志占满磁盘，默认为0，表示不自动删除</span></span><br><span class="line"></span><br><span class="line">max_binlog_size=100m                   <span class="comment"># binlog每个日志文件大小</span></span><br><span class="line">binlog_cache_size=4m                   <span class="comment"># binlog缓存大小</span></span><br><span class="line">max_binlog_cache_size=512m             <span class="comment"># 最大binlog缓存大小</span></span><br><span class="line"></span><br><span class="line">binlog-do-db=repldb                    <span class="comment"># 需同步的二进制数据库名，可配置多个</span></span><br><span class="line">binlog-ignore-db=mysql                 <span class="comment"># 不同步的数据库，可配置多个</span></span><br><span class="line">binlog-ignore-db=information_schema    </span><br><span class="line">binlog-ignore-db=performation_schema</span><br><span class="line">binlog-ignore-db=sys</span><br><span class="line"></span><br><span class="line">auto-increment-offset=1                <span class="comment"># 表中自增字段每次的偏移量</span></span><br><span class="line">auto-increment-increment=1             <span class="comment"># 表中自增字段每次的自增量</span></span><br><span class="line">slave-skip-errors=all                  <span class="comment"># 跳过从库错误</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>每次事务提交，MySQL 都会把 binlog 刷下去，是最安全的，但性能损耗最大。这样配置的话，在数据库所在的主机操作系统损坏或突然掉电的情况下，系统才有可能丢失 1 个事务的数据。binlog 是顺序 IO，虽然 sync_binlog&#x3D;1，多个事务同时提交，但同样很大影响MySQL 的 IO 性能，按需设置。</p><p>2）重启加载配置，查看是否正常生成 <code>log-bin</code> 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart mysql &amp;&amp; systemctl status mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启后，可在data目录下看到，配置文件中定义的log-bin=mysql-bin开头的文件</span></span><br><span class="line">$ ll ./data/</span><br><span class="line">total 123100</span><br><span class="line">-rw-r----- 1 mysql mysql       56 Apr 14 15:33 auto.cnf</span><br><span class="line">-rw------- 1 mysql mysql     1680 Apr 14 15:33 ca-key.pem</span><br><span class="line">-rw-r--r-- 1 mysql mysql     1112 Apr 14 15:33 ca.pem</span><br><span class="line">-rw-r--r-- 1 mysql mysql     1112 Apr 14 15:33 client-cert.pem</span><br><span class="line">-rw------- 1 mysql mysql     1680 Apr 14 15:33 client-key.pem</span><br><span class="line">-rw-r----- 1 mysql mysql      289 Apr 15 17:03 ib_buffer_pool</span><br><span class="line">-rw-r----- 1 mysql mysql 12582912 Apr 15 17:03 ibdata1</span><br><span class="line">-rw-r----- 1 mysql mysql 50331648 Apr 15 17:03 ib_logfile0</span><br><span class="line">-rw-r----- 1 mysql mysql 50331648 Apr 14 15:33 ib_logfile1</span><br><span class="line">-rw-r----- 1 mysql mysql 12582912 Apr 15 17:03 ibtmp1</span><br><span class="line">drwxr-x--- 2 mysql mysql     4096 Apr 14 15:33 mysql</span><br><span class="line">-rw-r----- 1 mysql mysql      177 Apr 15 16:59 mysql-bin.000001</span><br><span class="line">-rw-r----- 1 mysql mysql      177 Apr 15 17:01 mysql-bin.000002</span><br><span class="line">-rw-r----- 1 mysql mysql      177 Apr 15 17:03 mysql-bin.000003</span><br><span class="line">-rw-r----- 1 mysql mysql      154 Apr 15 17:03 mysql-bin.000004</span><br><span class="line">-rw-r----- 1 mysql mysql       76 Apr 15 17:03 mysql-bin.index</span><br></pre></td></tr></table></figure><p>3）查看日志信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 2</span><br><span class="line">Server version: 5.7.37-log Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2022, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"># 查看二进制日志是否开启</span><br><span class="line">mysql&gt; show global variables like &#x27;%log%&#x27;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220415170520671.png" alt="image-20220415170520671"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看主节点二进制日志列表</span><br><span class="line">mysql&gt; SHOW MASTER LOGS;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       177 |</span><br><span class="line">| mysql-bin.000002 |       177 |</span><br><span class="line">| mysql-bin.000003 |       177 |</span><br><span class="line">| mysql-bin.000004 |       154 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查看主节点的 Server_id</span><br><span class="line">mysql&gt; SHOW GLOBAL VARIABLES LIKE &#x27;%server%&#x27;;</span><br><span class="line">+---------------------------------+--------------------------------------+</span><br><span class="line">| Variable_name                   | Value                                |</span><br><span class="line">+---------------------------------+--------------------------------------+</span><br><span class="line">| character_set_server            | utf8mb4                              |</span><br><span class="line">| collation_server                | utf8mb4_general_ci                   |</span><br><span class="line">| innodb_ft_server_stopword_table |                                      |</span><br><span class="line">| server_id                       | 1                                    |</span><br><span class="line">| server_id_bits                  | 32                                   |</span><br><span class="line">| server_uuid                     | 31a34ca9-bbc5-11ec-923c-000c29c2e995 |</span><br><span class="line">+---------------------------------+--------------------------------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>4）在 Master 节点上创建复制权限的用户</p><p><strong>授权用户 user 从哪台服务器 host 能够登录：主节点上创建用户–&gt;允许 188.188 网段的 IP，通过 slave 访问主节点</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#x27;slave&#x27;@&#x27;188.188.%.%&#x27; IDENTIFIED BY &#x27;slavepassword&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant replication slave on *.* to &#x27;slave&#x27;@&#x27;188.188.%.%&#x27; identified by &#x27;slavepassword&#x27;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ol><li><code>*.*</code> 指定能操作所有数据库和表</li><li><code>slave</code> 创建的用户名</li><li><code>188.188.%.%</code> 来源 ID，即从库 IP(可指定 IP)</li><li><code>slavepassword</code> 用户密码</li></ol><p><font color=red>注意：如条件允许，为了数据同步一致，建议先锁定一下表</font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush tables with read lock;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+--------------------------------------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                                 | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+--------------------------------------------------+-------------------+</span><br><span class="line">| mysql-bin.000004 |      856 | repldb       | mysql,information_schema,performation_schema,sys |                   |</span><br><span class="line">+------------------+----------+--------------+--------------------------------------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><ul><li>File：当前记录 <code>bin-log</code> 的文件</li><li>Position：从库读取的位置</li><li>Binlog_Do_DB：需要同步的数据库</li><li>Binlog_Ignore_DB：忽略的数据库，不同步</li></ul><p><font color=red><strong>查看 Master 主库状态，记录二进制文件名 (File) 和 位置 (Position)</strong></font>。至此，主库配置完成！</p><p>5）备份主库，并传到从库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysqldump -uroot -p -A &gt; /tmp/all.sql</span><br><span class="line">$ <span class="built_in">ls</span> /tmp/</span><br><span class="line">all.sql</span><br><span class="line">$ scp /tmp/all.sql root@188.188.4.211:/tmp</span><br></pre></td></tr></table></figure><h4 id="Slave-配置"><a href="#Slave-配置" class="headerlink" title="Slave 配置"></a>Slave 配置</h4><p>1）编辑从节点数据库配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">lower_case_table_names=1               <span class="comment"># 表名不区分大小写</span></span><br><span class="line">server-id=2                            <span class="comment"># [必须]服务器唯一ID,默认是1，多主从时注意不可重复</span></span><br><span class="line"><span class="comment">#log-bin=mysql-bin                     # 开启二进制日志(从节点如后面无级联的从节点，可以不开，避免无谓资源消耗)</span></span><br><span class="line">relay-log=mysql-relay-log              <span class="comment"># 打开从服务器中继日志文件</span></span><br><span class="line">relay-log-index=mysql-relay-log.index  <span class="comment"># 打开从服务器中继日志文件索引</span></span><br></pre></td></tr></table></figure><p>2）导入数据库数据，重启加载配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p &lt; /tmp/all.sql</span><br><span class="line">$ systemctl restart mysql &amp;&amp; systemctl status mysql</span><br></pre></td></tr></table></figure><p>3）在从库进行，执行同步 SQL 语句</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO </span><br><span class="line">    -&gt; MASTER_HOST=<span class="string">&#x27;188.188.4.210&#x27;</span>,           <span class="comment"># 主库IP地址</span></span><br><span class="line">    -&gt; MASTER_PORT=3306,                      <span class="comment"># 主库端口                   </span></span><br><span class="line">    -&gt; MASTER_USER=<span class="string">&#x27;slave&#x27;</span>,                   <span class="comment"># 主库用于复制的用户    </span></span><br><span class="line">    -&gt; MASTER_PASSWORD=<span class="string">&#x27;slavepassword&#x27;</span>,       <span class="comment"># 密码</span></span><br><span class="line">    -&gt; MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000004&#x27;</span>,    <span class="comment"># 主库日志名</span></span><br><span class="line">    -&gt; MASTER_LOG_POS=856;                    <span class="comment"># 主库日志偏移量，即从何处开始复制</span></span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST=<span class="string">&#x27;188.188.4.210&#x27;</span>,MASTER_PORT=3306,MASTER_USER=<span class="string">&#x27;slave&#x27;</span>,MASTER_PASSWORD=<span class="string">&#x27;slavepassword&#x27;</span>,MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000004&#x27;</span>,MASTER_LOG_POS=856;</span><br></pre></td></tr></table></figure><p>4）从库启动 slave 线程，并检查</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 188.188.4.210</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000004</span><br><span class="line">          Read_Master_Log_Pos: 856</span><br><span class="line">               Relay_Log_File: mysql-relay-log.000002</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000004</span><br><span class="line">             Slave_IO_Running: Yes           # Slave这两项必须为Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line"></span><br><span class="line">mysql&gt; show processlist\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">     Id: 2</span><br><span class="line">   User: root</span><br><span class="line">   Host: localhost</span><br><span class="line">     db: NULL</span><br><span class="line">Command: Query</span><br><span class="line">   Time: 0</span><br><span class="line">  State: starting</span><br><span class="line">   Info: show processlist</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">     Id: 3</span><br><span class="line">   User: system user</span><br><span class="line">   Host: </span><br><span class="line">     db: NULL</span><br><span class="line">Command: Connect</span><br><span class="line">   Time: 44</span><br><span class="line">  State: Waiting for master to send event</span><br><span class="line">   Info: NULL</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">     Id: 4</span><br><span class="line">   User: system user</span><br><span class="line">   Host: </span><br><span class="line">     db: NULL</span><br><span class="line">Command: Connect</span><br><span class="line">   Time: 44</span><br><span class="line">  State: Slave has read all relay log; waiting for more updates</span><br><span class="line">   Info: NULL</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>如出现问题，就先停止 Slave，查看日志并根据信息解决后再开启 Slave</p><p><strong>注意：如果前面对 【主库】做了锁表操作，此时需要： 【 对 Master 解除 table（表）的锁定： “unlock tables;” 】</strong></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Nacos集群</title>
      <link href="/2022/04/14/alibaba/nacos/cenots7%E9%83%A8%E7%BD%B2_Nacos%E9%9B%86%E7%BE%A4/"/>
      <url>/2022/04/14/alibaba/nacos/cenots7%E9%83%A8%E7%BD%B2_Nacos%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p>集群部署架构参照 <a href="https://nacos.io/zh-cn/docs/cluster-mode-quick-start.html">Nacos 官网</a>，在开源的时候把所有服务列表放到一个 vip 下，然后挂到一个域名下</p><ul><li><a href="http://ip1/">http://ip1</a>:port&#x2F;openAPI 直连 ip 模式，机器挂则需要修改 ip 才可以使用</li><li><a href="http://slb/">http://SLB</a>:port&#x2F;openAPI 挂载 SLB 模式(内网 SLB，不可暴露到公网，以免带来安全风险)，直连 SLB 即可，下面挂 server 真实 ip，可读性不好</li><li><a href="http://nacos.com/">http://nacos.com</a>:port&#x2F;openAPI 域名 + SLB 模式(内网 SLB，不可暴露到公网，以免带来安全风险)，可读性好，而且换 ip 方便，推荐模式</li></ul><p><img src="https://nacos.io/img/deployDnsVipMode.jpg" alt="img"></p><table><thead><tr><th>主机名</th><th>IP 地址</th><th>角色</th><th>服务</th></tr></thead><tbody><tr><td>ssd-dev01</td><td>188.188.4.210</td><td>nacos,mysql-master,nginx</td><td>nacos,mysql,jdk,maven,nginx</td></tr><tr><td>ssd-dev02</td><td>188.188.4.211</td><td>nacos,mysql-slave</td><td>nacos,mysql,jdk,maven</td></tr><tr><td>ssd-dev03</td><td>188.188.4.212</td><td>nacos,mysql-slave</td><td>nacos,mysql,jdk,maven</td></tr></tbody></table><h4 id="预备环境准备"><a href="#预备环境准备" class="headerlink" title="预备环境准备"></a>预备环境准备</h4><ol><li>64 bit OS Linux&#x2F;Unix&#x2F;Mac，推荐使用 Linux 系统</li><li>64 bit JDK 1.8+</li><li>Maven 3.2.x+</li><li>3个或3个以上Nacos节点才能构成集群</li></ol><h3 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.oracle.com/otn/java/jdk/8u291-b10/d7fc238d0cbf4b0dac67be84580cfb4b/jdk-8u291-linux-x64.tar.gz</span><br><span class="line">$ tar -xf jdk-8u291-linux-x64.tar.gz -C /usr/local/ </span><br><span class="line">$ <span class="built_in">mv</span> /usr/local/jdk1.8.0_291 /usr/local/java</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">JRE_HOME=/usr/local/java/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz</span><br><span class="line">$ tar -xf apache-maven-3.8.1-bin.tar.gz -C /usr/local/ &amp;&amp; <span class="built_in">mv</span> /usr/local/apache-maven-3.8.1 /usr/local/maven</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># maven</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:/usr/local/mysql/bin:<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><strong>修改 Maven 的 Settings.xml</strong>，配置参考 <a href="https://developer.aliyun.com/mvn/guide">阿里云云效 Maven</a> 使用指南</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /usr/local/maven/repo                            //创建本地仓库目录</span><br><span class="line">$ vim /usr/local/maven/conf/settings.xml</span><br><span class="line">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line">  --&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/usr/local/maven/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span>  //取消注释并修改本地仓库位置</span><br><span class="line">  </span><br><span class="line"># 添加阿里云公共仓库</span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><p>1）删除旧版本的 MySQL 及相关配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa mysql</span><br><span class="line">$ rpm -qa | grep mariadb </span><br><span class="line">$ rpm -e --nodeps mariadb-libs  <span class="comment"># 文件名</span></span><br><span class="line">$ <span class="built_in">rm</span> -rf /etc/my.cnf</span><br></pre></td></tr></table></figure><p>2）安装相关依赖环境并下载源码包(自行下载上传)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/c0ba76101ab1f2a92413ab7f929c8356.png" alt="image-20220401102821310"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install ncurses-devel cmake libaio-devel openssl-devel</span><br></pre></td></tr></table></figure><p>3）解压目录并根据需求进行配置安装(基于 cmake 进行配置)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xf mysql-boost-5.7.37.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> mysql-5.7.37</span><br><span class="line"></span><br><span class="line">$ cmake . \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/mysql/data \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DEXTRA_CHARSETS=all \</span><br><span class="line">-DDEFAULT_CHARSET=utf8mb4 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8mb4_general_ci \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_BOOST=boost</span><br><span class="line"></span><br><span class="line">$ make -j2 &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>4）数据初始化，创建一个数据库专用账号 mysql(其所属组也为 mysql)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd -r -s /sbin/nologin mysql</span><br><span class="line">$ <span class="built_in">id</span> mysql</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建mysql-files目录并修改权限</span></span><br><span class="line">$ <span class="built_in">mkdir</span> mysql-files</span><br><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql /usr/local/mysql</span><br><span class="line">$ <span class="built_in">chmod</span> 750 mysql-files</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库初始化操作，记录密码</span></span><br><span class="line">$ bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line">...</span><br><span class="line">2022-04-03T02:43:31.295939Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: e!m<span class="comment">#BqYjf9OG</span></span><br></pre></td></tr></table></figure><p>5）拷贝 mysql.server 脚本到 <code>/etc/init.d</code> 目录，编写 MySQL 配置文件，然后启动数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">$ service mysql start</span><br><span class="line">Starting MySQL.Logging to <span class="string">&#x27;/usr/local/mysql/data/Dev-Pc.err&#x27;</span>.</span><br><span class="line"> SUCCESS!</span><br><span class="line"></span><br><span class="line">$ vim my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">$ service mysql restart</span><br><span class="line">Shutting down MySQL.. SUCCESS! </span><br><span class="line">Starting MySQL. SUCCESS!</span><br></pre></td></tr></table></figure><p>6）重置管理员密码并设置安全配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ bin/mysqladmin -uroot password &#x27;newpassword&#x27; -p</span><br><span class="line">Enter password:e!m#BqYjf9OG</span><br><span class="line">mysqladmin: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.</span><br><span class="line"></span><br><span class="line"># 重置后测试是否成功登录</span><br><span class="line">$ bin/mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.7.37 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2022, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; exit</span><br><span class="line"></span><br><span class="line">$ bin/mysql_secure_installation</span><br><span class="line"># 第一项回车跳过外，其他都选y</span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Enter password for user root: </span><br><span class="line">The &#x27;validate_password&#x27; plugin is installed on the server.</span><br><span class="line">The subsequent steps will run with the existing configuration</span><br><span class="line">of the plugin.</span><br><span class="line">Using existing password for root.</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50 </span><br><span class="line">Change the password for root ? ((Press y|Y for Yes, any other key for No) : </span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : y</span><br><span class="line">Success.</span><br></pre></td></tr></table></figure><p>7）添加服务至开机启动并配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chkconfig --add mysql</span><br><span class="line">$ chkconfig mysql on</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="配置主从"><a href="#配置主从" class="headerlink" title="配置主从"></a>配置主从</h3><h4 id="Master"><a href="#Master" class="headerlink" title="Master"></a>Master</h4><p>1）编辑主节点数据库配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/mysql/my.cnf          <span class="comment"># 一般默认为/etc/my.cnf，具体以实际环境为准</span></span><br><span class="line">[mysqld]</span><br><span class="line">lower_case_table_names=1               <span class="comment"># 表名不区分大小写</span></span><br><span class="line">binlog_format=MIXED                    <span class="comment"># 复制模式，日志格式</span></span><br><span class="line"></span><br><span class="line">server-id=1                            <span class="comment"># [必须]服务器唯一ID,默认是1，多主从时注意不可重复</span></span><br><span class="line">log-bin=mysql-bin                      <span class="comment"># 开启二进制日志，可指定存储位置，默认mysql目录</span></span><br><span class="line">log-bin-index=mysql-bin.index          <span class="comment"># 打开二进制日志文件索引</span></span><br><span class="line"></span><br><span class="line">//以下非必须项，仅供参考</span><br><span class="line">sync_binlog=1                          <span class="comment"># 控制数据库binlog刷到磁盘上，0不控制，性能最好，1每次事务提交都会刷到日志文件中，性能最差但最安全</span></span><br><span class="line">expire_logs_days=7                     <span class="comment"># 保留天数，以防日志占满磁盘，默认为0，表示不自动删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#binlog-do-db=repldb                    # 需同步的二进制数据库名，可配置多个</span></span><br><span class="line">binlog-ignore-db=mysql                 <span class="comment"># 不同步的数据库，可配置多个</span></span><br><span class="line">binlog-ignore-db=information_schema    </span><br><span class="line">binlog-ignore-db=performation_schema</span><br><span class="line">binlog-ignore-db=sys</span><br><span class="line"></span><br><span class="line">auto-increment-offset=1                <span class="comment"># 表中自增字段每次的偏移量</span></span><br><span class="line">auto-increment-increment=1             <span class="comment"># 表中自增字段每次的自增量</span></span><br><span class="line">slave-skip-errors=all                  <span class="comment"># 跳过从库错误</span></span><br></pre></td></tr></table></figure><p>2）重启加载配置，查看是否正常生成 <code>log-bin</code> 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart mysql &amp;&amp; systemctl status mysql</span><br><span class="line"></span><br><span class="line">$ mysql -uroot -p</span><br><span class="line"><span class="comment"># 查看二进制日志是否开启</span></span><br><span class="line">mysql&gt; show global variables like <span class="string">&#x27;%log%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220415170520671.png" alt="image-20220415170520671"></p><p>3）在 Master 节点上创建复制权限的用户 <strong>主节点上创建用户–&gt;允许 188.188 网段的 IP，通过 slave 访问主节点</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE USER &#x27;slave&#x27;@&#x27;188.188.%.%&#x27; IDENTIFIED BY &#x27;slavepassword&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant replication slave on *.* to &#x27;slave&#x27;@&#x27;188.188.%.%&#x27; identified by &#x27;slavepassword&#x27;;</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p><font color=red>注意：如条件允许，为了数据同步一致，建议先锁定一下表</font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; flush tables with read lock;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show master status;</span><br><span class="line">+------------------+----------+--------------+--------------------------------------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB                                 | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+--------------------------------------------------+-------------------+</span><br><span class="line">| mysql-bin.000001 |      856 |              | mysql,information_schema,performation_schema,sys |                   |</span><br><span class="line">+------------------+----------+--------------+--------------------------------------------------+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>5）备份主库，并传到从库恢复数据，此为测试环境可选择性操作，生产环境按需操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysqldump -uroot -p -A &gt; /tmp/all.sql</span><br><span class="line">$ <span class="built_in">ls</span> /tmp/</span><br><span class="line">all.sql</span><br><span class="line">$ scp /tmp/all.sql root@188.188.4.211:/tmp</span><br></pre></td></tr></table></figure><h4 id="Slave"><a href="#Slave" class="headerlink" title="Slave"></a>Slave</h4><blockquote><p>一主多从，配置一样！注意 server-id 唯一即可；</p></blockquote><p>1）编辑从节点数据库配置文件</p><ul><li>188.188.4.211：server-id&#x3D;2</li><li>188.188.4.212：server-id&#x3D;3</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">lower_case_table_names=1               <span class="comment"># 表名不区分大小写</span></span><br><span class="line">server-id=2                            <span class="comment"># [必须]服务器唯一ID,默认是1，多主从时注意不可重复</span></span><br><span class="line"><span class="comment">#log-bin=mysql-bin                     # 开启二进制日志(从节点如后面无级联的从节点，可以不开，避免无谓资源消耗)</span></span><br><span class="line">relay-log=mysql-relay-log              <span class="comment"># 打开从服务器中继日志文件</span></span><br><span class="line">relay-log-index=mysql-relay-log.index  <span class="comment"># 打开从服务器中继日志文件索引</span></span><br></pre></td></tr></table></figure><p>2）导入数据库数据，重启加载配置(数据导入按需操作)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p &lt; /tmp/all.sql</span><br><span class="line">$ systemctl restart mysql &amp;&amp; systemctl status mysql</span><br></pre></td></tr></table></figure><p>3）在从库进行，执行同步 SQL 语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CHANGE MASTER TO </span><br><span class="line">    -&gt; MASTER_HOST=&#x27;188.188.4.210&#x27;,           # 主库IP地址</span><br><span class="line">    -&gt; MASTER_PORT=3306,                      # 主库端口                   </span><br><span class="line">    -&gt; MASTER_USER=&#x27;slave&#x27;,                   # 主库用于复制的用户    </span><br><span class="line">    -&gt; MASTER_PASSWORD=&#x27;slavepassword&#x27;,       # 密码</span><br><span class="line">    -&gt; MASTER_LOG_FILE=&#x27;mysql-bin.000001&#x27;,    # 主库日志名</span><br><span class="line">    -&gt; MASTER_LOG_POS=856;                    # 主库日志偏移量，即从何处开始复制</span><br><span class="line">Query OK, 0 rows affected, 2 warnings (0.01 sec)</span><br><span class="line"></span><br><span class="line"># 操作方法一样，任选其一</span><br><span class="line">mysql&gt; CHANGE MASTER TO MASTER_HOST=&#x27;188.188.4.210&#x27;,MASTER_PORT=3306,MASTER_USER=&#x27;slave&#x27;,MASTER_PASSWORD=&#x27;slavepassword&#x27;,MASTER_LOG_FILE=&#x27;mysql-bin.000001&#x27;,MASTER_LOG_POS=856;</span><br></pre></td></tr></table></figure><p>4）从库启动 slave 线程，并检查</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; start slave;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show slave status\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 188.188.4.210</span><br><span class="line">                  Master_User: slave</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000001</span><br><span class="line">          Read_Master_Log_Pos: 856</span><br><span class="line">               Relay_Log_File: mysql-relay-log.000001</span><br><span class="line">                Relay_Log_Pos: 320</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000001</span><br><span class="line">             Slave_IO_Running: Yes           # Slave这两项必须为Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p><strong>注意：如果前面对 【主库】做了锁表操作，此时需要： 【 对 Master 解除 table（表）的锁定： “unlock tables;” 】</strong></p><h3 id="安装-Nacos"><a href="#安装-Nacos" class="headerlink" title="安装 Nacos"></a>安装 Nacos</h3><blockquote><p>所有节点操作步骤一致</p></blockquote><p>1）在 GitHub 上下载编译好的 nacos 安装包，下载地址: <a href="https://github.com/alibaba/nacos/releases">Release</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/alibaba/nacos/releases/download/2.0.4/nacos-server-2.0.4.tar.gz</span><br><span class="line">$ tar -xvf nacos-server-2.0.4.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><p>2）登录 MySQL Master 节点，创建数据库并初始化 <a href="https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql">SQL 数据源</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create database nacos_db character set utf8 collate utf8_bin;</span><br><span class="line">mysql&gt; create user &#x27;nacos&#x27;@&#x27;%&#x27; identified by &#x27;nacos&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on nacos_db.* to &#x27;nacos&#x27;@&#x27;%&#x27;;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line"></span><br><span class="line"># 切换数据库，执行nacos初始化数据脚本</span><br><span class="line">mysql&gt; use nacos_db;</span><br><span class="line">mysql&gt; source /usr/local/nacos/conf/nacos-mysql.sql;</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| nacos_db           |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>3）所有节点配置 nacos 后端数据库，在 nacos 的 conf 目录下修改 <a href="https://github.com/alibaba/nacos/blob/master/distribution/conf/application.properties">application.properties 配置文件</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nacos/conf/application.properties</span><br><span class="line"><span class="comment">#*************** Config Module Related Configurations ***************#</span></span><br><span class="line"><span class="comment">### If use MySQL as datasource:</span></span><br><span class="line"><span class="comment"># spring.datasource.platform=mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Count of DB:</span></span><br><span class="line"><span class="comment"># db.num=1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Connect URL of DB:</span></span><br><span class="line"><span class="comment"># db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment"># db.user.0=nacos</span></span><br><span class="line"><span class="comment"># db.password.0=nacos</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据教程提示进行修改</span></span><br><span class="line">spring.datasource.platform=mysql</span><br><span class="line">db.num=1</span><br><span class="line">db.url.0=jdbc:mysql://188.188.4.210:3306/nacos_db?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="literal">true</span>&amp;useUnicode=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span>&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">db.user.0=nacos</span><br><span class="line">db.password.0=nacos</span><br></pre></td></tr></table></figure><p>4）在 nacos 的解压目录 <code>nacos/conf</code> 目录下，复制 <code>example</code> 作为 nacos 的配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/nacos/conf/</span><br><span class="line">$ <span class="built_in">cp</span> cluster.conf.example cluster.conf</span><br><span class="line">$ vim cluster.conf</span><br><span class="line"><span class="comment"># 修改文件内节点信息，ip:port</span></span><br><span class="line">188.188.4.210:8848</span><br><span class="line">188.188.4.211:8848</span><br><span class="line">188.188.4.212:8848</span><br></pre></td></tr></table></figure><p>5）启动服务并测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh /usr/local/nacos/bin/startup.sh</span><br><span class="line">/usr/local/java/bin/java -Djava.ext.dirs=/usr/local/java/jre/lib/ext:/usr/local/java/lib/ext  -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/usr/local/nacos/logs/java_heapdump.hprof -XX:-UseLargePages -Dnacos.member.list= -Xloggc:/usr/local/nacos/logs/nacos_gc.log -verbose:gc -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintGCTimeStamps -XX:+UseGCLogFileRotation -XX:NumberOfGCLogFiles=10 -XX:GCLogFileSize=100M -Dloader.path=/usr/local/nacos/plugins/health,/usr/local/nacos/plugins/cmdb,/usr/local/nacos/plugins/selector -Dnacos.home=/usr/local/nacos -jar /usr/local/nacos/target/nacos-server.jar  --spring.config.additional-location=file:/usr/local/nacos/conf/ --logging.config=/usr/local/nacos/conf/nacos-logback.xml --server.max-http-header-size=524288</span><br><span class="line">nacos is starting with cluster</span><br><span class="line">nacos is starting，you can check the /usr/local/nacos/logs/start.out</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">tail</span> -f /usr/local/nacos/logs/start.out</span><br><span class="line">2022-04-16 17:40:05,214 INFO Nacos is starting...</span><br><span class="line">2022-04-16 17:40:06,215 INFO Nacos is starting...</span><br><span class="line">2022-04-16 17:40:07,217 INFO Nacos is starting...</span><br><span class="line">2022-04-16 17:40:08,235 INFO Nacos is starting...</span><br><span class="line">2022-04-16 17:40:08,282 INFO Nacos started successfully <span class="keyword">in</span> cluster mode. use external storage</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">tail</span> -f /usr/local/nacos/logs/nacos.log</span><br><span class="line">2022-04-16 17:40:15,140 INFO [Cluster-188.188.4.211:8848] RpcClient init, ServerListFactory = com.alibaba.nacos.core.cluster.remote.ClusterRpcClientProxy<span class="variable">$1</span></span><br><span class="line">2022-04-16 17:40:15,141 INFO [Cluster-188.188.4.211:8848] Try to connect to server on start up, server: &#123;serverIp = <span class="string">&#x27;188.188.4.211&#x27;</span>, server main port = 8848&#125;</span><br><span class="line">2022-04-16 17:40:15,253 INFO [Cluster-188.188.4.211:8848] Success to connect to server [188.188.4.211:8848] on start up, connectionId = 1650102015144_188.188.4.210_16346</span><br><span class="line">2022-04-16 17:40:15,254 INFO [Cluster-188.188.4.211:8848] Register server push request handler:com.alibaba.nacos.common.remote.client.RpcClient<span class="variable">$ConnectResetRequestHandler</span></span><br><span class="line">2022-04-16 17:40:15,254 INFO [Cluster-188.188.4.211:8848] Register server push request handler:com.alibaba.nacos.common.remote.client.RpcClient$$Lambda<span class="variable">$790</span>/669957443</span><br></pre></td></tr></table></figure><p>6）打开浏览器访问 nacos 页面 <code>http://188.188.4.210:8848/nacos</code>，默认账密 <code>nacos/nacos</code></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220416174338774.png" alt="image-20220416174338774"></p><p>7）配置 systemd 管理 nacos</p><p><strong>注：</strong>虽然系统已配置了 java 环境，并且直接调用 <code>startup.sh</code> 也能成功启动，但使用服务 <code>service</code> 就无法启动，原因是服务脚本的环境与系统环境变量不能共享</p><ul><li>方法一：服务文件加载指定的 Java 环境</li><li>方法二：配置文件指定 Java 环境</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 nacos 服务运行用户</span></span><br><span class="line">$ useradd -s /sbin/nologin -M nacos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改 nacos 目录权限</span></span><br><span class="line">$ <span class="built_in">chown</span> -R nacos:nacos /usr/local/nacos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件，注释并增加实际java路径</span></span><br><span class="line">[ ! -e <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/bin/java&quot;</span> ] &amp;&amp; JAVA_HOME=/usr/local/java</span><br><span class="line"><span class="comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=$HOME/jdk/java</span></span><br><span class="line"><span class="comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/usr/java</span></span><br><span class="line"><span class="comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; JAVA_HOME=/opt/taobao/java</span></span><br><span class="line"><span class="comment">#[ ! -e &quot;$JAVA_HOME/bin/java&quot; ] &amp;&amp; unset JAVA_HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 service 文件</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt; /usr/lib/systemd/system/nacos.service &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=nacos</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">Environment=&quot;JAVA_HOME=/usr/local/java&quot;</span></span><br><span class="line"><span class="string">ExecStart=/usr/local/nacos/bin/startup.sh</span></span><br><span class="line"><span class="string">ExecReload=/usr/local/nacos/bin/shutdown.sh</span></span><br><span class="line"><span class="string">ExecStop=/usr/local/nacos/bin/shutdown.sh</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string">User=nacos</span></span><br><span class="line"><span class="string">Group=nacos</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now nacos.service &amp;&amp; systemctl status nacos</span><br></pre></td></tr></table></figure><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载依赖并编辑安装</span></span><br><span class="line">$ yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class="line">$ wget http://nginx.org/download/nginx-1.21.4.tar.gz</span><br><span class="line">$ tar -xf nginx-1.21.4.tar.gz &amp;&amp; <span class="built_in">cd</span> nginx-1.21.4</span><br><span class="line">$ ./configure --prefix=/usr/local/nginx </span><br><span class="line">$ make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置关机自启</span></span><br><span class="line">$ vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now nginx &amp;&amp; systemctl status nginx &amp;&amp; systemctl status nginx</span><br></pre></td></tr></table></figure><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li>单节点 Nginx 轮询负载均衡，4.210 安装并配置 Nginx 代理后端 Nacos 服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/local/nginx/conf/nginx.conf /usr/local/nginx/conf/nginx.conf.bak.$(<span class="built_in">date</span> +%F_%T)</span><br><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment"># 增加一行</span></span><br><span class="line">include /usr/local/nginx/vhosts/*.conf;</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/nginx/vhosts/nacos.conf</span><br><span class="line">upstream  nacos-servers &#123;</span><br><span class="line">    server 188.188.4.210:8848;</span><br><span class="line">    server 188.188.4.211:8848;</span><br><span class="line">    server 188.188.4.212:8848;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  127.0.0.1;</span><br><span class="line">   <span class="comment">#server_name  nacos.yuikuen.top; 域名配置，自行选择，可忽略</span></span><br><span class="line">        </span><br><span class="line">    location /nacos &#123;</span><br><span class="line">        proxy_pass http://nacos-servers;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>:<span class="variable">$server_port</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Real-PORT <span class="variable">$remote_port</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220418143641711.png" alt="image-20220418143641711"></p><p><strong>参考文献</strong></p><p><a href="https://blog.59izt.com/2022/04/12/232-nacos-%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/#more">Nacos 集群部署</a></p>]]></content>
      
      
      <categories>
          
          <category> springcloudalibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_v1.23.5+(Containerd)</title>
      <link href="/2022/04/09/kubernetes/K8s%E9%83%A8%E7%BD%B2_v1.23.5+(Containerd)/"/>
      <url>/2022/04/09/kubernetes/K8s%E9%83%A8%E7%BD%B2_v1.23.5+(Containerd)/</url>
      
        <content type="html"><![CDATA[<h3 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h3><blockquote><p>Kubernetes v1.24 将 2022&#x2F;04 正式发布，DockerShim 将被移除，但现 Github 最新版本为 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.24.md#v1240-beta0">v1.24.0-beta.0</a>，在此就以 <a href="https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.23.md#v1235">v1.23.5</a> 为例安装 Containerd，后期再升级 v1.24 版本</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220409174542367.png" alt="image-20220409174542367"></p><table><thead><tr><th>主机名</th><th>IP 地址</th><th>组件</th></tr></thead><tbody><tr><td>k8s-master-lb</td><td>188.188.4.120</td><td>keepalived IP(VIP)</td></tr><tr><td>k8s-master01~03</td><td>188.188.4.121~123</td><td>kubelet,kube-proxy,kube-apiserver,kube-controller-manager,kube-scheduler,etcd,containerd</td></tr><tr><td>k8s-node01</td><td>188.188.4.124~125</td><td>kubelet,kube-proxy,docker</td></tr></tbody></table><table><thead><tr><th>配置信息</th><th>备注</th></tr></thead><tbody><tr><td>Platform 版本</td><td>ESXI 6.7.0</td></tr><tr><td>System 版本</td><td>CentOS-7.9-Minimal</td></tr><tr><td>Runtime 版本</td><td>Containerd v1.6.2</td></tr><tr><td>Pod 网段</td><td>10.16.0.0&#x2F;12</td></tr><tr><td>Service 网段</td><td>120.96.0.0&#x2F;16</td></tr></tbody></table><p><strong>注：宿主机网段、K8s Service网段、Pod网段不能重复</strong></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p><em>安装说明：如未注明在哪个节点执行，默认为全部节点都需要操作；</em></p><ul><li>安装常用工具</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install wget jq psmisc lrzsz vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git expect -y</span><br></pre></td></tr></table></figure><ul><li>配置 Hostname &amp; Hosts</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 各节点修改hostname</span></span><br><span class="line">$ hostnamectl set-hostname k8s-master01 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname k8s-master02 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname k8s-master03 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname k8s-node01 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname k8s-node02 &amp;&amp; bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置请按实际分配，此仅供参考</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">188.188.4.121 k8s-master01  # 6C10G 40G</span></span><br><span class="line"><span class="string">188.188.4.122 k8s-master02  # 6C10G 40G</span></span><br><span class="line"><span class="string">188.188.4.123 k8s-master03  # 6C10G 40G</span></span><br><span class="line"><span class="string">188.188.4.120 k8s-master-lb # VIP虚拟IP不占用机器资源，如果不是高可用集群，该IP为Master01的IP</span></span><br><span class="line"><span class="string">188.188.4.124 k8s-node01    # 4C10G 40G</span></span><br><span class="line"><span class="string">188.188.4.125 k8s-node02    # 4C10G 40G</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ul><li>设置阿里云源</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">$ yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">$ sed -i -e <span class="string">&#x27;/mirrors.cloud.aliyuncs.com/d&#x27;</span> -e <span class="string">&#x27;/mirrors.aliyuncs.com/d&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure><ul><li>关闭防火墙、Selinux、Swap(CentOS7 需要关闭NetworkManager)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld NetworkManager dnsmasq</span><br><span class="line"></span><br><span class="line">$ setenforce 0</span><br><span class="line">$ sed -i <span class="string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/sysconfig/selinux</span><br><span class="line">$ sed -i <span class="string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久关闭虚拟内存，fstab注释swap</span></span><br><span class="line">$ swapoff -a &amp;&amp; sysctl -w vm.swappiness=0</span><br><span class="line">$ sed -ri <span class="string">&#x27;/^[^#]*swap/s@^@#@&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><ul><li>安装 ntpdate，同步时间</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -ivh http://mirrors.wlnmp.com/centos/wlnmp-release-centos.noarch.rpm</span><br><span class="line">$ yum install ntpdate -y</span><br><span class="line">$ <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span><br><span class="line">$ ntpdate time2.aliyun.com</span><br><span class="line">$ crontab -e</span><br><span class="line"><span class="comment"># 加入到crontab</span></span><br><span class="line">*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com</span><br></pre></td></tr></table></figure><ul><li>配置 limit</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -SHn 65535</span><br><span class="line">$ vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 末尾添加如下内容</span></span><br><span class="line">* soft nofile 655360</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft <span class="built_in">nproc</span> 655350</span><br><span class="line">* hard <span class="built_in">nproc</span> 655350</span><br><span class="line">* soft memlock unlimited</span><br><span class="line">* hard memlock unlimited</span><br></pre></td></tr></table></figure><ul><li>配置密钥：Master01 节点免密钥登录其他节点(发放至其他节点作免密钥登录，Master01 即可集群管理)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span> -f /root/.ssh/id_rsa</span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> k8s-master01 k8s-master02 k8s-master03 k8s-node01 k8s-node02;<span class="keyword">do</span></span><br><span class="line">expect -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">spawn ssh-copy-id -i /root/.ssh/id_rsa.pub root@<span class="variable">$i</span></span></span><br><span class="line"><span class="string">        expect &#123;</span></span><br><span class="line"><span class="string">                \&quot;*yes/no*\&quot; &#123;send \&quot;yes\r\&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">                \&quot;*password*\&quot; &#123;send \&quot;password\r\&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">                \&quot;*Password*\&quot; &#123;send \&quot;password\r\&quot;;&#125;</span></span><br><span class="line"><span class="string">        &#125; &quot;</span></span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure><h4 id="内核升级"><a href="#内核升级" class="headerlink" title="内核升级"></a>内核升级</h4><blockquote><p>在 Kubernetes 1.18 版本出现 DNS 解析异常，原因是最新 Kubernetes 使用 IPVS 模块比较新，需要内核系统版本支持，所以需要升级为最新内核</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级系统，忽略内核升级</span></span><br><span class="line">$ yum update -y --exclude=kernel* </span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过下载kernel image的rpm包进行安装</span></span><br><span class="line">$ rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># ELRepo中有两个内核选项，kernel-lt(长期支持版本)，kernel-ml(主线最新版本)，可自行选择；</span></span><br><span class="line">$ yum -y install kernel-ml* --enablerepo=elrepo-kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内核顺序</span></span><br><span class="line">$ grub2-set-default 0 &amp;&amp; grub2-mkconfig -o /etc/grub2.cfg</span><br><span class="line">$ grubby --args=<span class="string">&quot;user_namespace.enable=1&quot;</span> --update-kernel=<span class="string">&quot;<span class="subst">$(grubby --default-kernel)</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用下面命令看看确认下是否启动默认内核并指向上面安装的内核</span></span><br><span class="line">$ grubby --default-kernel &amp;&amp; reboot now</span><br></pre></td></tr></table></figure><ul><li>安装 ipvsadm，配置 ipvs 模块(在内核4.19+版本nf_conntrack_ipv4已经改为nf_conntrack， 4.18以下使用nf_conntrack_ipv4即可)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install ipvsadm ipset sysstat conntrack libseccomp -y</span><br><span class="line">$ vim /etc/modules-load.d/ipvs.conf </span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_lc</span><br><span class="line">ip_vs_wlc</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_lblc</span><br><span class="line">ip_vs_lblcr</span><br><span class="line">ip_vs_dh</span><br><span class="line">ip_vs_sh</span><br><span class="line">ip_vs_fo</span><br><span class="line">ip_vs_nq</span><br><span class="line">ip_vs_sed</span><br><span class="line">ip_vs_ftp</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack</span><br><span class="line">ip_tables</span><br><span class="line">ip_set</span><br><span class="line">xt_set</span><br><span class="line">ipt_set</span><br><span class="line">ipt_rpfilter</span><br><span class="line">ipt_REJECT</span><br><span class="line">ipip</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now systemd-modules-load.service</span><br></pre></td></tr></table></figure><ul><li>开启 k8s 集群中必须的内核参数</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">fs.may_detach_mounts = 1</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.route_localnet = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vm.panic_on_oom=0</span></span><br><span class="line"><span class="string">fs.inotify.max_user_watches=89100</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string">net.netfilter.nf_conntrack_max=2310720</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_time = 600</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_probes = 3</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_intvl =15</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_tw_buckets = 36000</span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_reuse = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_orphans = 327680</span></span><br><span class="line"><span class="string">net.ipv4.tcp_orphan_retries = 3</span></span><br><span class="line"><span class="string">net.ipv4.tcp_syncookies = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="line"><span class="string">net.ipv4.ip_conntrack_max = 65536</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="line"><span class="string">net.ipv4.tcp_timestamps = 0</span></span><br><span class="line"><span class="string">net.core.somaxconn = 16384</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="comment"># 配置完内核后，重启服务器，以保证正常加载</span></span><br><span class="line">$ sysctl --system &amp;&amp; reboot now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查加载情况</span></span><br><span class="line">$ lsmod | grep --color=auto -e ip_vs -e nf_conntrack</span><br></pre></td></tr></table></figure><h3 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h3><blockquote><p>安装集群中所需要用到的 Runtime 组件，如 Docker、Containerd等，实例以 Containerd 为例，Docker 选择性安装(不启动服务)</p></blockquote><h4 id="Docker-Runtime"><a href="#Docker-Runtime" class="headerlink" title="Docker Runtime"></a>Docker Runtime</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看现可用版本</span></span><br><span class="line">$ yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line">$ yum install docker-ce-20.10.* docker-cli-20.10.* -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新版本Kubelet官方建议使用Systemd，因此将Docker的CgroupDriver改为Systemd</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /etc/docker/</span><br><span class="line">$ <span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now docker &amp;&amp; systemctl status docker</span><br></pre></td></tr></table></figure><h4 id="Containerd-Runtime"><a href="#Containerd-Runtime" class="headerlink" title="Containerd Runtime"></a>Containerd Runtime</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum list | grep containerd</span><br><span class="line">containerd.io.x86_64                        1.5.11-3.1.el7             docker-ce-stable</span><br><span class="line">$ yum -y install containerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置Containerd所需的模块、内核设置</span></span><br><span class="line">$ <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/modules-load.d/containerd.conf</span></span><br><span class="line"><span class="string">overlay</span></span><br><span class="line"><span class="string">br_netfilter</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ modprobe -- overlay</span><br><span class="line">$ modprobe -- br_netfilter</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ sysctl --system</span><br></pre></td></tr></table></figure><p>生成 Containerd 的默认配置文件 <code>/etc/containerd/config.toml</code>，并将 Cgroup 改为 Systemd，和修改镜像下载地址</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /etc/containerd</span><br><span class="line">$ containerd config default | <span class="built_in">tee</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改k8s.gcr.io/pause:3.6为registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5并修改SystemdCgroup为true</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s#k8s.gcr.io#registry.cn-hangzhou.aliyuncs.com/google_containers#g&#x27;</span> /etc/containerd/config.toml</span><br><span class="line">$ sed -i <span class="string">&#x27;s#SystemdCgroup = false#SystemdCgroup = true#g&#x27;</span> /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证是否已修改</span></span><br><span class="line">$ <span class="built_in">cat</span> /etc/containerd/config.toml | grep -i sandbox_image</span><br><span class="line">  sandbox_image = <span class="string">&quot;registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5&quot;</span></span><br><span class="line">$ <span class="built_in">cat</span> /etc/containerd/config.toml | grep -i SystemdCgroup</span><br><span class="line">  SystemdCgroup = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>启动服务并配置 crictl 客户端连接的运行时位置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now containerd</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> &gt; /etc/crictl.yaml &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">runtime-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">image-endpoint: unix:///run/containerd/containerd.sock</span></span><br><span class="line"><span class="string">timeout: 10</span></span><br><span class="line"><span class="string">debug: false</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ ctr version</span><br><span class="line">Client:</span><br><span class="line">  Version:  1.5.11</span><br><span class="line">  Revision: 3df54a852345ae127d1fa3092b95168e4a88e2f8</span><br><span class="line">  Go version: go1.17.8</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line">  Version:  1.5.11</span><br><span class="line">  Revision: 3df54a852345ae127d1fa3092b95168e4a88e2f8</span><br><span class="line">  UUID: d6ad552e-4bd8-498d-a4d1-ddedf391bc1b</span><br></pre></td></tr></table></figure><h3 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h3><p>**注意：选用 K8s 版本前，可查看 K8s CHANGELOG 文件，对照 Etcd 版本。如上述 etcd v3.50.x 有数据损坏的 Bug，在此就按官方介绍先安装旧版本 v3.4.x **</p><blockquote><p>提前创建所有程序目录</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /opt/cni/bin /etc/etcd/ssl /etc/kubernetes/pki /etc/kubernetes/manifests/ /etc/systemd/system/kubelet.service.d /var/lib/kubelet /var/log/kubernetes</span><br></pre></td></tr></table></figure><ul><li><strong>下载 kubernetes &amp; etcd 安装包文件</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220409152044570.png" alt="image-20220409152044570"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220409152736938.png" alt="image-20220409152736938"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master01节点操作即可</span></span><br><span class="line"><span class="comment"># 如无法clone，可使用https://gitee.com/yuikuen_yuen/k8s-install.git</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/; git <span class="built_in">clone</span> https://github.com/yuikuen/k8s-install.git</span><br><span class="line">$ <span class="built_in">cd</span> /root/k8s-install &amp;&amp; git checkout k8s-1.23.x</span><br><span class="line"></span><br><span class="line">$ wget https://dl.k8s.io/v1.23.5/kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">$ wget https://github.com/etcd-io/etcd/releases/download/v3.4.18/etcd-v3.4.18-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar -xf kubernetes-server-linux-amd64.tar.gz --strip-components=3 -C /usr/local/bin kubernetes/server/bin/kube&#123;<span class="built_in">let</span>,ctl,-apiserver,-controller-manager,-scheduler,-proxy&#125;</span><br><span class="line">$ tar -zxvf etcd-v3.4.18-linux-amd64.tar.gz --strip-components=1 -C /usr/local/bin etcd-v3.4.18-linux-amd64/etcd&#123;,ctl&#125;</span><br><span class="line"></span><br><span class="line">$ kubelet --version</span><br><span class="line">Kubernetes v1.23.5</span><br><span class="line">$ etcdctl version</span><br><span class="line">etcdctl version: 3.4.18</span><br><span class="line">API version: 3.4</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ MasterNodes=<span class="string">&#x27;k8s-master02 k8s-master03&#x27;</span></span><br><span class="line">$ WorkNodes=<span class="string">&#x27;k8s-node01 k8s-node02&#x27;</span></span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> <span class="variable">$MasterNodes</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$NODE</span>; </span><br><span class="line">  scp /usr/local/bin/kube&#123;<span class="built_in">let</span>,ctl,-apiserver,-controller-manager,-scheduler,-proxy&#125; <span class="variable">$NODE</span>:/usr/local/bin/; </span><br><span class="line">  scp /usr/local/bin/etcd* <span class="variable">$NODE</span>:/usr/local/bin/; </span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> <span class="variable">$WorkNodes</span>; <span class="keyword">do</span>     </span><br><span class="line">  scp /usr/local/bin/kube&#123;<span class="built_in">let</span>,-proxy&#125; <span class="variable">$NODE</span>:/usr/local/bin/ ; </span><br><span class="line"> <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载自签工具，生成证书</span></span><br><span class="line">$ wget <span class="string">&quot;https://pkg.cfssl.org/R1.2/cfssl_linux-amd64&quot;</span> -O /usr/local/bin/cfssl</span><br><span class="line">$ wget <span class="string">&quot;https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64&quot;</span> -O /usr/local/bin/cfssljson</span><br><span class="line">$ <span class="built_in">chmod</span> +x /usr/local/bin/cfssl /usr/local/bin/cfssljson</span><br></pre></td></tr></table></figure><h4 id="Etcd-证书"><a href="#Etcd-证书" class="headerlink" title="Etcd 证书"></a>Etcd 证书</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Master01节点生成Etcd证书，生成证书的CSR文件：证书签名请求文件，配置了一些域名、公司、单位</span></span><br><span class="line">$ <span class="built_in">cd</span> /root/k8s-install/pki</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成etcd CA证书和CA证书的key，注意hostname、profile参数要与证书(ca-config.json)设置对应</span></span><br><span class="line">$ cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare /etc/etcd/ssl/etcd-ca</span><br><span class="line">$ cfssl gencert \</span><br><span class="line">   -ca=/etc/etcd/ssl/etcd-ca.pem \</span><br><span class="line">   -ca-key=/etc/etcd/ssl/etcd-ca-key.pem \</span><br><span class="line">   -config=ca-config.json \</span><br><span class="line">   -hostname=127.0.0.1,k8s-master01,k8s-master02,k8s-master03,188.188.4.121,188.188.4.122,188.188.4.123 \</span><br><span class="line">   -profile=kubernetes \</span><br><span class="line">   etcd-csr.json | cfssljson -bare /etc/etcd/ssl/etcd</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ MasterNodes=<span class="string">&#x27;k8s-master02 k8s-master03&#x27;</span></span><br><span class="line">$ WorkNodes=<span class="string">&#x27;k8s-node01 k8s-node02&#x27;</span></span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> <span class="variable">$MasterNodes</span>; <span class="keyword">do</span></span><br><span class="line">    ssh <span class="variable">$NODE</span> <span class="string">&quot;mkdir -p /etc/etcd/ssl&quot;</span></span><br><span class="line">     <span class="keyword">for</span> FILE <span class="keyword">in</span> etcd-ca-key.pem  etcd-ca.pem  etcd-key.pem  etcd.pem; <span class="keyword">do</span></span><br><span class="line">       scp /etc/etcd/ssl/<span class="variable">$&#123;FILE&#125;</span> <span class="variable">$NODE</span>:/etc/etcd/ssl/<span class="variable">$&#123;FILE&#125;</span></span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line"> <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="k8s-组件证书"><a href="#k8s-组件证书" class="headerlink" title="k8s 组件证书"></a>k8s 组件证书</h4><blockquote><p>Master01 生成 k8s 证书【120.96.0.0&#x2F;16 是 k8s service 的网段，如需更改就要修改 120.96.0.1，如果不是高可用集群，188.188.3.130 为 Master01 的 IP】</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cfssl gencert -initca ca-csr.json | cfssljson -bare /etc/kubernetes/pki/ca</span><br></pre></td></tr></table></figure><ul><li>Apiserver</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cfssl gencert \</span><br><span class="line">  -ca=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  -ca-key=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">  -config=ca-config.json \</span><br><span class="line">  -hostname=120.96.0.1,188.188.4.120,127.0.0.1,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.cluster.local,188.188.4.121,188.188.4.122,188.188.4.123 \</span><br><span class="line">  -profile=kubernetes \</span><br><span class="line"> apiserver-csr.json | cfssljson -bare /etc/kubernetes/pki/apiserver</span><br></pre></td></tr></table></figure><ul><li>front-proxy-client：生成 apiserver 的聚合证书</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cfssl gencert -initca front-proxy-ca-csr.json | cfssljson -bare /etc/kubernetes/pki/front-proxy-ca </span><br><span class="line">$ cfssl gencert \</span><br><span class="line">  -ca=/etc/kubernetes/pki/front-proxy-ca.pem \</span><br><span class="line">  -ca-key=/etc/kubernetes/pki/front-proxy-ca-key.pem \</span><br><span class="line">  -config=ca-config.json   -profile=kubernetes \</span><br><span class="line"> front-proxy-client-csr.json | cfssljson -bare /etc/kubernetes/pki/front-proxy-client</span><br></pre></td></tr></table></figure><ul><li>controller-manage</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cfssl gencert \</span><br><span class="line">  -ca=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  -ca-key=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">  -config=ca-config.json \</span><br><span class="line">  -profile=kubernetes \</span><br><span class="line"> manager-csr.json | cfssljson -bare /etc/kubernetes/pki/controller-manager</span><br><span class="line"> </span><br><span class="line"><span class="comment"># set-cluster：设置一个集群项</span></span><br><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=https://188.188.4.120:8443 \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-credentials 设置一个用户项</span></span><br><span class="line">$ kubectl config set-credentials system:kube-controller-manager \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/controller-manager.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/controller-manager-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 设置一个环境项，一个上下文</span></span><br><span class="line">$ kubectl config set-context system:kube-controller-manager@kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-controller-manager \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用某个环境当做默认环境</span></span><br><span class="line">$ kubectl config use-context system:kube-controller-manager@kubernetes \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig</span><br></pre></td></tr></table></figure><ul><li>scheduler</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cfssl gencert \</span><br><span class="line">  -ca=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  -ca-key=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">  -config=ca-config.json \</span><br><span class="line">  -profile=kubernetes \</span><br><span class="line"> scheduler-csr.json | cfssljson -bare /etc/kubernetes/pki/scheduler</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-cluster：设置一个集群项</span></span><br><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=https://188.188.4.120:8443 \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-credentials 设置一个用户项</span></span><br><span class="line">$ kubectl config set-credentials system:kube-scheduler \</span><br><span class="line">  --client-certificate=/etc/kubernetes/pki/scheduler.pem \</span><br><span class="line">  --client-key=/etc/kubernetes/pki/scheduler-key.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个环境项，一个上下文</span></span><br><span class="line">$ kubectl config set-context system:kube-scheduler@kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=system:kube-scheduler \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 使用某个环境当做默认环境</span></span><br><span class="line">$ kubectl config use-context system:kube-scheduler@kubernetes \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br></pre></td></tr></table></figure><ul><li>admin</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cfssl gencert \</span><br><span class="line">    -ca=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">    -ca-key=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">    -config=ca-config.json \</span><br><span class="line">    -profile=kubernetes \</span><br><span class="line">    admin-csr.json | cfssljson -bare /etc/kubernetes/pki/admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-cluster：设置一个集群项</span></span><br><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">    --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">    --embed-certs=<span class="literal">true</span> \</span><br><span class="line">    --server=https://188.188.4.120:8443 \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/admin.kubeconfig</span><br><span class="line">    </span><br><span class="line"><span class="comment"># set-credentials 设置一个用户项</span></span><br><span class="line">$ kubectl config set-credentials kubernetes-admin \</span><br><span class="line">    --client-certificate=/etc/kubernetes/pki/admin.pem \</span><br><span class="line">    --client-key=/etc/kubernetes/pki/admin-key.pem \</span><br><span class="line">    --embed-certs=<span class="literal">true</span> \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/admin.kubeconfig</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 设置一个环境项，一个上下文</span></span><br><span class="line">$ kubectl config set-context kubernetes-admin@kubernetes \</span><br><span class="line">    --cluster=kubernetes \</span><br><span class="line">    --user=kubernetes-admin \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/admin.kubeconfig</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用某个环境当做默认环境</span></span><br><span class="line">$ kubectl config use-context kubernetes-admin@kubernetes \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/admin.kubeconfig</span><br></pre></td></tr></table></figure><ul><li><strong>创建 Secret，并将所有证书发至其他节点</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl genrsa -out /etc/kubernetes/pki/sa.key 2048</span><br><span class="line">$ openssl rsa -<span class="keyword">in</span> /etc/kubernetes/pki/sa.key -pubout -out /etc/kubernetes/pki/sa.pub</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> k8s-master02 k8s-master03; <span class="keyword">do</span> </span><br><span class="line">  <span class="keyword">for</span> FILE <span class="keyword">in</span> $(<span class="built_in">ls</span> /etc/kubernetes/pki | grep -v etcd); <span class="keyword">do</span> </span><br><span class="line">    scp /etc/kubernetes/pki/<span class="variable">$&#123;FILE&#125;</span> <span class="variable">$NODE</span>:/etc/kubernetes/pki/<span class="variable">$&#123;FILE&#125;</span>;</span><br><span class="line"> <span class="keyword">done</span>; </span><br><span class="line">  <span class="keyword">for</span> FILE <span class="keyword">in</span> admin.kubeconfig controller-manager.kubeconfig scheduler.kubeconfig; <span class="keyword">do</span> </span><br><span class="line">    scp /etc/kubernetes/<span class="variable">$&#123;FILE&#125;</span> <span class="variable">$NODE</span>:/etc/kubernetes/<span class="variable">$&#123;FILE&#125;</span>;</span><br><span class="line"> <span class="keyword">done</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看证书文件</span></span><br><span class="line">$ <span class="built_in">ls</span> /etc/kubernetes/pki/ |<span class="built_in">wc</span> -l</span><br><span class="line">23</span><br></pre></td></tr></table></figure><h3 id="高可用配置"><a href="#高可用配置" class="headerlink" title="高可用配置"></a>高可用配置</h3><blockquote><p>高可用配置如不是高可用集群，HAProxy &amp; KeepAlived 无需安装；</p><p>如果在云上安装也无需执行，可直接使用云上 lb，如阿里云 slb、腾讯云 elb 等；</p></blockquote><p>注：所有 Master 节点安装 HAProxy &amp; KeepAlived</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install haproxy keepalived</span><br></pre></td></tr></table></figure><h4 id="HAproxy"><a href="#HAproxy" class="headerlink" title="HAproxy"></a>HAproxy</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有Master的HAProxy配置一样</span></span><br><span class="line">$ vim /etc/haproxy/haproxy.cfg</span><br><span class="line">global</span><br><span class="line">  maxconn  2000</span><br><span class="line">  ulimit-n  16384</span><br><span class="line">  <span class="built_in">log</span>  127.0.0.1 local0 err</span><br><span class="line">  stats <span class="built_in">timeout</span> 30s</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  mode  http</span><br><span class="line">  option  httplog</span><br><span class="line">  <span class="built_in">timeout</span> connect 5000</span><br><span class="line">  <span class="built_in">timeout</span> client  50000</span><br><span class="line">  <span class="built_in">timeout</span> server  50000</span><br><span class="line">  <span class="built_in">timeout</span> http-request 15s</span><br><span class="line">  <span class="built_in">timeout</span> http-keep-alive 15s</span><br><span class="line"></span><br><span class="line">frontend k8s-master</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8443</span><br><span class="line">  <span class="built_in">bind</span> 127.0.0.1:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  option tcplog</span><br><span class="line">  tcp-request inspect-delay 5s</span><br><span class="line">  default_backend k8s-master</span><br><span class="line"></span><br><span class="line">backend k8s-master</span><br><span class="line">  mode tcp</span><br><span class="line">  option tcplog</span><br><span class="line">  option tcp-check</span><br><span class="line">  balance roundrobin</span><br><span class="line">  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100</span><br><span class="line">  server k8s-master01    188.188.4.121:6443  check</span><br><span class="line">  server k8s-master02    188.188.4.122:6443  check</span><br><span class="line">  server k8s-master03    188.188.4.123:6443  check</span><br></pre></td></tr></table></figure><h4 id="KeepAlived"><a href="#KeepAlived" class="headerlink" title="KeepAlived"></a>KeepAlived</h4><blockquote><p>所有 Master 节点的 KeepAlived 配置不一样，注意区分。注意每个节点的IP和网卡（interface参数）</p></blockquote><ul><li>Master01</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span></span><br><span class="line">    interval 5 </span><br><span class="line">    weight -5</span><br><span class="line">    fall 2</span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens192</span><br><span class="line">    mcast_src_ip 188.188.4.121</span><br><span class="line">    virtual_router_id 120</span><br><span class="line">    priority 101</span><br><span class="line">    nopreempt</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.4.120</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">      chk_apiserver </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><ul><li>Master02</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span></span><br><span class="line">    interval 5 </span><br><span class="line">    weight -5</span><br><span class="line">    fall 2</span><br><span class="line">    rise 1</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens192</span><br><span class="line">    mcast_src_ip 188.188.4.122</span><br><span class="line">    virtual_router_id 120</span><br><span class="line">    priority 100</span><br><span class="line">    nopreempt</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.4.120</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">      chk_apiserver </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><ul><li>Master03</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/keepalived/keepalived.conf</span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span></span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    fall 2  </span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens192</span><br><span class="line">    mcast_src_ip 188.188.4.123</span><br><span class="line">    virtual_router_id 120</span><br><span class="line">    priority 100</span><br><span class="line">    nopreempt</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.4.120</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">      chk_apiserver </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><h4 id="健康检查配置"><a href="#健康检查配置" class="headerlink" title="健康检查配置"></a>健康检查配置</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有Master节点</span></span><br><span class="line">$ vim /etc/keepalived/check_apiserver.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">err=0</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 3)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    check_code=$(pgrep haproxy)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$check_code</span> == <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        err=$(<span class="built_in">expr</span> <span class="variable">$err</span> + 1)</span><br><span class="line">        <span class="built_in">sleep</span> 1</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        err=0</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$err</span> != <span class="string">&quot;0&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;systemctl stop keepalived&quot;</span></span><br><span class="line">    /usr/bin/systemctl stop keepalived</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权并启动服务测试</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x /etc/keepalived/check_apiserver.sh</span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now haproxy keepalived</span><br><span class="line">$ systemctl status haproxy keepalived</span><br></pre></td></tr></table></figure><p><strong>如果安装了 keepalived 和 haproxy，需要测试 keepalived 是否是正常的</strong></p><h3 id="组件配置"><a href="#组件配置" class="headerlink" title="组件配置"></a>组件配置</h3><h4 id="配置-Etcd"><a href="#配置-Etcd" class="headerlink" title="配置 Etcd"></a>配置 Etcd</h4><blockquote><p>配置大致相同，注意修改每个 Master 节点的 etcd 配置的主机名和 IP 地址</p></blockquote><ul><li>Master01</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">/etc/etcd/etcd.config.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;k8s-master01&#x27;</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">wal-dir:</span> <span class="string">/var/lib/etcd/wal</span></span><br><span class="line"><span class="attr">snapshot-count:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">heartbeat-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">election-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">quota-backend-bytes:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">listen-peer-urls:</span> <span class="string">&#x27;https://188.188.4.121:2380&#x27;</span></span><br><span class="line"><span class="attr">listen-client-urls:</span> <span class="string">&#x27;https://188.188.4.121:2379,http://127.0.0.1:2379&#x27;</span></span><br><span class="line"><span class="attr">max-snapshots:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">max-wals:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">cors:</span></span><br><span class="line"><span class="attr">initial-advertise-peer-urls:</span> <span class="string">&#x27;https://188.188.4.121:2380&#x27;</span></span><br><span class="line"><span class="attr">advertise-client-urls:</span> <span class="string">&#x27;https://188.188.4.121:2379&#x27;</span></span><br><span class="line"><span class="attr">discovery:</span></span><br><span class="line"><span class="attr">discovery-fallback:</span> <span class="string">&#x27;proxy&#x27;</span></span><br><span class="line"><span class="attr">discovery-proxy:</span></span><br><span class="line"><span class="attr">discovery-srv:</span></span><br><span class="line"><span class="attr">initial-cluster:</span> <span class="string">&#x27;k8s-master01=https://188.188.4.121:2380,k8s-master02=https://188.188.4.122:2380,k8s-master03=https://188.188.4.123:2380&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-token:</span> <span class="string">&#x27;etcd-k8s-cluster&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-state:</span> <span class="string">&#x27;new&#x27;</span></span><br><span class="line"><span class="attr">strict-reconfig-check:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">enable-v2:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enable-pprof:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">proxy:</span> <span class="string">&#x27;off&#x27;</span></span><br><span class="line"><span class="attr">proxy-failure-wait:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-refresh-interval:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">proxy-dial-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">proxy-write-timeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-read-timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">client-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">peer-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">peer-client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">log-package-levels:</span></span><br><span class="line"><span class="attr">log-outputs:</span> [<span class="string">default</span>]</span><br><span class="line"><span class="attr">force-new-cluster:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>Master02</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">/etc/etcd/etcd.config.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;k8s-master02&#x27;</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">wal-dir:</span> <span class="string">/var/lib/etcd/wal</span></span><br><span class="line"><span class="attr">snapshot-count:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">heartbeat-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">election-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">quota-backend-bytes:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">listen-peer-urls:</span> <span class="string">&#x27;https://188.188.4.122:2380&#x27;</span></span><br><span class="line"><span class="attr">listen-client-urls:</span> <span class="string">&#x27;https://188.188.4.122:2379,http://127.0.0.1:2379&#x27;</span></span><br><span class="line"><span class="attr">max-snapshots:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">max-wals:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">cors:</span></span><br><span class="line"><span class="attr">initial-advertise-peer-urls:</span> <span class="string">&#x27;https://188.188.4.122:2380&#x27;</span></span><br><span class="line"><span class="attr">advertise-client-urls:</span> <span class="string">&#x27;https://188.188.4.122:2379&#x27;</span></span><br><span class="line"><span class="attr">discovery:</span></span><br><span class="line"><span class="attr">discovery-fallback:</span> <span class="string">&#x27;proxy&#x27;</span></span><br><span class="line"><span class="attr">discovery-proxy:</span></span><br><span class="line"><span class="attr">discovery-srv:</span></span><br><span class="line"><span class="attr">initial-cluster:</span> <span class="string">&#x27;k8s-master01=https://188.188.4.121:2380,k8s-master02=https://188.188.4.122:2380,k8s-master03=https://188.188.4.123:2380&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-token:</span> <span class="string">&#x27;etcd-k8s-cluster&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-state:</span> <span class="string">&#x27;new&#x27;</span></span><br><span class="line"><span class="attr">strict-reconfig-check:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">enable-v2:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enable-pprof:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">proxy:</span> <span class="string">&#x27;off&#x27;</span></span><br><span class="line"><span class="attr">proxy-failure-wait:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-refresh-interval:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">proxy-dial-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">proxy-write-timeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-read-timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">client-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">peer-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">peer-client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">log-package-levels:</span></span><br><span class="line"><span class="attr">log-outputs:</span> [<span class="string">default</span>]</span><br><span class="line"><span class="attr">force-new-cluster:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>Master03</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">/etc/etcd/etcd.config.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;k8s-master03&#x27;</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">wal-dir:</span> <span class="string">/var/lib/etcd/wal</span></span><br><span class="line"><span class="attr">snapshot-count:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">heartbeat-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">election-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">quota-backend-bytes:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">listen-peer-urls:</span> <span class="string">&#x27;https://188.188.4.123:2380&#x27;</span></span><br><span class="line"><span class="attr">listen-client-urls:</span> <span class="string">&#x27;https://188.188.4.123:2379,http://127.0.0.1:2379&#x27;</span></span><br><span class="line"><span class="attr">max-snapshots:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">max-wals:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">cors:</span></span><br><span class="line"><span class="attr">initial-advertise-peer-urls:</span> <span class="string">&#x27;https://188.188.4.123:2380&#x27;</span></span><br><span class="line"><span class="attr">advertise-client-urls:</span> <span class="string">&#x27;https://188.188.4.123:2379&#x27;</span></span><br><span class="line"><span class="attr">discovery:</span></span><br><span class="line"><span class="attr">discovery-fallback:</span> <span class="string">&#x27;proxy&#x27;</span></span><br><span class="line"><span class="attr">discovery-proxy:</span></span><br><span class="line"><span class="attr">discovery-srv:</span></span><br><span class="line"><span class="attr">initial-cluster:</span> <span class="string">&#x27;k8s-master01=https://188.188.4.121:2380,k8s-master02=https://188.188.4.122:2380,k8s-master03=https://188.188.4.123:2380&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-token:</span> <span class="string">&#x27;etcd-k8s-cluster&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-state:</span> <span class="string">&#x27;new&#x27;</span></span><br><span class="line"><span class="attr">strict-reconfig-check:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">enable-v2:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enable-pprof:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">proxy:</span> <span class="string">&#x27;off&#x27;</span></span><br><span class="line"><span class="attr">proxy-failure-wait:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-refresh-interval:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">proxy-dial-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">proxy-write-timeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-read-timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">client-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">peer-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">peer-client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">log-package-levels:</span></span><br><span class="line"><span class="attr">log-outputs:</span> [<span class="string">default</span>]</span><br><span class="line"><span class="attr">force-new-cluster:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>创建 Service</li></ul><blockquote><p>所有 Master 节点创建 Etcd Service 并启动</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/etcd.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Service</span><br><span class="line">Documentation=https://coreos.com/etcd/docs/latest/</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/local/bin/etcd --config-file=/etc/etcd/etcd.config.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=etcd3.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建etcd的证书目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /etc/kubernetes/pki/etcd</span><br><span class="line">$ <span class="built_in">ln</span> -s /etc/etcd/ssl/* /etc/kubernetes/pki/etcd/</span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看Etcd状态</span></span><br><span class="line">$ <span class="built_in">export</span> ETCDCTL_API=3</span><br><span class="line">$ etcdctl --endpoints=<span class="string">&quot;188.188.4.123:2379,188.188.4.122:2379,188.188.4.121:2379&quot;</span> \</span><br><span class="line">  --cacert=/etc/kubernetes/pki/etcd/etcd-ca.pem \</span><br><span class="line">  --cert=/etc/kubernetes/pki/etcd/etcd.pem \</span><br><span class="line">  --key=/etc/kubernetes/pki/etcd/etcd-key.pem \</span><br><span class="line"> endpoint status --write-out=table</span><br></pre></td></tr></table></figure><h4 id="配置-Apiserver"><a href="#配置-Apiserver" class="headerlink" title="配置 Apiserver"></a>配置 Apiserver</h4><blockquote><p>所有 Master 节点创建 kube-apiserver service，注意如不是高可用集群，188.188.4.120 改为 Master01 地址</p></blockquote><ul><li>Master01</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/kube-apiserver.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-apiserver \</span><br><span class="line">      --v=2  \</span><br><span class="line">      --logtostderr=<span class="literal">true</span>  \</span><br><span class="line">      --allow-privileged=<span class="literal">true</span>  \</span><br><span class="line">      --bind-address=0.0.0.0  \</span><br><span class="line">      --secure-port=6443  \</span><br><span class="line">      --insecure-port=0  \</span><br><span class="line">      --advertise-address=188.188.4.121 \</span><br><span class="line">      --service-cluster-ip-range=120.96.0.0/16  \</span><br><span class="line">      --service-node-port-range=30000-32767  \</span><br><span class="line">      --etcd-servers=https://188.188.4.121:2379,https://188.188.4.122:2379,https://188.188.4.123:2379 \</span><br><span class="line">      --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem  \</span><br><span class="line">      --etcd-certfile=/etc/etcd/ssl/etcd.pem  \</span><br><span class="line">      --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem  \</span><br><span class="line">      --client-ca-file=/etc/kubernetes/pki/ca.pem  \</span><br><span class="line">      --tls-cert-file=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --service-account-key-file=/etc/kubernetes/pki/sa.pub  \</span><br><span class="line">      --service-account-signing-key-file=/etc/kubernetes/pki/sa.key  \</span><br><span class="line">      --service-account-issuer=https://kubernetes.default.svc.cluster.local \</span><br><span class="line">      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname  \</span><br><span class="line">      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota  \</span><br><span class="line">      --authorization-mode=Node,RBAC  \</span><br><span class="line">      --enable-bootstrap-token-auth=<span class="literal">true</span>  \</span><br><span class="line">      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem  \</span><br><span class="line">      --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem  \</span><br><span class="line">      --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem  \</span><br><span class="line">      --requestheader-allowed-names=aggregator  \</span><br><span class="line">      --requestheader-group-headers=X-Remote-Group  \</span><br><span class="line">      --requestheader-extra-headers-prefix=X-Remote-Extra-  \</span><br><span class="line">      --requestheader-username-headers=X-Remote-User</span><br><span class="line">      <span class="comment"># --token-auth-file=/etc/kubernetes/token.csv</span></span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10s</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>Master02</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/kube-apiserver.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-apiserver \</span><br><span class="line">      --v=2  \</span><br><span class="line">      --logtostderr=<span class="literal">true</span>  \</span><br><span class="line">      --allow-privileged=<span class="literal">true</span>  \</span><br><span class="line">      --bind-address=0.0.0.0  \</span><br><span class="line">      --secure-port=6443  \</span><br><span class="line">      --insecure-port=0  \</span><br><span class="line">      --advertise-address=188.188.4.122 \</span><br><span class="line">      --service-cluster-ip-range=120.96.0.0/16  \</span><br><span class="line">      --service-node-port-range=30000-32767  \</span><br><span class="line">      --etcd-servers=https://188.188.4.121:2379,https://188.188.4.122:2379,https://188.188.4.123:2379 \</span><br><span class="line">      --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem  \</span><br><span class="line">      --etcd-certfile=/etc/etcd/ssl/etcd.pem  \</span><br><span class="line">      --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem  \</span><br><span class="line">      --client-ca-file=/etc/kubernetes/pki/ca.pem  \</span><br><span class="line">      --tls-cert-file=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --service-account-key-file=/etc/kubernetes/pki/sa.pub  \</span><br><span class="line">      --service-account-signing-key-file=/etc/kubernetes/pki/sa.key  \</span><br><span class="line">      --service-account-issuer=https://kubernetes.default.svc.cluster.local \</span><br><span class="line">      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname  \</span><br><span class="line">      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota  \</span><br><span class="line">      --authorization-mode=Node,RBAC  \</span><br><span class="line">      --enable-bootstrap-token-auth=<span class="literal">true</span>  \</span><br><span class="line">      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem  \</span><br><span class="line">      --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem  \</span><br><span class="line">      --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem  \</span><br><span class="line">      --requestheader-allowed-names=aggregator  \</span><br><span class="line">      --requestheader-group-headers=X-Remote-Group  \</span><br><span class="line">      --requestheader-extra-headers-prefix=X-Remote-Extra-  \</span><br><span class="line">      --requestheader-username-headers=X-Remote-User</span><br><span class="line">      <span class="comment"># --token-auth-file=/etc/kubernetes/token.csv</span></span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10s</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>Master03</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/kube-apiserver.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-apiserver \</span><br><span class="line">      --v=2  \</span><br><span class="line">      --logtostderr=<span class="literal">true</span>  \</span><br><span class="line">      --allow-privileged=<span class="literal">true</span>  \</span><br><span class="line">      --bind-address=0.0.0.0  \</span><br><span class="line">      --secure-port=6443  \</span><br><span class="line">      --insecure-port=0  \</span><br><span class="line">      --advertise-address=188.188.4.123 \</span><br><span class="line">      --service-cluster-ip-range=120.96.0.0/16  \</span><br><span class="line">      --service-node-port-range=30000-32767  \</span><br><span class="line">      --etcd-servers=https://188.188.4.121:2379,https://188.188.4.122:2379,https://188.188.4.123:2379 \</span><br><span class="line">      --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem  \</span><br><span class="line">      --etcd-certfile=/etc/etcd/ssl/etcd.pem  \</span><br><span class="line">      --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem  \</span><br><span class="line">      --client-ca-file=/etc/kubernetes/pki/ca.pem  \</span><br><span class="line">      --tls-cert-file=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --service-account-key-file=/etc/kubernetes/pki/sa.pub  \</span><br><span class="line">      --service-account-signing-key-file=/etc/kubernetes/pki/sa.key  \</span><br><span class="line">      --service-account-issuer=https://kubernetes.default.svc.cluster.local \</span><br><span class="line">      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname  \</span><br><span class="line">      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota  \</span><br><span class="line">      --authorization-mode=Node,RBAC  \</span><br><span class="line">      --enable-bootstrap-token-auth=<span class="literal">true</span>  \</span><br><span class="line">      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem  \</span><br><span class="line">      --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem  \</span><br><span class="line">      --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem  \</span><br><span class="line">      --requestheader-allowed-names=aggregator  \</span><br><span class="line">      --requestheader-group-headers=X-Remote-Group  \</span><br><span class="line">      --requestheader-extra-headers-prefix=X-Remote-Extra-  \</span><br><span class="line">      --requestheader-username-headers=X-Remote-User</span><br><span class="line">      <span class="comment"># --token-auth-file=/etc/kubernetes/token.csv</span></span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10s</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>所有 Master 节点开启服务并检查状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now kube-apiserver</span><br><span class="line">$ systemctl status kube-apiserver</span><br></pre></td></tr></table></figure><h4 id="配置-ControllerManager"><a href="#配置-ControllerManager" class="headerlink" title="配置 ControllerManager"></a>配置 ControllerManager</h4><blockquote><p>所有 Master 节点的 kube-controller-manager service 配置一样</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/kube-controller-manager.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-controller-manager \</span><br><span class="line">      --v=2 \</span><br><span class="line">      --logtostderr=<span class="literal">true</span> \</span><br><span class="line">      --address=127.0.0.1 \</span><br><span class="line">      --root-ca-file=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">      --cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">      --cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">      --service-account-private-key-file=/etc/kubernetes/pki/sa.key \</span><br><span class="line">      --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig \</span><br><span class="line">      --leader-elect=<span class="literal">true</span> \</span><br><span class="line">      --use-service-account-credentials=<span class="literal">true</span> \</span><br><span class="line">      --node-monitor-grace-period=40s \</span><br><span class="line">      --node-monitor-period=5s \</span><br><span class="line">      --pod-eviction-timeout=2m0s \</span><br><span class="line">      --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="line">      --allocate-node-cidrs=<span class="literal">true</span> \</span><br><span class="line">      --cluster-cidr=10.16.0.0/12 \</span><br><span class="line">      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem \</span><br><span class="line">      --node-cidr-mask-size=24</span><br><span class="line">      </span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>所有 Master 节点开启服务并检查状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now kube-controller-manager</span><br><span class="line">$ systemctl status kube-controller-manager</span><br></pre></td></tr></table></figure><h4 id="配置-Scheduler"><a href="#配置-Scheduler" class="headerlink" title="配置 Scheduler"></a>配置 Scheduler</h4><blockquote><p>所有 Master 节点的 kube-scheduler service 配置一样</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/kube-scheduler.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-scheduler \</span><br><span class="line">      --v=2 \</span><br><span class="line">      --logtostderr=<span class="literal">true</span> \</span><br><span class="line">      --address=127.0.0.1 \</span><br><span class="line">      --leader-elect=<span class="literal">true</span> \</span><br><span class="line">      --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>所有 Master 节点开启服务并检查状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now kube-scheduler</span><br><span class="line">$ systemctl status kube-scheduler</span><br></pre></td></tr></table></figure><h3 id="TLS-Bootstrapping-配置"><a href="#TLS-Bootstrapping-配置" class="headerlink" title="TLS Bootstrapping 配置"></a>TLS Bootstrapping 配置</h3><blockquote><p>在 Master01 创建 bootstrap<br>注意：如果要修改 bootstrap.secret.yaml 的 token-id 和 token-secret ，需要保证字符串一致的，并且位数是一样的。还要保证 c8ad9c.2e4d610cf3e7426e 与你修改的字符串要一致</p></blockquote><p>在配置文件中的 token 定义中，需要注意：</p><ul><li>token 的 name 必须是 <code>bootstrap-token-&lt;token-id&gt;</code> 的格式</li><li>token 的 type 必须是 <code>bootstrap.kubernetes.io/token</code></li><li>token 的 token-id 和 token-secret 分别是6位和16位数字和字母的组合</li><li><code>auth-extra-groups</code> 定义了 token 代表的用户所属的额外的 group，而默认 group 名为 <code>system:bootstrappers</code></li><li>这种类型 token 代表的用户名为 <code>system:bootstrap:&lt;token-id&gt;</code>，在本文中就是 <code>system:bootstrap:abcdef</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成随机字符串</span></span><br><span class="line">$ <span class="built_in">cat</span> /dev/urandom | <span class="built_in">head</span> -n 22 | <span class="built_in">md5sum</span> | <span class="built_in">head</span> -c 22</span><br><span class="line">dd4414.74c103b52e297e6c</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/k8s-install/bootstrap</span><br><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=https://188.188.4.120:8443 \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config set-credentials tls-bootstrap-token-user \</span><br><span class="line">  --token=dd4414.74c103b52e297e6c \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config set-context tls-bootstrap-token-user@kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=tls-bootstrap-token-user \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config use-context tls-bootstrap-token-user@kubernetes \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /root/.kube ; <span class="built_in">cp</span> /etc/kubernetes/admin.kubeconfig /root/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看集群状态，正常即可继续操作</span></span><br><span class="line">$ kubectl get cs</span><br><span class="line">Warning: v1 ComponentStatus is deprecated <span class="keyword">in</span> v1.19+</span><br><span class="line">NAME                 STATUS    MESSAGE             ERROR</span><br><span class="line">scheduler            Healthy   ok                  </span><br><span class="line">controller-manager   Healthy   ok                  </span><br><span class="line">etcd-0               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;   </span><br><span class="line">etcd-2               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;   </span><br><span class="line">etcd-1               Healthy   &#123;<span class="string">&quot;health&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br><span class="line">$ kubectl create -f bootstrap.secret.yaml</span><br><span class="line">secret/bootstrap-token-dd4414 created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/kubelet-bootstrap created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/node-autoapprove-bootstrap created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/node-autoapprove-certificate-rotation created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:kube-apiserver-to-kubelet created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:kube-apiserver created</span><br></pre></td></tr></table></figure><h3 id="Node-配置"><a href="#Node-配置" class="headerlink" title="Node 配置"></a>Node 配置</h3><blockquote><p>Master01 节点将证书复制至其他节点</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/kubernetes/</span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> k8s-master02 k8s-master03 k8s-node01 k8s-node02; <span class="keyword">do</span></span><br><span class="line">     ssh <span class="variable">$NODE</span> <span class="built_in">mkdir</span> -p /etc/kubernetes/pki /etc/etcd/ssl /etc/etcd/ssl</span><br><span class="line">     <span class="keyword">for</span> FILE <span class="keyword">in</span> etcd-ca.pem etcd.pem etcd-key.pem; <span class="keyword">do</span></span><br><span class="line">       scp /etc/etcd/ssl/<span class="variable">$FILE</span> <span class="variable">$NODE</span>:/etc/etcd/ssl/</span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">     <span class="keyword">for</span> FILE <span class="keyword">in</span> pki/ca.pem pki/ca-key.pem pki/front-proxy-ca.pem bootstrap-kubelet.kubeconfig; <span class="keyword">do</span></span><br><span class="line">       scp /etc/kubernetes/<span class="variable">$FILE</span> <span class="variable">$NODE</span>:/etc/kubernetes/<span class="variable">$&#123;FILE&#125;</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="配置-Kubelet"><a href="#配置-Kubelet" class="headerlink" title="配置 Kubelet"></a>配置 Kubelet</h4><blockquote><p>所有节点配置 kubelet service</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/kubelet.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kubelet</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">StartLimitInterval=0</span><br><span class="line">RestartSec=10</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li>Runtime 为 Docker，请使用如下 Kubelet 的配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/kubelet.service.d/10-kubelet.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_SYSTEM_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_CONFIG_ARGS=--config=/etc/kubernetes/kubelet-conf.yml --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.6&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_EXTRA_ARGS=--node-labels=node.kubernetes.io/node=&#x27;&#x27; &quot;</span></span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/local/bin/kubelet <span class="variable">$KUBELET_KUBECONFIG_ARGS</span> <span class="variable">$KUBELET_CONFIG_ARGS</span> <span class="variable">$KUBELET_SYSTEM_ARGS</span> <span class="variable">$KUBELET_EXTRA_ARGS</span></span><br></pre></td></tr></table></figure><ul><li>Runtime 为 Containerd，请使用如下 Kubelet 的配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/kubelet.service.d/10-kubelet.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_SYSTEM_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin --container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock --cgroup-driver=systemd&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_CONFIG_ARGS=--config=/etc/kubernetes/kubelet-conf.yml&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_EXTRA_ARGS=--node-labels=node.kubernetes.io/node=&#x27;&#x27; &quot;</span></span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/local/bin/kubelet <span class="variable">$KUBELET_KUBECONFIG_ARGS</span> <span class="variable">$KUBELET_CONFIG_ARGS</span> <span class="variable">$KUBELET_SYSTEM_ARGS</span> <span class="variable">$KUBELET_EXTRA_ARGS</span></span><br></pre></td></tr></table></figure><p>所有节点创建 Kubelet 配置文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">/etc/kubernetes/kubelet-conf.yml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span></span><br><span class="line"><span class="attr">address:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">10250</span></span><br><span class="line"><span class="attr">readOnlyPort:</span> <span class="number">10255</span></span><br><span class="line"><span class="attr">authentication:</span></span><br><span class="line">  <span class="attr">anonymous:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheTTL:</span> <span class="string">2m0s</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">x509:</span></span><br><span class="line">    <span class="attr">clientCAFile:</span> <span class="string">/etc/kubernetes/pki/ca.pem</span></span><br><span class="line"><span class="attr">authorization:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">Webhook</span></span><br><span class="line">  <span class="attr">webhook:</span></span><br><span class="line">    <span class="attr">cacheAuthorizedTTL:</span> <span class="string">5m0s</span></span><br><span class="line">    <span class="attr">cacheUnauthorizedTTL:</span> <span class="string">30s</span></span><br><span class="line"><span class="attr">cgroupDriver:</span> <span class="string">systemd</span></span><br><span class="line"><span class="attr">cgroupsPerQOS:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">clusterDNS:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">120.96</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line"><span class="attr">clusterDomain:</span> <span class="string">cluster.local</span></span><br><span class="line"><span class="attr">containerLogMaxFiles:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">containerLogMaxSize:</span> <span class="string">10Mi</span></span><br><span class="line"><span class="attr">contentType:</span> <span class="string">application/vnd.kubernetes.protobuf</span></span><br><span class="line"><span class="attr">cpuCFSQuota:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cpuManagerPolicy:</span> <span class="string">none</span></span><br><span class="line"><span class="attr">cpuManagerReconcilePeriod:</span> <span class="string">10s</span></span><br><span class="line"><span class="attr">enableControllerAttachDetach:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enableDebuggingHandlers:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enforceNodeAllocatable:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line"><span class="attr">eventBurst:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">eventRecordQPS:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">evictionHard:</span></span><br><span class="line">  <span class="attr">imagefs.available:</span> <span class="number">15</span><span class="string">%</span></span><br><span class="line">  <span class="attr">memory.available:</span> <span class="string">100Mi</span></span><br><span class="line">  <span class="attr">nodefs.available:</span> <span class="number">10</span><span class="string">%</span></span><br><span class="line">  <span class="attr">nodefs.inodesFree:</span> <span class="number">5</span><span class="string">%</span></span><br><span class="line"><span class="attr">evictionPressureTransitionPeriod:</span> <span class="string">5m0s</span></span><br><span class="line"><span class="attr">failSwapOn:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">fileCheckFrequency:</span> <span class="string">20s</span></span><br><span class="line"><span class="attr">hairpinMode:</span> <span class="string">promiscuous-bridge</span></span><br><span class="line"><span class="attr">healthzBindAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="attr">healthzPort:</span> <span class="number">10248</span></span><br><span class="line"><span class="attr">httpCheckFrequency:</span> <span class="string">20s</span></span><br><span class="line"><span class="attr">imageGCHighThresholdPercent:</span> <span class="number">85</span></span><br><span class="line"><span class="attr">imageGCLowThresholdPercent:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">imageMinimumGCAge:</span> <span class="string">2m0s</span></span><br><span class="line"><span class="attr">iptablesDropBit:</span> <span class="number">15</span></span><br><span class="line"><span class="attr">iptablesMasqueradeBit:</span> <span class="number">14</span></span><br><span class="line"><span class="attr">kubeAPIBurst:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">kubeAPIQPS:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">makeIPTablesUtilChains:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">maxOpenFiles:</span> <span class="number">1000000</span></span><br><span class="line"><span class="attr">maxPods:</span> <span class="number">110</span></span><br><span class="line"><span class="attr">nodeStatusUpdateFrequency:</span> <span class="string">10s</span></span><br><span class="line"><span class="attr">oomScoreAdj:</span> <span class="number">-999</span></span><br><span class="line"><span class="attr">podPidsLimit:</span> <span class="number">-1</span></span><br><span class="line"><span class="attr">registryBurst:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">registryPullQPS:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">resolvConf:</span> <span class="string">/etc/resolv.conf</span></span><br><span class="line"><span class="attr">rotateCertificates:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">runtimeRequestTimeout:</span> <span class="string">2m0s</span></span><br><span class="line"><span class="attr">serializeImagePulls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">staticPodPath:</span> <span class="string">/etc/kubernetes/manifests</span></span><br><span class="line"><span class="attr">streamingConnectionIdleTimeout:</span> <span class="string">4h0m0s</span></span><br><span class="line"><span class="attr">syncFrequency:</span> <span class="string">1m0s</span></span><br><span class="line"><span class="attr">volumeStatsAggPeriod:</span> <span class="string">1m0s</span></span><br></pre></td></tr></table></figure><p>启动所有节点 kubelet 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now kubelet</span><br><span class="line">$ systemctl status kubelet</span><br></pre></td></tr></table></figure><p>此时系统日志 <code>/var/log/messages</code> 显示只有如下信息为正常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">tail</span> -f /var/log/messages</span><br><span class="line">...</span><br><span class="line">Unable to update cni config: no networks found <span class="keyword">in</span> /etc/cni/net.d</span><br></pre></td></tr></table></figure><p>如果有很多报错日志，或者有大量看不懂的报错，说明 kubelet 的配置有误，需要检查 kubelet 配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看集群状态</span></span><br><span class="line">$ kubectl get node</span><br><span class="line">NAME     STATUS     ROLES    AGE   VERSION</span><br><span class="line">k8s-master01   NotReady   &lt;none&gt;   38s   v1.23.5</span><br><span class="line">k8s-master02   NotReady   &lt;none&gt;   38s   v1.23.5</span><br><span class="line">k8s-master03   NotReady   &lt;none&gt;   38s   v1.23.5</span><br><span class="line">k8s-node01   NotReady   &lt;none&gt;   39s   v1.23.5</span><br><span class="line">k8s-node02   NotReady   &lt;none&gt;   38s   v1.23.5</span><br></pre></td></tr></table></figure><h4 id="配置-Kube-proxy"><a href="#配置-Kube-proxy" class="headerlink" title="配置 Kube-proxy"></a>配置 Kube-proxy</h4><blockquote><p>仅在 Master01 执行</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/k8s-install</span><br><span class="line">$ kubectl -n kube-system create serviceaccount kube-proxy</span><br><span class="line">$ kubectl create clusterrolebinding system:kube-proxy \</span><br><span class="line">  --clusterrole system:node-proxier \</span><br><span class="line">  --serviceaccount kube-system:kube-proxy</span><br><span class="line">  </span><br><span class="line">$ SECRET=$(kubectl -n kube-system get sa/kube-proxy \</span><br><span class="line">  --output=jsonpath=<span class="string">&#x27;&#123;.secrets[0].name&#125;&#x27;</span>)</span><br><span class="line">$ JWT_TOKEN=$(kubectl -n kube-system get secret/<span class="variable">$SECRET</span> \</span><br><span class="line">  --output=jsonpath=<span class="string">&#x27;&#123;.data.token&#125;&#x27;</span> | <span class="built_in">base64</span> -d)</span><br><span class="line"></span><br><span class="line">$ PKI_DIR=/etc/kubernetes/pki</span><br><span class="line">$ K8S_DIR=/etc/kubernetes</span><br><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">  --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">  --embed-certs=<span class="literal">true</span> \</span><br><span class="line">  --server=https://188.188.4.120:8443 \</span><br><span class="line">  --kubeconfig=<span class="variable">$&#123;K8S_DIR&#125;</span>/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config set-credentials kubernetes \</span><br><span class="line">  --token=<span class="variable">$&#123;JWT_TOKEN&#125;</span> \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config set-context kubernetes \</span><br><span class="line">  --cluster=kubernetes \</span><br><span class="line">  --user=kubernetes \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config use-context kubernetes \</span><br><span class="line">  --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure><p>将 kuberconfig 发至其他节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> k8s-master02 k8s-master03; <span class="keyword">do</span></span><br><span class="line">     scp /etc/kubernetes/kube-proxy.kubeconfig  <span class="variable">$NODE</span>:/etc/kubernetes/kube-proxy.kubeconfig</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> k8s-node01 k8s-node02; <span class="keyword">do</span></span><br><span class="line">     scp /etc/kubernetes/kube-proxy.kubeconfig <span class="variable">$NODE</span>:/etc/kubernetes/kube-proxy.kubeconfig</span><br><span class="line"> <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>所有节点添加 kube-proxy 的配置和 service 文件</p><p><font color=red>注：如果更改了集群 Pod 的网段，需要更改 kube-proxy.yaml 的 clusterCIDR 为新的 Pod 网段</font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/kube-proxy.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kube Proxy</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-proxy \</span><br><span class="line">  --config=/etc/kubernetes/kube-proxy.yaml \</span><br><span class="line">  --v=2</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">/etc/kubernetes/kube-proxy.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">bindAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">clientConnection:</span></span><br><span class="line">  <span class="attr">acceptContentTypes:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">burst:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">contentType:</span> <span class="string">application/vnd.kubernetes.protobuf</span></span><br><span class="line">  <span class="attr">kubeconfig:</span> <span class="string">/etc/kubernetes/kube-proxy.kubeconfig</span></span><br><span class="line">  <span class="attr">qps:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">clusterCIDR:</span> <span class="number">10.16</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span> </span><br><span class="line"><span class="attr">configSyncPeriod:</span> <span class="string">15m0s</span></span><br><span class="line"><span class="attr">conntrack:</span></span><br><span class="line">  <span class="attr">max:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">maxPerCore:</span> <span class="number">32768</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">131072</span></span><br><span class="line">  <span class="attr">tcpCloseWaitTimeout:</span> <span class="string">1h0m0s</span></span><br><span class="line">  <span class="attr">tcpEstablishedTimeout:</span> <span class="string">24h0m0s</span></span><br><span class="line"><span class="attr">enableProfiling:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">healthzBindAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:10256</span></span><br><span class="line"><span class="attr">hostnameOverride:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">iptables:</span></span><br><span class="line">  <span class="attr">masqueradeAll:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">masqueradeBit:</span> <span class="number">14</span></span><br><span class="line">  <span class="attr">minSyncPeriod:</span> <span class="string">0s</span></span><br><span class="line">  <span class="attr">syncPeriod:</span> <span class="string">30s</span></span><br><span class="line"><span class="attr">ipvs:</span></span><br><span class="line">  <span class="attr">masqueradeAll:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">minSyncPeriod:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">scheduler:</span> <span class="string">&quot;rr&quot;</span></span><br><span class="line">  <span class="attr">syncPeriod:</span> <span class="string">30s</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">metricsBindAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:10249</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">&quot;ipvs&quot;</span></span><br><span class="line"><span class="attr">nodePortAddresses:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">oomScoreAdj:</span> <span class="number">-999</span></span><br><span class="line"><span class="attr">portRange:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">udpIdleTimeout:</span> <span class="string">250ms</span></span><br></pre></td></tr></table></figure><p>所有节点启动 kube-proxy</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now kube-proxy</span><br><span class="line">$ systemctl status kube-proxy</span><br></pre></td></tr></table></figure><h3 id="安装-Calico"><a href="#安装-Calico" class="headerlink" title="安装 Calico"></a>安装 Calico</h3><blockquote><p>Master01 节点执行即可</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408114329.png" alt="20220408114329.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408114411.png" alt="20220408114411.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最新版本</span></span><br><span class="line">$ curl https://docs.projectcalico.org/manifests/calico-etcd.yaml -o calico-etcd.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选择性版本</span></span><br><span class="line">$ curl https://docs.projectcalico.org/archive/v3.20/manifests/calico-etcd.yaml -o calico-etcd.yaml</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s#etcd_endpoints: &quot;http://&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;&quot;#etcd_endpoints: &quot;https://188.188.4.121:2379,https://188.188.4.122:2379,https://188.188.4.123:2379&quot;#g&#x27;</span> calico-etcd.yaml</span><br><span class="line">$ ETCD_CA=`<span class="built_in">cat</span> /etc/kubernetes/pki/etcd/etcd-ca.pem | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">$ ETCD_CERT=`<span class="built_in">cat</span> /etc/kubernetes/pki/etcd/etcd.pem | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">$ ETCD_KEY=`<span class="built_in">cat</span> /etc/kubernetes/pki/etcd/etcd-key.pem | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">$ sed -i <span class="string">&quot;s@# etcd-key: null@etcd-key: <span class="variable">$&#123;ETCD_KEY&#125;</span>@g; s@# etcd-cert: null@etcd-cert: <span class="variable">$&#123;ETCD_CERT&#125;</span>@g; s@# etcd-ca: null@etcd-ca: <span class="variable">$&#123;ETCD_CA&#125;</span>@g&quot;</span> calico-etcd.yaml</span><br><span class="line">$ sed -i <span class="string">&#x27;s#etcd_ca: &quot;&quot;#etcd_ca: &quot;/calico-secrets/etcd-ca&quot;#g; s#etcd_cert: &quot;&quot;#etcd_cert: &quot;/calico-secrets/etcd-cert&quot;#g; s#etcd_key: &quot;&quot; #etcd_key: &quot;/calico-secrets/etcd-key&quot; #g&#x27;</span> calico-etcd.yaml</span><br><span class="line">$ POD_SUBNET=<span class="string">&quot;10.16.0.0/12&quot;</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s@# - name: CALICO_IPV4POOL_CIDR@- name: CALICO_IPV4POOL_CIDR@g; s@#   value: &quot;192.168.0.0/16&quot;@  value: &#x27;</span><span class="string">&quot;<span class="variable">$&#123;POD_SUBNET&#125;</span>&quot;</span><span class="string">&#x27;@g&#x27;</span> calico-etcd.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl apply -f calico-etcd.yaml</span><br><span class="line">$ kubectl get po -n kube-system</span><br></pre></td></tr></table></figure><p>如果容器状态异常可以使用 kubectl describe 或者 kubectl logs 查看容器的日志</p><p><strong>官方推荐版本</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/k8s-install/calico</span><br><span class="line">$ sed -i <span class="string">&quot;s#POD_CIDR#10.16.0.0/12#g&quot;</span> calico.yaml</span><br><span class="line">$ grep <span class="string">&quot;IPV4POOL_CIDR&quot;</span> calico.yaml -A 1</span><br><span class="line">$ kubectl apply -f calico.yaml</span><br><span class="line">configmap/calico-config created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgpconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/bgppeers.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/blockaffinities.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/caliconodestatuses.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/clusterinformations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/felixconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/globalnetworksets.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/hostendpoints.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamblocks.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamconfigs.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipamhandles.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ippools.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/ipreservations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/kubecontrollersconfigurations.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networkpolicies.crd.projectcalico.org created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/networksets.crd.projectcalico.org created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-kube-controllers created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/calico-node created</span><br><span class="line">service/calico-typha created</span><br><span class="line">deployment.apps/calico-typha created</span><br><span class="line">Warning: policy/v1beta1 PodDisruptionBudget is deprecated <span class="keyword">in</span> v1.21+, unavailable <span class="keyword">in</span> v1.25+; use policy/v1 PodDisruptionBudget</span><br><span class="line">poddisruptionbudget.policy/calico-typha created</span><br><span class="line">daemonset.apps/calico-node created</span><br><span class="line">serviceaccount/calico-node created</span><br><span class="line">deployment.apps/calico-kube-controllers created</span><br><span class="line">serviceaccount/calico-kube-controllers created</span><br><span class="line">poddisruptionbudget.policy/calico-kube-controllers created</span><br><span class="line">$ kubectl get po -n kube-system</span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">calico-kube-controllers-6f6595874c-vltgw   1/1     Running   0          5m51s</span><br><span class="line">calico-node-6pwjg                          1/1     Running   0          5m51s</span><br><span class="line">calico-node-7fwjf                          1/1     Running   0          5m51s</span><br><span class="line">calico-node-lc72w                          1/1     Running   0          5m51s</span><br><span class="line">calico-node-vvlws                          1/1     Running   0          5m51s</span><br><span class="line">calico-node-x8296                          1/1     Running   0          5m51s</span><br><span class="line">calico-typha-6b6cf8cbdf-2kbhz              1/1     Running   0          5m51s</span><br></pre></td></tr></table></figure><h3 id="安装-CoreDNS"><a href="#安装-CoreDNS" class="headerlink" title="安装 CoreDNS"></a>安装 CoreDNS</h3><blockquote><p>具体安装版本可参考 Github 内的指引</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220412175132652.png" alt="image-20220412175132652"></p><p>如果更改了 k8s service 的网段需要将 coredns 的 serviceIP 改成 k8s service 网段的第十个 IP</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ COREDNS_SERVICE_IP=`kubectl get svc | grep kubernetes | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`0</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$COREDNS_SERVICE_IP</span></span><br><span class="line"></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/coredns/deployment.git</span><br><span class="line">$ <span class="built_in">cd</span> deployment/kubernetes</span><br><span class="line">$ ./deploy.sh -s -i <span class="variable">$&#123;COREDNS_SERVICE_IP&#125;</span> | kubectl apply -f -</span><br><span class="line">$ kubectl get po -n kube-system -l k8s-app=kube-dns</span><br></pre></td></tr></table></figure><p><strong>官方推荐版本</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/k8s-install/CoreDNS</span><br><span class="line">$ COREDNS_SERVICE_IP=`kubectl get svc | grep kubernetes | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`0</span><br><span class="line">$ sed -i <span class="string">&quot;s#KUBEDNS_SERVICE_IP#<span class="variable">$&#123;COREDNS_SERVICE_IP&#125;</span>#g&quot;</span> coredns.yaml</span><br><span class="line">$ kubectl create -f coredns.yaml </span><br><span class="line">serviceaccount/coredns created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:coredns created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:coredns created</span><br><span class="line">configmap/coredns created</span><br><span class="line">deployment.apps/coredns created</span><br><span class="line">service/kube-dns created</span><br><span class="line">$ kubectl get po -n kube-system -l k8s-app=kube-dns</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-5db5696c7-cj577   1/1     Running   0          14s</span><br></pre></td></tr></table></figure><h3 id="安装-Metrics-Server"><a href="#安装-Metrics-Server" class="headerlink" title="安装 Metrics Server"></a>安装 Metrics Server</h3><blockquote><p>在新版的 Kubernetes 中系统资源的采集均使用 Metrics-server，可以通过 Metrics 采集节点和 Pod 的内存、磁盘、CPU 和网络的使用率</p></blockquote><p><strong>查看版本兼容是否合适</strong></p><table><thead><tr><th>Metrics Server</th><th>Metrics API group&#x2F;version</th><th>Supported Kubernetes version</th></tr></thead><tbody><tr><td>0.6.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>1.19+</td></tr><tr><td>0.5.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>*1.8+</td></tr><tr><td>0.4.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>*1.8+</td></tr><tr><td>0.3.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>1.8-1.21</td></tr></tbody></table><p>提前下载镜像并修改镜像地址信息和添加证书认证，否则无法下载到镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.6.1/components.yaml</span><br><span class="line"><span class="comment"># 添加证书验证并修改证书</span></span><br><span class="line"><span class="comment"># nu:129~137</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --secure-port=4443</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">        - --kubelet-use-node-status-port</span><br><span class="line">        - --metric-resolution=15s</span><br><span class="line">        <span class="comment"># 添加证书认证内容，参考&#x27;配置聚合层&#x27;,并修改镜像地址</span></span><br><span class="line">        - --kubelet-insecure-tls</span><br><span class="line">        - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem <span class="comment"># change to front-proxy-ca.crt for kubeadm</span></span><br><span class="line">        - --requestheader-username-headers=X-Remote-User</span><br><span class="line">        - --requestheader-group-headers=X-Remote-Group</span><br><span class="line">        - --requestheader-extra-headers-prefix=X-Remote-Extra-</span><br><span class="line">        image: registry.cn-hongkong.aliyuncs.com/yk-k8s/metrics-server:v0.5.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># nu:167~176</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /tmp</span><br><span class="line">          name: tmp-dir</span><br><span class="line">        <span class="comment"># 添加证书路径，进行hostPath挂载</span></span><br><span class="line">        - name: ca-ssl</span><br><span class="line">          mountPath: /etc/kubernetes/pki</span><br><span class="line">      nodeSelector:</span><br><span class="line">        kubernetes.io/os: linux</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      serviceAccountName: metrics-server</span><br><span class="line">      volumes:</span><br><span class="line">      - emptyDir: &#123;&#125;</span><br><span class="line">        name: tmp-dir</span><br><span class="line">      - name: ca-ssl</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/kubernetes/pki</span><br><span class="line">          </span><br><span class="line">$ kubectl create -f .</span><br><span class="line">$ kubectl get po -n kube-system -l k8s-app=metrics-server</span><br></pre></td></tr></table></figure><p><strong>官方推荐版本</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/k8s-install/metrics-server</span><br><span class="line">$ kubectl create -f .</span><br><span class="line">serviceaccount/metrics-server created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:aggregated-metrics-reader created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/metrics-server-auth-reader created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/metrics-server:system:auth-delegator created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/system:metrics-server created</span><br><span class="line">service/metrics-server created</span><br><span class="line">deployment.apps/metrics-server created</span><br><span class="line">apiservice.apiregistration.k8s.io/v1beta1.metrics.k8s.io created</span><br><span class="line">$ kubectl get po -n kube-system -l k8s-app=metrics-server</span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">metrics-server-6bf7dcd649-4j8n2   1/1     Running   0          31s</span><br></pre></td></tr></table></figure><h3 id="集群验证"><a href="#集群验证" class="headerlink" title="集群验证"></a>集群验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span>&lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Pod</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: busybox</span></span><br><span class="line"><span class="string">  namespace: default</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  containers:</span></span><br><span class="line"><span class="string">  - name: busybox</span></span><br><span class="line"><span class="string">    image: busybox:1.28</span></span><br><span class="line"><span class="string">    command:</span></span><br><span class="line"><span class="string">      - sleep</span></span><br><span class="line"><span class="string">      - &quot;3600&quot;</span></span><br><span class="line"><span class="string">    imagePullPolicy: IfNotPresent</span></span><br><span class="line"><span class="string">  restartPolicy: Always</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span>  busybox -n default -- nslookup kubernetes</span><br><span class="line">Server:    120.96.0.10</span><br><span class="line">Address 1: 120.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kubernetes</span><br><span class="line">Address 1: 120.96.0.1 kubernetes.default.svc.cluster.local</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span>  busybox -n default -- nslookup kube-dns.kube-system</span><br><span class="line">Server:    120.96.0.10</span><br><span class="line">Address 1: 120.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kube-dns.kube-system</span><br><span class="line">Address 1: 120.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br></pre></td></tr></table></figure><ol><li><p>Pod 必须能解析 Service</p></li><li><p>Pod 必须能解析跨 namespace 的 Service</p></li><li><p>每个节点都必须要能访问 Kubernetes 的 kubernetes svc 443 和 kube-dns 的 service 53</p></li><li><p>Pod 和 Pod 之前要能通</p><ul><li>同 namespace 能通信</li><li>跨 namespace 能通信</li><li>跨机器能通信</li></ul></li></ol><h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><blockquote><p>Dashboard 用于展示集群中的各类资源，同时也可以通过 Dashboard 实时查看 Pod 的日志和在容器中执行一些命令等</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">wget</span> <span class="string">https://raw.githubusercontent.com/kubernetes/dashboard/v2.5.1/aio/deploy/recommended.yaml</span></span><br><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">admin.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">admin-user</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">.</span></span><br></pre></td></tr></table></figure><p>谷歌浏览器启动文件中加入启动参数，用于解决无法访问的问题 <code>--test-type --ignore-certificate-errors</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更改dashboard的svc为NodePort，浏览登录确认状态</span></span><br><span class="line">$ kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line">ports:</span><br><span class="line">- port: 443</span><br><span class="line">  protocol: TCP</span><br><span class="line">  targetPort: 8443</span><br><span class="line">  nodePort: 30000</span><br><span class="line">selector:</span><br><span class="line">  k8s-app: kubernetes-dashboard</span><br><span class="line">sessionAffinity: None</span><br><span class="line"><span class="built_in">type</span>: ClusterIP</span><br><span class="line"></span><br><span class="line">$ kubectl get po,svc -n kubernetes-dashboard</span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper-7fcdff5f4c-ztxxc   1/1     Running   0          116s</span><br><span class="line">pod/kubernetes-dashboard-85f59f8ff7-2vr5q        1/1     Running   0          116s</span><br><span class="line"></span><br><span class="line">NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/dashboard-metrics-scraper   ClusterIP   120.96.39.92    &lt;none&gt;        8000/TCP        116s</span><br><span class="line">service/kubernetes-dashboard        NodePort    120.96.77.113   &lt;none&gt;        443:30000/TCP   116s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看token值</span></span><br><span class="line">$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="生产环境关键性配置"><a href="#生产环境关键性配置" class="headerlink" title="生产环境关键性配置"></a>生产环境关键性配置</h3><ul><li>Docker Runtime 配置，采用 Containerd Runtime 无需配置</li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># 所有节点修改Docker日志大小及下载、重启策略</span><br><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line"><span class="punctuation">&#123;</span> </span><br><span class="line"> <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;exec-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;native.cgroupdriver=systemd&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;max-concurrent-downloads&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> </span><br><span class="line"> <span class="attr">&quot;max-concurrent-uploads&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> </span><br><span class="line"> <span class="attr">&quot;log-opts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>   </span><br><span class="line"> <span class="attr">&quot;max-size&quot;</span><span class="punctuation">:</span> <span class="string">&quot;300m&quot;</span><span class="punctuation">,</span>  </span><br><span class="line"> <span class="attr">&quot;max-file&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span> </span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line"> <span class="attr">&quot;live-restore&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"> <span class="punctuation">&#125;</span> </span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><ul><li>修改证书有效期限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master节点修改证书期限</span></span><br><span class="line">$ vim /usr/lib/systemd/system/kube-controller-manager.service</span><br><span class="line"><span class="comment"># --feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true \</span></span><br><span class="line">--cluster-signing-duration=876000h0m0s \</span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart kube-controller-manager.service</span><br></pre></td></tr></table></figure><ul><li>所有节点添加安全扫描及下载策略</li></ul><p><code>--tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 --image-pull-progress-deadline=30m</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Docekr Runtime</span></span><br><span class="line">$ vim /etc/systemd/system/kubelet.service.d/10-kubelet.conf</span><br><span class="line">[Service] </span><br><span class="line">Environment=<span class="string">&quot;KUBELET_KUBECONFIG_ARGS=--kubeconfig=/etc/kubernetes/kubelet.kubeconfig --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig&quot;</span> </span><br><span class="line">Environment=<span class="string">&quot;KUBELET_SYSTEM_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin&quot;</span> </span><br><span class="line">Environment=<span class="string">&quot;KUBELET_CONFIG_ARGS=--config=/etc/kubernetes/kubelet-conf.yml  --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1&quot;</span> </span><br><span class="line">Environment=<span class="string">&quot;KUBELET_EXTRA_ARGS=&#x27;&#x27; --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 --image-pull-progress-deadline=30m &quot;</span></span><br><span class="line">ExecStart= </span><br><span class="line">ExecStart=/usr/local/bin/kubelet <span class="variable">$KUBELET_KUBECONFIG_ARGS</span> <span class="variable">$KUBELET_CONFIG_ARGS</span> <span class="variable">$KUBELET_SYSTEM_ARGS</span> <span class="variable">$KUBELET_EXTRA_ARGS</span> </span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/kubelet.service.d/10-kubelet.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_SYSTEM_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin --container-runtime=remote --runtime-request-timeout=15m --container-runtime-endpoint=unix:///run/containerd/containerd.sock --cgroup-driver=systemd&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_CONFIG_ARGS=--config=/etc/kubernetes/kubelet-conf.yml&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_EXTRA_ARGS=--node-labels=node.kubernetes.io/node=&#x27;&#x27; --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 --image-pull-progress-deadline=30m &quot;</span></span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/local/bin/kubelet <span class="variable">$KUBELET_KUBECONFIG_ARGS</span> <span class="variable">$KUBELET_CONFIG_ARGS</span> <span class="variable">$KUBELET_SYSTEM_ARGS</span> <span class="variable">$KUBELET_EXTRA_ARGS</span></span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl restart kubelet</span><br></pre></td></tr></table></figure><ul><li>所有节点添加容器启动限制</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">/etc/kubernetes/kubelet-conf.yml</span></span><br><span class="line"><span class="attr">rotateServerCertificates:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">allowedUnsafeSysctls:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;net.core*&quot;</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">&quot;net.ipv4.*&quot;</span></span><br><span class="line"><span class="attr">kubeReserved:</span></span><br><span class="line">  <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">memory:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">ephemeral-storage:</span> <span class="string">10Gi</span></span><br><span class="line"><span class="attr">systemReserved:</span></span><br><span class="line">  <span class="attr">cpu:</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">  <span class="attr">memory:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">ephemeral-storage:</span> <span class="string">10Gi</span></span><br><span class="line">  </span><br><span class="line"><span class="string">$</span> <span class="string">systemctl</span> <span class="string">daemon-reload</span></span><br><span class="line"><span class="string">$</span> <span class="string">systemctl</span> <span class="string">restart</span> <span class="string">kubelet</span></span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://ke.qq.com/course/2738602">更多学习内容请参考-K8s全栈架构师(基于世界五百强生产经验研发)</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> containerd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo配置_Github图床</title>
      <link href="/2022/04/09/tools/picgo%E9%85%8D%E7%BD%AE_Github%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/04/09/tools/picgo%E9%85%8D%E7%BD%AE_Github%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>前言</strong>：Gitee 作为图床的功能无法使用，虽然 Typora 还是正常显示图片，但 Blog 全 404 挂掉了。中间试过换成 Onedrive 作图床，白嫖 5G 免费空间加上 CDN，速度还是可能的，也方便管理(自带误删恢复功能)。但不久后发觉微软的大部分程序都给河蟹了…如：Onedrive、Hotmail 等都无法访问(其实可以嘀，只是要梯子而已！！)，最终还是先改成 Github + cdn.jsdelivr 应付着…</p></blockquote><h3 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h3><ul><li>安装方式都较为简单，在此就不再详说，可参照 PicGo Github。直接下载程序安装，<strong>安装后打开主界面</strong></li></ul><h3 id="创建图库"><a href="#创建图库" class="headerlink" title="创建图库"></a>创建图库</h3><ul><li>登录 Github 后，创建一个新的仓库，一般只需要个仓库名即可，其它默认； (注意权限选择公开 Public )</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220409154656553.png" alt="image-20220409154656553"></p><ul><li>创建一个 <code>token</code>，点击头像处 <code>Settings -&gt; Developer settings -&gt; Personal access tokens</code>，最后点击 <code>generate new token</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220409155120000.png" alt="image-20220409155120000"></p><ul><li>填写用途(任意即可)，勾选 <code>repo</code></li></ul><p>​       <code>token</code> 生成，注意它只会显示一次，所以最好把它复制下来存好，方便下次使用，否则下次有需要重新新建</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220409155243239.png" alt="image-20220409155243239"></p><h3 id="配置-PicGo"><a href="#配置-PicGo" class="headerlink" title="配置 PicGo"></a>配置 PicGo</h3><p>配置 PicGo，依次打开 图床设置 -&gt; Github 图床</p><ul><li>仓库名：yuikuen&#x2F;picgo-cdn_images 刚创建的仓库</li><li>分支名：main 现一般都为这个</li><li>Token：****** 刚生成的 access token</li><li>路径：img&#x2F; 仓库下创建的文件目录</li><li>域名：<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/仓库名</a>   <a href="https://www.jsdelivr.com/">jsDelivr</a> 免费加速</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220409155637537.png" alt="image-20220409155637537"></p><h3 id="配置-Typora"><a href="#配置-Typora" class="headerlink" title="配置 Typora"></a>配置 Typora</h3><p>文件–偏好设置–图像，根据自身环境配置，点击验证图片上传选项即可，下以 <em>Windows</em> 为例</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207161531543.png" alt="image-20211207161531543"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装_Containerd</title>
      <link href="/2022/04/09/centos/centos7%E5%AE%89%E8%A3%85_Containerd/"/>
      <url>/2022/04/09/centos/centos7%E5%AE%89%E8%A3%85_Containerd/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于 containerd 需要调用 runc，所以我们也需要先安装 runc，不过 containerd 提供了一个包含相关依赖的压缩包 <code>cri-containerd-cni-$&#123;VERSION&#125;.$&#123;OS&#125;-$&#123;ARCH&#125;.tar.gz</code></p></blockquote><h3 id="下载部署"><a href="#下载部署" class="headerlink" title="下载部署"></a>下载部署</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/containerd/containerd/releases/download/v1.6.2/cri-containerd-cni-1.6.2-linux-amd64.tar.gz</span><br><span class="line">$ tar -tf cri-containerd-cni-1.6.2-linux-amd64.tar.gz</span><br><span class="line">etc/</span><br><span class="line">etc/cni/</span><br><span class="line">etc/cni/net.d/</span><br><span class="line">etc/cni/net.d/10-containerd-net.conflist</span><br><span class="line">etc/systemd/</span><br><span class="line">etc/systemd/system/</span><br><span class="line">etc/systemd/system/containerd.service</span><br><span class="line">etc/crictl.yaml</span><br><span class="line">usr/</span><br><span class="line">usr/local/</span><br><span class="line">usr/local/bin/</span><br><span class="line">usr/local/bin/containerd-shim-runc-v2</span><br><span class="line">usr/local/bin/containerd-shim</span><br><span class="line">usr/local/bin/crictl</span><br><span class="line">usr/local/bin/ctr</span><br><span class="line">usr/local/bin/containerd-shim-runc-v1</span><br><span class="line">usr/local/bin/containerd</span><br><span class="line">usr/local/bin/ctd-decoder</span><br><span class="line">usr/local/bin/critest</span><br><span class="line">usr/local/bin/containerd-stress</span><br><span class="line">usr/local/sbin/</span><br><span class="line">usr/local/sbin/runc</span><br><span class="line">opt/</span><br><span class="line">opt/cni/</span><br><span class="line">opt/cni/bin/</span><br><span class="line">opt/cni/bin/tuning</span><br><span class="line">opt/cni/bin/vrf</span><br><span class="line">opt/cni/bin/loopback</span><br><span class="line">opt/cni/bin/portmap</span><br><span class="line">opt/cni/bin/ptp</span><br><span class="line">opt/cni/bin/ipvlan</span><br><span class="line">opt/cni/bin/host-device</span><br><span class="line">opt/cni/bin/macvlan</span><br><span class="line">opt/cni/bin/host-local</span><br><span class="line">opt/cni/bin/firewall</span><br><span class="line">opt/cni/bin/bandwidth</span><br><span class="line">opt/cni/bin/sbr</span><br><span class="line">opt/cni/bin/vlan</span><br><span class="line">opt/cni/bin/static</span><br><span class="line">opt/cni/bin/bridge</span><br><span class="line">opt/cni/bin/dhcp</span><br><span class="line">opt/containerd/</span><br><span class="line">opt/containerd/cluster/</span><br><span class="line">opt/containerd/cluster/version</span><br><span class="line">opt/containerd/cluster/gce/</span><br><span class="line">opt/containerd/cluster/gce/cni.template</span><br><span class="line">opt/containerd/cluster/gce/configure.sh</span><br><span class="line">opt/containerd/cluster/gce/env</span><br><span class="line">opt/containerd/cluster/gce/cloud-init/</span><br><span class="line">opt/containerd/cluster/gce/cloud-init/master.yaml</span><br><span class="line">opt/containerd/cluster/gce/cloud-init/node.yaml</span><br></pre></td></tr></table></figure><p>将压缩包解压到系统的各个目录中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -C / -xzf cri-containerd-cni-1.6.2-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>将 <code>/usr/local/bin</code> 和 <code>/usr/local/sbin</code> 追加到 <code>~/.bashrc</code> 文件的 <code>PATH</code> 环境变量中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.bashrc </span><br><span class="line"><span class="comment"># .bashrc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># User specific aliases and functions</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">rm</span>=<span class="string">&#x27;rm -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">cp</span>=<span class="string">&#x27;cp -i&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> <span class="built_in">mv</span>=<span class="string">&#x27;mv -i&#x27;</span></span><br><span class="line"><span class="comment"># 追加下文</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/bin:/usr/local/sbin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Source global definitions</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/bashrc ]; <span class="keyword">then</span></span><br><span class="line">. /etc/bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="生成配置"><a href="#生成配置" class="headerlink" title="生成配置"></a>生成配置</h3><p>生成 Containerd 的默认配置文件 config.toml</p><p>containerd 的默认配置文件为 <code>/etc/containerd/config.toml</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /etc/containerd</span><br><span class="line">$ containerd config default &gt; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure><p>由于 containerd 压缩包中已包含了 <code>etc/systemd/system/containerd.service</code> 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/systemd/system/containerd.service</span><br><span class="line"><span class="comment"># Copyright The containerd Authors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"># you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"># You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=containerd container runtime</span><br><span class="line">Documentation=https://containerd.io</span><br><span class="line">After=network.target local-fs.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStartPre=-/sbin/modprobe overlay</span><br><span class="line">ExecStart=/usr/local/bin/containerd</span><br><span class="line"></span><br><span class="line">Type=notify</span><br><span class="line">Delegate=<span class="built_in">yes</span></span><br><span class="line">KillMode=process</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line"><span class="comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span></span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line"><span class="comment"># Comment TasksMax if your systemd version does not supports it.</span></span><br><span class="line"><span class="comment"># Only systemd 226 and above support this version.</span></span><br><span class="line">TasksMax=infinity</span><br><span class="line">OOMScoreAdjust=-999</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>参考说明：</p><ul><li><code>Delegate</code>：这个选项允许 containerd 以及运行时自己管理自己创建容器的 cgroups。如果不设置这个选项，systemd 就会将进程移到自己的 cgroups 中，从而导致 containerd 无法正确获取容器的资源使用情况</li><li><strong>认情况下，systemd 会在进程的 cgroup 中查找并杀死 containerd 的所有子进程。</strong>KillMode 字段可以设置的值如下<ul><li><code>control-group</code>（默认值）：当前控制组里面的所有子进程，都会被杀掉</li><li><code>process</code>：只杀主进程</li><li><code>mixed</code>：主进程将收到 SIGTERM 信号，子进程收到 SIGKILL 信号</li><li><code>none</code>：没有进程会被杀掉，只是执行服务的 stop 命令</li></ul></li></ul><p><strong>注：此处将 KillMode 的值设置为 process，这样可以确保升级或重启 containerd 时不杀死现有的容器</strong></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>启动完成后就可以使用 containerd 的本地 CLI 工具 <code>ctr</code> 了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> --now containerd</span><br><span class="line">$ ctr version</span><br><span class="line">Client:</span><br><span class="line">  Version:  v1.6.2</span><br><span class="line">  Revision: de8046a5501db9e0e478e1c10cbcfb21af4c6b2d</span><br><span class="line">  Go version: go1.17.2</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line">  Version:  v1.6.2</span><br><span class="line">  Revision: de8046a5501db9e0e478e1c10cbcfb21af4c6b2d</span><br><span class="line">  UUID: 930629ad-150e-46ec-a935-6358cf5298ef</span><br></pre></td></tr></table></figure><p>查看默认生成的配置文件 <code>/etc/containerd/config.toml</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/containerd/config.toml </span><br><span class="line">disabled_plugins = []</span><br><span class="line">imports = []</span><br><span class="line">oom_score = 0</span><br><span class="line">plugin_dir = <span class="string">&quot;&quot;</span></span><br><span class="line">required_plugins = []</span><br><span class="line">root = <span class="string">&quot;/var/lib/containerd&quot;</span></span><br><span class="line">state = <span class="string">&quot;/run/containerd&quot;</span></span><br><span class="line">temp = <span class="string">&quot;&quot;</span></span><br><span class="line">version = 2</span><br><span class="line"></span><br><span class="line">[cgroup]</span><br><span class="line">  path = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">[debug]</span><br><span class="line">  address = <span class="string">&quot;&quot;</span></span><br><span class="line">  format = <span class="string">&quot;&quot;</span></span><br><span class="line">  gid = 0</span><br><span class="line">  level = <span class="string">&quot;&quot;</span></span><br><span class="line">  uid = 0</span><br><span class="line"></span><br><span class="line">[grpc]</span><br><span class="line">  address = <span class="string">&quot;/run/containerd/containerd.sock&quot;</span></span><br><span class="line">  gid = 0</span><br><span class="line">  max_recv_message_size = 16777216</span><br><span class="line">  max_send_message_size = 16777216</span><br><span class="line">  tcp_address = <span class="string">&quot;&quot;</span></span><br><span class="line">  tcp_tls_ca = <span class="string">&quot;&quot;</span></span><br><span class="line">  tcp_tls_cert = <span class="string">&quot;&quot;</span></span><br><span class="line">  tcp_tls_key = <span class="string">&quot;&quot;</span></span><br><span class="line">  uid = 0</span><br><span class="line"></span><br><span class="line">[metrics]</span><br><span class="line">  address = <span class="string">&quot;&quot;</span></span><br><span class="line">  grpc_histogram = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[plugins]</span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.gc.v1.scheduler&quot;</span>]</span><br><span class="line">    deletion_threshold = 0</span><br><span class="line">    mutation_threshold = 100</span><br><span class="line">    pause_threshold = 0.02</span><br><span class="line">    schedule_delay = <span class="string">&quot;0s&quot;</span></span><br><span class="line">    startup_delay = <span class="string">&quot;100ms&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>]</span><br><span class="line">    device_ownership_from_security_context = <span class="literal">false</span></span><br><span class="line">    disable_apparmor = <span class="literal">false</span></span><br><span class="line">    disable_cgroup = <span class="literal">false</span></span><br><span class="line">    disable_hugetlb_controller = <span class="literal">true</span></span><br><span class="line">    disable_proc_mount = <span class="literal">false</span></span><br><span class="line">    disable_tcp_service = <span class="literal">true</span></span><br><span class="line">    enable_selinux = <span class="literal">false</span></span><br><span class="line">    enable_tls_streaming = <span class="literal">false</span></span><br><span class="line">    enable_unprivileged_icmp = <span class="literal">false</span></span><br><span class="line">    enable_unprivileged_ports = <span class="literal">false</span></span><br><span class="line">    ignore_image_defined_volumes = <span class="literal">false</span></span><br><span class="line">    max_concurrent_downloads = 3</span><br><span class="line">    max_container_log_line_size = 16384</span><br><span class="line">    netns_mounts_under_state_dir = <span class="literal">false</span></span><br><span class="line">    restrict_oom_score_adj = <span class="literal">false</span></span><br><span class="line">    sandbox_image = <span class="string">&quot;k8s.gcr.io/pause:3.6&quot;</span></span><br><span class="line">    selinux_category_range = 1024</span><br><span class="line">    stats_collect_period = 10</span><br><span class="line">    stream_idle_timeout = <span class="string">&quot;4h0m0s&quot;</span></span><br><span class="line">    stream_server_address = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    stream_server_port = <span class="string">&quot;0&quot;</span></span><br><span class="line">    systemd_cgroup = <span class="literal">false</span></span><br><span class="line">    tolerate_missing_hugetlb_controller = <span class="literal">true</span></span><br><span class="line">    unset_seccomp_profile = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.cni]</span><br><span class="line">      bin_dir = <span class="string">&quot;/opt/cni/bin&quot;</span></span><br><span class="line">      conf_dir = <span class="string">&quot;/etc/cni/net.d&quot;</span></span><br><span class="line">      conf_template = <span class="string">&quot;&quot;</span></span><br><span class="line">      ip_pref = <span class="string">&quot;&quot;</span></span><br><span class="line">      max_conf_num = 1</span><br><span class="line"></span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd]</span><br><span class="line">      default_runtime_name = <span class="string">&quot;runc&quot;</span></span><br><span class="line">      disable_snapshot_annotations = <span class="literal">true</span></span><br><span class="line">      discard_unpacked_layers = <span class="literal">false</span></span><br><span class="line">      ignore_rdt_not_enabled_errors = <span class="literal">false</span></span><br><span class="line">      no_pivot = <span class="literal">false</span></span><br><span class="line">      snapshotter = <span class="string">&quot;overlayfs&quot;</span></span><br><span class="line"></span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.default_runtime]</span><br><span class="line">        base_runtime_spec = <span class="string">&quot;&quot;</span></span><br><span class="line">        cni_conf_dir = <span class="string">&quot;&quot;</span></span><br><span class="line">        cni_max_conf_num = 0</span><br><span class="line">        container_annotations = []</span><br><span class="line">        pod_annotations = []</span><br><span class="line">        privileged_without_host_devices = <span class="literal">false</span></span><br><span class="line">        runtime_engine = <span class="string">&quot;&quot;</span></span><br><span class="line">        runtime_path = <span class="string">&quot;&quot;</span></span><br><span class="line">        runtime_root = <span class="string">&quot;&quot;</span></span><br><span class="line">        runtime_type = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.default_runtime.options]</span><br><span class="line"></span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes]</span><br><span class="line"></span><br><span class="line">        [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc]</span><br><span class="line">          base_runtime_spec = <span class="string">&quot;&quot;</span></span><br><span class="line">          cni_conf_dir = <span class="string">&quot;&quot;</span></span><br><span class="line">          cni_max_conf_num = 0</span><br><span class="line">          container_annotations = []</span><br><span class="line">          pod_annotations = []</span><br><span class="line">          privileged_without_host_devices = <span class="literal">false</span></span><br><span class="line">          runtime_engine = <span class="string">&quot;&quot;</span></span><br><span class="line">          runtime_path = <span class="string">&quot;&quot;</span></span><br><span class="line">          runtime_root = <span class="string">&quot;&quot;</span></span><br><span class="line">          runtime_type = <span class="string">&quot;io.containerd.runc.v2&quot;</span></span><br><span class="line"></span><br><span class="line">          [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.runtimes.runc.options]</span><br><span class="line">            BinaryName = <span class="string">&quot;&quot;</span></span><br><span class="line">            CriuImagePath = <span class="string">&quot;&quot;</span></span><br><span class="line">            CriuPath = <span class="string">&quot;&quot;</span></span><br><span class="line">            CriuWorkPath = <span class="string">&quot;&quot;</span></span><br><span class="line">            IoGid = 0</span><br><span class="line">            IoUid = 0</span><br><span class="line">            NoNewKeyring = <span class="literal">false</span></span><br><span class="line">            NoPivotRoot = <span class="literal">false</span></span><br><span class="line">            Root = <span class="string">&quot;&quot;</span></span><br><span class="line">            ShimCgroup = <span class="string">&quot;&quot;</span></span><br><span class="line">            SystemdCgroup = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.untrusted_workload_runtime]</span><br><span class="line">        base_runtime_spec = <span class="string">&quot;&quot;</span></span><br><span class="line">        cni_conf_dir = <span class="string">&quot;&quot;</span></span><br><span class="line">        cni_max_conf_num = 0</span><br><span class="line">        container_annotations = []</span><br><span class="line">        pod_annotations = []</span><br><span class="line">        privileged_without_host_devices = <span class="literal">false</span></span><br><span class="line">        runtime_engine = <span class="string">&quot;&quot;</span></span><br><span class="line">        runtime_path = <span class="string">&quot;&quot;</span></span><br><span class="line">        runtime_root = <span class="string">&quot;&quot;</span></span><br><span class="line">        runtime_type = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.containerd.untrusted_workload_runtime.options]</span><br><span class="line"></span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.image_decryption]</span><br><span class="line">      key_model = <span class="string">&quot;node&quot;</span></span><br><span class="line"></span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry]</span><br><span class="line">      config_path = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.auths]</span><br><span class="line"></span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.configs]</span><br><span class="line"></span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.headers]</span><br><span class="line"></span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br><span class="line"></span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.x509_key_pair_streaming]</span><br><span class="line">      tls_cert_file = <span class="string">&quot;&quot;</span></span><br><span class="line">      tls_key_file = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.internal.v1.opt&quot;</span>]</span><br><span class="line">    path = <span class="string">&quot;/opt/containerd&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.internal.v1.restart&quot;</span>]</span><br><span class="line">    interval = <span class="string">&quot;10s&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.internal.v1.tracing&quot;</span>]</span><br><span class="line">    sampling_ratio = 1.0</span><br><span class="line">    service_name = <span class="string">&quot;containerd&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.metadata.v1.bolt&quot;</span>]</span><br><span class="line">    content_sharing_policy = <span class="string">&quot;shared&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.monitor.v1.cgroups&quot;</span>]</span><br><span class="line">    no_prometheus = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.runtime.v1.linux&quot;</span>]</span><br><span class="line">    no_shim = <span class="literal">false</span></span><br><span class="line">    runtime = <span class="string">&quot;runc&quot;</span></span><br><span class="line">    runtime_root = <span class="string">&quot;&quot;</span></span><br><span class="line">    shim = <span class="string">&quot;containerd-shim&quot;</span></span><br><span class="line">    shim_debug = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.runtime.v2.task&quot;</span>]</span><br><span class="line">    platforms = [<span class="string">&quot;linux/amd64&quot;</span>]</span><br><span class="line">    sched_core = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.service.v1.diff-service&quot;</span>]</span><br><span class="line">    default = [<span class="string">&quot;walking&quot;</span>]</span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.service.v1.tasks-service&quot;</span>]</span><br><span class="line">    rdt_config_file = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.snapshotter.v1.aufs&quot;</span>]</span><br><span class="line">    root_path = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.snapshotter.v1.btrfs&quot;</span>]</span><br><span class="line">    root_path = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.snapshotter.v1.devmapper&quot;</span>]</span><br><span class="line">    async_remove = <span class="literal">false</span></span><br><span class="line">    base_image_size = <span class="string">&quot;&quot;</span></span><br><span class="line">    discard_blocks = <span class="literal">false</span></span><br><span class="line">    fs_options = <span class="string">&quot;&quot;</span></span><br><span class="line">    fs_type = <span class="string">&quot;&quot;</span></span><br><span class="line">    pool_name = <span class="string">&quot;&quot;</span></span><br><span class="line">    root_path = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.snapshotter.v1.native&quot;</span>]</span><br><span class="line">    root_path = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.snapshotter.v1.overlayfs&quot;</span>]</span><br><span class="line">    root_path = <span class="string">&quot;&quot;</span></span><br><span class="line">    upperdir_label = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.snapshotter.v1.zfs&quot;</span>]</span><br><span class="line">    root_path = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  [plugins.<span class="string">&quot;io.containerd.tracing.processor.v1.otlp&quot;</span>]</span><br><span class="line">    endpoint = <span class="string">&quot;&quot;</span></span><br><span class="line">    insecure = <span class="literal">false</span></span><br><span class="line">    protocol = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">[proxy_plugins]</span><br><span class="line"></span><br><span class="line">[stream_processors]</span><br><span class="line"></span><br><span class="line">  [stream_processors.<span class="string">&quot;io.containerd.ocicrypt.decoder.v1.tar&quot;</span>]</span><br><span class="line">    accepts = [<span class="string">&quot;application/vnd.oci.image.layer.v1.tar+encrypted&quot;</span>]</span><br><span class="line">    args = [<span class="string">&quot;--decryption-keys-path&quot;</span>, <span class="string">&quot;/etc/containerd/ocicrypt/keys&quot;</span>]</span><br><span class="line">    <span class="built_in">env</span> = [<span class="string">&quot;OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf&quot;</span>]</span><br><span class="line">    path = <span class="string">&quot;ctd-decoder&quot;</span></span><br><span class="line">    returns = <span class="string">&quot;application/vnd.oci.image.layer.v1.tar&quot;</span></span><br><span class="line"></span><br><span class="line">  [stream_processors.<span class="string">&quot;io.containerd.ocicrypt.decoder.v1.tar.gzip&quot;</span>]</span><br><span class="line">    accepts = [<span class="string">&quot;application/vnd.oci.image.layer.v1.tar+gzip+encrypted&quot;</span>]</span><br><span class="line">    args = [<span class="string">&quot;--decryption-keys-path&quot;</span>, <span class="string">&quot;/etc/containerd/ocicrypt/keys&quot;</span>]</span><br><span class="line">    <span class="built_in">env</span> = [<span class="string">&quot;OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf&quot;</span>]</span><br><span class="line">    path = <span class="string">&quot;ctd-decoder&quot;</span></span><br><span class="line">    returns = <span class="string">&quot;application/vnd.oci.image.layer.v1.tar+gzip&quot;</span></span><br><span class="line"></span><br><span class="line">[timeouts]</span><br><span class="line">  <span class="string">&quot;io.containerd.timeout.bolt.open&quot;</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line">  <span class="string">&quot;io.containerd.timeout.shim.cleanup&quot;</span> = <span class="string">&quot;5s&quot;</span></span><br><span class="line">  <span class="string">&quot;io.containerd.timeout.shim.load&quot;</span> = <span class="string">&quot;5s&quot;</span></span><br><span class="line">  <span class="string">&quot;io.containerd.timeout.shim.shutdown&quot;</span> = <span class="string">&quot;3s&quot;</span></span><br><span class="line">  <span class="string">&quot;io.containerd.timeout.task.state&quot;</span> = <span class="string">&quot;2s&quot;</span></span><br><span class="line"></span><br><span class="line">[ttrpc]</span><br><span class="line">  address = <span class="string">&quot;&quot;</span></span><br><span class="line">  gid = 0</span><br><span class="line">  uid = 0</span><br></pre></td></tr></table></figure><p>配置文件内容比较多，其中每一个配置块命名都是 <code>plugins.&quot;io.containerd.xxx.vx.xxx&quot;</code> 形式，都表示一个插件，其中 <code>io.containerd.xxx.vx</code> 表示插件的类型，<code>vx</code> 后面的 <code>xxx</code> 表示插件的 ID，我们可以通过 <code>ctr</code> 查看插件列表</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ctr plugin <span class="built_in">ls</span></span><br><span class="line">TYPE                                  ID                       PLATFORMS      STATUS    </span><br><span class="line">io.containerd.content.v1              content                  -              ok        </span><br><span class="line">io.containerd.snapshotter.v1          aufs                     linux/amd64    skip      </span><br><span class="line">io.containerd.snapshotter.v1          btrfs                    linux/amd64    skip      </span><br><span class="line">io.containerd.snapshotter.v1          devmapper                linux/amd64    error     </span><br><span class="line">io.containerd.snapshotter.v1          native                   linux/amd64    ok        </span><br><span class="line">io.containerd.snapshotter.v1          overlayfs                linux/amd64    ok        </span><br><span class="line">io.containerd.snapshotter.v1          zfs                      linux/amd64    skip      </span><br><span class="line">io.containerd.metadata.v1             bolt                     -              ok        </span><br><span class="line">io.containerd.differ.v1               walking                  linux/amd64    ok        </span><br><span class="line">io.containerd.event.v1                exchange                 -              ok        </span><br><span class="line">io.containerd.gc.v1                   scheduler                -              ok        </span><br><span class="line">io.containerd.service.v1              introspection-service    -              ok        </span><br><span class="line">io.containerd.service.v1              containers-service       -              ok        </span><br><span class="line">io.containerd.service.v1              content-service          -              ok        </span><br><span class="line">io.containerd.service.v1              diff-service             -              ok        </span><br><span class="line">io.containerd.service.v1              images-service           -              ok        </span><br><span class="line">io.containerd.service.v1              leases-service           -              ok        </span><br><span class="line">io.containerd.service.v1              namespaces-service       -              ok        </span><br><span class="line">io.containerd.service.v1              snapshots-service        -              ok        </span><br><span class="line">io.containerd.runtime.v1              linux                    linux/amd64    ok        </span><br><span class="line">io.containerd.runtime.v2              task                     linux/amd64    ok        </span><br><span class="line">io.containerd.monitor.v1              cgroups                  linux/amd64    ok        </span><br><span class="line">io.containerd.service.v1              tasks-service            -              ok        </span><br><span class="line">io.containerd.grpc.v1                 introspection            -              ok        </span><br><span class="line">io.containerd.internal.v1             restart                  -              ok        </span><br><span class="line">io.containerd.grpc.v1                 containers               -              ok        </span><br><span class="line">io.containerd.grpc.v1                 content                  -              ok        </span><br><span class="line">io.containerd.grpc.v1                 diff                     -              ok        </span><br><span class="line">io.containerd.grpc.v1                 events                   -              ok        </span><br><span class="line">io.containerd.grpc.v1                 healthcheck              -              ok        </span><br><span class="line">io.containerd.grpc.v1                 images                   -              ok        </span><br><span class="line">io.containerd.grpc.v1                 leases                   -              ok        </span><br><span class="line">io.containerd.grpc.v1                 namespaces               -              ok        </span><br><span class="line">io.containerd.internal.v1             opt                      -              ok        </span><br><span class="line">io.containerd.grpc.v1                 snapshots                -              ok        </span><br><span class="line">io.containerd.grpc.v1                 tasks                    -              ok        </span><br><span class="line">io.containerd.grpc.v1                 version                  -              ok        </span><br><span class="line">io.containerd.tracing.processor.v1    otlp                     -              skip      </span><br><span class="line">io.containerd.internal.v1             tracing                  -              ok        </span><br><span class="line">io.containerd.grpc.v1                 cri                      linux/amd64    ok        </span><br></pre></td></tr></table></figure><p>顶级配置块下面的子配置块表示该插件的各种配置，比如 cri 插件下面就分为 containerd、cni 和 registry 的配置，而 containerd 下面又可以配置各种 runtime，还可以配置默认的 runtime</p><p>比如现要为镜像配置一个加速器，那么就需要在 cri 配置块下面的 <code>registry</code> 配置块下面进行配置 <code>registry.mirrors</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/containerd/config.toml | grep -i plugins.*.registry </span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.auths]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.configs]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.headers]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br></pre></td></tr></table></figure><p>配置镜像加速，配置完成后需要重启服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/containerd/config.toml | grep -i plugins.*.registry </span><br><span class="line">    [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.auths]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.configs]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.headers]</span><br><span class="line">      [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors]</span><br><span class="line">        [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;docker.io&quot;</span>]</span><br><span class="line">          endpoint = [<span class="string">&quot;https://eihzr0te.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">        [plugins.<span class="string">&quot;io.containerd.grpc.v1.cri&quot;</span>.registry.mirrors.<span class="string">&quot;k8s.gcr.io&quot;</span>]</span><br><span class="line">          endpoint = [<span class="string">&quot;https://registry.cn-hongkong.aliyuncs.com/yk-k8s&quot;</span>]        </span><br></pre></td></tr></table></figure><ul><li><code>registry.mirrors.&quot;xxx&quot;</code>: 表示需要配置 mirror 的镜像仓库，例如 <code>registry.mirrors.&quot;docker.io&quot;</code> 表示配置 docker.io 的 mirror</li><li><code>endpoint</code>: 表示提供 mirror 的镜像加速服务，比如我们可以注册一个阿里云的镜像服务来作为 docker.io 的 mirror</li></ul><p>默认配置中还有两个关于存储的配置路径</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root = <span class="string">&quot;/var/lib/containerd&quot;</span></span><br><span class="line">state = <span class="string">&quot;/run/containerd&quot;</span></span><br></pre></td></tr></table></figure><ul><li><code>root</code> 是用来保存持久化数据，<strong>包括 Snapshots, Content, Metadata 以及各种插件的数据</strong>，每一个插件都有自己单独的目录，Containerd 本身不存储任何数据，它的所有功能都来自于已加载的插件</li><li><code>state</code> 是用来保存运行时的临时数据的，包括 sockets、pid、挂载点、运行时状态以及不需要持久化的插件数据</li></ul>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> containerd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Tomcat(编译)</title>
      <link href="/2022/04/07/tomcat/centos7%E9%83%A8%E7%BD%B2_Tomcat(%E7%BC%96%E8%AF%91)/"/>
      <url>/2022/04/07/tomcat/centos7%E9%83%A8%E7%BD%B2_Tomcat(%E7%BC%96%E8%AF%91)/</url>
      
        <content type="html"><![CDATA[<h3 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220311165649843.png" alt="image-20220311165649843"></p><p>首先确保 JDK 环境正常，再根据实际需要下载源码包；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.73/bin/apache-tomcat-8.5.73.tar.gz</span><br><span class="line">$ tar -xf apache-tomcat-8.5.73.tar.gz -C /usr/local/</span><br><span class="line">$ <span class="built_in">mv</span> apache-tomcat-8.5.73 tomcat</span><br></pre></td></tr></table></figure><p>解压完成后即可以启动 Tomcat，检查是否安装成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/tomcat/bin</span><br><span class="line">$ ./sh startup.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/java/jre</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line"></span><br><span class="line">$ lsof -i:8080</span><br><span class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    2000 root   49u  IPv6  59146      0t0  TCP *:webcache (LISTEN)</span><br><span class="line"></span><br><span class="line">$ curl http://188.188.3.112:8080</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">    &lt;<span class="built_in">head</span>&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="line">        &lt;title&gt;Apache Tomcat/8.5.40&lt;/title&gt;</span><br><span class="line">        &lt;<span class="built_in">link</span> href=<span class="string">&quot;favicon.ico&quot;</span> rel=<span class="string">&quot;icon&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span><br><span class="line">        &lt;<span class="built_in">link</span> href=<span class="string">&quot;favicon.ico&quot;</span> rel=<span class="string">&quot;shortcut icon&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;image/x-icon&quot;</span> /&gt;</span><br><span class="line">        &lt;<span class="built_in">link</span> href=<span class="string">&quot;tomcat.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><ul><li>首先，需要为 tomcat 配置 pid</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/tomcat/bin/catalina.sh</span><br><span class="line"><span class="comment"># Copy CATALINA_BASE from CATALINA_HOME if not already set</span></span><br><span class="line">[ -z <span class="string">&quot;<span class="variable">$CATALINA_BASE</span>&quot;</span> ] &amp;&amp; CATALINA_BASE=<span class="string">&quot;<span class="variable">$CATALINA_HOME</span>&quot;</span></span><br><span class="line">CATALINA_PID=<span class="string">&quot;<span class="variable">$CATALINA_BASE</span>/tomcat.pid&quot;</span>  <span class="comment"># 设置pid。一定要加在CATALINA_BASE定义后面，要不然pid会生成到/下面</span></span><br></pre></td></tr></table></figure><ul><li>添加 tomcat.service</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /lib/systemd/system/tomcat.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Tomcat</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line"></span><br><span class="line">Environment=<span class="string">&quot;JAVA_HOME=/usr/local/java&quot;</span></span><br><span class="line"></span><br><span class="line">PIDFile=/usr/local/tomcat/tomcat.pid</span><br><span class="line">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> lanmp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_SonarQube8.9.x</title>
      <link href="/2022/04/07/sonarqube/centos7%E9%83%A8%E7%BD%B2_SonarQube8.9.x/"/>
      <url>/2022/04/07/sonarqube/centos7%E9%83%A8%E7%BD%B2_SonarQube8.9.x/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：SonarQube 8.9.6 LTS + JDK 11 + PostgreSQL 12</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld</span><br><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config /etc/sysconfig/selinux</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --zone=public --add-port=9000/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><blockquote><p>注意：根据不同版本，需要的环境支持也不一样，在此使用得是 JDK11、PostgreSQL 12</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115100610113.png" alt="image-20220115100610113"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115100736513.png" alt="image-20220115100736513"></p><p>1）<strong>内核配置</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf</span><br><span class="line"><span class="comment"># 文件末尾加入如下配置</span></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">fs.file-max=65536</span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 文件末尾加入如下配置</span></span><br><span class="line">*softnofile65536</span><br><span class="line">*hardnofile65536</span><br><span class="line">*soft<span class="built_in">nproc</span>4096</span><br><span class="line">*hard<span class="built_in">nproc</span>4096</span><br></pre></td></tr></table></figure><p>2）安装 Java</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y java-11-openjdk java-11-openjdk-devel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看并确认具体安装路径</span></span><br><span class="line">$ <span class="built_in">which</span> java</span><br><span class="line">$ <span class="built_in">ls</span> -lr /usr/bin/java</span><br><span class="line">$ <span class="built_in">ls</span> -lrt /etc/alternatives/java</span><br><span class="line">/etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64/bin/java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>3）安装 PostgreSQL</p><ul><li>下载 RPM 文件安装并初始化</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm -y</span><br><span class="line">$ yum install postgresql10-contrib postgresql10-server -y</span><br><span class="line">$ /usr/pgsql-10/bin/postgresql-10-setup initdb</span><br></pre></td></tr></table></figure><ul><li>修改配置，开启访问权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /var/lib/pgsql/10/data/pg_hba.conf&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 peer、ident 改为 trust ，改了6行</span></span><br><span class="line">$ vim /var/lib/pgsql/10/data/pg_hba.conf</span><br><span class="line"><span class="comment"># &quot;local&quot; is for Unix domain socket connections only</span></span><br><span class="line"><span class="built_in">local</span>   all             all                                     trust</span><br><span class="line"><span class="comment"># IPv4 local connections:</span></span><br><span class="line">host    all             all             127.0.0.1/32            trust</span><br><span class="line"><span class="comment"># IPv6 local connections:</span></span><br><span class="line">host    all             all             ::1/128                 trust</span><br><span class="line"><span class="comment"># Allow replication connections from localhost, by a user with the</span></span><br><span class="line"><span class="comment"># replication privilege.</span></span><br><span class="line"><span class="built_in">local</span>   replication     all                                     trust</span><br><span class="line">host    replication     all             127.0.0.1/32            trust</span><br><span class="line">host    replication     all             ::1/128                 trust</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> --now postgresql-10.service</span><br></pre></td></tr></table></figure><ul><li>创建用户及数据库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ su - postgres</span><br><span class="line">Last login: Mon Nov  1 11:14:43 CST 2021 on pts/0</span><br><span class="line">-bash-4.2$ psql</span><br><span class="line">psql (10.18)</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line">postgres=<span class="comment"># CREATE DATABASE sonar TEMPLATE template0 ENCODING &#x27;utf8&#x27; ;</span></span><br><span class="line">postgres=<span class="comment"># create user sonar;</span></span><br><span class="line">postgres=<span class="comment"># alter user sonar with password &#x27;sonar&#x27;;</span></span><br><span class="line">postgres=<span class="comment"># alter role sonar createdb;</span></span><br><span class="line">postgres=<span class="comment"># alter role sonar superuser;</span></span><br><span class="line">postgres=<span class="comment"># alter role sonar createrole;</span></span><br><span class="line">postgres=<span class="comment"># alter database sonar owner to sonar;</span></span><br><span class="line">postgres=<span class="comment"># \q</span></span><br><span class="line">-bash-4.2$ <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="安装-SonarQube"><a href="#安装-SonarQube" class="headerlink" title="安装 SonarQube"></a>安装 SonarQube</h3><ul><li>添加独立用户，下载安装包并解压修改权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ adduser sonar</span><br><span class="line">$ wget -c https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.9.6.50800.zip</span><br><span class="line">$ unzip sonarqube-8.9.6.50800.zip</span><br><span class="line">$ <span class="built_in">mv</span> sonarqube-8.9.6.50800 /usr/local/sonarqube</span><br><span class="line">$ <span class="built_in">chown</span> -R sonar:sonar /usr/local/sonarqube/</span><br></pre></td></tr></table></figure><ul><li>配置修改，链接 postgresql</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/sonarqube/conf/sonar.properties</span><br><span class="line">sonar.jdbc.username=sonar</span><br><span class="line">sonar.jdbc.password=sonar</span><br><span class="line">sonar.jdbc.url=jdbc:postgresql://localhost/sonar</span><br><span class="line">sonar.jdbc.maxActive=60</span><br><span class="line">sonar.jdbc.maxIdle=5</span><br><span class="line">sonar.jdbc.minIdle=2</span><br><span class="line">sonar.jdbc.maxWait=5000</span><br><span class="line">sonar.jdbc.minEvictableIdleTimeMillis=600000</span><br><span class="line">sonar.jdbc.timeBetweenEvictionRunsMillis=30000</span><br><span class="line">sonar.jdbc.removeAbandoned=<span class="literal">true</span></span><br><span class="line">sonar.jdbc.removeAbandonedTimeout=60</span><br></pre></td></tr></table></figure><ul><li>修改环境变量</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> SONAR_HOME=/usr/local/sonarqube</span><br><span class="line"><span class="built_in">export</span> SONAR_RUNNER_HOME=/usr/local/sonar-scanner</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$SONAR_RUNNER_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$SONAR_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><ul><li>启动服务并设置开机自启</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ su - sonar</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/sonarqube/bin/linux-x86-64/</span><br><span class="line">$ ./sonar.sh start</span><br><span class="line">Starting SonarQube...</span><br><span class="line">Started SonarQube.</span><br><span class="line"><span class="comment"># 其他命令</span></span><br><span class="line">Usage: ./sonar.sh &#123; console | start | stop | force-stop | restart | status | dump &#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/sonar.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=SonarQube Server</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/sonarqube/bin/linux-x86-64/sonar.sh start</span><br><span class="line">ExecStop= /usr/local/sonarqube/bin/linux-x86-64/sonar.sh stop</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">LimitNPROC=4096</span><br><span class="line">User=sonar</span><br><span class="line">Group=sonar</span><br><span class="line">Restart=on-failure</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl restart sonar.service</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now sonar.service &amp;&amp; systemctl status sonar.service</span><br></pre></td></tr></table></figure><h3 id="程序汉化"><a href="#程序汉化" class="headerlink" title="程序汉化"></a>程序汉化</h3><blockquote><p>汉化请自行到 Github 下载相应版本，再上传到 <code>./sonarqube/extensions/plugins</code>，重启服务即可</p><p>默认账密 admin&#x2F;admin，<a href="http://server-ip:9000/">http://server-IP:9000</a></p></blockquote><p>SonarQube 汉化包兼容列表如下：</p><table><thead><tr><th><strong>SonarQube</strong></th><th><strong>9.0</strong></th><th><strong>9.1</strong></th><th><strong>9.2</strong></th><th><strong>9.3</strong></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>sonar-l10n-zh</td><td>9.0</td><td>9.1</td><td>9.2</td><td>9.3</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>SonarQube</strong></td><td><strong>8.0</strong></td><td><strong>8.1</strong></td><td><strong>8.2</strong></td><td><strong>8.3</strong></td><td><strong>8.4</strong></td><td><strong>8.5</strong></td><td><strong>8.6</strong></td><td><strong>8.7</strong></td><td><strong>8.8</strong></td><td><strong>8.9</strong></td></tr><tr><td>sonar-l10n-zh</td><td>8.0</td><td>8.1</td><td>8.2</td><td>8.3</td><td>8.4</td><td>8.5</td><td>8.6</td><td>8.7</td><td>8.8</td><td>8.9</td></tr><tr><td><strong>SonarQube</strong></td><td><strong>7.0</strong></td><td><strong>7.1</strong></td><td><strong>7.2</strong></td><td><strong>7.3</strong></td><td><strong>7.4</strong></td><td><strong>7.5</strong></td><td><strong>7.6</strong></td><td><strong>7.7</strong></td><td><strong>7.8</strong></td><td><strong>7.9</strong></td></tr><tr><td>sonar-l10n-zh</td><td>1.20</td><td>1.21</td><td>1.22</td><td>1.23</td><td>1.24</td><td>1.25</td><td>1.26</td><td>1.27</td><td>1.28</td><td>1.29</td></tr><tr><td><strong>SonarQube</strong></td><td><strong>6.0</strong></td><td><strong>6.1</strong></td><td><strong>6.2</strong></td><td><strong>6.3</strong></td><td><strong>6.4</strong></td><td><strong>6.5</strong></td><td><strong>6.6</strong></td><td><strong>6.7</strong></td><td></td><td></td></tr><tr><td>sonar-l10n-zh</td><td>1.12</td><td>1.13</td><td>1.14</td><td>1.15</td><td>1.16</td><td>1.17</td><td>1.18</td><td>1.19</td><td></td><td></td></tr><tr><td><strong>SonarQube</strong></td><td></td><td></td><td></td><td></td><td><strong>5.4</strong></td><td><strong>5.5</strong></td><td><strong>5.6</strong></td><td></td><td></td><td></td></tr><tr><td>sonar-l10n-zh</td><td></td><td></td><td></td><td></td><td>1.9</td><td>1.10</td><td>1.11</td><td></td><td></td><td></td></tr><tr><td><strong>SonarQube</strong></td><td><strong>4.0</strong></td><td><strong>4.1</strong></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>sonar-l10n-zh</td><td>1.7</td><td>1.8</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>SonarQube</strong></td><td></td><td><strong>3.1</strong></td><td><strong>3.2</strong></td><td><strong>3.3</strong></td><td><strong>3.4</strong></td><td><strong>3.5</strong></td><td><strong>3.6</strong></td><td><strong>3.7</strong></td><td></td><td></td></tr><tr><td>sonar-l10n-zh</td><td></td><td>1.0</td><td>1.1</td><td>1.2</td><td>1.3</td><td>1.4</td><td>1.5</td><td>1.6</td><td></td><td></td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310121548385.png" alt="image-20220310121548385"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115134225295.png" alt="image-20220115134225295"></p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonarqube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell懒人脚本_定时清除buff&amp;cache</title>
      <link href="/2022/04/07/shell/shell%E6%87%92%E4%BA%BA%E8%84%9A%E6%9C%AC_%E5%AE%9A%E6%97%B6%E6%B8%85%E9%99%A4buff&amp;cache/"/>
      <url>/2022/04/07/shell/shell%E6%87%92%E4%BA%BA%E8%84%9A%E6%9C%AC_%E5%AE%9A%E6%97%B6%E6%B8%85%E9%99%A4buff&amp;cache/</url>
      
        <content type="html"><![CDATA[<p><strong>新增脚本</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> <span class="variable">$HOME</span>/cache.sh &amp;&amp; vim ~/cache.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">DAY=`<span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d %H:%M&quot;</span>`</span><br><span class="line">MEM=`free -m | grep -i <span class="string">&quot;mem&quot;</span> | awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$MEM</span> -ge 1000 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$DAY</span> MEM:<span class="variable">$MEM</span> No problem&quot;</span> &gt;&gt; Memory.<span class="built_in">log</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">sync</span>; <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$DAY</span> MEM:<span class="variable">$MEM</span> Deleted Successful&quot;</span> &gt;&gt; Memory.<span class="built_in">log</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chmod</span> +x <span class="variable">$HOME</span>/cache.sh</span><br></pre></td></tr></table></figure><p><strong>添加任务</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line">*/1 * * * * sudo -u root /bin/sh /home/yuen/cache.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tailf /var/log/cron</span><br><span class="line">Feb 28 16:02:01 cloud CROND[16518]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br><span class="line">Feb 28 16:03:01 cloud CROND[16529]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br><span class="line">Feb 28 16:04:01 cloud CROND[16540]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br><span class="line">Feb 28 16:05:01 cloud CROND[16551]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br><span class="line">Feb 28 16:06:01 cloud CROND[16563]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br><span class="line">Feb 28 16:07:02 cloud CROND[16576]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br><span class="line">Feb 28 16:08:01 cloud CROND[16587]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br><span class="line">Feb 28 16:09:01 cloud CROND[16598]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br><span class="line">Feb 28 16:10:01 cloud CROND[16609]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br><span class="line">Feb 28 16:11:01 cloud CROND[16622]: (root) CMD (sudo -u root /bin/sh /home/yuen/cache.sh)</span><br></pre></td></tr></table></figure><p><strong>参考脚本</strong></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh  </span></span><br><span class="line">used=`free -m | awk <span class="string">&#x27;NR==2&#x27;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">free=`free -m | awk <span class="string">&#x27;NR==2&#x27;</span> | awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;===========================&quot;</span> &gt;&gt; /app/memory/logs/mem.log</span><br><span class="line"><span class="built_in">date</span> &gt;&gt; /app/memory/logs/mem.log</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Memory usage before | [Use：<span class="variable">$&#123;used&#125;</span>MB][Free：<span class="variable">$&#123;free&#125;</span>MB]&quot;</span> &gt;&gt; /app/memory/logs/mem.log</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$free</span> -le 4000 ] ; <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">sync</span> &amp;&amp; <span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">                <span class="built_in">sync</span> &amp;&amp; <span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">                <span class="built_in">sync</span> &amp;&amp; <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br><span class="line">                used_ok=`free -m | awk <span class="string">&#x27;NR==2&#x27;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">                free_ok=`free -m | awk <span class="string">&#x27;NR==2&#x27;</span> | awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Memory usage after | [Use：<span class="variable">$&#123;used_ok&#125;</span>MB][Free：<span class="variable">$&#123;free_ok&#125;</span>MB]&quot;</span> &gt;&gt; /app/memory/logs/mem.log</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;OK&quot;</span> &gt;&gt; /app/memory/logs/mem.log</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;Not required&quot;</span> &gt;&gt; /app/memory/logs/mem.log</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
            <tag> sh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载-非常全面的CentOS7系统安全检测和加固脚本</title>
      <link href="/2022/04/07/reprint/%E8%BD%AC%E8%BD%BD-%E9%9D%9E%E5%B8%B8%E5%85%A8%E9%9D%A2%E7%9A%84CentOS7%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B%E5%92%8C%E5%8A%A0%E5%9B%BA%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/04/07/reprint/%E8%BD%AC%E8%BD%BD-%E9%9D%9E%E5%B8%B8%E5%85%A8%E9%9D%A2%E7%9A%84CentOS7%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E6%A3%80%E6%B5%8B%E5%92%8C%E5%8A%A0%E5%9B%BA%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要是为了 Linux 系统的安全，通过脚本对 Linux 系统进行一键检测和一键加固</p></blockquote><p>此脚本是按三级等保要求，编写的一键检查脚本，此脚本只适合linux分支中的redhat、centos，运行脚本将结果输出到自定义的文件中，脚本结果需要人为检查。</p><p>1）系统检测脚本，此检查脚本包含以下几块内容：</p><ul><li>系统基本信息</li><li>资源使用情况</li><li>系统用户情况</li><li>身份鉴别安全</li><li>访问控制安全</li><li>安全审计</li><li>剩余信息保护</li><li>入侵防范安全</li><li>恶意代码防范</li><li>资源控制安全</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> CentOS_Check_Script.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="comment">##Filename:     CentOS_Check_Script.sh</span></span><br><span class="line"><span class="comment">##Date:         2019-03-01</span></span><br><span class="line"><span class="comment">##Description:  Security detection script</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;##########################################################################&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#                                                                        #&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#                        Epoint health check script                      #&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#                                                                        #&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#警告:本脚本只是一个检查的操作,未对服务器做任何修改,管理员可以根据此报告 #&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#进行相应的安全整改                                                      #&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;##########################################################################&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="comment">#read -p &quot;=====================Are You Ready,Please press enter==================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;##########################################################################&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#                                                                        #&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#                               主机安全检测                             #&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#                                                                        #&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;##########################################################################&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;系统基本信息&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line">hostname=$(<span class="built_in">uname</span> -n)</span><br><span class="line">system=$(<span class="built_in">cat</span> /etc/os-release | grep <span class="string">&quot;^NAME&quot;</span> | awk -F\&quot; <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">version=$(<span class="built_in">cat</span> /etc/redhat-release | awk <span class="string">&#x27;&#123;print $4$5&#125;&#x27;</span>)</span><br><span class="line">kernel=$(<span class="built_in">uname</span> -r)</span><br><span class="line">platform=$(<span class="built_in">uname</span> -p)</span><br><span class="line">address=$(ip addr | grep inet | grep -v <span class="string">&quot;inet6&quot;</span> | grep -v <span class="string">&quot;127.0.0.1&quot;</span> | awk <span class="string">&#x27;&#123; print $2; &#125;&#x27;</span> | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;\t&#x27;</span> )</span><br><span class="line">cpumodel=$(<span class="built_in">cat</span> /proc/cpuinfo | grep name | <span class="built_in">cut</span> -f2 -d: | <span class="built_in">uniq</span>)</span><br><span class="line">cpu=$(<span class="built_in">cat</span> /proc/cpuinfo | grep <span class="string">&#x27;processor&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> | <span class="built_in">wc</span> -l)</span><br><span class="line">machinemodel=$(dmidecode | grep <span class="string">&quot;Product Name&quot;</span> | sed <span class="string">&#x27;s/^[ \t]*//g&#x27;</span> | <span class="built_in">tr</span> <span class="string">&#x27;\n&#x27;</span> <span class="string">&#x27;\t&#x27;</span> )</span><br><span class="line"><span class="built_in">date</span>=$(<span class="built_in">date</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;主机名:           <span class="variable">$hostname</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统名称:         <span class="variable">$system</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统版本:         <span class="variable">$version</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;内核版本:         <span class="variable">$kernel</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统类型:         <span class="variable">$platform</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;本机IP地址:       <span class="variable">$address</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;CPU型号:          <span class="variable">$cpumodel</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;CPU核数:          <span class="variable">$cpu</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;机器型号:         <span class="variable">$machinemodel</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统时间:         <span class="variable">$date</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;资源使用情况&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line">summemory=$(free -h |grep <span class="string">&quot;Mem:&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">freememory=$(free -h |grep <span class="string">&quot;Mem:&quot;</span> | awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>)</span><br><span class="line">usagememory=$(free -h |grep <span class="string">&quot;Mem:&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)</span><br><span class="line"><span class="built_in">uptime</span>=$(<span class="built_in">uptime</span> | awk <span class="string">&#x27;&#123;print $2&quot; &quot;$3&quot; &quot;$4&quot; &quot;$5&#125;&#x27;</span> | sed <span class="string">&#x27;s/,$//g&#x27;</span>)</span><br><span class="line">loadavg=$(<span class="built_in">uptime</span> | awk <span class="string">&#x27;&#123;print $9&quot; &quot;$10&quot; &quot;$11&quot; &quot;$12&quot; &quot;$13&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;总内存大小:           <span class="variable">$summemory</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;已使用内存大小:       <span class="variable">$usagememory</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;可使用内存大小:       <span class="variable">$freememory</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统运行时间:         <span class="variable">$uptime</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统负载:             <span class="variable">$loadavg</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;内存状态:&quot;</span></span><br><span class="line">vmstat 2 5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;僵尸进程:&quot;</span></span><br><span class="line">ps -ef | grep zombie | grep -v grep</span><br><span class="line"><span class="keyword">if</span> [ $? == 1 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;无僵尸进程&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;有僵尸进程------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;耗CPU最多的进程:&quot;</span></span><br><span class="line">ps auxf |<span class="built_in">sort</span> -nr -k 3 |<span class="built_in">head</span> -5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;耗内存最多的进程:&quot;</span></span><br><span class="line">ps auxf |<span class="built_in">sort</span> -nr -k 4 |<span class="built_in">head</span> -5</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;环境变量:&quot;</span></span><br><span class="line"><span class="built_in">env</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;路由表:&quot;</span></span><br><span class="line">route -n</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;监听端口:&quot;</span></span><br><span class="line">netstat -tunlp</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;当前建立的连接:&quot;</span></span><br><span class="line">netstat -n | awk <span class="string">&#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开机启动的服务:&quot;</span></span><br><span class="line">systemctl list-unit-files | grep enabled</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;系统用户情况&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;活动用户:&quot;</span></span><br><span class="line">w | <span class="built_in">tail</span> -n +2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;系统所有用户:&quot;</span></span><br><span class="line"><span class="built_in">cut</span> -d: -f1,2,3,4 /etc/passwd</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;系统所有组:&quot;</span></span><br><span class="line"><span class="built_in">cut</span> -d: -f1,2,3 /etc/group</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;当前用户的计划任务:&quot;</span></span><br><span class="line">crontab -l</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;身份鉴别安全&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line">grep -i <span class="string">&quot;^password.*requisite.*pam_cracklib.so&quot;</span> /etc/pam.d/system-auth  &gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;密码复杂度:已设置&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    grep -i <span class="string">&quot;pam_pwquality\.so&quot;</span> /etc/pam.d/system-auth &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;密码复杂度:已设置&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;密码复杂度:未设置,请加固密码--------[需调整]&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line">awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;if($2!~/^!|^*/)&#123;print &quot;&gt;&gt;&gt;(&quot;$1&quot;)&quot; &quot; 是一个未被锁定的账户,请管理员检查是否是可疑账户--------[需调整]&quot;&#125;&#125;&#x27;</span> /etc/shadow</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line">more /etc/login.defs | grep -E <span class="string">&quot;PASS_MAX_DAYS&quot;</span> | grep -v <span class="string">&quot;#&quot;</span> |awk -F<span class="string">&#x27; &#x27;</span>  <span class="string">&#x27;&#123;if($2!=90)&#123;print &quot;&gt;&gt;&gt;密码过期天数是&quot;$2&quot;天,请管理员改成90天------[需调整]&quot;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line">grep -i <span class="string">&quot;^auth.*required.*pam_tally2.so.*$&quot;</span> /etc/pam.d/sshd  &gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;登入失败处理:已开启&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;登入失败处理:未开启,请加固登入失败锁定功能----------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;访问控制安全&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统中存在以下非系统默认用户:&quot;</span></span><br><span class="line">more /etc/passwd |awk -F <span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;if($3&gt;500)&#123;print &quot;&gt;&gt;&gt;/etc/passwd里面的&quot;$1 &quot;的UID为&quot;$3&quot;，该账户非系统默认账户，请管理员确认是否为可疑账户--------[需调整]&quot;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统特权用户:&quot;</span></span><br><span class="line">awk -F: <span class="string">&#x27;$3==0 &#123;print $1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统中空口令账户:&quot;</span></span><br><span class="line">awk -F: <span class="string">&#x27;($2==&quot;!!&quot;) &#123;print $1&quot;该账户为空口令账户，请管理员确认是否为新增账户，如果为新建账户，请配置密码-------[需调整]&quot;&#125;&#x27;</span> /etc/shadow</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;安全审计&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;正常情况下登录到本机30天内的所有用户的历史记录:&quot;</span></span><br><span class="line">last | <span class="built_in">head</span> -n 30</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;查看syslog日志审计服务是否开启:&quot;</span></span><br><span class="line"><span class="keyword">if</span> service rsyslog status | egrep <span class="string">&quot; active \(running&quot;</span>;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;经分析,syslog服务已开启&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;经分析,syslog服务未开启，建议通过service rsyslog start开启日志审计功能---------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;查看syslog日志是否开启外发:&quot;</span></span><br><span class="line"><span class="keyword">if</span> more /etc/rsyslog.conf | egrep <span class="string">&quot;@...\.|@..\.|@.\.|\*.\* @...\.|\*\.\* @..\.|\*\.\* @.\.&quot;</span>;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;经分析,客户端syslog日志已开启外发--------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;经分析,客户端syslog日志未开启外发---------[无需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;审计的要素和审计日志:&quot;</span></span><br><span class="line">more /etc/rsyslog.conf  | grep -v <span class="string">&quot;^[$|#]&quot;</span> | grep -v <span class="string">&quot;^$&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统中关键文件修改时间:&quot;</span></span><br><span class="line"><span class="built_in">ls</span> -ltr /bin/ls /bin/login /etc/passwd  /bin/ps /etc/shadow|awk <span class="string">&#x27;&#123;print &quot;&gt;&gt;&gt;文件名：&quot;$9&quot;  &quot;&quot;最后修改时间：&quot;$6&quot; &quot;$7&quot; &quot;$8&#125;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">###############################################################################################</span></span><br><span class="line"><span class="string">#   ls文件:是存储ls命令的功能函数,被删除以后,就无法执行ls命令                                 #</span></span><br><span class="line"><span class="string">#   login文件:login是控制用户登录的文件,一旦被篡改或删除,系统将无法切换用户或登陆用户         #</span></span><br><span class="line"><span class="string">#   /etc/passwd是一个文件,主要是保存用户信息                                                  #</span></span><br><span class="line"><span class="string">#   /bin/ps 进程查看命令功能支持文件,文件损坏或被更改后,无法正常使用ps命令                    #</span></span><br><span class="line"><span class="string">#   /etc/shadow是/etc/passwd的影子文件,密码存放在该文件当中,并且只有root用户可读              #</span></span><br><span class="line"><span class="string">###############################################################################################&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查重要日志文件是否存在:&quot;</span></span><br><span class="line">log_secure=/var/log/secure</span><br><span class="line">log_messages=/var/log/messages</span><br><span class="line">log_cron=/var/log/cron</span><br><span class="line">log_boot=/var/log/boot.log</span><br><span class="line">log_dmesg=/var/log/dmesg</span><br><span class="line"><span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$log_secure</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/secure日志文件存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/secure日志文件不存在------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$log_messages</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/messages日志文件存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/messages日志文件不存在------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$log_cron</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/cron日志文件存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/cron日志文件不存在--------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$log_boot</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/boot.log日志文件存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/boot.log日志文件不存在--------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -e <span class="string">&quot;<span class="variable">$log_dmesg</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/dmesg日志文件存在&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span>  <span class="string">&quot;&gt;&gt;&gt;/var/log/dmesg日志文件不存在--------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;剩余信息保护&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;分区情况:&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;如果磁盘空间利用率过高，请及时调整---------[需调整]&quot;</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;可用块设备信息:&quot;</span></span><br><span class="line">lsblk</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;文件系统信息:&quot;</span></span><br><span class="line">more /etc/fstab  | grep -v <span class="string">&quot;^#&quot;</span> | grep -v <span class="string">&quot;^$&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;入侵防范安全&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;系统入侵行为:&quot;</span></span><br><span class="line">more /var/log/secure |grep refused</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;有入侵行为，请分析处理--------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;无入侵行为&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;用户错误登入列表:&quot;</span></span><br><span class="line">lastb | <span class="built_in">head</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 1 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;无用户错误登入列表&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;用户错误登入--------[需调整]&quot;</span></span><br><span class="line">    lastb | <span class="built_in">head</span> </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ssh暴力登入信息:&quot;</span></span><br><span class="line">more /var/log/secure | grep  <span class="string">&quot;Failed&quot;</span> &gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 1 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;无ssh暴力登入信息&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    more /var/log/secure|awk <span class="string">&#x27;/Failed/&#123;print $(NF-3)&#125;&#x27;</span>|<span class="built_in">sort</span>|<span class="built_in">uniq</span> -c|awk <span class="string">&#x27;&#123;print &quot;&gt;&gt;&gt;登入失败的IP和尝试次数: &quot;$2&quot;=&quot;$1&quot;次---------[需调整]&quot;;&#125;&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;恶意代码防范&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查是否安装病毒软件:&quot;</span></span><br><span class="line">crontab -l | grep clamscan.sh &gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;已安装ClamAV杀毒软件&quot;</span></span><br><span class="line">  crontab -l | grep freshclam.sh &gt; /dev/null</span><br><span class="line">  <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;已部署定时更新病毒库&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;未安装ClamAV杀毒软件,请部署杀毒软件加固主机防护--------[无需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;资源控制安全&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;查看是否开启了xinetd服务:&quot;</span></span><br><span class="line"><span class="keyword">if</span> ps -elf |grep xinet |grep -v <span class="string">&quot;grep xinet&quot;</span>;<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;xinetd服务正在运行，请检查是否可以把xinetd服务关闭--------[无需调整]&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;xinetd服务未开启-------[无需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;查看是否开启了ssh服务:&quot;</span></span><br><span class="line"><span class="keyword">if</span> service sshd status | grep -E <span class="string">&quot;listening on|active \(running\)&quot;</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;SSH服务已开启&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;SSH服务未开启--------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;查看是否开启了Telnet-Server服务:&quot;</span></span><br><span class="line"><span class="keyword">if</span> more /etc/xinetd.d/telnetd 2&gt;&amp;1|grep -E <span class="string">&quot;disable=no&quot;</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;Telnet-Server服务已开启&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;Telnet-Server服务未开启--------[无需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line">ps axu | grep iptables | grep -v grep || ps axu | grep firewalld | grep -v grep </span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;防火墙已启用&quot;</span></span><br><span class="line">iptables -nvL --line-numbers</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;防火墙未启用--------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&quot;查看系统SSH远程访问设置策略(host.deny拒绝列表):&quot;</span></span><br><span class="line"><span class="keyword">if</span> more /etc/hosts.deny | grep -E <span class="string">&quot;sshd&quot;</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;远程访问策略已设置--------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;远程访问策略未设置--------[无需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;查看系统SSH远程访问设置策略(hosts.allow允许列表):&quot;</span></span><br><span class="line"><span class="keyword">if</span> more /etc/hosts.allow | grep -E <span class="string">&quot;sshd&quot;</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;远程访问策略已设置--------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;远程访问策略未设置--------[无需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;当hosts.allow和host.deny相冲突时,以hosts.allow设置为准&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=============================dividing line================================&quot;</span></span><br><span class="line">grep -i <span class="string">&quot;TMOUT&quot;</span> /etc/profile /etc/bashrc</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;已设置登入超时限制&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;未设置登入超时限制,请设置,设置方法:在/etc/profile或者/etc/bashrc里面添加参数TMOUT=600 --------[需调整]&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;end&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;</span></span><br></pre></td></tr></table></figure><p>2）系统加固脚本，功能说明</p><ul><li>一键进行全部加固</li><li>设置密码复杂度</li><li>添加eproot账号</li><li>禁止root远程登入</li><li>设置history保存行数以及命令时间，设置窗口超时时间</li><li>更改SSH端口</li><li>登入失败处理</li><li>还原配置文件</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">##Filename:     OS-centOS-Protective_v0.1.sh</span></span><br><span class="line"><span class="comment">##Author:Browser</span></span><br><span class="line"><span class="comment">##Date:         2019-02-24</span></span><br><span class="line"><span class="comment">##Description:  Operating system security reinforcement</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#########################variables############################</span></span><br><span class="line">restart_flag=1</span><br><span class="line">ostype=<span class="string">&#x27;unknow&#x27;</span></span><br><span class="line"><span class="comment">###########################ostype############################</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/redhat-release ];<span class="keyword">then</span></span><br><span class="line">    grep -i <span class="string">&#x27;centos&#x27;</span> /etc/redhat-release &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">        ostype=<span class="string">&#x27;centos&#x27;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    grep -i <span class="string">&#x27;redhat&#x27;</span> /etc/redhat-release &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">        ostype=<span class="string">&#x27;redhat&#x27;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/centos-release ];<span class="keyword">then</span></span><br><span class="line">    grep -i <span class="string">&#x27;centos&#x27;</span> /etc/centos-release &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">        ostype=<span class="string">&#x27;centos&#x27;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;###########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    OS type is <span class="variable">$ostype</span>    \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;###########################################################################################&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################restart_ssh################################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">restart_ssh</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$restart_flag</span> == 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31mPlease restart SSH service manully by using &#x27;service sshd restart&#x27; or &#x27;systemctl restart sshd&#x27;\033[0m&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################文件备份############################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">backup</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span> [ ! -x <span class="string">&quot;backup&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> backup</span><br><span class="line">    <span class="keyword">if</span> [ -f /etc/pam.d/system-auth ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cp</span> /etc/pam.d/system-auth backup/system-auth.bak</span><br><span class="line">    <span class="keyword">elif</span> [ -f /etc/pam.d/common-password ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cp</span> /etc/pam.d/common-password backup/common-password.bak</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ -f ~/.ssh/authorized_keys ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cp</span> ~/.ssh/authorized_keys backup/authorized_keys.bak</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">cp</span> /etc/pam.d/sshd backup/sshd.bak</span><br><span class="line">    <span class="built_in">cp</span> /etc/sudoers backup/sudoers.bak</span><br><span class="line">    <span class="built_in">cp</span> /etc/ssh/sshd_config backup/sshd_config.bak</span><br><span class="line">    <span class="built_in">cp</span> /etc/profile backup/profile.bak</span><br><span class="line">    <span class="built_in">cp</span> /etc/pam.d/su backup/su.bak</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;###########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    Auto backup successfully    \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;###########################################################################################&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;###########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31mBackup file already exist, to avoid overwriting these files, backup will not perform again\033[0m &quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;###########################################################################################&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">###########################执行备份############################</span></span><br><span class="line">backup</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################文件还原############################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">recover</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span> [ -f backup/system-auth.bak ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">cp</span> -rf backup/system-auth.bak /etc/pam.d/system-auth</span><br><span class="line"><span class="keyword">elif</span> [ -f backup/common-password.bak ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">cp</span> -rf backup/common-password.bak /etc/pam.d/common-password</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f backup/authorized_keys.bak ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">cp</span> -rf backup/authorized_keys.bak ~/.ssh/authorized_keys</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">cp</span> -rf backup/sshd.bak /etc/pam.d/sshd</span><br><span class="line">    <span class="built_in">cp</span> -rf backup/sudoers.bak /etc/sudoers</span><br><span class="line">    <span class="built_in">cp</span> -rf backup/sshd_config.bak /etc/ssh/sshd_config</span><br><span class="line">    <span class="built_in">cp</span> -rf backup/profile.bak /etc/profile</span><br><span class="line">    <span class="built_in">source</span> /etc/profile</span><br><span class="line">    <span class="built_in">cp</span> -rf backup/su.bak /etc/pam.d/su</span><br><span class="line">    restart_flag=0</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m   8、 Recover success\033[0m&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################口令复杂度设置############################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">password</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m   2、 set password complexity requirements\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/pam.d/system-auth ];<span class="keyword">then</span></span><br><span class="line">    config=<span class="string">&quot;/etc/pam.d/system-auth&quot;</span></span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/pam.d/common-password ];<span class="keyword">then</span></span><br><span class="line">    config=<span class="string">&quot;/etc/pam.d/common-password&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    Doesn&#x27;t support this OS    \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    grep -i <span class="string">&quot;^password.*requisite.*pam_cracklib.so&quot;</span> <span class="variable">$config</span>  &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">        sed -i <span class="string">&quot;s/^password.*requisite.*pam_cracklib\.so.*$/password    requisite       pam_cracklib.so retry=3 difok=3 minlen=12 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1/g&quot;</span> <span class="variable">$config</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m密码修改重试3次机会，新密码与老密码必须有3字符不同，最小密码长度12个字符，包含大写字符至少一个，小写字母至少一个，数字至少一个，特殊字符至少一个\033[0m&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        grep -i <span class="string">&quot;pam_pwquality\.so&quot;</span> <span class="variable">$config</span> &gt; /dev/null</span><br><span class="line">        <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">            sed -i <span class="string">&quot;s/password.*requisite.*pam_pwquality\.so.*$/password     requisite       pam_pwquality.so retry=3 difok=3 minlen=12 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1/g&quot;</span> <span class="variable">$config</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m密码修改重试3次机会，新密码与老密码必须有3字符不同，最小密码长度12个字符，包含大写字符至少一个，小写字母至少一个，数字至少一个，特殊字符至少一个\033[0m&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&#x27;password      requisite       pam_cracklib.so retry=3 difok=3 minlen=12 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1&#x27;</span> &gt;&gt; <span class="variable">$config</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m密码修改重试3次机会，新密码与老密码必须有3字符不同，最小密码长度12个字符，包含大写字符至少一个，小写字母至少一个，数字至少一个，特殊字符至少一个\033[0m&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    [Password complexity set success]\033[0m&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5m    [Password complexity set failed]\033[0m&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">################################新增超级管理员用户################################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">create_user</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m   3、Create openroot account\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Be sure to create an openroot account?[y/n]:&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$REPLY</span> <span class="keyword">in</span> </span><br><span class="line">    y)</span><br><span class="line">grep -i <span class="string">&#x27;openroot&#x27;</span> /etc/passwd</span><br><span class="line">        <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31mAn openroot account has been created\033[0m&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Please enter your password:&quot;</span> PASSWD</span><br><span class="line">    useradd -g root openroot;<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PASSWD</span>&quot;</span> | passwd --stdin openroot  &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31mopenroot account created successfully    \033[0m&quot;</span></span><br><span class="line">grep -i <span class="string">&quot;openroot&quot;</span> /etc/sudoers</span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">chmod</span> u+w /etc/sudoers &gt; /dev/null </span><br><span class="line">    sed -i <span class="string">&#x27;/^root.*ALL=(ALL).*$/a\openroot  ALL=(ALL)       NOPASSWD:ALL&#x27;</span> /etc/sudoers &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    [Permissions set success]\033[0m&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5m    [Permissions set failed]\033[0m&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">chmod</span> u-w /etc/sudoers &gt; /dev/null </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    Permissions have already been set    \033[0m&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    openroot account created failed    \033[0m&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1 </span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">    n)</span><br><span class="line">;;</span><br><span class="line">    *)</span><br><span class="line">create_user</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">############################限制超级管理员用户远程登录############################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">remote_login</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m   4、Set Remote Login Configuration(SSH)\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line"><span class="comment">#set Protocol 2</span></span><br><span class="line">    <span class="built_in">echo</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line">    grep -i <span class="string">&#x27;^Protocol&#x27;</span> /etc/ssh/sshd_config &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">        sed -i <span class="string">&#x27;s/^Protocol.*$/Protocol 2/g&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">        <span class="keyword">if</span> [ $? != 0 ];<span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5m    [##Error##]: Cannot to set Protocol to &#x27;2&#x27;    \033[0m&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    [Success: Set SSH Protocol to 2]    \033[0m&quot;</span></span><br><span class="line">         <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&#x27;Protocol 2&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    [Success: Set SSH Protocol to 2]    \033[0m&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Disable root remote login?[y/n](Please make sure you have created at least one another account):&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$REPLY</span> <span class="keyword">in</span></span><br><span class="line">    y)</span><br><span class="line">grep -i <span class="string">&#x27;^PermitRootLogin no&#x27;</span> /etc/ssh/sshd_config &gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 1 ];<span class="keyword">then</span></span><br><span class="line">            grep -i <span class="string">&#x27;.*PermitRootLogin yes&#x27;</span> /etc/ssh/sshd_config &gt;/dev/null</span><br><span class="line">            <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">                sed -i <span class="string">&#x27;s/.*PermitRootLogin yes/PermitRootLogin no/g&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">                <span class="keyword">if</span> [ $? != 0 ];<span class="keyword">then</span></span><br><span class="line">                    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5m[##Error##]cannot to set PermitRootLogin to &#x27;no&#x27;\033[0m&quot;</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    Disable root remote login[Success]    \033[0m&quot;</span></span><br><span class="line">            restart_flag=0</span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;PermitRootLogin no&#x27;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    Disable root remote login[Success]    \033[0m&quot;</span></span><br><span class="line">                restart_flag=0</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    Already disable root remote login\033[0m&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">    n)</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        remote_login</span><br><span class="line">;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################配置系统历史命令操作记录和定时帐户自动登出时间################################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">set_history_tmout</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    5、set history and timeout\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;set history size, format, and TMOUT?[y/n]:&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$REPLY</span> <span class="keyword">in</span></span><br><span class="line">    y)</span><br><span class="line"><span class="comment">#history_size</span></span><br><span class="line">        grep -i <span class="string">&quot;^HISTSIZE=&quot;</span> /etc/profile &gt;/dev/null</span><br><span class="line">        <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line"><span class="comment">#history记录保留一万条</span></span><br><span class="line">            sed -i <span class="string">&quot;s/^HISTSIZE=.*$/HISTSIZE=10000/g&quot;</span> /etc/profile</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&#x27;HISTSIZE=10000&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    HISTSIZE has been set to 10000    \033[0m&quot;</span></span><br><span class="line"><span class="comment">#history_format</span></span><br><span class="line">        grep -i <span class="string">&quot;^export HISTTIMEFORMAT=&quot;</span> /etc/profile &gt; /dev/null</span><br><span class="line">        <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">            sed -i <span class="string">&#x27;s/^export HISTTIMEFORMAT=.*$/export HISTTIMEFORMAT=&quot;%F %T `whoami`&quot;/g&#x27;</span> /etc/profile</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&#x27;export HISTTIMEFORMAT=&quot;%F %T `whoami` &quot;&#x27;</span> &gt;&gt; /etc/profile</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&#x27;\033[1;31m    HISTTIMEFORMAT has been set to &quot;Number-Time-User-Command&quot;    \033[0m&#x27;</span></span><br><span class="line"><span class="comment">#TIME_OUT</span></span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">&quot;set shell TMOUT?[300-600]seconds:&quot;</span> tmout </span><br><span class="line">: <span class="variable">$&#123;tmout:=600&#125;</span></span><br><span class="line">        grep -i <span class="string">&quot;^TMOUT=&quot;</span> /etc/profile&gt; /dev/null</span><br><span class="line">        <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">            sed -i <span class="string">&quot;s/^TMOUT=.*$/TMOUT=<span class="variable">$tmout</span>/g&quot;</span> /etc/profile</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;TMOUT=<span class="variable">$tmout</span>&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    [Success]    \033[0m&quot;</span></span><br><span class="line">        ;;</span><br><span class="line">    n)</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        set_history_tmout;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#######################SSH端口配置################################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">ssh_port</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    6、set ssh port\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&#x27;change ssh port?[y/n]:&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$REPLY</span> <span class="keyword">in</span></span><br><span class="line">    y)</span><br><span class="line">        <span class="built_in">read</span> -p <span class="string">&#x27;please input the new ssh port(recommend to between 1024 and 65534, please make sure the port is not in used):&#x27;</span> port</span><br><span class="line"><span class="comment">##验证端口是否被占用</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$port</span> -gt 1024 &amp;&amp; <span class="variable">$port</span> -lt 65535 ]];<span class="keyword">then</span></span><br><span class="line">          netstat -tlnp|awk -v port=<span class="variable">$port</span> <span class="string">&#x27;&#123;lens=split($4,a,&quot;:&quot;);if(a[lens]==port)&#123;exit 2&#125;&#125;&#x27;</span>  &gt;/dev/null <span class="comment">#2&gt;&amp;1</span></span><br><span class="line">          res=$?</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$res</span> == 2 ];<span class="keyword">then</span></span><br><span class="line">              <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    The port <span class="variable">$port</span> is already in used, try again\033[0m&quot;</span></span><br><span class="line">              ssh_port</span><br><span class="line">    <span class="keyword">elif</span> [ <span class="variable">$res</span> == 1 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5m    [##Error##]    \033[0m&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="comment">##修改ssh端口</span></span><br><span class="line">grep -i <span class="string">&quot;^#Port &quot;</span> /etc/ssh/sshd_config &gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">    sed -i <span class="string">&quot;s/^#Port.*$/Port <span class="variable">$port</span>/g&quot;</span> /etc/ssh/sshd_config</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    grep -i <span class="string">&quot;^Port &quot;</span> /etc/ssh/sshd_config &gt; /dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">sed -i <span class="string">&quot;s/^Port.*$/Port <span class="variable">$port</span>/g&quot;</span> /etc/ssh/sshd_config</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Port <span class="variable">$port</span>&quot;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    [Success]    \033[0m&quot;</span></span><br><span class="line">restart_flag=0</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5m    [##The port <span class="variable">$port</span> is error, please input new ssh port between 1024 and 65534 ##]    \033[0m&quot;</span></span><br><span class="line">    ssh_port</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">    n)</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5m    [##Error##]:invalid input    \033[0m&quot;</span></span><br><span class="line">        ssh_port</span><br><span class="line">;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#######################Logon failure handling################################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">logon</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m    7、set logon failure handling\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">logonconfig=/etc/pam.d/sshd</span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&#x27;Are you sure set logon failure handling?[y/n]:&#x27;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$REPLY</span> <span class="keyword">in</span></span><br><span class="line">    y)</span><br><span class="line">grep -i <span class="string">&quot;^auth.*required.*pam_tally2.so.*$&quot;</span> <span class="variable">$logonconfig</span>  &gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">   sed -i <span class="string">&quot;s/auth.*required.*pam_tally2.so.*$/auth required pam_tally2.so deny=3 unlock_time=300 even_deny_root root_unlock_time=300/g&quot;</span> <span class="variable">$logonconfig</span> &gt; /dev/null</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">   sed -i <span class="string">&#x27;/^#%PAM-1.0/a\auth required pam_tally2.so deny=3 unlock_time=300 even_deny_root root_unlock_time=300&#x27;</span> <span class="variable">$logonconfig</span> &gt; /dev/null</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> [ $? == 0 ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[37;5m    [Logon failure handling set success]\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[1;31m限制登入失败三次，普通账号锁定5分钟，root账号锁定5分钟\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5m    [Logon failure handling set failed]\033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;#########################################################################################&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">;;</span><br><span class="line">    n)</span><br><span class="line">;;</span><br><span class="line">    *)</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5m         [##Error##]:invalid input       \033[0m&quot;</span></span><br><span class="line">logon</span><br><span class="line">;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#######################main################################</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span>  -e <span class="string">&quot;\033[1;31m</span></span><br><span class="line"><span class="string">#########################################################################################</span></span><br><span class="line"><span class="string">#                                        Menu                                           #</span></span><br><span class="line"><span class="string">#         1:ALL protective                                                              #</span></span><br><span class="line"><span class="string">#         2:Set Password Complexity Requirements                                        #</span></span><br><span class="line"><span class="string">#         3:Create openroot account                                                       #</span></span><br><span class="line"><span class="string">#         4:Set Remote Login Configuration(SSH)                                         #</span></span><br><span class="line"><span class="string">#         5:Set Shell History and TMOUT                                                 #</span></span><br><span class="line"><span class="string">#         6:Set SSH Port                                                                #</span></span><br><span class="line"><span class="string">#         7:Set Logon failure handling                                                  #</span></span><br><span class="line"><span class="string">#         8:Recover Configuration                                                       #</span></span><br><span class="line"><span class="string">#  9:Exit                                                                        #</span></span><br><span class="line"><span class="string">######################################################################################### \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">read</span> -p <span class="string">&quot;Please choice[1-9]:&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$REPLY</span> <span class="keyword">in</span></span><br><span class="line">    1)</span><br><span class="line">        password</span><br><span class="line">create_user</span><br><span class="line">        remote_login</span><br><span class="line">        set_history_tmout</span><br><span class="line">        ssh_port</span><br><span class="line">logon</span><br><span class="line">        restart_ssh</span><br><span class="line">        ;;</span><br><span class="line">    2)</span><br><span class="line">        password</span><br><span class="line">;;</span><br><span class="line">    3)</span><br><span class="line">        create_user</span><br><span class="line">;;</span><br><span class="line">    4)</span><br><span class="line">        remote_login</span><br><span class="line">        restart_ssh</span><br><span class="line">;;</span><br><span class="line">    5)</span><br><span class="line">        set_history_tmout</span><br><span class="line">;;</span><br><span class="line">    6)</span><br><span class="line">        ssh_port</span><br><span class="line">        restart_ssh</span><br><span class="line">;;</span><br><span class="line">    7)</span><br><span class="line">logon</span><br><span class="line">        restart_ssh</span><br><span class="line">;;</span><br><span class="line">    8)</span><br><span class="line">        recover</span><br><span class="line">        restart_ssh</span><br><span class="line">;;</span><br><span class="line">    9)</span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line">;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[31;5minvalid input    \033[0m&quot;</span></span><br><span class="line">        main</span><br><span class="line">;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line">main</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://cloud.tencent.com/developer/inventory/9792/article/1760519">转载文章-非常全面的CentOS7系统安全检测和加固脚本</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全加固 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载-Shell脚本的经典十三问</title>
      <link href="/2022/04/07/reprint/%E8%BD%AC%E8%BD%BD-Shell%E8%84%9A%E6%9C%AC%E7%9A%84%E7%BB%8F%E5%85%B8%E5%8D%81%E4%B8%89%E9%97%AE/"/>
      <url>/2022/04/07/reprint/%E8%BD%AC%E8%BD%BD-Shell%E8%84%9A%E6%9C%AC%E7%9A%84%E7%BB%8F%E5%85%B8%E5%8D%81%E4%B8%89%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p><strong>为何叫做 Shell？</strong></p><p>我们知道计算机的运作离不开硬件，但却无法直接操作硬件，硬件的驱动只能通过一种称之为“操作系统（OS，Opertating System）的软件来管控。Linux 严格来说是一个操作系统（OS）。</p><p>使用者没有办法直接操作 Kernel，而是通过 Kernel 的“外壳”程序，也就是所谓的 Shell 来与 Kernel 沟通。Shell 是一个使用者与系统的交互界面（Interface），只能通过命令行（Command line）来使用系统来完成工作。因此 Shell 最简单的定义就是：命令解译器（Command Interpreter）</p><ul><li>将使用者的命令翻译给内核处理；</li><li>同时，将内核处理结果翻译给使用者。</li></ul><p>不同的 OS 使用不同的 Kernel；同一个 kernel 之上，也可以使用不同的 Shell，常见的 Shell 有sh、bash、csh、ksh 等</p><p><strong>Shell prompt（PS1）与 Carriage Return（CR）的关系？</strong></p><p>成功登录一个 Shell 终端后，光标左边部分称之为提示符 Prompt，通常一般用户使用<code>$</code>，管理员用户使用<code>#</code></p><ul><li>Shell Prompt：可以输入命令了，键入命令后，直到读进 CR（Carriage Return）字符为止</li><li>Carriage Return：可以执行命令了</li></ul><blockquote><p>若从技术的细节来看，Shell 会依据 IFS（Internal Field Seperator）将 Command line 所输入的文字拆解为”字段”（word&#x2F;field）。然后再针对特殊字符（meta）先作处理，最后重组整行command line。</p></blockquote><p><strong>别人echo，你也echo，试问 echo 知多少?</strong></p><p>echo 将 argument送到标准输出（stdout），通常显示在屏幕</p><blockquote><p>stdin    标准输入<br>stdout 标准输出<br>stderr  标准错误输出</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n  <span class="comment"># 取消换行符</span></span><br><span class="line"><span class="built_in">echo</span> -e  <span class="comment"># 启用反斜杠转译</span></span><br></pre></td></tr></table></figure><p><strong>双引号””与单引号’’有什么区别?</strong></p><ul><li>hard quote：<code>&#39;&#39;</code>（单引号），关闭所有引用</li><li>soft quote：  <code>&quot;&quot;</code>（双引号），保留$引用</li></ul><p><strong>var&#x3D;value? export 前后差在哪？</strong></p><ul><li>变量定义：    <code>name=value</code>，等号左右两边不能使用分隔符。</li><li>变量替换：    <code>echo $&#123;name&#125;</code></li><li>export变量：<code>export name=value</code>，使变量成为环境变量</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地变量</span></span><br><span class="line">A=B</span><br><span class="line"><span class="comment"># 取消变量</span></span><br><span class="line"><span class="built_in">unset</span> A</span><br><span class="line"><span class="comment"># 环境变量export A=B</span></span><br></pre></td></tr></table></figure><p><strong>exec 跟 source 差在哪？</strong></p><blockquote><p>环境变量只能从父进程到子进程单向传递。换句话说：在子进程中环境如何变更，均不会影响父进程的环境。<br>当我们执行一个 shell script 时，其实是先产生一个 sub-shell 的子进程， 然后 sub-shell 再去产生命令行的子进程。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建子shell执行脚本</span></span><br><span class="line">./1.sh</span><br><span class="line"><span class="comment"># 当前shell执行</span></span><br><span class="line"><span class="built_in">source</span> 1.sh</span><br><span class="line"><span class="comment"># 当前shell执行后退出</span></span><br><span class="line"><span class="built_in">exec</span> 1.sh</span><br></pre></td></tr></table></figure><p><strong>( ) 与 { } 差在哪？</strong></p><p><code>( )</code>将 command group 置于 sub-shell 执行<br><code>&#123; &#125;</code>则是在同一个 shell 内完成</p><p><strong>$(()) 与 $() 还有 ${} 差在哪？</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 假设我们定义了一个变量为：</span></span><br><span class="line">file=/dir1/dir2/dir3/my.file.txt</span><br><span class="line"><span class="comment"># 我们可以用 $&#123; &#125; 分别替换获得不同的值：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. shell字符串的非贪婪(最小匹配)左删除</span></span><br><span class="line"><span class="variable">$&#123;file#*/&#125;</span> <span class="comment"># 拿掉第一条 / 及其左边的字符串：dir1/dir2/dir3/my.file.txt</span></span><br><span class="line"><span class="comment"># 2. shell字符串的贪婪(最大匹配)左删除</span></span><br><span class="line"><span class="variable">$&#123;file##*/&#125;</span> <span class="comment"># 拿掉最后一条 / 及其左边的字符串：my.file.txt</span></span><br><span class="line"><span class="variable">$&#123;file##*.&#125;</span> <span class="comment"># 拿掉最后一个 . 及其左边的字符串：txt</span></span><br><span class="line"><span class="comment"># 3. shell字符串的非贪婪(最小匹配)右删除：</span></span><br><span class="line"><span class="variable">$&#123;file%/*&#125;</span> <span class="comment"># 拿掉最后条 / 及其右边的字符串：/dir1/dir2/dir3</span></span><br><span class="line"><span class="variable">$&#123;file%.*&#125;</span> <span class="comment"># 拿掉最后一个 . 及其右边的字符串：/dir1/dir2/dir3/my.file</span></span><br><span class="line"><span class="comment"># 4. shell字符串的贪婪(最大匹配)右删除：</span></span><br><span class="line"><span class="variable">$&#123;file%%/*&#125;</span> <span class="comment"># 拿掉第一条 / 及其右边的字符串：(空值)</span></span><br><span class="line"><span class="variable">$&#123;file%%.*&#125;</span> <span class="comment"># 拿掉第一个 . 及其右边的字符串：/dir1/dir2/dir3/my</span></span><br><span class="line"></span><br><span class="line">记忆的方法为：</span><br><span class="line"><span class="comment"># 是去掉左边(在键盘上 # 在 $ 之左边)</span></span><br><span class="line">% 是去掉右边(在键盘上 % 在 $ 之右边)</span><br><span class="line">单一符号是最小匹配﹔两个符号是最大匹配。</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 5. shell字符串取子串：</span></span><br><span class="line"><span class="variable">$&#123;file:0:5&#125;</span>：提取最左边的 5 个字节：/dir1</span><br><span class="line"><span class="variable">$&#123;file:5:5&#125;</span>：提取第 5 个字节右边的连续 5 个字节：/dir2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. shell字符串变量值的替换：</span></span><br><span class="line"><span class="variable">$&#123;file/dir/path&#125;</span>：将第一个 <span class="built_in">dir</span> 提换为 path：/path1/dir2/dir3/my.file.txt</span><br><span class="line"><span class="variable">$&#123;file//dir/path&#125;</span>：将全部 <span class="built_in">dir</span> 提换为 path：/path1/path2/path3/my.file.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7. $&#123;&#125;还可针对变量的不同状态(没设定、空值、非空值)进行赋值：</span></span><br><span class="line"><span class="variable">$&#123;file-my.file.txt&#125;</span> ：假如 <span class="variable">$file</span> 没有设定，则使用 my.file.txt 作传回值。(空值及非空值时不作处理) </span><br><span class="line"><span class="variable">$&#123;file:-my.file.txt&#125;</span> ：假如 <span class="variable">$file</span> 没有设定或为空值，则使用 my.file.txt 作传回值。(非空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file+my.file.txt&#125;</span> ：假如 <span class="variable">$file</span> 设为空值或非空值，均使用 my.file.txt 作传回值。(没设定时不作处理)</span><br><span class="line"><span class="variable">$&#123;file:+my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 为非空值，则使用 my.file.txt 作传回值。(没设定及空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file=my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定，则使用 my.file.txt 作传回值，同时将 <span class="variable">$file</span> 赋值为 my.file.txt 。(空值及非空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file:=my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定或为空值，则使用 my.file.txt 作传回值，同时将 <span class="variable">$file</span> 赋值为 my.file.txt 。(非空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file?my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定，则将 my.file.txt 输出至 STDERR。(空值及非空值时不作处理)</span><br><span class="line"><span class="variable">$&#123;file:?my.file.txt&#125;</span> ：若 <span class="variable">$file</span> 没设定或为空值，则将 my.file.txt 输出至 STDERR。(非空值时不作处理)</span><br><span class="line"></span><br><span class="line">tips:</span><br><span class="line">以上的理解在于, 你一定要分清楚 <span class="built_in">unset</span> 与 null 及 non-null 这三种赋值状态.</span><br><span class="line">一般而言, : 与 null 有关, 若不带 : 的话, null 不受影响, 若带 : 则连 null 也受影响.</span><br></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 8. 计算shell字符串变量的长度：$&#123;#var&#125;</span></span><br><span class="line"><span class="variable">$&#123;#var&#125;</span> 可计算出变量值的长度：</span><br><span class="line"><span class="variable">$&#123;#file&#125;</span> 可得到 27 ，因为 /dir1/dir2/dir3/my.file.txt 刚好是 27 个字节...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9. bash数组(array)的处理方法</span></span><br><span class="line">数组:</span><br><span class="line">A=(a b c d)</span><br><span class="line">引用数组:</span><br><span class="line"><span class="variable">$&#123;A[@]&#125;</span></span><br><span class="line"><span class="variable">$&#123;A[*]&#125;</span></span><br><span class="line">访问数组成员</span><br><span class="line"><span class="variable">$&#123;A[0]&#125;</span></span><br><span class="line">计算数组长度</span><br><span class="line"><span class="variable">$&#123;#A[@]&#125;</span></span><br><span class="line"><span class="variable">$&#123;#A[*]&#125;</span></span><br><span class="line">数组重新赋值</span><br><span class="line">A[2]=xyz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.$(( ))是用来做整数运算的 </span></span><br><span class="line">a=5;b=7;c=2;</span><br><span class="line"><span class="built_in">echo</span> $(( a + b * c))</span><br></pre></td></tr></table></figure><p><em><em>$@ 与 $</em> 区别在哪？</em>*</p><ul><li><code>&quot;$@&quot;</code>则可得到 “p1” “p2 p3” “p4” 这三个不同的词段</li><li><code>&quot;$*&quot;</code>则可得到 “p1 p2 p3 p4” 这一整串单一的词段</li></ul><p><strong>&amp;&amp; 与 || 差在哪？</strong></p><p>1、test命令有两种形式</p><ul><li>test expression</li><li>[ expression ]</li></ul><p>2、bash的test目前支持三种测试对象</p><ul><li>string：字符串</li><li>integer：整数</li><li>file：文件</li></ul><p>3、当 expression 为真是返回 0（true） ，否则返回 非0（false）</p><ul><li>command1 &amp;&amp; command2  command2 只有在 command1 的 RV 为 0(True) 的条件下执行。</li><li>command1 || command2  command2 只有在 command1 的 RV 为非 0(False) 的条件下执行。</li></ul><p>4、先替换变量再比较</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">A=123[ -n <span class="string">&quot;<span class="variable">$A</span>&quot;</span> ] &amp;&amp; ([ <span class="string">&quot;<span class="variable">$A</span>&quot;</span> -lt 100 ] || <span class="built_in">echo</span> <span class="string">&quot;too big&quot;</span>)<span class="built_in">unset</span> A</span><br></pre></td></tr></table></figure><p><strong>与 &lt; 差在哪？</strong></p><blockquote><p>0: Standard Input（STDIN）<br>1: Standard Output （STDOUT）<br>2: Standard Error Output（STDERR）</p></blockquote><p>我们可用 &lt; 来改变读进的数据信道（stdin），使之从指定的档案读进。</p><p>我们可用 &gt; 来改变送出的数据信道（stdout, stderr），使之输出到指定的档案。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> my.file no.such.file 1&gt; file.out 2&gt;file.err</span><br><span class="line"><span class="comment"># 2&gt;&amp;1 就是将stderr并进stdout做输出</span></span><br><span class="line"><span class="built_in">ls</span> my.file no.such.file 1&gt; file.out 2&gt;&amp;1</span><br><span class="line"><span class="comment"># /dev/null 空</span></span><br><span class="line"><span class="built_in">ls</span> my.file no.such.file &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt; file &gt; file</span><br><span class="line"><span class="comment"># 在 IO Redirection 中，stdout 与 stderr 的管道会先准备好，才会从 stdin 读进资料。</span></span><br><span class="line"><span class="comment"># 也就是说，在上例中，&gt; file 会先将 file 清空，然后才读进 &lt; file ， </span></span><br><span class="line"><span class="comment"># 但这时候档案已经被清空了，因此就变成读不进任何数据了</span></span><br></pre></td></tr></table></figure><p><strong>你要 if 还是 case 呢？</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># if</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Do you want to continue?(Yes/No):&quot;</span></span><br><span class="line"><span class="built_in">read</span> YN</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$YN</span>&quot;</span>=Y -o <span class="string">&quot;<span class="variable">$YN</span>&quot;</span>=y -o <span class="string">&quot;<span class="variable">$YN</span>&quot;</span>=<span class="string">&quot;Yes&quot;</span> -o <span class="string">&quot;<span class="variable">$YN</span>&quot;</span>=<span class="string">&quot;yes&quot;</span> -o <span class="string">&quot;<span class="variable">$YN</span>&quot;</span>=<span class="string">&quot;YES&quot;</span>];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;continue&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># case</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;Do you want to continue?(Yes/No):&quot;</span></span><br><span class="line"><span class="built_in">read</span> YN</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$YN</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">[Yy]|[Yy][Ee][Ss])</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;continue&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p><strong>for what? while与until差在哪？</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for</span></span><br><span class="line"><span class="keyword">for</span> ((i=1;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;num is <span class="variable">$i</span>&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while</span></span><br><span class="line">num=1</span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$num</span>&quot;</span> -le 10 ]; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;num is <span class="variable">$num</span>&quot;</span></span><br><span class="line">num=$((<span class="variable">$num</span> + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># until</span></span><br><span class="line">num=1</span><br><span class="line">until [ <span class="string">&quot;<span class="variable">$num</span>&quot;</span> -gt 10 ]; <span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;num is <span class="variable">$num</span>&quot;</span></span><br><span class="line">num=$((<span class="variable">$nu</span> + <span class="number">1</span>))</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>break 是结束 loop</li><li>return 是结束 function</li><li>exit 是结束 script&#x2F;shell</li></ul><p><strong>参考文献</strong></p><p><a href="https://www.cnblogs.com/rustling/p/9833174.html">转载文章-关于 Shell 脚本的经典十三问</a></p>]]></content>
      
      
      <categories>
          
          <category> reprint </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载-CentOS7一键安全加固及系统优化脚本</title>
      <link href="/2022/04/07/reprint/%E8%BD%AC%E8%BD%BD-CentOS7%E4%B8%80%E9%94%AE%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA%E5%8F%8A%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/04/07/reprint/%E8%BD%AC%E8%BD%BD-CentOS7%E4%B8%80%E9%94%AE%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA%E5%8F%8A%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Author:       Seaton Jiang &lt;seaton@vtrois.com&gt;</span></span><br><span class="line"><span class="comment"># Github URL:   https://github.com/vtrois/spacepack</span></span><br><span class="line"><span class="comment"># License:      MIT</span></span><br><span class="line"><span class="comment"># Date:         2020-08-13</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line"></span><br><span class="line">RGB_DANGER=<span class="string">&#x27;\033[31;1m&#x27;</span></span><br><span class="line">RGB_WAIT=<span class="string">&#x27;\033[37;2m&#x27;</span></span><br><span class="line">RGB_SUCCESS=<span class="string">&#x27;\033[32m&#x27;</span></span><br><span class="line">RGB_WARNING=<span class="string">&#x27;\033[33;1m&#x27;</span></span><br><span class="line">RGB_INFO=<span class="string">&#x27;\033[36;1m&#x27;</span></span><br><span class="line">RGB_END=<span class="string">&#x27;\033[0m&#x27;</span></span><br><span class="line"></span><br><span class="line">CHECK_CENTOS=$( <span class="built_in">cat</span> /etc/redhat-release|sed -r <span class="string">&#x27;s/.* ([0-9]+)\..*/\1/&#x27;</span> )</span><br><span class="line">CHECK_RAM=$( <span class="built_in">cat</span> /proc/meminfo | grep <span class="string">&quot;MemTotal&quot;</span> | awk -F<span class="string">&quot; &quot;</span> <span class="string">&#x27;&#123;ram=$2/1000000&#125;&#123;printf(&quot;%.0f&quot;,ram)&#125;&#x27;</span> )</span><br><span class="line"></span><br><span class="line">LOCK=/var/log/init_centos7_record.<span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">tool_info</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;=========================================================================================&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;                              Init CentOS 7 Script                                       &quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;          For more information please visit https://github.com/vtrois/spacepack          &quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;=========================================================================================&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_root</span></span>()&#123;</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$EUID</span> -ne 0 ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;RGB_DANGER&#125;</span>This script must be run as root!<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_lock</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ ! -f <span class="string">&quot;<span class="variable">$LOCK</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">touch</span> <span class="variable">$LOCK</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;RGB_DANGER&#125;</span>Detects that the initialization is complete and does not need to be initialized any further!<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">check_os</span></span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;CHECK_CENTOS&#125;</span>&quot;</span> != <span class="string">&#x27;7&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;RGB_DANGER&#125;</span>This script must be run in CentOS 7!<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">new_swap</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= swap =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;CHECK_RAM&#125;</span>&quot;</span> -le <span class="string">&#x27;2&#x27;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1024 count=1048576 &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">chmod</span> 600 /swapfile &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    mkswap /swapfile &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    swapon /swapfile &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;/swapfile swap swap defaults 0 0&#x27;</span> &gt;&gt; /etc/fstab</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;# Swap&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;vm.swappiness = 10&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">    sysctl -p &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    sysctl -n vm.swappiness &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Skip, no configuration needed<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">open_bbr</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= bbr =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;# BBR&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">    sysctl -p &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    sysctl -n net.ipv4.tcp_congestion_control &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    lsmod | grep bbr &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">disable_software</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= selinux firewalld =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    setenforce 0 &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    sed -i <span class="string">&#x27;s/^SELINUX=.*$/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line">    systemctl <span class="built_in">disable</span> firewalld.service &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line"> systemctl stop firewalld.service &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">time_zone</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= time zone =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">rm</span> -rf /etc/localtime &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">ls</span> -<span class="built_in">ln</span> /etc/localtime &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">custom_profile</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= custom profile =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">cat</span> &gt; /etc/profile.d/centos7init.sh &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">PS1=&quot;\[\e[37;40m\][\[\e[32;40m\]\u\[\e[37;40m\]@\h \[\e[35;40m\]\W\[\e[0m\]]\\\\$ &quot;</span></span><br><span class="line"><span class="string">GREP_OPTIONS=&quot;--color=auto&quot;</span></span><br><span class="line"><span class="string">alias l=&#x27;ls -AFhlt&#x27;</span></span><br><span class="line"><span class="string">alias grep=&#x27;grep --color&#x27;</span></span><br><span class="line"><span class="string">alias egrep=&#x27;egrep --color&#x27;</span></span><br><span class="line"><span class="string">alias fgrep=&#x27;fgrep --color&#x27;</span></span><br><span class="line"><span class="string">export HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S  &quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    <span class="built_in">cat</span> /etc/profile.d/centos7init.sh &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">adjust_ulimit</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= adjust ulimit =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    sed -i <span class="string">&#x27;/^# End of file/,$d&#x27;</span> /etc/security/limits.conf</span><br><span class="line">    <span class="built_in">cat</span> &gt;&gt; /etc/security/limits.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string"># End of file</span></span><br><span class="line"><span class="string">* soft core unlimited</span></span><br><span class="line"><span class="string">* hard core unlimited</span></span><br><span class="line"><span class="string">* soft nproc 1000000</span></span><br><span class="line"><span class="string">* hard nproc 1000000</span></span><br><span class="line"><span class="string">* soft nofile 1000000</span></span><br><span class="line"><span class="string">* hard nofile 1000000</span></span><br><span class="line"><span class="string">root soft core unlimited</span></span><br><span class="line"><span class="string">root hard core unlimited</span></span><br><span class="line"><span class="string">root soft nproc 1000000</span></span><br><span class="line"><span class="string">root hard nproc 1000000</span></span><br><span class="line"><span class="string">root soft nofile 1000000</span></span><br><span class="line"><span class="string">root hard nofile 1000000</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    <span class="built_in">cat</span> /etc/security/limits.conf &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">kernel_optimum</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= kernel optimum =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    [ ! -e <span class="string">&quot;/etc/sysctl.conf_bak&quot;</span> ] &amp;&amp; /bin/mv /etc/sysctl.conf&#123;,_bak&#125;</span><br><span class="line">    <span class="built_in">cat</span> &gt; /etc/sysctl.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"># Controls source route verification</span></span><br><span class="line"><span class="string">net.ipv4.conf.default.rp_filter = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_nonlocal_bind = 1</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.accept_redirects = 0</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.accept_source_route = 0 </span></span><br><span class="line"><span class="string">net.ipv4.conf.default.accept_source_route = 0</span></span><br><span class="line"><span class="string">net.ipv4.icmp_echo_ignore_broadcasts = 1</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.log_martians = 1 </span></span><br><span class="line"><span class="string">net.ipv4.conf.default.log_martians = 1</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.promote_secondaries = 1</span></span><br><span class="line"><span class="string">net.ipv4.conf.default.promote_secondaries = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Controls the use of TCP syncookies</span></span><br><span class="line"><span class="string"># Number of pid_max</span></span><br><span class="line"><span class="string">kernel.core_uses_pid = 1</span></span><br><span class="line"><span class="string">kernel.pid_max = 1000000</span></span><br><span class="line"><span class="string">net.ipv4.tcp_syncookies = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Controls the maximum size of a message, in bytes</span></span><br><span class="line"><span class="string"># Controls the default maxmimum size of a mesage queue</span></span><br><span class="line"><span class="string"># Controls the maximum shared segment size, in bytes</span></span><br><span class="line"><span class="string"># Controls the maximum number of shared memory segments, in pages</span></span><br><span class="line"><span class="string">kernel.msgmnb = 65536</span></span><br><span class="line"><span class="string">kernel.msgmax = 65536</span></span><br><span class="line"><span class="string">kernel.shmmax = 68719476736</span></span><br><span class="line"><span class="string">kernel.shmall = 4294967296</span></span><br><span class="line"><span class="string">kernel.sysrq = 1</span></span><br><span class="line"><span class="string">kernel.softlockup_panic = 1</span></span><br><span class="line"><span class="string">kernel.printk = 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># TCP kernel paramater</span></span><br><span class="line"><span class="string">net.ipv4.tcp_mem = 94500000 915000000 927000000</span></span><br><span class="line"><span class="string">net.ipv4.tcp_rmem = 4096 87380 4194304</span></span><br><span class="line"><span class="string">net.ipv4.tcp_wmem = 4096 16384 4194304</span></span><br><span class="line"><span class="string">net.ipv4.tcp_window_scaling = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_sack = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># Socket buffer</span></span><br><span class="line"><span class="string">net.core.wmem_default = 8388608</span></span><br><span class="line"><span class="string">net.core.rmem_default = 8388608</span></span><br><span class="line"><span class="string">net.core.rmem_max = 16777216</span></span><br><span class="line"><span class="string">net.core.wmem_max = 16777216</span></span><br><span class="line"><span class="string">net.core.netdev_max_backlog = 32768</span></span><br><span class="line"><span class="string">net.core.somaxconn = 65535</span></span><br><span class="line"><span class="string">net.core.optmem_max = 81920</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># TCP conn</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 262144</span></span><br><span class="line"><span class="string">net.ipv4.tcp_syn_retries = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_retries1 = 3</span></span><br><span class="line"><span class="string">net.ipv4.tcp_retries2 = 15</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># TCP conn reuse</span></span><br><span class="line"><span class="string">net.ipv4.tcp_timestamps = 0</span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_reuse = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_fin_timeout = 5</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_tw_buckets = 7000</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_orphans = 3276800</span></span><br><span class="line"><span class="string">net.ipv4.tcp_synack_retries = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># keepalive conn</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_time = 300</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_intvl = 30</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_probes = 3</span></span><br><span class="line"><span class="string">net.ipv4.ip_local_port_range = 1024 65535</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.ipv6.neigh.default.gc_thresh3 = 4096</span></span><br><span class="line"><span class="string">net.ipv4.neigh.default.gc_thresh3 = 4096</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    sysctl -p &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cat</span> /etc/sysctl.conf &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">updatedb_optimum</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= updatedb optimum =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    sed -i <span class="string">&#x27;s,media,media /data,&#x27;</span> /etc/updatedb.conf</span><br><span class="line">    <span class="built_in">cat</span> /etc/updatedb.conf &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">open_ipv6</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= open ipv6 =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;# IPV6&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;net.ipv6.conf.all.disable_ipv6=0&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;net.ipv6.conf.default.disable_ipv6=0&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;net.ipv6.conf.lo.disable_ipv6=0&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">    sysctl -p &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cat</span> /etc/sysctl.conf &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">disable_cad</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= disable cad =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    systemctl mask ctrl-alt-del.target &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remove_users</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= remove users =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> adm lp <span class="built_in">sync</span> shutdown halt mail operator games ftp </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    userdel <span class="variable">$&#123;u&#125;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">cut</span> -d : -f 1 /etc/passwd &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">for</span> g <span class="keyword">in</span> adm lp mail games ftp </span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    groupdel <span class="variable">$&#123;g&#125;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">cat</span> /etc/group &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sys_permissions</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= sys permissions =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">chmod</span> 644 /etc/passwd &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">chmod</span> 644 /etc/group &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">chmod</span> 000 /etc/shadow &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">chmod</span> 000 /etc/gshadow &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">ls</span> -la /etc/passwd &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">ls</span> -la /etc/group &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">ls</span> -la /etc/shadow &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">ls</span> -la /etc/gshadow &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">password_policy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= password policy =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    sed -i <span class="string">&#x27;s/^PASS_MAX_DAYS.*$/PASS_MAX_DAYS   90/&#x27;</span> /etc/login.defs</span><br><span class="line">    sed -i <span class="string">&#x27;s/^PASS_MIN_DAYS.*$/PASS_MIN_DAYS   10/&#x27;</span> /etc/login.defs</span><br><span class="line">    <span class="built_in">cat</span> /etc/login.defs &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cat</span> &gt;&gt;/etc/security/pwquality.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">minlen = 8 </span></span><br><span class="line"><span class="string">dcredit = -1</span></span><br><span class="line"><span class="string">ucredit = -1</span></span><br><span class="line"><span class="string">ocredit = -1</span></span><br><span class="line"><span class="string">lcredit = -1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">change_useradd</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= change useradd =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    sed -i <span class="string">&#x27;s/^INACTIVE.*$/INACTIVE=180/&#x27;</span> /etc/default/useradd</span><br><span class="line">    <span class="built_in">cat</span> /etc/default/useradd &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">sec_ssh</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= sec ssh =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    sed -i <span class="string">&#x27;s/UseDNS.*$/UseDNS no/&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">    sed -i <span class="string">&#x27;s/^#LoginGraceTime.*$/LoginGraceTime 60/&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">    sed -i <span class="string">&#x27;s/^#PermitEmptyPasswords.*$/PermitEmptyPasswords no/&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">    sed -i <span class="string">&#x27;s/^#PubkeyAuthentication.*$/PubkeyAuthentication yes/&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">    sed -i <span class="string">&#x27;s/^#MaxAuthTries.*$/MaxAuthTries 3/&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">    sed -i <span class="string">&quot;s/#ClientAliveInterval 0/ClientAliveInterval 30/g&quot;</span> /etc/ssh/sshd_config </span><br><span class="line">    sed -i <span class="string">&quot;s/#ClientAliveCountMax 3/ClientAliveCountMax 3/g&quot;</span> /etc/ssh/sshd_config</span><br><span class="line">    sed -i <span class="string">&quot;s/X11Forwarding yes/X11Forwarding no/g&quot;</span> /etc/ssh/sshd_config</span><br><span class="line">    sed -i <span class="string">&quot;s/#Banner none/Banner \/etc\/issue.net/g&quot;</span> /etc/ssh/sshd_config</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Authorized users only. All activity may be monitored and reported.&quot;</span>&gt;/etc/issue.net</span><br><span class="line">    systemctl restart sshd.service &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cat</span> /etc/ssh/sshd_config &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">timeout_config</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= timeout config =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;export TMOUT=1800&quot;</span> &gt;&gt; /etc/profile.d/centos7init.sh</span><br><span class="line">    <span class="built_in">cat</span> /etc/profile.d/centos7init.sh &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">lockout_policy</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;============= lockout policy =============&quot;</span> &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WAIT&#125;</span>Configuring...<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    [ ! -e <span class="string">&quot;/etc/pam.d/system-auth_bak&quot;</span> ] &amp;&amp; /bin/mv /etc/pam.d/system-auth&#123;,_bak&#125;</span><br><span class="line">    <span class="built_in">cat</span> &gt; /etc/pam.d/system-auth &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">auth        required                                     pam_env.so</span></span><br><span class="line"><span class="string">auth        required                                     pam_faillock.so preauth silent audit deny=3 unlock_time=300</span></span><br><span class="line"><span class="string">auth        required                                     pam_faildelay.so delay=2000000</span></span><br><span class="line"><span class="string">auth        [default=1 ignore=ignore success=ok]         pam_succeed_if.so uid &gt;= 1000 quiet</span></span><br><span class="line"><span class="string">auth        [default=1 ignore=ignore success=ok]         pam_localuser.so</span></span><br><span class="line"><span class="string">auth        sufficient                                   pam_unix.so nullok try_first_pass</span></span><br><span class="line"><span class="string">auth        [default=die]                                pam_faillock.so  authfail  audit  deny=3  unlock_time=300</span></span><br><span class="line"><span class="string">auth        requisite                                    pam_succeed_if.so uid &gt;= 1000 quiet_success</span></span><br><span class="line"><span class="string">auth        sufficient                                   pam_sss.so forward_pass</span></span><br><span class="line"><span class="string">auth        required                                     pam_deny.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">account     required                                     pam_unix.so</span></span><br><span class="line"><span class="string">account     sufficient                                   pam_localuser.so</span></span><br><span class="line"><span class="string">account     sufficient                                   pam_succeed_if.so uid &lt; 1000 quiet</span></span><br><span class="line"><span class="string">account     [default=bad success=ok user_unknown=ignore] pam_sss.so</span></span><br><span class="line"><span class="string">account     required                                     pam_permit.so</span></span><br><span class="line"><span class="string">account     required                                     pam_faillock.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">password    requisite                                    pam_pwquality.so try_first_pass local_users_only</span></span><br><span class="line"><span class="string">password    sufficient                                   pam_unix.so sha512 shadow nullok try_first_pass use_authtok</span></span><br><span class="line"><span class="string">password    sufficient                                   pam_sss.so use_authtok</span></span><br><span class="line"><span class="string">password    required                                     pam_deny.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session     optional                                     pam_keyinit.so revoke</span></span><br><span class="line"><span class="string">session     required                                     pam_limits.so</span></span><br><span class="line"><span class="string">-session    optional                                     pam_systemd.so</span></span><br><span class="line"><span class="string">session     [success=1 default=ignore]                   pam_succeed_if.so service in crond quiet use_uid</span></span><br><span class="line"><span class="string">session     required                                     pam_unix.so</span></span><br><span class="line"><span class="string">session     optional                                     pam_sss.so</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    [ ! -e <span class="string">&quot;/etc/pam.d/password-auth_bak&quot;</span> ] &amp;&amp; /bin/mv /etc/pam.d/password-auth&#123;,_bak&#125;</span><br><span class="line">    <span class="built_in">cat</span> &gt; /etc/pam.d/password-auth &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">auth        required                                     pam_env.so</span></span><br><span class="line"><span class="string">auth        required                                     pam_faillock.so preauth silent audit deny=3 unlock_time=300</span></span><br><span class="line"><span class="string">auth        required                                     pam_faildelay.so delay=2000000</span></span><br><span class="line"><span class="string">auth        [default=1 ignore=ignore success=ok]         pam_succeed_if.so uid &gt;= 1000 quiet</span></span><br><span class="line"><span class="string">auth        [default=1 ignore=ignore success=ok]         pam_localuser.so</span></span><br><span class="line"><span class="string">auth        sufficient                                   pam_unix.so nullok try_first_pass</span></span><br><span class="line"><span class="string">auth        [default=die]                                pam_faillock.so  authfail  audit  deny=3  unlock_time=300</span></span><br><span class="line"><span class="string">auth        requisite                                    pam_succeed_if.so uid &gt;= 1000 quiet_success</span></span><br><span class="line"><span class="string">auth        sufficient                                   pam_sss.so forward_pass</span></span><br><span class="line"><span class="string">auth        required                                     pam_deny.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">account     required                                     pam_unix.so</span></span><br><span class="line"><span class="string">account     sufficient                                   pam_localuser.so</span></span><br><span class="line"><span class="string">account     sufficient                                   pam_succeed_if.so uid &lt; 1000 quiet</span></span><br><span class="line"><span class="string">account     [default=bad success=ok user_unknown=ignore] pam_sss.so</span></span><br><span class="line"><span class="string">account     required                                     pam_permit.so</span></span><br><span class="line"><span class="string">account     required                                     pam_faillock.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">password    requisite                                    pam_pwquality.so try_first_pass local_users_only</span></span><br><span class="line"><span class="string">password    sufficient                                   pam_unix.so sha512 shadow nullok try_first_pass use_authtok</span></span><br><span class="line"><span class="string">password    sufficient                                   pam_sss.so use_authtok</span></span><br><span class="line"><span class="string">password    required                                     pam_deny.so</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">session     optional                                     pam_keyinit.so revoke</span></span><br><span class="line"><span class="string">session     required                                     pam_limits.so</span></span><br><span class="line"><span class="string">-session    optional                                     pam_systemd.so</span></span><br><span class="line"><span class="string">session     [success=1 default=ignore]                   pam_succeed_if.so service in crond quiet use_uid</span></span><br><span class="line"><span class="string">session     required                                     pam_unix.so</span></span><br><span class="line"><span class="string">session     optional                                     pam_sss.so</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    systemctl restart sshd.service &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cat</span> /etc/pam.d/etc/pam.d/system-auth &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">cat</span> /etc/pam.d/password-auth &gt;&gt; <span class="variable">$&#123;LOCK&#125;</span> 2&gt;&amp;1</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\r<span class="variable">$&#123;RGB_SUCCESS&#125;</span>Configuration Success<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">reboot_os</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_WARNING&#125;</span>Please restart the server and see if the services start up fine.<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_WARNING&#125;</span>Do you want to restart OS ? [y/n]: <span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">while</span> :; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">read</span> REBOOT_STATUS</span><br><span class="line">        <span class="keyword">if</span> [[ ! <span class="string">&quot;<span class="variable">$&#123;REBOOT_STATUS&#125;</span>&quot;</span> =~ ^[y,n]$ ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$&#123;RGB_DANGER&#125;</span>Input error, please only input &#x27;y&#x27; or &#x27;n&#x27;: <span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">break</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    [ <span class="string">&quot;<span class="variable">$&#123;REBOOT_STATUS&#125;</span>&quot;</span> == <span class="string">&#x27;y&#x27;</span> ] &amp;&amp; reboot</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>1/18 : Start Init CentOS7 Script <span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>2/18 : Customize the profile (color and alias)<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    custom_profile</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>3/18 : Time zone adjustment<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    time_zone</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>4/18 : Disable selinux and firewalld<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    disable_software</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>5/18 : Disable Ctrl+Alt+Del<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    disable_cad</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>6/18 : Kernel parameter optimization<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    kernel_optimum</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>7/18 : The updatedb optimization<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    updatedb_optimum</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>8/18 : Adding swap space<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    new_swap</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>9/18 : Adjustment of ulimit<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    adjust_ulimit</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>10/18 : Enable tcp bbr congestion control algorithm<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    open_bbr</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>11/18 : Enable IPV6<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    open_ipv6</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>12/18 : Remove unnecessary users and user groups from the system<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    remove_users</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>13/18 : System permissions for sensitive files<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    sys_permissions</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>14/18 : Modify Account Password Survival Policy<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    password_policy</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>15/18 : Maximum number of days an account is valid after password expiration strategy<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    change_useradd</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>16/18 : Secure configuration of SSH<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    sec_ssh</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>17/18 : Timeout Auto-Logout Configuration<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    timeout_config</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;RGB_INFO&#125;</span>18/18 : Configure account login failure lockout policy<span class="variable">$&#123;RGB_END&#125;</span>&quot;</span></span><br><span class="line">    lockout_policy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    reboot_os</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line">tool_info</span><br><span class="line">check_root</span><br><span class="line">check_os</span><br><span class="line">check_lock</span><br><span class="line">main</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU2MjU1OTE0MA==&mid=2247490116&idx=1&sn=61f6c410ab32933ece0721f3453c9af2&chksm=fc66fb8fcb117299aa1c545832db496be57698a795bc5cd3a3e8466ed0078ce4ffc64cfe531b&scene=21#wechat_redirect">转载文章-CentOS7一键安全加固及系统优化脚本</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全加固 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-Cluster问题_CLUSTERDOWN Hash slot not served</title>
      <link href="/2022/04/07/redis/redis-cluster%E9%97%AE%E9%A2%98_CLUSTERDOWN%20Hash%20slot%20not%20served/"/>
      <url>/2022/04/07/redis/redis-cluster%E9%97%AE%E9%A2%98_CLUSTERDOWN%20Hash%20slot%20not%20served/</url>
      
        <content type="html"><![CDATA[<blockquote><p>错误提示：<code>Redis cluster_state:fail</code>  <code>CLUSTERDOWN Hash slot not served</code></p></blockquote><p><strong>问题：</strong>搭建的 Redis 集群，正常启动并登录，但无法使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl -n public-service  <span class="built_in">exec</span> -it drc-redis-0-0 -- redis-cli cluster info</span><br><span class="line">cluster_state:fail</span><br><span class="line">cluster_slots_assigned:16380</span><br><span class="line">cluster_slots_ok:16380</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:8</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_sent:1007</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆进去测试</span></span><br><span class="line">xxx.xxx.xxx.xxx&gt;<span class="built_in">set</span> <span class="built_in">test</span> aaa</span><br><span class="line">报错(error) CLUSTERDOWN Hash slot not served</span><br></pre></td></tr></table></figure><p><strong>原因：</strong>没有分配槽，因为 redis 集群要分配 16384 个槽来储存数据，那么没有分配槽则报如上错误</p><p><strong>解决方案：</strong>执行下面步骤来修复</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl -n public-service  <span class="built_in">exec</span> -it drc-redis-0-0 -- redis-cli cluster check 127.0.0.1:6379</span><br><span class="line">[ERR] Not all 16384 slots are covered by nodes</span><br><span class="line">$ kubectl -n public-service  <span class="built_in">exec</span> -it drc-redis-0-0 -- redis-cli cluster fix 127.0.0.1:6379</span><br></pre></td></tr></table></figure><p>询问的时候记得输入 yes，不要输入 y</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis-cluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Redis6.x(编译)</title>
      <link href="/2022/04/07/redis/centos7%E9%83%A8%E7%BD%B2_Redis6.x(%E7%BC%96%E8%AF%91)/"/>
      <url>/2022/04/07/redis/centos7%E9%83%A8%E7%BD%B2_Redis6.x(%E7%BC%96%E8%AF%91)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Redis 6 以上要求 gcc 版本号在 5 以上</p><p>Centos7 gcc 版本默认 4.8.3，Red Hat 为了软件的稳定和版本支持，yum 上版本也是 4.8.3，所以无法使用 yum 进行软件更新，所以使用 scl。</p><p>scl 软件集( Software Collections ),是为了给 RHEL&#x2F;CentOS 用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个（而且可能是更新的）版本的方式，同时避免把系统搞乱</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220212172736237.png" alt="image-20220212172736237"></p><p>1）安装依赖环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -v </span><br><span class="line">gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line"></span><br><span class="line">$ yum -y install centos-release-scl scl-utils-build</span><br><span class="line">$ yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line">$ scl <span class="built_in">enable</span> devtoolset-9 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：scl命令启用只是临时的，退出xshell或者重启就会恢复到原来的gcc版本。如果要长期生效的话，执行如下：</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure><p>2）下载编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br><span class="line">$ tar -xf redis-6.2.6.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-6.2.6</span><br><span class="line">$ make &amp;&amp; make install PREFIX=/usr/local/redis</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/redis/etc /usr/local/redis/log &amp;&amp; <span class="built_in">cp</span> redis.conf /usr/local/redis/etc/</span><br></pre></td></tr></table></figure><p>3）创建开机自启服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/redis.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># Type=forking</span></span><br><span class="line">PIDFile=/var/run/redis_6379.pid</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now redis</span><br><span class="line">$ systemctl status redis</span><br><span class="line">● redis.service - Redis</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/redis.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2022-02-12 17:59:49 CST; 28s ago</span><br><span class="line"> Main PID: 1107 (redis-server)</span><br><span class="line">   CGroup: /system.slice/redis.service</span><br><span class="line">           └─1107 /usr/local/redis/bin/redis-server 127.0.0.1:6379</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 命令软链接</span></span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/local/redis/bin/redis-cli /usr/bin/redis</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;export PATH=/usr/local/redis/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile</span><br></pre></td></tr></table></figure><p><strong>异常处理</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is <span class="built_in">set</span> to the lower value of 128.</span><br><span class="line">解决方法：将/proc/sys/net/core/somaxconn值设置为redis配置文件中的tcp-baklog值一致即可</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;511&#x27;</span> &gt; /proc/sys/net/core/somaxconn</span><br><span class="line"><span class="comment"># 上述为临时，下述为永久处理</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;net.core.somaxconn= 1024&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING overcommit_memory is <span class="built_in">set</span> to 0! Background save may fail under low memory condition. To fix this issue add <span class="string">&#x27;vm.overcommit_memory = 1&#x27;</span> to /etc/sysctl...is to take effect.</span><br><span class="line">原因分析：overcommit_memory设置为0，在内存不足的情况下，后台保存会失败，要解决这个问题需要将此值改为1，然后重新加载，使其生效</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;vm.overcommit_memory=1&#x27;</span> &gt;&gt; /etc/sysctl.conf </span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING you have Transparent Huge Pages (THP) support enabled <span class="keyword">in</span> your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the <span class="built_in">command</span> .</span><br><span class="line">警告：您的内核中启用了透明的大页面（THP）支持。这将创建与ReDIS的延迟和内存使用问题。若要修复此问题，请运行命令“EngEng/mS/mL/mM/ExpListNo.HugPoIP/启用”为root，并将其添加到您的/etc/rc.local，以便在重新启动后保留设置。在禁用THP之后，必须重新启动redis。</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;never&#x27;</span> &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="comment"># 上述为临时，下述为永久处理,将如下加入到/etc/rc.local</span></span><br><span class="line">$ vim /etc/rc.local</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/enabled; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7部署_PostgreSQL12</title>
      <link href="/2022/04/07/postgresql/centos7%E9%83%A8%E7%BD%B2_PostgreSQL12/"/>
      <url>/2022/04/07/postgresql/centos7%E9%83%A8%E7%BD%B2_PostgreSQL12/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211030142958506.png" alt="image-20211030142958506"></p><p>1）安装存储库 RPM</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br></pre></td></tr></table></figure><p>2）安装 PostgreSQL</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo yum install -y postgresql12-server</span><br></pre></td></tr></table></figure><p>3）初始化数据库并设置开机自启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /usr/pgsql-12/bin/postgresql-12-setup initdb</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> --now postgresql-12</span><br></pre></td></tr></table></figure><p>4）初始化用户&amp;密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户，执行后提示符会变为&#x27;-bash-4.2$&#x27;</span></span><br><span class="line">$ su - postgres</span><br><span class="line"><span class="comment"># 登录数据库，执行后提示符变为 &#x27;postgres=#&#x27;</span></span><br><span class="line">psql -U postgres</span><br><span class="line"><span class="comment"># 设置密码，设置postgres用户密码为postgres</span></span><br><span class="line">ALTER USER postgres WITH PASSWORD <span class="string">&#x27;passwd&#x27;</span>;</span><br><span class="line"><span class="comment"># 退出数据库</span></span><br><span class="line">\q</span><br><span class="line"><span class="comment"># 备注其他：列出所有库\l  列出所有用户\du 列出库下所有表\d</span></span><br><span class="line"><span class="comment"># 登出</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>5）创建新用户和数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户，执行后提示符会变为&#x27;-bash-4.2$&#x27;</span></span><br><span class="line">su - postgres</span><br><span class="line"><span class="comment"># 登录数据库，执行后提示符变为 &#x27;postgres=#&#x27;</span></span><br><span class="line">psql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建用户和密码</span></span><br><span class="line">create user user_name with password <span class="string">&#x27;passwd&#x27;</span>;</span><br><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">create database db_test owner user_name encoding=<span class="string">&#x27;UTF8&#x27;</span>;//创建数据库指定所属者</span><br><span class="line"><span class="comment"># 将数据库得权限，全部赋给某个用户</span></span><br><span class="line">grant all on database db_test to user_name;//将dbtest所有权限赋值给username</span><br></pre></td></tr></table></figure><p>6）修改配置文件，开通远程访问</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/lib/pgsql/12/data</span><br><span class="line">$ vim /var/lib/pgsql/12/data/postgresql.conf</span><br><span class="line"><span class="comment"># 修改如下内容：</span></span><br><span class="line"><span class="comment">#listen_addresses = &#x27;localhost&#x27;  改为  listen_addresses=&#x27;*&#x27;</span></span><br><span class="line"></span><br><span class="line">$ vim /var/lib/pgsql/12/data/pg_hba.conf</span><br><span class="line"><span class="comment"># 修改如下内容，信任指定服务器连接</span></span><br><span class="line"><span class="comment"># 如果想允许所有IPv4地址，则加入一行host all all 0.0.0.0/0 md5。IPv6方法类似。</span></span><br><span class="line"><span class="comment"># IPv4 local connections:</span></span><br><span class="line">host    all             all             127.0.0.1/32            md5</span><br><span class="line">host    all             all             0.0.0.0/0               md5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启postgresql服务</span></span><br><span class="line">$ systemctl restart postgresql-12</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Php8.x(编译)</title>
      <link href="/2022/04/07/php/centos7%E9%83%A8%E7%BD%B2_Php8.x(%E7%BC%96%E8%AF%91)/"/>
      <url>/2022/04/07/php/centos7%E9%83%A8%E7%BD%B2_Php8.x(%E7%BC%96%E8%AF%91)/</url>
      
        <content type="html"><![CDATA[<p>1）安装依赖工具(一般使用下述命令即可，如不成功请按提示升级相关工具库，否则会提示编译失败)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install libtool automake libzip-devel epel-release libxml2 libxml2-devel openssl openssl-devel curl-devel libjpeg-devel libpng-devel freetype-devel libmcrypt-devel uuid libuuid-devel gcc bzip2 bzip2-devel gmp-devel readline-devel libxslt-devel autoconf bison gcc gcc-c++ sqlite-devel cmake</span><br></pre></td></tr></table></figure><p><strong>下载安装 CMake</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220212160831028.png" alt="image-20220212160831028"></p><blockquote><p>CMake Error at CMakeLists.txt:1 (cmake_minimum_required):<br>  CMake 3.0.2 or higher is required.  You are running version 2.8.12.2</p></blockquote><p>卸载旧版本再下载新版本安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove cmake -y</span><br><span class="line">$ wget https://cmake.org/files/v3.22/cmake-3.22.1.tar.gz</span><br><span class="line">$ tar -zxvf cmake-3.22.1.tar.gz &amp;&amp; <span class="built_in">cd</span> cmake-3.22.1</span><br><span class="line">$ ./bootstrap</span><br><span class="line">$ gmake &amp;&amp; gmake install</span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/local/bin/cmake /usr/bin/</span><br></pre></td></tr></table></figure><p><strong>下载安装 oniguruma</strong></p><blockquote><p>No package oniguruma-devel available.<br>configure: error: Package requirements (oniguruma) were not met:<br>No package ‘oniguruma’ found</p></blockquote><ul><li>方法一：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install http://mirror.centos.org/centos-7/7.9.2009/cloud/x86_64/openstack-queens/Packages/o/oniguruma-6.7.0-1.el7.x86_64.rpm</span><br><span class="line">$ yum -y install http://mirror.centos.org/centos-7/7.9.2009/cloud/x86_64/openstack-queens/Packages/o/oniguruma-devel-6.7.0-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>方法二：(方法一下载较慢时可选择编译安装)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220212154256608.png" alt="image-20220212154256608"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/kkos/oniguruma/archive/refs/tags/v6.9.7.1.tar.gz</span><br><span class="line">$ tar -xf v6.9.7.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> oniguruma-6.9.7.1</span><br><span class="line">$ ./autogen.sh</span><br><span class="line">$ ./configure \</span><br><span class="line">--bindir=/usr/sbin/ \</span><br><span class="line">--sbindir=/usr/sbin/ \</span><br><span class="line">--libexecdir=/usr/libexec \</span><br><span class="line">--sysconfdir=/etc/ \</span><br><span class="line">--localstatedir=/var \</span><br><span class="line">--libdir=/usr/lib64/  \</span><br><span class="line">--includedir=/usr/include/ \</span><br><span class="line">--datarootdir=/usr/share \</span><br><span class="line">--infodir=/usr/share/info \</span><br><span class="line">--localedir=/usr/share/locale \</span><br><span class="line">--mandir=/usr/share/man/ \</span><br><span class="line">--docdir=/usr/share/doc/onig</span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>下载安装 libzip</strong></p><blockquote><p>checking for libzip &gt;&#x3D; 0.11 libzip !&#x3D; 1.3.1 libzip !&#x3D; 1.7.0… no<br>configure: error: Package requirements (libzip &gt;&#x3D; 0.11 libzip !&#x3D; 1.3.1 libzip !&#x3D; 1.7.0) were not met:</p><p>Requested ‘libzip &gt;&#x3D; 0.11’ but version of libzip is 0.10.1</p></blockquote><p>卸载旧版本再下载新版本安装</p><ul><li>方法一：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220212160445815.png" alt="image-20220212160445815"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove libzip -y</span><br><span class="line">$ wget https://libzip.org/download/libzip-1.8.0.tar.gz</span><br><span class="line">$ tar -zxvf libzip-1.8.0.tar.gz &amp;&amp; <span class="built_in">cd</span> libzip-1.8.0</span><br><span class="line">$ <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build \</span><br><span class="line">&amp;&amp; cmake -DCMAKE_INSTALL_PREFIX=/usr .. \</span><br><span class="line">&amp;&amp; make \</span><br><span class="line">&amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>方法二：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove libzip -y</span><br><span class="line">$ rpm -Uvh http://rpms.remirepo.net/enterprise/remi-release-7.rpm </span><br><span class="line">$ yum —enablerepo=remi install libzip5-devel </span><br></pre></td></tr></table></figure><p>2）下载安装 Php8.x</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://www.php.net/distributions/php-8.1.2.tar.gz</span><br><span class="line">$ tar -xf php-8.1.2.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> php-8.1.2</span><br><span class="line">$ ./configure \</span><br><span class="line">--prefix=/usr/local/php/ \</span><br><span class="line">--with-config-file-path=/usr/local/php/etc \</span><br><span class="line">--with-config-file-scan-dir=/usr/local/php/etc/conf.d \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--enable-soap \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-openssl-dir \</span><br><span class="line">--with-zlib \</span><br><span class="line">--with-iconv \</span><br><span class="line">--with-bz2 \</span><br><span class="line">--enable-gd \</span><br><span class="line">--with-jpeg \</span><br><span class="line">--with-freetype \</span><br><span class="line">--with-curl \</span><br><span class="line">--enable-dom \</span><br><span class="line">--enable-xml \</span><br><span class="line">--with-zip \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-pdo \</span><br><span class="line">--with-pdo-mysql \</span><br><span class="line">--with-zlib-dir \</span><br><span class="line">--enable-session \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-simplexml \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--enable-sysvmsg \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-sysvshm \</span><br><span class="line">--with-xsl \</span><br><span class="line">--enable-mysqlnd \</span><br><span class="line">--with-mysqli \</span><br><span class="line">--without-pear \</span><br><span class="line">--disable-short-tags</span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>3）创建配置文件</p><ul><li>复制相关配置文件到 php 安装路径</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/local/src/php-8.1.2/sapi/fpm/init.d.php-fpm /usr/local/php/</span><br><span class="line">$ <span class="built_in">cp</span> /usr/local/src/php-8.1.2/php.ini-production /usr/local/php/etc/php.ini</span><br></pre></td></tr></table></figure><ul><li>创建 php-fpm.conf 配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/php/etc</span><br><span class="line">$ <span class="built_in">cp</span> php-fpm.conf.default php-fpm.conf &amp;&amp; ll</span><br><span class="line">-rw-r--r-- 1 root root  5376 Feb 12 17:04 php-fpm.conf</span><br><span class="line">-rw-r--r-- 1 root root  5376 Feb 12 16:54 php-fpm.conf.default</span><br><span class="line">drwxr-xr-x 2 root root    30 Feb 12 16:54 php-fpm.d</span><br><span class="line">-rw-r--r-- 1 root root 72908 Feb 12 17:04 php.ini</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/php/etc/php-fpm.d</span><br><span class="line">$ <span class="built_in">cp</span> www.conf.default www.conf &amp;&amp; ll</span><br><span class="line">-rw-r--r-- 1 root root 20886 Feb 12 17:05 www.conf</span><br><span class="line">-rw-r--r-- 1 root root 20886 Feb 12 16:54 www.conf.default</span><br></pre></td></tr></table></figure><ul><li>启动 php-fpm 测试启动脚本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/php</span><br><span class="line">$ bash init.d.php-fpm start</span><br><span class="line">Starting php-fpm  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>4）创建开机自启服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/php-fpm.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=php-fpm</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/php/sbin/php-fpm</span><br><span class="line">PrivateTmp=True</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>因之前已启动过 php-fpm，现 9000 端口被占用无法启动服务，杀死进程再启动服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -lntup | grep 9000</span><br><span class="line">tcp        0      0 127.0.0.1:9000          0.0.0.0:*               LISTEN      29921/php-fpm: mast</span><br><span class="line"></span><br><span class="line">$ killall php-fpm</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now php-fpm.service</span><br><span class="line">$ systemctl status php-fpm</span><br><span class="line">● php-fpm.service - php-fpm</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/php-fpm.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2022-02-12 17:08:09 CST; 5s ago</span><br><span class="line">  Process: 29998 ExecStart=/usr/local/php/sbin/php-fpm (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 29999 (php-fpm)</span><br><span class="line">   CGroup: /system.slice/php-fpm.service</span><br><span class="line">           ├─29999 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)</span><br><span class="line">           ├─30000 php-fpm: pool www</span><br><span class="line">           └─30001 php-fpm: pool www</span><br><span class="line"></span><br><span class="line">Feb 12 17:08:09 nextcloud systemd[1]: Starting php-fpm...</span><br><span class="line">Feb 12 17:08:09 nextcloud systemd[1]: Started php-fpm.</span><br></pre></td></tr></table></figure><p>5）配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># php</span></span><br><span class="line"><span class="built_in">export</span> PHP_HOME=/usr/local/php</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PHP_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查php-fpm是否正常安装</span></span><br><span class="line">$ php -v</span><br><span class="line">PHP 8.1.2 (cli) (built: Feb 12 2022 16:54:09) (NTS)</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v4.1.2, Copyright (c) Zend Technologies</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> lanmp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operator部署_Redis-Cluster</title>
      <link href="/2022/04/07/operator/operator%E9%83%A8%E7%BD%B2_Redis-Cluster/"/>
      <url>/2022/04/07/operator/operator%E9%83%A8%E7%BD%B2_Redis-Cluster/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Reids 属于有状态服务，集群配置较为复杂，建议使用 Operator &amp; Helm 进行部署维护，可实现快速扩缩容操作；而 Operator 更适合部署有状态服务的组件，部署有状态的应用会简单很多，如 Redis、MySQL、RabbitMQ等；</p></blockquote><h3 id="实例框架"><a href="#实例框架" class="headerlink" title="实例框架"></a>实例框架</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210831120310574.png" alt="image-20210831120310574"></p><p>官方提供各类组件模版及文档可参考：<a href="https://github.com/operator-framework/awesome-operators">Operator Github 模版</a>     <a href="https://github.com/ucloud/redis-cluster-operator">Github 文档</a></p><p>Redis Cluster Operator 在 Kubernetes 上管理 Redis-Cluster 集群</p><ul><li><p>每个主节点及其从节点都由 statefulSet 管理，为每个 statefulSet 创建无头 svc，并为所有节点创建 clusterIP 服务。</p></li><li><p>每个有状态集都使用 PodAntiAffinity 来确保主节点和从节点分散在不同的节点上。</p></li><li><p>同时，当操作员在每个有状态集中选择主节点时，它会优先选择具有不同k8s节点的容器作为主节点。</p></li></ul><h3 id="实战部署"><a href="#实战部署" class="headerlink" title="实战部署"></a>实战部署</h3><ul><li><strong>下载 Redis-cluster-operator</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/ucloud/redis-cluster-operator.git</span><br></pre></td></tr></table></figure><p>部署文档中分为集群模式和单命名空间两种管理方式（如需要按项目需要部署多个 Redis，建议采用单命令空间隔离使用）</p><p>在此以单命名空间为实例测试，创建名称空间 Namespace：<code>redis-cluster</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create ns redis-cluster</span><br></pre></td></tr></table></figure><ul><li><strong>创建自定义资源（CRD）</strong></li></ul><p>注册 DistributedRedisCluster 和 RedisClusterBackup 自定义资源定义 (CRD)。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f deploy/crds/redis.kun_distributedredisclusters_crd.yaml</span><br><span class="line">$ kubectl create -f deploy/crds/redis.kun_redisclusterbackups_crd.yaml</span><br></pre></td></tr></table></figure><ul><li><strong>创建 Operator</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// cluster-scoped   <span class="comment"># 集群管理模式</span></span><br><span class="line">$ kubectl create -f deploy/service_account.yaml</span><br><span class="line">$ kubectl create -f deploy/cluster/cluster_role.yaml</span><br><span class="line">$ kubectl create -f deploy/cluster/cluster_role_binding.yaml</span><br><span class="line">$ kubectl create -f deploy/cluster/operator.yaml</span><br><span class="line"></span><br><span class="line">// namespace-scoped <span class="comment"># 命名空间模式</span></span><br><span class="line">$ kubectl create -f deploy/service_account.yaml -n redis-cluster</span><br><span class="line">$ kubectl create -f deploy/namespace/role.yaml -n redis-cluster</span><br><span class="line">$ kubectl create -f deploy/namespace/role_binding.yaml -n redis-cluster</span><br><span class="line">$ kubectl create -f deploy/namespace/operator.yaml -n redis-cluster</span><br><span class="line"></span><br><span class="line">$ kubectl get deployment -n redis-cluster</span><br><span class="line">NAME                     READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">redis-cluster-operator   1/1     1            1           157m</span><br></pre></td></tr></table></figure><ul><li><strong>部署 Redis 集群</strong></li></ul><p><strong>部署文档内置了持久化存储、密码设置、资源限制等配置样本实例供参考，可根据项目需要进行自定义</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> -al deploy/example/</span><br><span class="line">total 32</span><br><span class="line">drwxr-xr-x 3 root root 279 Aug 31 11:28 .</span><br><span class="line">drwxr-xr-x 6 root root 108 Aug 28 13:55 ..</span><br><span class="line">drwxr-xr-x 2 root root 125 Aug 28 13:55 backup-restore</span><br><span class="line">-rw-r--r-- 1 root root 889 Aug 28 13:55 custom-config.yaml</span><br><span class="line">-rw-r--r-- 1 root root 557 Aug 28 13:55 custom-password.yaml</span><br><span class="line">-rw-r--r-- 1 root root 410 Aug 28 13:55 custom-resources.yaml</span><br><span class="line">-rw-r--r-- 1 root root 324 Aug 28 13:55 custom-service.yaml</span><br><span class="line">-rw-r--r-- 1 root root 395 Aug 28 13:55 persistent.yaml</span><br><span class="line">-rw-r--r-- 1 root root 346 Aug 28 13:55 prometheus-exporter.yaml</span><br><span class="line">-rw-r--r-- 1 root root 320 Aug 28 13:55 redis.kun_v1alpha1_distributedrediscluster_cr.yaml</span><br><span class="line">-rw-r--r-- 1 root root 517 Aug 28 13:55 securitycontext.yaml</span><br></pre></td></tr></table></figure><p>1）创建 redis-class.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">redis-class.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-nfs-storage</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">nfs-client</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Retain</span></span><br></pre></td></tr></table></figure><p>2）创建 redis-cluster.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">redis-cluster.yaml</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">redis.kun/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DistributedRedisCluster</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="comment"># if your operator run as cluster-scoped, add this annotations</span></span><br><span class="line">    <span class="comment"># redis.kun/scope: cluster-scoped  按提示如果是集群模式需要开启，现为命名空间下，注释即可；</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-distributedrediscluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># Add fields here</span></span><br><span class="line">  <span class="attr">masterSize:</span> <span class="number">3</span>                        <span class="comment"># 主节点数量</span></span><br><span class="line">  <span class="attr">clusterReplicas:</span> <span class="number">1</span>                   <span class="comment"># 每个主节点的副本数量</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis:6.2.5-alpine3.14</span>        <span class="comment"># 根据需要更换版本</span></span><br><span class="line">  <span class="comment"># resources config</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">limits:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">300m</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">200Mi</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">cpu:</span> <span class="string">200m</span></span><br><span class="line">      <span class="attr">memory:</span> <span class="string">150Mi</span></span><br><span class="line">  <span class="comment"># storage config                     # 指定动态存储，测试环境暂采用NFS</span></span><br><span class="line">  <span class="attr">storage:</span>    </span><br><span class="line">    <span class="attr">type:</span> <span class="string">persistent-claim</span></span><br><span class="line">    <span class="attr">size:</span> <span class="string">2Gi</span></span><br><span class="line">    <span class="attr">class:</span> <span class="string">redis-nfs-storage</span></span><br><span class="line">    <span class="attr">deleteClaim:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3）查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get all -l redis.kun/name=example-distributedrediscluster -n redis-cluster</span><br><span class="line">NAME                                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/drc-example-distributedrediscluster-0-0   1/1     Running   0          28m</span><br><span class="line">pod/drc-example-distributedrediscluster-0-1   1/1     Running   0          27m</span><br><span class="line">pod/drc-example-distributedrediscluster-1-0   1/1     Running   0          28m</span><br><span class="line">pod/drc-example-distributedrediscluster-1-1   1/1     Running   0          27m</span><br><span class="line">pod/drc-example-distributedrediscluster-2-0   1/1     Running   0          28m</span><br><span class="line">pod/drc-example-distributedrediscluster-2-1   1/1     Running   0          27m</span><br><span class="line"></span><br><span class="line">NAME                                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)              AGE</span><br><span class="line">service/example-distributedrediscluster     ClusterIP   120.106.51.172   &lt;none&gt;        6379/TCP,16379/TCP   28m</span><br><span class="line">service/example-distributedrediscluster-0   ClusterIP   None             &lt;none&gt;        6379/TCP,16379/TCP   28m</span><br><span class="line">service/example-distributedrediscluster-1   ClusterIP   None             &lt;none&gt;        6379/TCP,16379/TCP   28m</span><br><span class="line">service/example-distributedrediscluster-2   ClusterIP   None             &lt;none&gt;        6379/TCP,16379/TCP   28m</span><br><span class="line"></span><br><span class="line">NAME                                                     READY   AGE</span><br><span class="line">statefulset.apps/drc-example-distributedrediscluster-0   2/2     28m</span><br><span class="line">statefulset.apps/drc-example-distributedrediscluster-1   2/2     28m</span><br><span class="line">statefulset.apps/drc-example-distributedrediscluster-2   2/2     28m</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">$ kubectl get sc,pvc,pv -n redis-cluster</span><br><span class="line">NAME                                               PROVISIONER   RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">storageclass.storage.k8s.io/redis-nfs-storage      nfs-client    Retain          Immediate           <span class="literal">false</span>                  32m</span><br><span class="line"></span><br><span class="line">NAME                                                                       STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS        AGE</span><br><span class="line">persistentvolumeclaim/redis-data-drc-example-distributedrediscluster-0-0   Bound    pvc-f2aea9e5-f13f-44cd-b205-30718abbb639   2Gi        RWO            redis-nfs-storage   30m</span><br><span class="line">persistentvolumeclaim/redis-data-drc-example-distributedrediscluster-0-1   Bound    pvc-8d70f7c5-d0cf-4e08-a274-0f4be7cf030a   2Gi        RWO            redis-nfs-storage   29m</span><br><span class="line">persistentvolumeclaim/redis-data-drc-example-distributedrediscluster-1-0   Bound    pvc-f689de3b-8a0a-4e5b-a54a-f27ec85ef96e   2Gi        RWO            redis-nfs-storage   30m</span><br><span class="line">persistentvolumeclaim/redis-data-drc-example-distributedrediscluster-1-1   Bound    pvc-d3b5ceda-6676-4743-8a6d-d91a76972ca3   2Gi        RWO            redis-nfs-storage   29m</span><br><span class="line">persistentvolumeclaim/redis-data-drc-example-distributedrediscluster-2-0   Bound    pvc-d8abcaad-1d52-4b98-91a3-45a2bc3b053f   2Gi        RWO            redis-nfs-storage   30m</span><br><span class="line">persistentvolumeclaim/redis-data-drc-example-distributedrediscluster-2-1   Bound    pvc-e1c92ad7-8afd-46e9-9537-4c9a32d64702   2Gi        RWO            redis-nfs-storage   29m</span><br><span class="line"></span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                                              STORAGECLASS           REASON   AGE</span><br><span class="line">persistentvolume/pvc-8d70f7c5-d0cf-4e08-a274-0f4be7cf030a   2Gi        RWO            Retain           Bound    redis-cluster/redis-data-drc-example-distributedrediscluster-0-1   redis-nfs-storage               29m</span><br><span class="line">persistentvolume/pvc-d3b5ceda-6676-4743-8a6d-d91a76972ca3   2Gi        RWO            Retain           Bound    redis-cluster/redis-data-drc-example-distributedrediscluster-1-1   redis-nfs-storage               29m</span><br><span class="line">persistentvolume/pvc-d8abcaad-1d52-4b98-91a3-45a2bc3b053f   2Gi        RWO            Retain           Bound    redis-cluster/redis-data-drc-example-distributedrediscluster-2-0   redis-nfs-storage               30m</span><br><span class="line">persistentvolume/pvc-e1c92ad7-8afd-46e9-9537-4c9a32d64702   2Gi        RWO            Retain           Bound    redis-cluster/redis-data-drc-example-distributedrediscluster-2-1   redis-nfs-storage               29m</span><br><span class="line">persistentvolume/pvc-f2aea9e5-f13f-44cd-b205-30718abbb639   2Gi        RWO            Retain           Bound    redis-cluster/redis-data-drc-example-distributedrediscluster-0-0   redis-nfs-storage               30m</span><br><span class="line">persistentvolume/pvc-f689de3b-8a0a-4e5b-a54a-f27ec85ef96e   2Gi        RWO            Retain           Bound    redis-cluster/redis-data-drc-example-distributedrediscluster-1-0   redis-nfs-storage               30m</span><br></pre></td></tr></table></figure><h3 id="验证集群"><a href="#验证集群" class="headerlink" title="验证集群"></a>验证集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it  drc-example-distributedrediscluster-0-0 -n redis-cluster -- sh</span><br><span class="line">/data <span class="comment"># redis-cli -c -h redis-svc</span></span><br><span class="line">Could not connect to Redis at redis-svc:6379: Name does not resolve</span><br><span class="line">not connected&gt; </span><br><span class="line">/data <span class="comment"># redis-cli -c -h example-distributedrediscluster</span></span><br><span class="line">example-distributedrediscluster:6379&gt; cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:6</span><br><span class="line">cluster_stats_messages_ping_sent:8413</span><br><span class="line">cluster_stats_messages_pong_sent:990</span><br><span class="line">cluster_stats_messages_meet_sent:416</span><br><span class="line">cluster_stats_messages_sent:9819</span><br><span class="line">cluster_stats_messages_ping_received:570</span><br><span class="line">cluster_stats_messages_pong_received:8829</span><br><span class="line">cluster_stats_messages_meet_received:420</span><br><span class="line">cluster_stats_messages_received:9819</span><br><span class="line">example-distributedrediscluster:6379&gt; <span class="built_in">set</span> a b</span><br><span class="line">-&gt; Redirected to slot [15495] located at 172.27.14.225:6379</span><br><span class="line">OK</span><br><span class="line">172.27.14.225:6379&gt; </span><br></pre></td></tr></table></figure><p>每个Pod都会得到集群内的一个DNS域名，格式为<code>$(podname).$(service name).$(namespace).svc.cluster.local</code></p><h3 id="扩缩集群"><a href="#扩缩集群" class="headerlink" title="扩缩集群"></a>扩缩集群</h3><p>1）增加&#x2F;减少 masterSize 触发放大&#x2F;缩小（注意：这个也直接可以使用edit修改。）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">redis.kun/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">DistributedRedisCluster</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="comment"># if your operator run as cluster-scoped, add this annotations</span></span><br><span class="line">    <span class="attr">redis.kun/scope:</span> <span class="string">cluster-scoped</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-distributedrediscluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># Increase the masterSize to trigger the scaling.</span></span><br><span class="line">  <span class="attr">masterSize:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">ClusterReplicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">redis:5.0.4-alpine</span></span><br></pre></td></tr></table></figure><h3 id="删除集群"><a href="#删除集群" class="headerlink" title="删除集群"></a>删除集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl delete -f deploy/example/redis-cluster.yaml</span><br><span class="line">$ kubectl delete -f deploy/example/redis-class.yaml</span><br><span class="line">$ kubectl delete sc redis-nfs-storage -n redis-cluster</span><br><span class="line">$ kubectl delete pvc redis-data-drc-example-distributedrediscluster-0-0 -n redis-cluster <span class="comment"># 所有pvc</span></span><br><span class="line">$ kubectl delete pv pvc-8d70f7c5-d0cf-4e08-a274-0f4be7cf030a                             <span class="comment"># 所有pv</span></span><br><span class="line"></span><br><span class="line">$ kubectl delete -f deploy/namespace/</span><br><span class="line">$ kubectl delete -f service_account.yaml</span><br><span class="line">$ kubectl delete -f deploy/crds/</span><br></pre></td></tr></table></figure><h3 id="备份还原"><a href="#备份还原" class="headerlink" title="备份还原"></a>备份还原</h3><p><strong>注意：现在只支持 Ceph S3 对象存储和 PVC</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Backup</span></span><br><span class="line">$ kubectl create -f deploy/example/backup-restore/redisclusterbackup_cr.yaml</span><br><span class="line"><span class="comment"># Restore from backup</span></span><br><span class="line">$ kubectl create -f deploy/example/backup-restore/restore.yaml</span><br></pre></td></tr></table></figure><p><strong>其他操作具体可参考 Github 参考文档</strong></p><p><strong>参考文献</strong></p><p><a href="https://ke.qq.com/course/2738602">更多学习内容请参考-K8s全栈架构师(基于世界五百强生产经验研发)</a></p>]]></content>
      
      
      <categories>
          
          <category> operator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis-cluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operator部署_RabbitMQ Cluster(官方示例)</title>
      <link href="/2022/04/07/operator/operator%E9%83%A8%E7%BD%B2_RabbitMQ%20Cluster(%E5%AE%98%E6%96%B9%E7%A4%BA%E4%BE%8B)/"/>
      <url>/2022/04/07/operator/operator%E9%83%A8%E7%BD%B2_RabbitMQ%20Cluster(%E5%AE%98%E6%96%B9%E7%A4%BA%E4%BE%8B)/</url>
      
        <content type="html"><![CDATA[<h3 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h3><ol><li>k8s 版本要 1.18 及其以上</li><li>能够在 master 节点上使用 kubectl 命令来管理整个 k8s 集群</li><li>有默认的一个 StorageClass 存储类，因为默认情况下 RabbitMQ Operator 创建的 RabbitMQ 集群会为每个实例使用 StorageClass 分配一个 10G 的 PVC。但是官方提供的yaml文件中并没有设置使用 StorageClass 存储类的配置，所以需要一个默认的 StorageClass 存储类。</li></ol><blockquote><p>若没有这个默认的 StorageClass 存储类，则创建 RabbitMQ 集群时创建的 pod 状态是 Pending，具体原因是：pod has unbound immediate PersistentVolumeClaims</p></blockquote><p>查看默认 StorageClass 储存类，注意 default</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get sc -o wide</span></span><br><span class="line">NAME                    PROVISIONER                     RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">nfs-164                 nfs-nfs-164                     Delete          WaitForFirstConsumer   <span class="literal">false</span>                  37d</span><br><span class="line">rook-ceph-block         rook-ceph.rbd.csi.ceph.com      Delete          Immediate              <span class="literal">true</span>                   24h</span><br><span class="line">rook-cephfs (default)   rook-ceph.cephfs.csi.ceph.com   Delete          Immediate              <span class="literal">true</span>                   23h</span><br><span class="line">storage                 nfs-storage                     Delete          WaitForFirstConsumer   <span class="literal">false</span>                  39d</span><br></pre></td></tr></table></figure><p>安装步骤</p><ul><li>安装 RabbitMQ 集群操作员</li><li>使用 RabbitMQ 集群操作员部署 RabbitMQ 集群</li><li>查看 RabbitMQ日志</li><li>访问 RabbitMQ 管理 UI</li><li>设置应用访问 RabbitMQ 集群</li></ul><h3 id="安装介绍"><a href="#安装介绍" class="headerlink" title="安装介绍"></a>安装介绍</h3><ul><li><p>第一种方式是采用插件的方式，详见地址：<a href="https://cloud.tencent.com/developer/article/1782766"> https://cloud.tencent.com/developer/article/1782766</a><br>需要先安装插件管理工具 krew，然后才能使用插件的方式进行安装。在安装的过程中会从 GitHub 上下载东西，访问 GitHub 慢的不建议采用这种方式</p></li><li><p>第二种方式是通过 yaml 文件的方式进行安装，这里采用这种方式进行</p></li></ul><h3 id="Operator-安装"><a href="#Operator-安装" class="headerlink" title="Operator 安装"></a>Operator 安装</h3><p>1）使用 yaml 文件的方式进行安装 cluster-operator ( <a href="https://github.com/rabbitmq/cluster-operator/releases">yaml 文件下载地址</a> )</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f cluster-operator.yaml       </span></span><br><span class="line">namespace/rabbitmq-system created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/rabbitmqclusters.rabbitmq.com created</span><br><span class="line">serviceaccount/rabbitmq-cluster-operator created</span><br><span class="line">role.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-role created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/rabbitmq-cluster-operator-role created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-leader-election-rolebinding created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/rabbitmq-cluster-operator-rolebinding created</span><br><span class="line">deployment.apps/rabbitmq-cluster-operator created</span><br></pre></td></tr></table></figure><p>2）会创建一个新的名称空间：rabbitmq-system</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get all -n rabbitmq-system</span></span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/rabbitmq-cluster-operator-7c65454ff9-f52b2   1/1     Running   0          32m</span><br><span class="line"></span><br><span class="line">NAME                                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/rabbitmq-cluster-operator   1/1     1            1           32m</span><br><span class="line"></span><br><span class="line">NAME                                                   DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/rabbitmq-cluster-operator-7c65454ff9   1         1         1       32m</span><br></pre></td></tr></table></figure><p>3）通过上面的显示可以发现有个一脉相承的如下关系：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">资源类型：deployment =》 replicaset =》 pod</span><br><span class="line">具体名称 ：rabbitmq-cluster-operator =》rabbitmq-cluster-operator-7c65454ff9 =》rabbitmq-cluster-operator-7c65454ff9-td2pm</span><br></pre></td></tr></table></figure><p>4）新的自定义资源 rabbitmqclusters.rabbitmq.com。自定义资源允许我们定义用于创建 RabbitMQ 集群的 API。以及一些 rbac 角色。这些是操作员创建、更新和删除 RabbitMQ 集群所必需的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get customresourcedefinitions.apiextensions.k8s.io </span></span><br><span class="line">NAME                                             CREATED AT</span><br><span class="line">...</span><br><span class="line">rabbitmqclusters.rabbitmq.com                    2021-06-04T02:21:42Z</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ-创建"><a href="#RabbitMQ-创建" class="headerlink" title="RabbitMQ 创建"></a>RabbitMQ 创建</h3><p>1）使用 cluster-operator 创建 RabbitMQ 集群</p><p><a href="https://github.com/rabbitmq/cluster-operator/tree/main/docs/examples/hello-world">简单的 yaml 文件模版</a>，这是最简单的 RabbitmqCluster 定义。唯一显示指定的属性是集群的名称。其他一切都将根据集群运营商的默认值进行配置。</p><p><a href="https://github.com/rabbitmq/cluster-operator/tree/main/docs/examples/">examples 模版目录</a> 还有许多其他引用，比如用 TLS、mTLS 创建 RabbitMQ 集群，用生产默认值设置集群，添加社区插件等等。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat rabbitmq.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rabbitmq.com/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RabbitmqCluster</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-rabbit-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">rabbitmq-system</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：默认没有写名称空间则会部署到defalut中，这里修改成rabbitmq-system</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl create -f rabbitmq.yaml </span></span><br><span class="line">rabbitmqcluster.rabbitmq.com/my-rabbit-cluster created</span><br></pre></td></tr></table></figure><p>2）在 rabbitmq-system 命名空间中创建了一个名为 my-rabbit-cluster 的 RabbitMQ 集群。可以在创建 RabbitMQ 集群时看到它：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get pod -n rabbitmq-system</span></span><br><span class="line">NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">my-rabbit-cluster-server-0                   1/1     Running   0          80s</span><br></pre></td></tr></table></figure><p>3）还可以看到创建的 rabbitmqclusters.rabbitmq.com 自定义资源的实例。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get rabbitmqclusters.rabbitmq.com -n rabbitmq-system</span></span><br><span class="line">NAME                AGE</span><br><span class="line">my-rabbit-cluster   2m33s</span><br></pre></td></tr></table></figure><p>4）查看 RabbitMQ 日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl logs my-rabbit-cluster-server-0 -n rabbitmq-system</span></span><br><span class="line"> Starting RabbitMQ 3.8.16 on Erlang 24.0.2</span><br><span class="line"> Copyright (c) 2007-2021 VMware, Inc. or its affiliates.</span><br><span class="line"> Licensed under the MPL 2.0. Website: https://rabbitmq.com</span><br><span class="line"></span><br><span class="line">  <span class="comment">##  ##      RabbitMQ 3.8.16</span></span><br><span class="line">  <span class="comment">##  ##</span></span><br><span class="line">  <span class="comment">##########  Copyright (c) 2007-2021 VMware, Inc. or its affiliates.</span></span><br><span class="line">  <span class="comment">######  ##</span></span><br><span class="line">  <span class="comment">##########  Licensed under the MPL 2.0. Website: https://rabbitmq.com</span></span><br><span class="line"></span><br><span class="line">  Doc guides: https://rabbitmq.com/documentation.html</span><br><span class="line">  Support:    https://rabbitmq.com/contact.html</span><br><span class="line">  Tutorials:  https://rabbitmq.com/getstarted.html</span><br><span class="line">  Monitoring: https://rabbitmq.com/monitoring.html</span><br><span class="line"></span><br><span class="line">  Logs: &lt;stdout&gt;</span><br><span class="line"></span><br><span class="line">  Config file(s): /etc/rabbitmq/rabbitmq.conf</span><br><span class="line">                  /etc/rabbitmq/conf.d/10-operatorDefaults.conf</span><br><span class="line">                  /etc/rabbitmq/conf.d/11-default_user.conf</span><br><span class="line">                  /etc/rabbitmq/conf.d/90-userDefinedConfiguration.conf</span><br><span class="line"></span><br><span class="line">  Starting broker...2021-06-04 03:05:59.646 [info] &lt;0.273.0&gt; </span><br><span class="line"> node           : rabbit@my-rabbit-cluster-server-0.my-rabbit-cluster-nodes.rabbitmq-system</span><br><span class="line"> home <span class="built_in">dir</span>       : /var/lib/rabbitmq</span><br><span class="line"> config file(s) : /etc/rabbitmq/rabbitmq.conf</span><br><span class="line">                : /etc/rabbitmq/conf.d/10-operatorDefaults.conf</span><br><span class="line">                : /etc/rabbitmq/conf.d/11-default_user.conf</span><br><span class="line">                : /etc/rabbitmq/conf.d/90-userDefinedConfiguration.conf</span><br><span class="line"> cookie <span class="built_in">hash</span>    : kH25nUaPr1ngafL6UipoTQ==</span><br><span class="line"> <span class="built_in">log</span>(s)         : &lt;stdout&gt;</span><br><span class="line"> database <span class="built_in">dir</span>   : /var/lib/rabbitmq/mnesia/rabbit@my-rabbit-cluster-server-0.my-rabbit-cluster-nodes.rabbitmq-system</span><br></pre></td></tr></table></figure><p>5）访问 RabbitMQ 管理 UI</p><p><strong>获取用户名和密码</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">username=<span class="string">&quot;<span class="subst">$(kubectl get secret my-rabbit-cluster-default-user -n rabbitmq-system -o jsonpath=&#x27;&#123;.data.username&#125;&#x27; | base64 --decode)</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;username: <span class="variable">$username</span>&quot;</span>  </span><br><span class="line"></span><br><span class="line">password=<span class="string">&quot;<span class="subst">$(kubectl get secret my-rabbit-cluster-default-user -n rabbitmq-system -o jsonpath=&#x27;&#123;.data.password&#125;&#x27; | base64 --decode)</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;password: <span class="variable">$password</span>&quot;</span></span><br></pre></td></tr></table></figure><p>默认会创建一个类型是 ClusterIP 的 svc</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl get svc -n rabbitmq-system</span></span><br><span class="line">NAME                      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                        AGE</span><br><span class="line">my-rabbit-cluster         ClusterIP   10.3.255.186   &lt;none&gt;        5672/TCP,15672/TCP,15692/TCP   8m18s</span><br><span class="line">my-rabbit-cluster-nodes   ClusterIP   None           &lt;none&gt;        4369/TCP,25672/TCP             8m18s</span><br></pre></td></tr></table></figure><ul><li>办法一是修改 ClusterIP 类型为 NodePort，使用宿主机 IP 和 nodeport 端口来访问</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># kubectl edit svc my-rabbit-cluster -n rabbitmq-system</span><br></pre></td></tr></table></figure><blockquote><p>注:这种方式一开始修改后是能够访问使用的，但是删除集群后重新创建并这样设置，就无法修改成 NodePort了，很是奇怪。</p></blockquote><ul><li>办法二是使用 kube-proxy 进行代理来实现访问</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># kubectl port-forward svc/my-rabbit-cluster 15672      </span></span><br><span class="line">Forwarding from 127.0.0.1:15672 -&gt; 15672</span><br><span class="line">Forwarding from [::1]:15672 -&gt; 15672</span><br></pre></td></tr></table></figure><p>现在我们可以通过 localhost:15672 在打开浏览器并查看管理 UI。或者，可以运行 curl 命令来验证访问：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -u<span class="variable">$username</span>:<span class="variable">$password</span> localhost:15672/api/overview</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@develop-master-1 ~]<span class="comment"># username=&quot;$(kubectl get secret my-rabbit-cluster-default-user -n rabbitmq-system -o jsonpath=&#x27;&#123;.data.username&#125;&#x27; | base64 --decode)&quot; &amp;&amp; echo &quot;username: $username&quot;</span></span><br><span class="line">username: YNbrfwcmEqnuJD6BZthuWZP9bTJQuYmW</span><br><span class="line">[root@develop-master-1 ~]<span class="comment"># password=&quot;$(kubectl get secret my-rabbit-cluster-default-user -n rabbitmq-system -o jsonpath=&#x27;&#123;.data.password&#125;&#x27; | base64 --decode)&quot; &amp;&amp; echo &quot;password: $password&quot;</span></span><br><span class="line">password: 88DzY3WQ51Q2Q9FfWJKrTaQpLUgSfeWP</span><br><span class="line">[root@develop-master-1 ~]<span class="comment"># curl -uYNbrfwcmEqnuJD6BZthuWZP9bTJQuYmW:88DzY3WQ51Q2Q9FfWJKrTaQpLUgSfeWP localhost:15672/api/overview</span></span><br><span class="line">&#123;<span class="string">&quot;management_version&quot;</span>:<span class="string">&quot;3.8.16&quot;</span>,<span class="string">&quot;rates_mode&quot;</span>:<span class="string">&quot;basic&quot;</span>,<span class="string">&quot;sample_retention_policies&quot;</span>:&#123;<span class="string">&quot;global&quot;</span>:[600,3600,28800,86400],<span class="string">&quot;basic&quot;</span>:[600,3600],<span class="string">&quot;detailed&quot;</span>:[600]&#125;,<span class="string">&quot;exchange_types&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;direct&quot;</span>,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;AMQP direct exchange, as per the AMQP specification&quot;</span>,<span class="string">&quot;enabled&quot;</span>:<span class="literal">true</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;fanout&quot;</span>,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;AMQP fanout exchange, as per the AMQP specification&quot;</span>,<span class="string">&quot;enabled&quot;</span>:<span class="literal">true</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;headers&quot;</span>,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;AMQP headers exchange, as per the AMQP specification&quot;</span>,<span class="string">&quot;enabled&quot;</span>:<span class="literal">true</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;topic&quot;</span>,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;AMQP topic exchange, as per the AMQP specification&quot;</span>,<span class="string">&quot;enabled&quot;</span>:<span class="literal">true</span>&#125;],<span class="string">&quot;product_version&quot;</span>:<span class="string">&quot;3.8.16&quot;</span>,<span class="string">&quot;product_name&quot;</span>:<span class="string">&quot;RabbitMQ&quot;</span>,<span class="string">&quot;rabbitmq_version&quot;</span>:<span class="string">&quot;3.8.16&quot;</span>,<span class="string">&quot;cluster_name&quot;</span>:<span class="string">&quot;my-rabbit-cluster&quot;</span>,<span class="string">&quot;erlang_version&quot;</span>:<span class="string">&quot;24.0.2&quot;</span>,<span class="string">&quot;erlang_full_version&quot;</span>:<span class="string">&quot;Erlang/OTP 24 [erts-12.0.2] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:1]&quot;</span>,<span class="string">&quot;disable_stats&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;enable_queue_totals&quot;</span>:<span class="literal">false</span>,<span class="string">&quot;message_stats&quot;</span>:&#123;&#125;,<span class="string">&quot;churn_rates&quot;</span>:&#123;<span class="string">&quot;channel_closed&quot;</span>:0,<span class="string">&quot;channel_closed_details&quot;</span>:&#123;<span class="string">&quot;rate&quot;</span>:0.0&#125;,<span class="string">&quot;channel_created&quot;</span>:0,<span class="string">&quot;channel_created_details&quot;</span>:&#123;<span class="string">&quot;rate&quot;</span>:0.0&#125;,<span class="string">&quot;connection_closed&quot;</span>:60,<span class="string">&quot;connection_closed_details&quot;</span>:&#123;<span class="string">&quot;rate&quot;</span>:0.0&#125;,<span class="string">&quot;connection_created&quot;</span>:0,<span class="string">&quot;connection_created_details&quot;</span>:&#123;<span class="string">&quot;rate&quot;</span>:0.0&#125;,<span class="string">&quot;queue_created&quot;</span>:0,<span class="string">&quot;queue_created_details&quot;</span>:&#123;<span class="string">&quot;rate&quot;</span>:0.0&#125;,<span class="string">&quot;queue_declared&quot;</span>:0,<span class="string">&quot;queue_declared_details&quot;</span>:&#123;<span class="string">&quot;rate&quot;</span>:0.0&#125;,<span class="string">&quot;queue_deleted&quot;</span>:0,<span class="string">&quot;queue_deleted_details&quot;</span>:&#123;<span class="string">&quot;rate&quot;</span>:0.0&#125;&#125;,<span class="string">&quot;queue_totals&quot;</span>:&#123;&#125;,<span class="string">&quot;object_totals&quot;</span>:&#123;<span class="string">&quot;channels&quot;</span>:0,<span class="string">&quot;connections&quot;</span>:0,<span class="string">&quot;consumers&quot;</span>:0,<span class="string">&quot;exchanges&quot;</span>:7,<span class="string">&quot;queues&quot;</span>:0&#125;,<span class="string">&quot;statistics_db_event_queue&quot;</span>:0,<span class="string">&quot;node&quot;</span>:<span class="string">&quot;rabbit@my-rabbit-cluster-server-0.my-rabbit-cluster-nodes.default&quot;</span>,<span class="string">&quot;listeners&quot;</span>:[&#123;<span class="string">&quot;node&quot;</span>:<span class="string">&quot;rabbit@my-rabbit-cluster-server-0.my-rabbit-cluster-nodes.default&quot;</span>,<span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;amqp&quot;</span>,<span class="string">&quot;ip_address&quot;</span>:<span class="string">&quot;::&quot;</span>,<span class="string">&quot;port&quot;</span>:5672,<span class="string">&quot;socket_opts&quot;</span>:&#123;<span class="string">&quot;backlog&quot;</span>:128,<span class="string">&quot;nodelay&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;linger&quot;</span>:[<span class="literal">true</span>,0],<span class="string">&quot;exit_on_close&quot;</span>:<span class="literal">false</span>&#125;&#125;,&#123;<span class="string">&quot;node&quot;</span>:<span class="string">&quot;rabbit@my-rabbit-cluster-server-0.my-rabbit-cluster-nodes.default&quot;</span>,<span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;clustering&quot;</span>,<span class="string">&quot;ip_address&quot;</span>:<span class="string">&quot;::&quot;</span>,<span class="string">&quot;port&quot;</span>:25672,<span class="string">&quot;socket_opts&quot;</span>:[]&#125;,&#123;<span class="string">&quot;node&quot;</span>:<span class="string">&quot;rabbit@my-rabbit-cluster-server-0.my-rabbit-cluster-nodes.default&quot;</span>,<span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;http&quot;</span>,<span class="string">&quot;ip_address&quot;</span>:<span class="string">&quot;::&quot;</span>,<span class="string">&quot;port&quot;</span>:15672,<span class="string">&quot;socket_opts&quot;</span>:&#123;<span class="string">&quot;cowboy_opts&quot;</span>:&#123;<span class="string">&quot;sendfile&quot;</span>:<span class="literal">false</span>&#125;,<span class="string">&quot;port&quot;</span>:15672&#125;&#125;,&#123;<span class="string">&quot;node&quot;</span>:<span class="string">&quot;rabbit@my-rabbit-cluster-server-0.my-rabbit-cluster-nodes.default&quot;</span>,<span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;http/prometheus&quot;</span>,<span class="string">&quot;ip_address&quot;</span>:<span class="string">&quot;::&quot;</span>,<span class="string">&quot;port&quot;</span>:15692,<span class="string">&quot;socket_opts&quot;</span>:&#123;<span class="string">&quot;cowboy_opts&quot;</span>:&#123;<span class="string">&quot;sendfile&quot;</span>:<span class="literal">false</span>&#125;,<span class="string">&quot;port&quot;</span>:15692,<span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;http/prometheus&quot;</span>&#125;&#125;],<span class="string">&quot;contexts&quot;</span>:[&#123;<span class="string">&quot;ssl_opts&quot;</span>:[],<span class="string">&quot;node&quot;</span>:<span class="string">&quot;rabbit@my-rabbit-cluster-server-0.my-rabbit-cluster-nodes.default&quot;</span>,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;RabbitMQ Management&quot;</span>,<span class="string">&quot;path&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;cowboy_opts&quot;</span>:<span class="string">&quot;[&#123;sendfile,false&#125;]&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="string">&quot;15672&quot;</span>&#125;,&#123;<span class="string">&quot;ssl_opts&quot;</span>:[],<span class="string">&quot;node&quot;</span>:<span class="string">&quot;rabbit@my-rabbit-cluster-server-0.my-rabbit-cluster-nodes.default&quot;</span>,<span class="string">&quot;description&quot;</span>:<span class="string">&quot;RabbitMQ Prometheus&quot;</span>,<span class="string">&quot;path&quot;</span>:<span class="string">&quot;/&quot;</span>,<span class="string">&quot;cowboy_opts&quot;</span>:<span class="string">&quot;[&#123;sendfile,false&#125;]&quot;</span>,<span class="string">&quot;port&quot;</span>:<span class="string">&quot;15692&quot;</span>,<span class="string">&quot;protocol&quot;</span>:<span class="string">&quot;&#x27;http/prometheus&#x27;&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>6）设置应用访问 RabbitMQ 集群</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># username=&quot;$(kubectl get secret my-rabbit-cluster-default-user -n rabbitmq-system -o jsonpath=&#x27;&#123;.data.username&#125;&#x27; | base64 --decode)&quot;</span></span><br><span class="line"><span class="comment"># password=&quot;$(kubectl get secret my-rabbit-cluster-default-user -n rabbitmq-system -o jsonpath=&#x27;&#123;.data.password&#125;&#x27; | base64 --decode)&quot;</span></span><br><span class="line"><span class="comment"># service=&quot;$(kubectl get service my-rabbit-cluster -n rabbitmq-system -o jsonpath=&#x27;&#123;.spec.clusterIP&#125;&#x27;)&quot;</span></span><br><span class="line"><span class="comment"># kubectl run perf-test --image=pivotalrabbitmq/perf-test -- --uri amqp://$username:$password@$service</span></span><br><span class="line"></span><br><span class="line">pod/perf-test created</span><br><span class="line"></span><br><span class="line"><span class="comment"># kubectl logs --follow perf-test</span></span><br><span class="line"><span class="built_in">id</span>: test-041921-512, time: 1.000s, sent: 4720 msg/s, received: 2109 msg/s, min/median/75th/95th/99th consumer latency: 3075/22253/33855/75681/89195 µs</span><br><span class="line"><span class="built_in">id</span>: test-041921-512, time: 2.000s, sent: 16538 msg/s, received: 13698 msg/s, min/median/75th/95th/99th consumer latency: 91432/157833/203565/344737/356844 µs</span><br><span class="line"><span class="built_in">id</span>: test-041921-512, time: 3.001s, sent: 18142 msg/s, received: 17832 msg/s, min/median/75th/95th/99th consumer latency: 268145/343634/378988/437575/450074 µs</span><br><span class="line"><span class="built_in">id</span>: test-041921-512, time: 4.001s, sent: 20991 msg/s, received: 17456 msg/s, min/median/75th/95th/99th consumer latency: 264207/345566/373946/407531/425332 µs</span><br><span class="line"><span class="built_in">id</span>: test-041921-512, time: 5.015s, sent: 24398 msg/s, received: 13231 msg/s, min/median/75th/95th/99th consumer latency: 358486/701769/755296/803202/832797 µs</span><br><span class="line"><span class="built_in">id</span>: test-041921-512, time: 6.017s, sent: 14616 msg/s, received: 12665 msg/s, min/median/75th/95th/99th consumer latency: 834423/1083012/1225606/1335011/1374533 µs</span><br><span class="line"><span class="built_in">id</span>: test-041921-512, time: 7.019s, sent: 16229 msg/s, received: 14603 msg/s, min/median/75th/95th/99th consumer latency: 1335783/1502060/1614123/1700792/1742414 µs</span><br><span class="line">可以看出，perf-test每秒能够产生和消耗大约12000条消息。</span><br></pre></td></tr></table></figure><h3 id="RabbitMQ-监控"><a href="#RabbitMQ-监控" class="headerlink" title="RabbitMQ 监控"></a>RabbitMQ 监控</h3><p>**使用 Prometheus &amp; Grafana 监控 rabbitmq 集群，可参考 **<a href="https://www.rabbitmq.com/prometheus.html">官方文档地址</a></p><p>注意：当扩充增加到 2 个甚至更多的时候，需要 k8s 节点资源是否足够。如报错：<code>0/3 nodes are available: 3 Insufficient cpu.</code> 原因是 k8s 节点资源资源不足。<br>1）创建 rabbitmq 集群时使用的是默认配置，默认配置中资源要求如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Limits:</span></span><br><span class="line">  <span class="attr">cpu:</span>     <span class="number">2</span></span><br><span class="line">  <span class="attr">memory:</span>  <span class="string">2Gi</span></span><br><span class="line"><span class="attr">Requests:</span></span><br><span class="line">  <span class="attr">cpu:</span>      <span class="number">1</span></span><br><span class="line">  <span class="attr">memory:</span>   <span class="string">2Gi</span></span><br></pre></td></tr></table></figure><p>2）自动生成第二个 pod 时查看的详情如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Name:           my-rabbit-cluster-server-1</span><br><span class="line">Namespace:      rabbitmq-system</span><br><span class="line">Priority:       0</span><br><span class="line">Node:           &lt;none&gt;</span><br><span class="line">Labels:         app.kubernetes.io/component=rabbitmq</span><br><span class="line">                app.kubernetes.io/name=my-rabbit-cluster</span><br><span class="line">                app.kubernetes.io/part-of=rabbitmq</span><br><span class="line">                controller-revision-hash=my-rabbit-cluster-server-b7d484587</span><br><span class="line">                statefulset.kubernetes.io/pod-name=my-rabbit-cluster-server-1</span><br><span class="line">Annotations:    prometheus.io/port: 15692</span><br><span class="line">                prometheus.io/scrape: <span class="literal">true</span></span><br><span class="line">Status:         Pending</span><br><span class="line">IP:             </span><br><span class="line">IPs:            &lt;none&gt;</span><br><span class="line">Controlled By:  StatefulSet/my-rabbit-cluster-server</span><br><span class="line">Init Containers:</span><br><span class="line">  setup-container:</span><br><span class="line">    Image:      rabbitmq:3.8.16-management</span><br><span class="line">    Port:       &lt;none&gt;</span><br><span class="line">    Host Port:  &lt;none&gt;</span><br><span class="line">    Command:</span><br><span class="line">      sh</span><br><span class="line">      -c</span><br><span class="line">      <span class="built_in">cp</span> /tmp/erlang-cookie-secret/.erlang.cookie /var/lib/rabbitmq/.erlang.cookie &amp;&amp; <span class="built_in">chown</span> 999:999 /var/lib/rabbitmq/.erlang.cookie &amp;&amp; <span class="built_in">chmod</span> 600 /var/lib/rabbitmq/.erlang.cookie ; <span class="built_in">cp</span> /tmp/rabbitmq-plugins/enabled_plugins /operator/enabled_plugins &amp;&amp; <span class="built_in">chown</span> 999:999 /operator/enabled_plugins ; <span class="built_in">chown</span> 999:999 /var/lib/rabbitmq/mnesia/ ; <span class="built_in">echo</span> <span class="string">&#x27;[default]&#x27;</span> &gt; /var/lib/rabbitmq/.rabbitmqadmin.conf &amp;&amp; sed -e <span class="string">&#x27;s/default_user/username/&#x27;</span> -e <span class="string">&#x27;s/default_pass/password/&#x27;</span> /tmp/default_user.conf &gt;&gt; /var/lib/rabbitmq/.rabbitmqadmin.conf &amp;&amp; <span class="built_in">chown</span> 999:999 /var/lib/rabbitmq/.rabbitmqadmin.conf &amp;&amp; <span class="built_in">chmod</span> 600 /var/lib/rabbitmq/.rabbitmqadmin.conf</span><br><span class="line">    Limits:</span><br><span class="line">      cpu:     100m</span><br><span class="line">      memory:  500Mi</span><br><span class="line">    Requests:</span><br><span class="line">      cpu:        100m</span><br><span class="line">      memory:     500Mi</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /operator from rabbitmq-plugins (rw)</span><br><span class="line">      /tmp/default_user.conf from rabbitmq-confd (rw,path=<span class="string">&quot;default_user.conf&quot;</span>)</span><br><span class="line">      /tmp/erlang-cookie-secret/ from erlang-cookie-secret (rw)</span><br><span class="line">      /tmp/rabbitmq-plugins/ from plugins-conf (rw)</span><br><span class="line">      /var/lib/rabbitmq/ from rabbitmq-erlang-cookie (rw)</span><br><span class="line">      /var/lib/rabbitmq/mnesia/ from persistence (rw)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from my-rabbit-cluster-server-token-vgvp4 (ro)</span><br><span class="line">Containers:</span><br><span class="line">  rabbitmq:</span><br><span class="line">    Image:       rabbitmq:3.8.16-management</span><br><span class="line">    Ports:       4369/TCP, 5672/TCP, 15672/TCP, 15692/TCP</span><br><span class="line">    Host Ports:  0/TCP, 0/TCP, 0/TCP, 0/TCP</span><br><span class="line">    Limits:</span><br><span class="line">      cpu:     2</span><br><span class="line">      memory:  2Gi</span><br><span class="line">    Requests:</span><br><span class="line">      cpu:      1</span><br><span class="line">      memory:   2Gi</span><br><span class="line">    Readiness:  tcp-socket :amqp delay=10s <span class="built_in">timeout</span>=5s period=10s <span class="comment">#success=1 #failure=3</span></span><br><span class="line">    Environment:</span><br><span class="line">      MY_POD_NAME:                    my-rabbit-cluster-server-1 (v1:metadata.name)</span><br><span class="line">      MY_POD_NAMESPACE:               default (v1:metadata.namespace)</span><br><span class="line">      RABBITMQ_ENABLED_PLUGINS_FILE:  /operator/enabled_plugins</span><br><span class="line">      K8S_SERVICE_NAME:               my-rabbit-cluster-nodes</span><br><span class="line">      RABBITMQ_USE_LONGNAME:          <span class="literal">true</span></span><br><span class="line">      RABBITMQ_NODENAME:              rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE)</span><br><span class="line">      K8S_HOSTNAME_SUFFIX:            .$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE)</span><br><span class="line">    Mounts:</span><br><span class="line">      /etc/pod-info/ from pod-info (rw)</span><br><span class="line">      /etc/rabbitmq/conf.d/10-operatorDefaults.conf from rabbitmq-confd (rw,path=<span class="string">&quot;operatorDefaults.conf&quot;</span>)</span><br><span class="line">      /etc/rabbitmq/conf.d/11-default_user.conf from rabbitmq-confd (rw,path=<span class="string">&quot;default_user.conf&quot;</span>)</span><br><span class="line">      /etc/rabbitmq/conf.d/90-userDefinedConfiguration.conf from rabbitmq-confd (rw,path=<span class="string">&quot;userDefinedConfiguration.conf&quot;</span>)</span><br><span class="line">      /operator from rabbitmq-plugins (rw)</span><br><span class="line">      /var/lib/rabbitmq/ from rabbitmq-erlang-cookie (rw)</span><br><span class="line">      /var/lib/rabbitmq/mnesia/ from persistence (rw)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from my-rabbit-cluster-server-token-vgvp4 (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status</span><br><span class="line">  PodScheduled   False </span><br><span class="line">Volumes:</span><br><span class="line">  persistence:</span><br><span class="line">    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim <span class="keyword">in</span> the same namespace)</span><br><span class="line">    ClaimName:  persistence-my-rabbit-cluster-server-1</span><br><span class="line">    ReadOnly:   <span class="literal">false</span></span><br><span class="line">  plugins-conf:</span><br><span class="line">    Type:      ConfigMap (a volume populated by a ConfigMap)</span><br><span class="line">    Name:      my-rabbit-cluster-plugins-conf</span><br><span class="line">    Optional:  <span class="literal">false</span></span><br><span class="line">  rabbitmq-confd:</span><br><span class="line">    Type:                Projected (a volume that contains injected data from multiple sources)</span><br><span class="line">    SecretName:          my-rabbit-cluster-default-user</span><br><span class="line">    SecretOptionalName:  &lt;nil&gt;</span><br><span class="line">    ConfigMapName:       my-rabbit-cluster-server-conf</span><br><span class="line">    ConfigMapOptional:   &lt;nil&gt;</span><br><span class="line">  rabbitmq-erlang-cookie:</span><br><span class="line">    Type:       EmptyDir (a temporary directory that shares a pod<span class="string">&#x27;s lifetime)</span></span><br><span class="line"><span class="string">    Medium:     </span></span><br><span class="line"><span class="string">    SizeLimit:  &lt;unset&gt;</span></span><br><span class="line"><span class="string">  erlang-cookie-secret:</span></span><br><span class="line"><span class="string">    Type:        Secret (a volume populated by a Secret)</span></span><br><span class="line"><span class="string">    SecretName:  my-rabbit-cluster-erlang-cookie</span></span><br><span class="line"><span class="string">    Optional:    false</span></span><br><span class="line"><span class="string">  rabbitmq-plugins:</span></span><br><span class="line"><span class="string">    Type:       EmptyDir (a temporary directory that shares a pod&#x27;</span>s lifetime)</span><br><span class="line">    Medium:     </span><br><span class="line">    SizeLimit:  &lt;<span class="built_in">unset</span>&gt;</span><br><span class="line">  pod-info:</span><br><span class="line">    Type:  DownwardAPI (a volume populated by information about the pod)</span><br><span class="line">    Items:</span><br><span class="line">      metadata.labels[<span class="string">&#x27;skipPreStopChecks&#x27;</span>] -&gt; skipPreStopChecks</span><br><span class="line">  my-rabbit-cluster-server-token-vgvp4:</span><br><span class="line">    Type:        Secret (a volume populated by a Secret)</span><br><span class="line">    SecretName:  my-rabbit-cluster-server-token-vgvp4</span><br><span class="line">    Optional:    <span class="literal">false</span></span><br><span class="line">QoS Class:       Burstable</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute op=Exists <span class="keyword">for</span> 300s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason            Age                From               Message</span><br><span class="line">  ----     ------            ----               ----               -------</span><br><span class="line">  Warning  FailedScheduling  33s (x2 over 33s)  default-scheduler  0/3 nodes are available: 3 Insufficient cpu.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> operator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Operator部署_Kube-Prometheus</title>
      <link href="/2022/04/07/operator/operator%E9%83%A8%E7%BD%B2_Kube-Prometheus/"/>
      <url>/2022/04/07/operator/operator%E9%83%A8%E7%BD%B2_Kube-Prometheus/</url>
      
        <content type="html"><![CDATA[<h3 id="架构剖析"><a href="#架构剖析" class="headerlink" title="架构剖析"></a>架构剖析</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211012154919306.png" alt="image-20211012154919306"></p><h3 id="监控流程"><a href="#监控流程" class="headerlink" title="监控流程"></a>监控流程</h3><p>在 K8s 中，一般监控的数据来源为云原生和非云原生应用，具体数据源的监控流程如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211012163453750.png" alt="image-20211012163453750"></p><h3 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h3><ul><li><p>云原生应用：<code>/metrics</code></p></li><li><p>非云原生应用：<code>Exporter</code></p></li></ul><h4 id="云原生"><a href="#云原生" class="headerlink" title="云原生"></a>云原生</h4><p>serviceMonitor 是通过对 service 获取数据的一种方式。</p><ol><li>promethus-operator可以通过 serviceMonitor 自动识别带有某些 label 的 service ，并从这些 service 获取数据。</li><li>serviceMonitor 也是由 promethus-operator 自动发现的。</li></ol><p><strong>serviceMonitor 配置解析</strong></p><ul><li>honorLabels：如目标标签与服务器标签冲突，是否保留目标标签</li><li>interval：监控数据抓取的时间间隔</li><li>path：Metrics 接口路径</li><li>port：Metrics 端口</li><li>scheme：Metrics 接口的协议</li><li>namespaceSelector：监控目标 Service 所在的命令空间</li><li>selector：监控目标 Service 的标签</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例文件</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">elasticsearch-exporter</span></span><br><span class="line">    <span class="attr">release:</span> <span class="string">es-exporter</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">es-exporter-elasticsearch-exporter</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">honorLabels:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/metrics</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">jobLabel:</span> <span class="string">es-exporter</span></span><br><span class="line">  <span class="attr">namespaceSelector:</span></span><br><span class="line">    <span class="attr">matchNames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">elasticsearch-exporter</span></span><br><span class="line">      <span class="attr">release:</span> <span class="string">es-exporter</span></span><br></pre></td></tr></table></figure><h4 id="非云原生"><a href="#非云原生" class="headerlink" title="非云原生"></a>非云原生</h4><p>目前比较常用的 Exporter 工具如下：</p><table><thead><tr><th align="left">类型</th><th><strong>Exporter</strong></th></tr></thead><tbody><tr><td align="left">数据库</td><td>MySQL  Exporter, Redis  Exporter, MongoDB  Exporter, MSSQL  Exporter</td></tr><tr><td align="left">硬件</td><td>Apcupsd  Exporter, IoT  Edison  Exporter,  IPMI  Exporter, Node  Exporter</td></tr><tr><td align="left">消息队列</td><td>Beanstalkd  Exporter, Kafka  Exporter, NSQ  Exporter, RabbitMQ  Exporter</td></tr><tr><td align="left">存储</td><td>Ceph  Exporter, Gluster  Exporter, HDFS  Exporter, ScaleIO  Exporter</td></tr><tr><td align="left">HTTP 服务</td><td>Apache  Exporter, HAProxy  Exporter, Nginx  Exporter</td></tr><tr><td align="left">API 服务</td><td>AWS  ECS  Exporter, Docker  Cloud Exporter, Docker  Hub  Exporter,  GitHub  Exporter</td></tr><tr><td align="left">日志</td><td>Fluentd  Exporter, Grok  Exporter</td></tr><tr><td align="left">监控系统</td><td>Collectd  Exporter, Graphite  Exporter, InfluxDB  Exporter, Nagios  Exporter, SNMP  Exporter</td></tr><tr><td align="left">其它</td><td>Blackbox  Exporter, JIRA  Exporter, Jenkins  Exporter, Confluence  Exporter</td></tr></tbody></table><h3 id="安装详解"><a href="#安装详解" class="headerlink" title="安装详解"></a>安装详解</h3><p>1）安装方式对比</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211012165544514.png" alt="image-20211012165544514"></p><p>2）高可用安装</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211012171942283.png" alt="image-20211012171942283"></p><p>首先通过该项目地址，找到自身 K8s 版本对应的 Kube-Prometheus Stack 版本：</p><p><strong>Kubernetes compatibility matrix</strong></p><p>The following versions are supported and work as we test against these versions in their respective branches. But note that other versions might work!</p><table><thead><tr><th>kube-prometheus stack</th><th>Kubernetes 1.18</th><th>Kubernetes 1.19</th><th>Kubernetes 1.20</th><th>Kubernetes 1.21</th><th>Kubernetes 1.22</th></tr></thead><tbody><tr><td><a href="https://github.com/prometheus-operator/kube-prometheus/tree/release-0.6"><code>release-0.6</code></a></td><td>✗</td><td>✔</td><td>✗</td><td>✗</td><td>✗</td></tr><tr><td><a href="https://github.com/prometheus-operator/kube-prometheus/tree/release-0.7"><code>release-0.7</code></a></td><td>✗</td><td>✔</td><td>✔</td><td>✗</td><td>✗</td></tr><tr><td><a href="https://github.com/prometheus-operator/kube-prometheus/tree/release-0.8"><code>release-0.8</code></a></td><td>✗</td><td>✗</td><td>✔</td><td>✔</td><td>✗</td></tr><tr><td><a href="https://github.com/prometheus-operator/kube-prometheus/tree/release-0.9"><code>release-0.9</code></a></td><td>✗</td><td>✗</td><td>✗</td><td>✔</td><td>✔</td></tr><tr><td><a href="https://github.com/prometheus-operator/kube-prometheus/tree/main"><code>HEAD</code></a></td><td>✗</td><td>✗</td><td>✗</td><td>✔</td><td>✔</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确认自身K8s版本</span></span><br><span class="line">$ kubelet --version</span><br><span class="line">Kubernetes v1.20.10</span><br></pre></td></tr></table></figure><p>下载对应的 Kube-Prometheus Stack 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> -b release-0.8 https://github.com/prometheus-operator/kube-prometheus.git  </span><br></pre></td></tr></table></figure><p><strong>Prometheus Operator</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ./kube-prometheus/mainfests</span><br><span class="line">$ kubectl create -f setup/</span><br><span class="line">namespace/monitoring created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/alertmanagerconfigs.monitoring.coreos.com created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/alertmanagers.monitoring.coreos.com created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/podmonitors.monitoring.coreos.com created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/probes.monitoring.coreos.com created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/prometheuses.monitoring.coreos.com created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/prometheusrules.monitoring.coreos.com created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/servicemonitors.monitoring.coreos.com created</span><br><span class="line">customresourcedefinition.apiextensions.k8s.io/thanosrulers.monitoring.coreos.com created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/prometheus-operator created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/prometheus-operator created</span><br><span class="line">deployment.apps/prometheus-operator created</span><br><span class="line">service/prometheus-operator created</span><br><span class="line">serviceaccount/prometheus-operator created</span><br><span class="line"></span><br><span class="line">$ kubectl get po -n monitoring</span><br><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">prometheus-operator-7775c66ccf-fhj7j   2/2     Running   0          27h</span><br></pre></td></tr></table></figure><p><strong>Operator 容器启动后，安装 Prometheus Stack</strong></p><p><font color=red>注意事项：</font><em>资源不足或集群规模不大的情况下可修改些文件的副本数，还有个别 <code>k8s.gcr.io</code> 的镜像</em></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参考内容，请自行参量</span></span><br><span class="line">$ vim alertmanager-alertmanager.yaml</span><br><span class="line">replicas: 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改模镜像地址</span></span><br><span class="line">$ vim kube-state-metrics-deployment.yaml</span><br><span class="line"><span class="comment"># image: k8s.gcr.io/kube-state-metrics/kube-state-metrics:v2.0.0</span></span><br><span class="line">image: registry.cn-hongkong.aliyuncs.com/yk-public/prometheus_kube-state-metrics:v2.0.0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ./kube-prometheus/mainfests</span><br><span class="line">$ kubectl create -f .</span><br><span class="line">$ kubectl get po,svc -n monitoring</span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/alertmanager-main-0                    2/2     Running   0          27h</span><br><span class="line">pod/alertmanager-main-1                    2/2     Running   0          27h</span><br><span class="line">pod/alertmanager-main-2                    2/2     Running   0          27h</span><br><span class="line">pod/blackbox-exporter-55c457d5fb-cz9h5     3/3     Running   0          27h</span><br><span class="line">pod/grafana-9df57cdc4-cwksv                1/1     Running   0          27h</span><br><span class="line">pod/kube-state-metrics-54db6dfd8c-vjsm8    3/3     Running   0          27h</span><br><span class="line">pod/node-exporter-25klx                    2/2     Running   0          27h</span><br><span class="line">pod/node-exporter-6t96w                    2/2     Running   0          27h</span><br><span class="line">pod/node-exporter-849qh                    2/2     Running   0          27h</span><br><span class="line">pod/node-exporter-b27hd                    2/2     Running   0          27h</span><br><span class="line">pod/node-exporter-m6cll                    2/2     Running   0          27h</span><br><span class="line">pod/node-exporter-qf5zr                    2/2     Running   0          27h</span><br><span class="line">pod/node-exporter-vxrw4                    2/2     Running   0          27h</span><br><span class="line">pod/prometheus-adapter-59df95d9f5-dgcmj    1/1     Running   0          27h</span><br><span class="line">pod/prometheus-adapter-59df95d9f5-h8z5c    1/1     Running   0          27h</span><br><span class="line">pod/prometheus-k8s-0                       2/2     Running   1          27h</span><br><span class="line">pod/prometheus-k8s-1                       2/2     Running   1          27h</span><br><span class="line">pod/prometheus-operator-7775c66ccf-fhj7j   2/2     Running   0          27h</span><br><span class="line"></span><br><span class="line">NAME                            TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)                      AGE</span><br><span class="line">service/alertmanager-main       ClusterIP   120.168.27.140    &lt;none&gt;        9093/TCP                     27h</span><br><span class="line">service/alertmanager-operated   ClusterIP   None              &lt;none&gt;        9093/TCP,9094/TCP,9094/UDP   27h</span><br><span class="line">service/blackbox-exporter       ClusterIP   120.168.125.166   &lt;none&gt;        9115/TCP,19115/TCP           27h</span><br><span class="line">service/grafana                 ClusterIP   120.168.255.246   &lt;none&gt;        3000/TCP                     27h</span><br><span class="line">service/kube-state-metrics      ClusterIP   None              &lt;none&gt;        8443/TCP,9443/TCP            27h</span><br><span class="line">service/node-exporter           ClusterIP   None              &lt;none&gt;        9100/TCP                     27h</span><br><span class="line">service/prometheus-adapter      ClusterIP   120.168.237.200   &lt;none&gt;        443/TCP                      27h</span><br><span class="line">service/prometheus-k8s          ClusterIP   120.168.204.8     &lt;none&gt;        9090/TCP                     27h</span><br><span class="line">service/prometheus-operated     ClusterIP   None              &lt;none&gt;        9090/TCP                     27h</span><br><span class="line">service/prometheus-operator     ClusterIP   None              &lt;none&gt;        8443/TCP                     27h</span><br></pre></td></tr></table></figure><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><ul><li>访问方式一：成功部署后，可以将对应的 <code>Grafana</code>、<code>prometheus-k8s</code>、<code>alertmanager-main</code> 的 Service 改成 NodePort 类型：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl edit svc grafana -n monitoring</span><br><span class="line">  selector:</span><br><span class="line">    app.kubernetes.io/component: grafana</span><br><span class="line">    app.kubernetes.io/name: grafana</span><br><span class="line">    app.kubernetes.io/part-of: kube-prometheus</span><br><span class="line">  sessionAffinity: None</span><br><span class="line">  <span class="built_in">type</span>: NodePort </span><br><span class="line">  <span class="comment"># 将 ClusterIP 改成 NodePort，随机生成即可</span></span><br><span class="line">$ kubectl get svc grafana -n monitoring</span><br></pre></td></tr></table></figure><p><code>prometheus-k8s</code>、<code>alertmanager-main</code> 同理修改，不再重复演示。之后可以通过任意一个已安装 <code>kube-proxy</code> 服务的节点+端口即可访问到 <code>Grafana</code></p><ul><li>访问方式二：生产环境建议采用 Ingress 代理，直接访问即可；</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">prom-ingress.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">prom-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">    <span class="attr">prometheus.io/http_probe:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">alert.k8s-1.20.10.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">alertmanager-main</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">9093</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">grafana.k8s-1.20.10.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">grafana</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">3000</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">prom.k8s-1.20.10.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">prometheus-k8s</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211012172535492.png" alt="image-20211012172535492"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211012172628456.png" alt="image-20211012172628456"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211012172713209.png" alt="image-20211012172713209"></p><p><strong>Node Dashboard 演示模版 8919(流程自行百度)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211013120117664.png" alt="image-20211013120117664"></p><h3 id="监控流程示例"><a href="#监控流程示例" class="headerlink" title="监控流程示例"></a>监控流程示例</h3><h4 id="云原生应用-Etcd-监控"><a href="#云原生应用-Etcd-监控" class="headerlink" title="云原生应用 Etcd 监控"></a>云原生应用 Etcd 监控</h4><p>1）测试访问 Etcd Metrics 接口：监控 Etcd 需要使用节点 IP，因为 Prometheus 是无法监控 <code>127.0.0.1</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -lntp | grep etcd</span><br><span class="line">tcp        0      0 188.188.3.121:2379      0.0.0.0:*               LISTEN      1196/etcd           </span><br><span class="line">tcp        0      0 127.0.0.1:2379          0.0.0.0:*               LISTEN      1196/etcd           </span><br><span class="line">tcp        0      0 188.188.3.121:2380      0.0.0.0:*               LISTEN      1196/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下列测试简单说明，当前etcd/metrics是有数据的，而监控节点IP时，需要采用https方可获取数据</span></span><br><span class="line">$ curl 127.0.0.1:2379/metrics | more</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0<span class="comment"># HELP etcd_cluster_version Which version is running. 1 for &#x27;cluster_version&#x27; label with current cluster version</span></span><br><span class="line"><span class="comment"># TYPE etcd_cluster_version gauge</span></span><br><span class="line">etcd_cluster_version&#123;cluster_version=<span class="string">&quot;3.5&quot;</span>&#125; 1</span><br><span class="line"><span class="comment"># HELP etcd_debugging_auth_revision The current revision of auth store.</span></span><br><span class="line"><span class="comment"># TYPE etcd_debugging_auth_revision gauge</span></span><br><span class="line">etcd_debugging_auth_revision 1</span><br><span class="line"><span class="comment"># HELP etcd_debugging_disk_backend_commit_rebalance_duration_seconds The latency distributions of commit.rebalance called by bboltdb backend.</span></span><br><span class="line"><span class="comment"># TYPE etcd_debugging_disk_backend_commit_rebalance_duration_seconds histogram</span></span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.001&quot;</span>&#125; 680632</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.002&quot;</span>&#125; 680643</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.004&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.008&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.016&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.032&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.064&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.128&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.256&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;0.512&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;1.024&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;2.048&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;4.096&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;8.192&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_bucket&#123;le=<span class="string">&quot;+Inf&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_sum 0.5658865819999992</span><br><span class="line">etcd_debugging_disk_backend_commit_rebalance_duration_seconds_count 680644</span><br><span class="line"><span class="comment"># HELP etcd_debugging_disk_backend_commit_spill_duration_seconds The latency distributions of commit.spill called by bboltdb backend.</span></span><br><span class="line"><span class="comment"># TYPE etcd_debugging_disk_backend_commit_spill_duration_seconds histogram</span></span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.001&quot;</span>&#125; 680569</span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.002&quot;</span>&#125; 680622</span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.004&quot;</span>&#125; 680636</span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.008&quot;</span>&#125; 680643</span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.016&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.032&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.064&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.128&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.256&quot;</span>&#125; 680644</span><br><span class="line">etcd_debugging_disk_backend_commit_spill_duration_seconds_bucket&#123;le=<span class="string">&quot;0.512&quot;</span>&#125; 680644</span><br><span class="line">--More--</span><br><span class="line"></span><br><span class="line">$ curl 188.188.3.121:2379/metrics</span><br><span class="line">curl: (52) Empty reply from server</span><br><span class="line"></span><br><span class="line">$ curl https://188.188.3.121:2379/metrics</span><br><span class="line">curl: (60) Peer<span class="string">&#x27;s Certificate issuer is not recognized.</span></span><br><span class="line"><span class="string">More details here: http://curl.haxx.se/docs/sslcerts.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">curl performs SSL certificate verification by default, using a &quot;bundle&quot;</span></span><br><span class="line"><span class="string"> of Certificate Authority (CA) public keys (CA certs). If the default</span></span><br><span class="line"><span class="string"> bundle file isn&#x27;</span>t adequate, you can specify an alternate file</span><br><span class="line"> using the --cacert option.</span><br><span class="line">If this HTTPS server uses a certificate signed by a CA represented <span class="keyword">in</span></span><br><span class="line"> the bundle, the certificate verification probably failed due to a</span><br><span class="line"> problem with the certificate (it might be expired, or the name might</span><br><span class="line"> not match the domain name <span class="keyword">in</span> the URL).</span><br><span class="line">If you<span class="string">&#x27;d like to turn off curl&#x27;</span>s verification of the certificate, use</span><br><span class="line"> the -k (or --insecure) option.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 正确的获取Etcd Metrics接口数据的方式</span></span><br><span class="line">$ curl -s --cert /etc/kubernetes/pki/etcd/etcd.pem --key /etc/kubernetes/pki/etcd/etcd-key.pem https://YOUR_ETCD_IP:2379/metrics -k | <span class="built_in">tail</span> -1 </span><br></pre></td></tr></table></figure><p>注：证书的位置可以在 Etcd 配置文件中获取，不同的集群位置可能不一，Kubeadm 安装方式可能会有 <code>/etc/kubernetes/manifests/etcd.yml</code> 中；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二进制获取路径参考</span></span><br><span class="line">$ systemctl status etcd</span><br><span class="line">● etcd.service - Etcd Service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/etcd.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Sat 2021-10-09 23:50:12 CST; 2 days ago</span><br><span class="line">     Docs: https://coreos.com/etcd/docs/latest/</span><br><span class="line"> Main PID: 1196 (etcd)</span><br><span class="line">    Tasks: 15</span><br><span class="line">   Memory: 504.7M</span><br><span class="line">   CGroup: /system.slice/etcd.service</span><br><span class="line">           └─1196 /usr/local/bin/etcd --config-file=/etc/etcd/etcd.config.yml <span class="comment"># 确定etcd配置文件路径</span></span><br><span class="line"></span><br><span class="line">Oct 12 18:03:00 k8s-master01 etcd[1196]: &#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:<span class="string">&quot;2021-10-12T18:03:00.680+0800&quot;</span>,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;mvcc/index.go:214&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;compact tree index&quot;</span>,<span class="string">&quot;revision&quot;</span>:8215917&#125;</span><br><span class="line">Oct 12 18:03:00 k8s-master01 etcd[1196]: &#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:<span class="string">&quot;2021-10-12T18:03:00.705+0800&quot;</span>,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;mvcc/kvstore_compaction.go:57&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;finished scheduled compaction&quot;</span>...4.626451ms<span class="string">&quot;&#125;</span></span><br><span class="line"><span class="string">Oct 12 18:05:45 k8s-master01 etcd[1196]: &#123;&quot;</span>level<span class="string">&quot;:&quot;</span>warn<span class="string">&quot;,&quot;</span>ts<span class="string">&quot;:&quot;</span>2021-10-12T18:05:45.583+0800<span class="string">&quot;,&quot;</span><span class="built_in">caller</span><span class="string">&quot;:&quot;</span>embed/config_logging.go:169<span class="string">&quot;,&quot;</span>msg<span class="string">&quot;:&quot;</span>rejected connection<span class="string">&quot;,&quot;</span>remote-add... handshake<span class="string">&quot;&#125;</span></span><br><span class="line"><span class="string">Oct 12 18:08:00 k8s-master01 etcd[1196]: &#123;&quot;</span>level<span class="string">&quot;:&quot;</span>info<span class="string">&quot;,&quot;</span>ts<span class="string">&quot;:&quot;</span>2021-10-12T18:08:00.686+0800<span class="string">&quot;,&quot;</span><span class="built_in">caller</span><span class="string">&quot;:&quot;</span>mvcc/index.go:214<span class="string">&quot;,&quot;</span>msg<span class="string">&quot;:&quot;</span>compact tree index<span class="string">&quot;,&quot;</span>revision<span class="string">&quot;:8217094&#125;</span></span><br><span class="line"><span class="string">Oct 12 18:08:00 k8s-master01 etcd[1196]: &#123;&quot;</span>level<span class="string">&quot;:&quot;</span>info<span class="string">&quot;,&quot;</span>ts<span class="string">&quot;:&quot;</span>2021-10-12T18:08:00.711+0800<span class="string">&quot;,&quot;</span><span class="built_in">caller</span><span class="string">&quot;:&quot;</span>mvcc/kvstore_compaction.go:57<span class="string">&quot;,&quot;</span>msg<span class="string">&quot;:&quot;</span>finished scheduled compaction<span class="string">&quot;...4.660085ms&quot;</span>&#125;</span><br><span class="line">Oct 12 18:11:08 k8s-master01 etcd[1196]: &#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;warn&quot;</span>,<span class="string">&quot;ts&quot;</span>:<span class="string">&quot;2021-10-12T18:11:08.153+0800&quot;</span>,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;embed/config_logging.go:169&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;rejected connection&quot;</span>,<span class="string">&quot;remote-add... authority&quot;</span>&#125;</span><br><span class="line">Oct 12 18:13:00 k8s-master01 etcd[1196]: &#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:<span class="string">&quot;2021-10-12T18:13:00.691+0800&quot;</span>,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;mvcc/index.go:214&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;compact tree index&quot;</span>,<span class="string">&quot;revision&quot;</span>:8218275&#125;</span><br><span class="line">Oct 12 18:13:00 k8s-master01 etcd[1196]: &#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:<span class="string">&quot;2021-10-12T18:13:00.716+0800&quot;</span>,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;mvcc/kvstore_compaction.go:57&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;finished scheduled compaction&quot;</span>...4.307126ms<span class="string">&quot;&#125;</span></span><br><span class="line"><span class="string">Oct 12 18:18:00 k8s-master01 etcd[1196]: &#123;&quot;</span>level<span class="string">&quot;:&quot;</span>info<span class="string">&quot;,&quot;</span>ts<span class="string">&quot;:&quot;</span>2021-10-12T18:18:00.702+0800<span class="string">&quot;,&quot;</span><span class="built_in">caller</span><span class="string">&quot;:&quot;</span>mvcc/index.go:214<span class="string">&quot;,&quot;</span>msg<span class="string">&quot;:&quot;</span>compact tree index<span class="string">&quot;,&quot;</span>revision<span class="string">&quot;:8219457&#125;</span></span><br><span class="line"><span class="string">Oct 12 18:18:00 k8s-master01 etcd[1196]: &#123;&quot;</span>level<span class="string">&quot;:&quot;</span>info<span class="string">&quot;,&quot;</span>ts<span class="string">&quot;:&quot;</span>2021-10-12T18:18:00.727+0800<span class="string">&quot;,&quot;</span><span class="built_in">caller</span><span class="string">&quot;:&quot;</span>mvcc/kvstore_compaction.go:57<span class="string">&quot;,&quot;</span>msg<span class="string">&quot;:&quot;</span>finished scheduled compaction<span class="string">&quot;...4.292896ms&quot;</span>&#125;</span><br><span class="line">Hint: Some lines were ellipsized, use -l to show <span class="keyword">in</span> full.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过配置文件确认证书的实际路径</span></span><br><span class="line">$ grep -E <span class="string">&quot;key-file|cert-file&quot;</span> /etc/etcd/etcd.config.yml </span><br><span class="line">  cert-file: <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  key-file: <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  cert-file: <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  key-file: <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br></pre></td></tr></table></figure><p>根据监控流程，Etcd 作为云原生应用，并且已确认数据接口正常，下一步就是应用 Service 的创建</p><p>2）<strong>Etcd Service 创建</strong>，首先需要配置 Etcd 的 Service 和 Endpoint：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">etcd-svc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span>  </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">labels:</span>  </span><br><span class="line">    <span class="attr">app:</span> <span class="string">etcd-prom</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">etcd-prom</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span>  </span><br><span class="line"><span class="attr">subsets:</span>  </span><br><span class="line"><span class="bullet">-</span> <span class="attr">addresses:</span>   </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">YOUR_ETCD_IP01</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">YOUR_ETCD_IP02</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">YOUR_ETCD_IP03</span>  </span><br><span class="line">  <span class="attr">ports:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https-metrics</span>  </span><br><span class="line">    <span class="attr">port:</span> <span class="number">2379</span>   <span class="comment"># etcd端口  </span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span>  </span><br><span class="line"><span class="meta">---  </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span>  </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span>   </span><br><span class="line"><span class="attr">metadata:</span>  </span><br><span class="line">  <span class="attr">labels:</span>  </span><br><span class="line">    <span class="attr">app:</span> <span class="string">etcd-prom</span>  </span><br><span class="line">  <span class="attr">name:</span> <span class="string">etcd-prom</span>  </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span>  </span><br><span class="line"><span class="attr">spec:</span>  </span><br><span class="line">  <span class="attr">ports:</span>  </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https-metrics</span>  </span><br><span class="line">    <span class="attr">port:</span> <span class="number">2379</span>  </span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span>  </span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">2379</span>  </span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span>  </span><br></pre></td></tr></table></figure><p>注意：将 YOUR_ETCD_IP 改成自身环境的 Etcd 主机 IP，另需要注意 port 的名称为 <strong>https-metrics</strong> ，需要和后面的 ServiceMonitor 保持一致；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc -n kube-system etcd-prom </span><br><span class="line">NAME        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">etcd-prom   ClusterIP   120.168.48.16   &lt;none&gt;        2379/TCP   13s</span><br></pre></td></tr></table></figure><p>3）通过 ClusterIP 访问测试：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -s --cert /etc/kubernetes/pki/etcd/etcd.pem --key /etc/kubernetes/pki/etcd/etcd-key.pem https://188.188.3.123:2379/metrics -k | <span class="built_in">tail</span> -1</span><br><span class="line">promhttp_metric_handler_requests_total&#123;code=<span class="string">&quot;503&quot;</span>&#125; 0</span><br></pre></td></tr></table></figure><p>4）创建 Etcd 证书的 Secret (证书路径根据实际环境进行更改)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create secret generic etcd-ssl \</span><br><span class="line">--from-file=/etc/kubernetes/pki/etcd/etcd-ca.pem \</span><br><span class="line">--from-file=/etc/kubernetes/pki/etcd/etcd.pem \</span><br><span class="line">--from-file=/etc/kubernetes/pki/etcd/etcd-key.pem -n monitoring </span><br><span class="line">secret/etcd-ssl created</span><br><span class="line"></span><br><span class="line">$ kubectl get secret -n monitoring </span><br><span class="line">NAME                              TYPE                                  DATA   AGE</span><br><span class="line">etcd-ssl                          Opaque                                3      17s</span><br></pre></td></tr></table></figure><p>5）将证书挂载至 Prometheus 容器(由于 Prometheus 是 Operator 部署的，因此只需要修改 Prometheus 资源即可)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get prometheus -n monitoring </span><br><span class="line">NAME   VERSION   REPLICAS   AGE</span><br><span class="line">k8s    2.26.0    2          47h</span><br><span class="line">$ kubectl edit prometheus k8s -n monitoring</span><br><span class="line">  replicas: 2</span><br><span class="line">  <span class="comment"># 在spec下任意位置增加etcd-ssl的secret</span></span><br><span class="line">  secrets:   </span><br><span class="line">  - etcd-ssl</span><br></pre></td></tr></table></figure><p>6）保存退出后，Prometheus 的 Pod 会自动重启，重启完成后，查看证书是否挂载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po -n monitoring -l app=prometheus</span><br><span class="line">NAME               READY   STATUS    RESTARTS   AGE</span><br><span class="line">prometheus-k8s-0   2/2     Running   1          113s</span><br><span class="line">prometheus-k8s-1   2/2     Running   1          2m7s</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -n monitoring prometheus-k8s-0 -c prometheus -- <span class="built_in">ls</span> /etc/prometheus/secrets/etcd-ssl/</span><br><span class="line">etcd-ca.pem</span><br><span class="line">etcd-key.pem</span><br><span class="line">etcd.pem</span><br></pre></td></tr></table></figure><p>7）<strong>Etcd ServiceMonitor 创建</strong>，和之前的示例文件相比，多了 <code>tlsConfig</code> 的配置，http 协议的 Metrics 无需配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">servicemonitor.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">etcd</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">etcd</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">jobLabel:</span> <span class="string">k8s-app</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">port:</span> <span class="string">https-metrics</span> <span class="comment"># 这个port对应Service.spec.ports.name </span></span><br><span class="line">      <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">tlsConfig:</span></span><br><span class="line">        <span class="attr">caFile:</span> <span class="string">/etc/prometheus/secrets/etcd-ssl/etcd-ca.pem</span> <span class="comment">#证书路径 </span></span><br><span class="line">        <span class="attr">certFile:</span> <span class="string">/etc/prometheus/secrets/etcd-ssl/etcd.pem</span></span><br><span class="line">        <span class="attr">keyFile:</span> <span class="string">/etc/prometheus/secrets/etcd-ssl/etcd-key.pem</span></span><br><span class="line">        <span class="attr">insecureSkipVerify:</span> <span class="literal">true</span>  <span class="comment"># 关闭证书校验 </span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">etcd-prom</span> <span class="comment"># 跟svc的lables保持一致 </span></span><br><span class="line">  <span class="attr">namespaceSelector:</span></span><br><span class="line">    <span class="attr">matchNames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-system</span></span><br><span class="line">    </span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">servicemonitor.yaml</span></span><br><span class="line"><span class="string">servicemonitor.monitoring.coreos.com/etcd</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><p>8）创建完成后，在 Prometheus 的 Web UI 即可看到相关配置（Dashboard 参考模版 3070）</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211013115502676.png" alt="image-20211013115502676"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211013115842275.png" alt="image-20211013115842275"></p><h4 id="非云原生监控-Exporter"><a href="#非云原生监控-Exporter" class="headerlink" title="非云原生监控 Exporter"></a>非云原生监控 Exporter</h4><blockquote><p>此处将使用 MySQL 作为一个测试用例，演示如何使用 Exporter 监控非云原生应用</p></blockquote><p>1）首先部署 Mysql 至 Kubernetes 集群中，直接配置 MySQL 的权限(如自身环境已有数据库可略过此步骤)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create deploy mysql --image=mysql:5.7.23</span><br><span class="line">deployment.apps/mysql created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置密码并查看状态</span></span><br><span class="line">$ kubectl <span class="built_in">set</span> <span class="built_in">env</span> deploy/mysql MYSQL_ROOT_PASSWORD=mysql</span><br><span class="line">deployment.apps/mysql <span class="built_in">env</span> updated</span><br><span class="line">$ kubectl get po -l app=mysql</span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysql-b9984fc6d-p4tng   1/1     Running   0          72s</span><br></pre></td></tr></table></figure><p>2）<strong>创建 Service 暴露 MySQL</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl expose deploy mysql --port 3306</span><br><span class="line">service/mysql exposed</span><br><span class="line"></span><br><span class="line">$ kubectl get svc -l app=mysql</span><br><span class="line">NAME    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">mysql   ClusterIP   120.168.188.13   &lt;none&gt;        3306/TCP   23s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查Service是否可用</span></span><br><span class="line">$ telnet 120.168.188.13</span><br><span class="line">Trying 120.168.188.13...</span><br><span class="line">telnet: connect to address 120.168.188.13: Connection refused</span><br><span class="line">[root@k8s-master01 mysql]<span class="comment"># telnet 120.168.188.13 3306</span></span><br><span class="line">Trying 120.168.188.13...</span><br><span class="line">Connected to 120.168.188.13.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">J</span><br><span class="line">5.7.23^vrXNU2z-N?5b%mysql_native_passwordXshellConnection closed by foreign host.</span><br></pre></td></tr></table></figure><p>3）登录 MySQL ，创建 Exporter 所需要的用户和权限（如已有需要监控的 MySQL ，可以直接由此步骤开始操作）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl exec -it mysql-b9984fc6d-p4tng -- bash</span><br><span class="line">root@mysql-b9984fc6d-p4tng:/# mysql -uroot -pmysql</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 3</span><br><span class="line">Server version: 5.7.23 MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; CREATE USER &#x27;exporter&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;exporter&#x27; WITH MAX_USER_CONNECTIONS 3;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#x27;exporter&#x27;@&#x27;%&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>4）配置 MySQL Exporter 采集 MySQL 监控数据：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">--- </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-exporter</span> </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span> </span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span> </span><br><span class="line">  <span class="attr">selector:</span> </span><br><span class="line">    <span class="attr">matchLabels:</span> </span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">mysql-exporter</span> </span><br><span class="line">  <span class="attr">template:</span> </span><br><span class="line">    <span class="attr">metadata:</span> </span><br><span class="line">      <span class="attr">labels:</span> </span><br><span class="line">        <span class="attr">k8s-app:</span> <span class="string">mysql-exporter</span> </span><br><span class="line">    <span class="attr">spec:</span> </span><br><span class="line">      <span class="attr">containers:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysql-exporter</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">prom/mysqld-exporter</span>  </span><br><span class="line">        <span class="attr">env:</span> </span><br><span class="line">         <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">DATA_SOURCE_NAME</span> </span><br><span class="line">           <span class="attr">value:</span> <span class="string">&quot;exporter:exporter@(mysql.default:3306)/&quot;</span> </span><br><span class="line">           <span class="comment"># value: &quot;exporter:exporter@(1.1.1.1:3306)/&quot; </span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span> </span><br><span class="line">        <span class="attr">ports:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9104</span> </span><br><span class="line"><span class="meta">--- </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-exporter</span> </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span> </span><br><span class="line">  <span class="attr">labels:</span> </span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">mysql-exporter</span> </span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span> </span><br><span class="line">  <span class="attr">selector:</span> </span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">mysql-exporter</span> </span><br><span class="line">  <span class="attr">ports:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">api</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">9104</span> </span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span> </span><br></pre></td></tr></table></figure><p>注意 DATA_SOURCE_NAME 的配置，需要将 <code>exporter:exporter@(mysql.default:3306)/</code> 改成自己的实际配置，格式如下<code>USERNAME:PASSWORD@MYSQL_HOST_ADDRESS:MYSQL_PORT</code></p><p>5）<strong>创建 Exporter</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f mysql-exporter.yaml</span><br><span class="line">deployment.apps/mysql-exporter created</span><br><span class="line">service/mysql-exporter created</span><br><span class="line"></span><br><span class="line">$ kubectl get -f mysql-exporter.yaml</span><br><span class="line">NAME                             READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/mysql-exporter   1/1     1            1           13s</span><br><span class="line"></span><br><span class="line">NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">service/mysql-exporter   ClusterIP   120.168.7.170   &lt;none&gt;        9104/TCP   13s</span><br><span class="line"></span><br><span class="line">$ curl 120.168.7.170:9104/metrics | <span class="built_in">tail</span> -1</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  130k    0  130k    0     0  7197k      0 --:--:-- --:--:-- --:--:-- 7262k</span><br><span class="line">promhttp_metric_handler_requests_total&#123;code=<span class="string">&quot;503&quot;</span>&#125; 0</span><br></pre></td></tr></table></figure><p>6）<strong>创建 ServiceMonitor</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">mysql-sm.yaml</span>  </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysql-exporter</span> </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">monitoring</span> </span><br><span class="line">  <span class="attr">labels:</span> </span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">mysql-exporter</span> </span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">monitoring</span> </span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">jobLabel:</span> <span class="string">k8s-app</span> </span><br><span class="line">  <span class="attr">endpoints:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="string">api</span> </span><br><span class="line">    <span class="attr">interval:</span> <span class="string">30s</span> </span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">http</span> </span><br><span class="line">  <span class="attr">selector:</span> </span><br><span class="line">    <span class="attr">matchLabels:</span> </span><br><span class="line">      <span class="attr">k8s-app:</span> <span class="string">mysql-exporter</span> </span><br><span class="line">  <span class="attr">namespaceSelector:</span> </span><br><span class="line">    <span class="attr">matchNames:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">monitoring</span> </span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">mysql-sm.yaml</span> </span><br><span class="line"><span class="string">servicemonitor.monitoring.coreos.com/mysql-exporter</span> <span class="string">created</span></span><br></pre></td></tr></table></figure><p>需要注意 matchLabels 和 endpoints 的配置，要和 MySQL 的 Service 一致；</p><p>7）跟着在 Prometheus Web UI 可查看监控数据，之后在 Grafana 上导入相应的模版即可（演示模版 6239）</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211013145240600.png" alt="image-20211013145240600"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211013145511749.png" alt="image-20211013145511749"></p><h3 id="监控排查"><a href="#监控排查" class="headerlink" title="监控排查"></a>监控排查</h3><p>Service Monitor 监控失败排查步骤</p><ol><li>确认 Service Monitor 是否成功创建</li><li>确认 Service Monitor 标签是否配置正确</li><li>确认 Prometheus 是否生成了相关配置</li><li>确认存在 Service Monitor 匹配的 Service</li><li>确认通过 Service 能够访问程序的 Metrics 接口</li><li>确认 Service 的端口和 Scheme、Service Monitor 一致</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211013094009822.png" alt="image-20211013094009822"></p><p>以 <code>KubeControllerManagerDown &amp; KubeSchedulerDown</code> 为例演示</p><ul><li>首先确认 Service Monitor 是否成功创建</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get servicemonitor -n monitoring kube-controller-manager kube-scheduler</span><br><span class="line">NAME                      AGE</span><br><span class="line">kube-controller-manager   2d3h</span><br><span class="line">kube-scheduler            2d3h</span><br></pre></td></tr></table></figure><ul><li>确认 Prometheus 是否生成了相关配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211013151649487.png" alt="image-20211013151649487"></p><ul><li>确认存在 Service Monitor 匹配的 Service</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">servicemonitor</span> <span class="string">-n</span> <span class="string">monitoring</span> <span class="string">kube-controller-manager</span> <span class="string">-oyaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">https-metrics</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">https</span></span><br><span class="line">    <span class="attr">tlsConfig:</span></span><br><span class="line">      <span class="attr">insecureSkipVerify:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">jobLabel:</span> <span class="string">app.kubernetes.io/name</span></span><br><span class="line">  <span class="attr">namespaceSelector:</span></span><br><span class="line">    <span class="attr">matchNames:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-system</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">kube-controller-manager</span></span><br></pre></td></tr></table></figure><p>当前 Service Monitor 匹配的是 kube-system 命名空间下，具有 <code>app.kubernetes.io/name: kube-controller-manager</code> 标签</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc -n kube-system -l app.kubernetes.io/name=kube-controller-manager</span><br><span class="line">No resources found <span class="keyword">in</span> kube-system namespace.</span><br></pre></td></tr></table></figure><p>可看出并没此标签的 Service，所有导致了找不到需要监控的目标，此时需要手动创建该 Service 和 Endpoint 指向 Controller Manager</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -lntp | grep kube-controll</span><br><span class="line">tcp        0      0 127.0.0.1:10252         0.0.0.0:*               LISTEN      21027/kube-controll </span><br><span class="line">tcp6       0      0 :::10257                :::*                    LISTEN      21027/kube-controll</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">controller.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Endpoints</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">labels:</span> </span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">kube-controller-manager</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-controller-manager-prom</span> </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span> </span><br><span class="line"><span class="attr">subsets:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">addresses:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">YOUR_CONTROLLER_IP01</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">YOUR_CONTROLLER_IP02</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">YOUR_CONTROLLER_IP03</span> </span><br><span class="line">  <span class="attr">ports:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-metrics</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">10252</span> </span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span> </span><br><span class="line"><span class="meta">--- </span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span> </span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span> </span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">labels:</span> </span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">kube-controller-manager</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">kube-controller-manager-prom</span> </span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span> </span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">ports:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-metrics</span> </span><br><span class="line">    <span class="attr">port:</span> <span class="number">10252</span> </span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span> </span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">10252</span> </span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span> </span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><p>注意：需更改 Endpoint 配置的 <strong>YOUR_CONTROLLER_IP</strong> 为自身实际 Controller Manager 的 IP，接着创建该 Service 和 Endpoint</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f controller.yaml </span><br><span class="line">endpoints/kube-controller-manager-prom created</span><br><span class="line">service/kube-controller-manager-prom created</span><br><span class="line"></span><br><span class="line">$ kubectl get svc -n kube-system kube-controller-manager-prom</span><br><span class="line">NAME                           TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)     AGE</span><br><span class="line">kube-controller-manager-prom   ClusterIP   120.168.158.230   &lt;none&gt;        10252/TCP   36s</span><br><span class="line"></span><br><span class="line">$ curl 120.168.158.230:10252/metrics</span><br><span class="line">curl: (7) Failed connect to 120.168.158.230:10252; Connection refused</span><br></pre></td></tr></table></figure><p>此时该 Service 不通，因为在集群搭建时，可能 Controller Manager 和 Scheduler 是监听 127.0.0.1，导致无法被外部访问，此时需要更改它的监听地址为 0.0.0.0</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 确认配置文件路径</span></span><br><span class="line">$ systemctl status kube-controller-manager.service </span><br><span class="line">● kube-controller-manager.service - Kubernetes Controller Manager</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/kube-controller-manager.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Wed 2021-10-13 13:51:41 CST; 1h 58min ago</span><br><span class="line">     Docs: https://github.com/kubernetes/kubernetes</span><br><span class="line"> Main PID: 21027 (kube-controller)</span><br><span class="line">    Tasks: 12</span><br><span class="line">   Memory: 71.4M</span><br><span class="line">   CGroup: /system.slice/kube-controller-manager.service</span><br><span class="line">           └─21027 /usr/local/bin/kube-controller-manager --v=2 --logtostderr=<span class="literal">true</span> --address=127.0.0.1 --root-ca-file=/etc/kubernetes/pki/ca.pem --cluster-signing-cert-file=/etc/kuber..</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /usr/lib/systemd/system/kube-controller-manager.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-controller-manager \</span><br><span class="line">      --v=2 \</span><br><span class="line">      --logtostderr=<span class="literal">true</span> \</span><br><span class="line">      <span class="comment"># 需要修改的地址</span></span><br><span class="line">      --address=127.0.0.1 \</span><br><span class="line"></span><br><span class="line">$ sed -i <span class="string">&quot;s#address=127.0.0.1#address=0.0.0.0#g&quot;</span> /usr/lib/systemd/system/kube-controller-manager.service</span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart kube-controller-manager.service</span><br><span class="line"></span><br><span class="line">$ curl 120.168.158.230:10252/metrics | <span class="built_in">tail</span> -1</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 22637    0 22637    0     0  10.2M      0 --:--:-- --:--:-- --:--:-- 21.5M</span><br><span class="line">workqueue_work_duration_seconds_count&#123;name=<span class="string">&quot;DynamicServingCertificateController&quot;</span>&#125; 20</span><br></pre></td></tr></table></figure><p>更改 Service Monitor 的配置和 Service 一致</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">edit</span> <span class="string">servicemonitor</span> <span class="string">kube-controller-manager</span> <span class="string">-n</span> <span class="string">monitoring</span> </span><br><span class="line"><span class="comment"># https改成http(否则需要按etcd一样设置证书)</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">http-metrics</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">tlsConfig:</span></span><br><span class="line">      <span class="attr">insecureSkipVerify:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>等待几分钟后，就可以在 Prometheus 的 Web UI 上看到 Controller Manager 的监控目标</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211013161732698.png" alt="image-20211013161732698"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211013163602368.png" alt="image-20211013163602368"></p><p><strong>参考文献</strong></p><p><a href="https://ke.qq.com/course/2738602">更多学习内容请参考-K8s全栈架构师(基于世界五百强生产经验研发)</a></p>]]></content>
      
      
      <categories>
          
          <category> operator </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kube-prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_OpenLDAP</title>
      <link href="/2022/04/07/openldap/centos7%E9%83%A8%E7%BD%B2_OpenLDAP/"/>
      <url>/2022/04/07/openldap/centos7%E9%83%A8%E7%BD%B2_OpenLDAP/</url>
      
        <content type="html"><![CDATA[<h3 id="LDAP-概念"><a href="#LDAP-概念" class="headerlink" title="LDAP 概念"></a>LDAP 概念</h3><blockquote><p>LDAP 的目的是为各种软件提供统一标准的认证机制，所有软件就可以不再用独有的用户管理方法，而是通过这种统一的认证机制进行用户认证</p></blockquote><p><strong>主要应用场景</strong></p><ul><li>网络服务：DNS 服务</li><li>统一认证服务</li><li>Linux PAM（ssh，login, cvs…）</li><li>Apache 访问控制</li><li>各种服务登录（ftpd， php based, perl based, python based…）</li><li>个人信息类，比如地址簿</li><li>服务器信息，如账号管理，邮件服务等</li></ul><p>管理多台 Linux 服务器时，如果每台服务器都有自己独立的用户名和密码，那么记忆和维护这些信息就非常具有挑战性</p><p>轻量级目录访问协议（LDAP）提供了安全、可靠的账号管理。Linux 发行版中提供的 OpenLDAP 软件安装一个客户机&#x2F;服务器模型实现了轻量级目录访问协议</p><p><strong>基本模型</strong></p><p>LDAP 的基本模型是建立在”条目”（Entry）的基础上。一个条目是一个或多个属性的集合，并且具有一个全局唯一的”可区分名称”（用dn表示）。与关系型数据（后面简称数据库）进行类比，一个条目相当于数据库中的一条记录，而 dn 相当于数据库中记录的关键字，属性相当于数据库中的字段。</p><p>LDAP 中，将数据组织成一个树形结构，这与现实生活中的很多数据结构可以对应起来，而不像设计关系型数据库的表，需要进行多种变化。如下图所展示的就是一个树形结构的数据</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211030093526375.png" alt="image-20211030093526375"></p><p>在上图所示的树形结构中，树的根结点是一个组织的域名（devops.com，根据实际自定义），其下分为2个部分，分别是 ou&#x3D;admin 和 dc&#x3D;sd，dc&#x3D;sd下面又分ou&#x3D;users 和 ou&#x3D;group。admin 用来管理所有管理人员，users 用来管理登录系统的用户，group 用来管理系统中的用户组。当然，在该图中还可继续增加其他分支。</p><p>对于图中所示的树形结构，使用关系数据库来保存数据的话，需要设置多个表，一层一层分别保存，当需要查找某个信息时，再逐层进行查询，最终得到结果。</p><p>若使用目录来保存该图中的数据，则更直观。图中每个结点用一个条目来保存，不同类型的结点需要保存的数据可能不同，在 LDAP 中通过一个称为 objectClass的类型来控制不同结点需要的数据（称为属性）</p><blockquote><p>下述例子：有5台机器，选择其中一台安装 openldap 的服务端，然后在所有的机器都得安装 openldap 的客户端</p></blockquote><h3 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h3><ul><li>操作系统：Centos 7.9</li><li>系统内核：5.14.15</li><li>OpenLDAP 版本：2.4.44</li><li>PhpLDAPadmin 版本：1.2.3</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /proc/version</span><br><span class="line">Linux version 5.14.15-1.el7.elrepo.x86_64 (mockbuild@Build64R7) (gcc (GCC) 9.3.1 20200408 (Red Hat 9.3.1-2), GNU ld version 2.32-16.el7)</span><br></pre></td></tr></table></figure><h3 id="OpenLDAP-安装"><a href="#OpenLDAP-安装" class="headerlink" title="OpenLDAP 安装"></a>OpenLDAP 安装</h3><h4 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h4><p>1）安装 libdb 相关依赖 &amp; 程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install libdb.x86_64 libdb-devel.x86_64 </span><br><span class="line">$ yum install -y openldap*</span><br></pre></td></tr></table></figure><p>2）<strong>配置 OpenLDAP</strong> 复制模版配置文件到指定目录并授权，再启动服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class="line">$ <span class="built_in">chown</span> -R ldap. /var/lib/ldap/DB_CONFIG</span><br><span class="line"><span class="comment"># 启动服务并查看服务状态</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now slapd &amp;&amp; systemctl status slapd</span><br></pre></td></tr></table></figure><ol><li><strong>修改管理者密码</strong></li></ol><p><font color=red>注：配置文件的后缀为 ldif，且每个配置文件都是通过命令自动生成的，任意打开一个配置文件，在开头都会有一行注释，说明此为自动生成的文件，请勿编辑</font></p><blockquote><p>官方：OpenLDAP 从 2.4.23 版本开始，配置文件都放在 <code>/etc/openldap/slapd.d</code> 目录下的 <code>cn=config</code> 文件夹内，不再使用 <code>slapd.conf</code> 作为配置文件</p></blockquote><p>生成管理者密码(记录密码，以备后面使用)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ slappasswd -s Admin@<span class="comment">#123</span></span><br><span class="line">&#123;SSHA&#125;QvqpGPNLAir5OTyoa0QfjxQ13Fg74EyJ</span><br></pre></td></tr></table></figure><p>新增修改密码文件，后缀为 ldif (文件名及目录可随意，但不要在 <code>/etc/openldap/slapd.d</code> 目录下创建同类文件)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim adminpwd.ldif</span><br><span class="line">dn: olcDatabase=&#123;0&#125;config,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcRootPW</span><br><span class="line">olcRootPW: &#123;SSHA&#125;QvqpGPNLAir5OTyoa0QfjxQ13Fg74EyJ</span><br></pre></td></tr></table></figure><p>文件内容解释：</p><ul><li>第一行：执行配置文件[ <code>cn=config/olcDatabase=&#123;0&#125;config</code> ]，创建成功后在 <code>/etc/openldap/slapd.d/</code> 目录下可找到此文件；</li><li>第二行：changetype 指定类型为修改(modify) </li><li>第三行：add 表示添加 olcRootPW 配置项</li><li>第四行：指定 olcRootPW 配置项的值为 {SSHA}QvqpGPNLAir5OTyoa0QfjxQ13Fg74EyJ</li></ul><p>执行前可查看 olcDatabase&#x3D;{0}config 文件内并没有 olcRootPW 此项的值；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/openldap/slapd.d/cn\=config/olcDatabase\=\&#123;0\&#125;config.ldif </span><br><span class="line"><span class="comment"># AUTO-GENERATED FILE - DO NOT EDIT!! Use ldapmodify.</span></span><br><span class="line"><span class="comment"># CRC32 e44592ea</span></span><br><span class="line">dn: olcDatabase=&#123;0&#125;config</span><br><span class="line">objectClass: olcDatabaseConfig</span><br><span class="line">olcDatabase: &#123;0&#125;config</span><br><span class="line">olcAccess: &#123;0&#125;to * by dn.base=<span class="string">&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=extern</span></span><br><span class="line"><span class="string"> al,cn=auth&quot;</span> manage by * none</span><br><span class="line">structuralObjectClass: olcDatabaseConfig</span><br><span class="line">entryUUID: ad4a7f7c-cce5-103b-9da0-6d756ad0c354</span><br><span class="line">creatorsName: cn=config</span><br><span class="line">createTimestamp: 20211029092352Z</span><br><span class="line">entryCSN: 20211029092352.784643Z<span class="comment">#000000#000#000000</span></span><br><span class="line">modifiersName: cn=config</span><br><span class="line">modifyTimestamp: 20211029092352Z</span><br></pre></td></tr></table></figure><p>执行命令，修改 ldap 配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f adminpwd.ldif</span><br><span class="line">SASL/EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">modifying entry <span class="string">&quot;olcDatabase=&#123;0&#125;config,cn=config&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211029174415893.png" alt="image-20211029174415893"></p><ol start="2"><li><strong>向 LDAP 导入基本的 Schema</strong></li></ol><p>这些 schema 文件位于 <code>/etc/openldap/schema/</code> 目录中，schema 控制着条目拥有哪些对象类和属性，可以自行选择需要的进行导入，依次执行下面的命令，导入基础的一些配置，其中 core.ldif 是默认已经加载了的，不用导入；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/collective.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/corba.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/duaconf.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/dyngroup.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/java.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/misc.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/openldap.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/pmi.ldif</span><br><span class="line">$ ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/ppolicy.ldif</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>修改域名</strong></li></ol><p>新增 domain.ldif，按照自身需求自定义域名：devops.com，管理者用户账号为 admin</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim domain.ldif</span><br><span class="line">dn: olcDatabase=&#123;1&#125;monitor,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcAccess</span><br><span class="line">olcAccess: &#123;0&#125;to * by dn.base=<span class="string">&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&quot;</span> <span class="built_in">read</span> by dn.base=<span class="string">&quot;cn=admin,dc=devops,dc=com&quot;</span> <span class="built_in">read</span> by * none</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcSuffix</span><br><span class="line">olcSuffix: dc=devops,dc=com</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcRootDN</span><br><span class="line">olcRootDN: cn=admin,dc=devops,dc=com</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">replace: olcRootPW</span><br><span class="line">olcRootPW: &#123;SSHA&#125;QvqpGPNLAir5OTyoa0QfjxQ13Fg74EyJ</span><br><span class="line"></span><br><span class="line">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">changetype: modify</span><br><span class="line">add: olcAccess</span><br><span class="line">olcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn=<span class="string">&quot;cn=admin,dc=devops,dc=com&quot;</span> write by anonymous auth by self write by * none</span><br><span class="line">olcAccess: &#123;1&#125;to dn.base=<span class="string">&quot;&quot;</span> by * <span class="built_in">read</span></span><br><span class="line">olcAccess: &#123;2&#125;to * by dn=<span class="string">&quot;cn=admin,dc=devops,dc=com&quot;</span> write by * <span class="built_in">read</span></span><br></pre></td></tr></table></figure><p><font color=red>注：LDAP对文件中格式要求很严格，空行中确保不要有空格，否则执行命令会出错</font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ldapmodify -Y EXTERNAL -H ldapi:/// -f domain.ldif</span><br><span class="line">SASL/EXTERNAL authentication started</span><br><span class="line">SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth</span><br><span class="line">SASL SSF: 0</span><br><span class="line">modifying entry <span class="string">&quot;olcDatabase=&#123;1&#125;monitor,cn=config&quot;</span></span><br><span class="line">modifying entry <span class="string">&quot;olcDatabase=&#123;2&#125;hdb,cn=config&quot;</span></span><br><span class="line">modifying entry <span class="string">&quot;olcDatabase=&#123;2&#125;hdb,cn=config&quot;</span></span><br><span class="line">modifying entry <span class="string">&quot;olcDatabase=&#123;2&#125;hdb,cn=config&quot;</span></span><br><span class="line">modifying entry <span class="string">&quot;olcDatabase=&#123;2&#125;hdb,cn=config&quot;</span></span><br></pre></td></tr></table></figure><p>执行成功后会输出 5 行信息，因为文件共修改了 5 处地方；</p><ol start="4"><li><strong>启用 memberof 功能</strong></li></ol><p>新增 memberof.ldif，开启 memberof 支持并新增用户支持 memberof 配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim memberof.ldif</span><br><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">cn: module&#123;0&#125;</span><br><span class="line">objectClass: olcModuleList</span><br><span class="line">objectclass: top</span><br><span class="line">olcModuleload: memberof.la</span><br><span class="line">olcModulePath: /usr/lib64/openldap</span><br><span class="line"></span><br><span class="line">dn: olcOverlay=&#123;0&#125;memberof,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcMemberOf</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: memberof</span><br><span class="line">olcMemberOfDangling: ignore</span><br><span class="line">olcMemberOfRefInt: TRUE</span><br><span class="line">olcMemberOfGroupOC: groupOfUniqueNames</span><br><span class="line">olcMemberOfMemberAD: uniqueMember</span><br><span class="line">olcMemberOfMemberOfAD: memberOf</span><br></pre></td></tr></table></figure><p>新增 refint1.ldif 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim refint1.ldif</span><br><span class="line">dn: cn=module&#123;0&#125;,cn=config</span><br><span class="line">add: olcmoduleload</span><br><span class="line">olcmoduleload: refint</span><br></pre></td></tr></table></figure><p>新增 refint2.ldif 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim refint2.ldif</span><br><span class="line">dn: olcOverlay=refint,olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class="line">objectClass: olcConfig</span><br><span class="line">objectClass: olcOverlayConfig</span><br><span class="line">objectClass: olcRefintConfig</span><br><span class="line">objectClass: top</span><br><span class="line">olcOverlay: refint</span><br><span class="line">olcRefintAttribute: memberof uniqueMember  manager owner</span><br></pre></td></tr></table></figure><p>依次执行下面命令，加载配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ldapadd -Q -Y EXTERNAL -H ldapi:/// -f memberof.ldif</span><br><span class="line">$ ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f refint1.ldif</span><br><span class="line">$ ldapadd -Q -Y EXTERNAL -H ldapi:/// -f refint2.ldif</span><br></pre></td></tr></table></figure><p>至此，配置修改完了。</p><ol start="5"><li><strong>创建 devops 组织</strong></li></ol><p>创建一个 Company，名为 devops 的组织，相当于域名 devops，并在其下创建一个 admin 的组织角色(该组织角色内的用户具有管理整个 LDAP 的权限) 和 users、group 两个部门组；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim admin.ldif</span><br><span class="line">dn: dc=devops,dc=com</span><br><span class="line">dc: devops</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: domain</span><br><span class="line">o: devops</span><br><span class="line"></span><br><span class="line">dn: cn=admin,dc=devops,dc=com</span><br><span class="line">objectClass: organizationalRole</span><br><span class="line">cn: admin</span><br><span class="line">description: LDAP admin</span><br><span class="line"></span><br><span class="line">dn: dc=sd,dc=devops,dc=com</span><br><span class="line">changetype: add</span><br><span class="line">dc: sd</span><br><span class="line">objectClass: top</span><br><span class="line">objectClass: dcObject</span><br><span class="line">objectClass: organization</span><br><span class="line">o: sd</span><br><span class="line"></span><br><span class="line">dn: ou=<span class="built_in">users</span>,dc=sd,dc=devops,dc=com</span><br><span class="line">ou: <span class="built_in">users</span></span><br><span class="line">objectClass: organizationalUnit</span><br><span class="line"></span><br><span class="line">dn: ou=group,dc=sd,dc=devops,dc=com</span><br><span class="line">ou: group</span><br><span class="line">objectClass: organizationalUnit</span><br></pre></td></tr></table></figure><p>执行命令，添加配置，注意修改域名为自己配置的域名，然后需要输入上面我们生成的密码(Admin@#123)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ldapadd -x -D cn=admin,dc=devops,dc=com -W -f admin.ldif</span><br><span class="line">Enter LDAP Password: </span><br><span class="line">adding new entry <span class="string">&quot;dc=devops,dc=com&quot;</span></span><br><span class="line">adding new entry <span class="string">&quot;cn=admin,dc=devops,dc=com&quot;</span></span><br><span class="line">adding new entry <span class="string">&quot;dc=sd,dc=devops,dc=com&quot;</span></span><br><span class="line">adding new entry <span class="string">&quot;ou=users,dc=sd,dc=devops,dc=com&quot;</span></span><br><span class="line">adding new entry <span class="string">&quot;ou=group,dc=sd,dc=devops,dc=com&quot;</span></span><br></pre></td></tr></table></figure><p>通过以上步骤，就设置好一个 LDAP 目录：</p><ul><li>基准 dc&#x3D;devops,dc&#x3D;com 是该树的根节点</li><li>其下有一个管理域 cn&#x3D;admin,dc&#x3D;devops,dc&#x3D;com </li><li>和 一个下属部门 dc&#x3D;sd,dc&#x3D;devops,dc&#x3D;com<ul><li>用户集合 ou&#x3D;users,dc&#x3D;devops,dc&#x3D;com</li><li>用户组集合 ou&#x3D;group,dc&#x3D;devops,dc&#x3D;com</li></ul></li></ul><ol start="6"><li><strong>创建新用户和新用户组的 ldif 文件</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ slappasswd -s 123456</span><br><span class="line">&#123;SSHA&#125;+dXR1SU4jESWgyZ8BjTLclrOjezXRkka</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新用户的ldif文件</span></span><br><span class="line">$ vim ldapuser.ldif</span><br><span class="line"><span class="comment">#这里testUser用户，我将其加入到testgroup组中</span></span><br><span class="line"><span class="comment"># create new</span></span><br><span class="line"><span class="comment"># replace to your own domain name for &quot;dc=***,dc=***&quot; section</span></span><br><span class="line">dn: uid=user1,ou=<span class="built_in">users</span>,dc=sd,dc=devops,dc=com</span><br><span class="line">objectClass: inetOrgPerson</span><br><span class="line">objectClass: posixAccount</span><br><span class="line">objectClass: shadowAccount</span><br><span class="line">uid: user1</span><br><span class="line">cn: ldaps</span><br><span class="line">sn: node02</span><br><span class="line">userPassword: &#123;SSHA&#125;+dXR1SU4jESWgyZ8BjTLclrOjezXRkka</span><br><span class="line">loginShell: /bin/bash</span><br><span class="line">uidNumber: 2000</span><br><span class="line">gidNumber: 3000</span><br><span class="line">homeDirectory: /home/ldaps</span><br><span class="line"></span><br><span class="line"><span class="comment">#这是添加一个用户组名为ldaps的cn，在名为Group的ou下</span></span><br><span class="line">dn: cn=ldaps,ou=group,dc=sd,dc=devops,dc=com</span><br><span class="line">objectClass: posixGroup</span><br><span class="line">cn: ldaps</span><br><span class="line">gidNumber: 3000</span><br><span class="line">memberUid: user1</span><br></pre></td></tr></table></figure><p>向 OpenLDAP 服务端添加新用户 user1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ldapadd -x -D cn=admin,dc=devops,dc=com -W -f ldapuser.ldif</span><br><span class="line">Enter LDAP Password: （管理者密码）</span><br><span class="line">adding new entry <span class="string">&quot;uid=user1,ou=users,dc=sd,dc=devops,dc=com&quot;</span></span><br><span class="line">adding new entry <span class="string">&quot;cn=ldaps,ou=group,dc=sd,dc=devops,dc=com&quot;</span></span><br></pre></td></tr></table></figure><p>为该用户修改密码为 123456 命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ldappasswd -x -H ldap://188.188.3.141:389 -D <span class="string">&quot;cn=admin,dc=devops,dc=com&quot;</span> -W <span class="string">&quot;uid=user1,ou=users,dc=sd,dc=devops,dc=com&quot;</span> -s 123456</span><br></pre></td></tr></table></figure><ul><li>ldap:&#x2F;&#x2F;188.188.3.141:389 为 openldap 的服务端 ip 加端口；</li><li>cn&#x3D;admin,dc&#x3D;devops,dc&#x3D;com 为 openldap 上面设置的管理者节点；</li><li>uid&#x3D;user1,ou&#x3D;users,dc&#x3D;sd,dc&#x3D;devops,dc&#x3D;com 为用户 id；</li><li>123456 为修改指定的用户密码。</li></ul><h4 id="客户端安装"><a href="#客户端安装" class="headerlink" title="客户端安装"></a>客户端安装</h4><p>1）切换到 Node02 进行，使用 yum 命令进行安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install openldap openldap-clients sssd nss-pam-ldapd</span><br></pre></td></tr></table></figure><p>2）<strong>NSS 服务配置</strong></p><ol><li><strong>修改 <code>/etc/nslcd.conf</code></strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/nslcd.conf</span><br><span class="line"><span class="comment"># 8-9行，用户ID</span></span><br><span class="line">uid nslcd</span><br><span class="line">gid ldap</span><br><span class="line"><span class="comment"># 18行，服务器IP+端口，注意防火墙通行</span></span><br><span class="line">uri ldap://188.188.3.141:389</span><br><span class="line"><span class="comment"># 25行，ldap目录树的基准，根节点</span></span><br><span class="line">base dc=devops,dc=com</span><br><span class="line"><span class="comment"># 29行，ldap管理域</span></span><br><span class="line">binddn cn=admin,dc=devops,dc=com</span><br><span class="line"><span class="comment"># 34行，ldap管理者密码</span></span><br><span class="line">bindpw Admin@<span class="comment">#123</span></span><br><span class="line"><span class="comment"># 62行，证书管理</span></span><br><span class="line">ssl no</span><br><span class="line">tls_cacertdir /etc/openldap/cacerts</span><br><span class="line"><span class="comment"># 授权配置文件</span></span><br><span class="line">$ <span class="built_in">chmod</span> 600 /etc/nslcd.conf</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="comment"># 启动服务并查看状态</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now nslcd &amp;&amp; systemctl status nslcd</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置 <code>/etc/nsswitch.conf</code></strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/nsswitch.conf</span><br><span class="line">passwd:     files ldap</span><br><span class="line">shadow:     files ldap</span><br><span class="line">group:      files ldap</span><br><span class="line">hosts:      files dns myhostname</span><br><span class="line">bootparams: nisplus [NOTFOUND=<span class="built_in">return</span>] files</span><br><span class="line"></span><br><span class="line">ethers:     files</span><br><span class="line">netmasks:   files</span><br><span class="line">networks:   files</span><br><span class="line">protocols:  files</span><br><span class="line">rpc:        files</span><br><span class="line">services:   files sss</span><br><span class="line"></span><br><span class="line">netgroup:   nisplus sss</span><br><span class="line">publickey:  nisplus</span><br><span class="line">automount:  files nisplus sss</span><br><span class="line">aliases:    files nisplus</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否可用</span></span><br><span class="line">$ getent passwd | grep user1</span><br><span class="line">user1:x:2000:3000:ldaps:/home/user1:/bin/bash</span><br></pre></td></tr></table></figure><p>3）<strong>SSSD 服务配置</strong></p><ol><li><strong>修改 <code>/etc/sssd/sssd.conf</code>，在执行 authconfig 命令时默认生成，如文件不存在则新建，内容如下</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[domain/default]</span><br><span class="line">autofs_provider = ldap</span><br><span class="line">ldap_schema = rfc2307bis</span><br><span class="line">krb5_realm = REDPEAK.COM</span><br><span class="line">ldap_search_base = dc=devops,dc=com</span><br><span class="line">krb5_server = 188.188.3.141</span><br><span class="line">id_provider = ldap</span><br><span class="line">auth_provider = ldap</span><br><span class="line">chpass_provider = ldap</span><br><span class="line">ldap_uri = ldap://188.188.3.141:389</span><br><span class="line">ldap_id_use_start_tls = False</span><br><span class="line">cache_credentials = True</span><br><span class="line">ldap_tls_cacertdir = /etc/openldap/cacerts</span><br><span class="line">[sssd]</span><br><span class="line">services = nss, pam, autofs</span><br><span class="line">domains = default</span><br><span class="line"></span><br><span class="line">[nss]</span><br><span class="line">homedir_substring = /home</span><br><span class="line"></span><br><span class="line">[pam]</span><br><span class="line"></span><br><span class="line">[sudo]</span><br><span class="line"></span><br><span class="line">[autofs]</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line"></span><br><span class="line">[pac]</span><br><span class="line"></span><br><span class="line">[ifp]</span><br><span class="line"></span><br><span class="line">[secrets]</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>修改文件权限并加入开机自启动</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> 600 /etc/sssd/sssd.conf</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now sssd &amp;&amp; systemctl status sssd</span><br></pre></td></tr></table></figure><p>4）<strong>OpenLDAP 与 SSH 集成</strong></p><ol><li><strong>修改配置文件 <code>/etc/ssh/sshd_config</code>，是 ssh 通过 pam 认证账号</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication <span class="built_in">yes</span></span><br><span class="line">UsePAM <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>注意：默认使用的是密码认证方式，在集成 SSH 登录时需要确保 PasswordAuthentication yes 配置为 yes</p><ol start="2"><li><strong>修改配置文件 <code>/etc/pam.d/sshd</code>，以确认调用 pam 认证文件</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有-session前加入此行确保登录成功后创建用户的home目录</span></span><br><span class="line">session    required     pam_mkhomedir.so</span><br><span class="line"><span class="comment"># Used with polkit to reauthorize users in remote sessions</span></span><br><span class="line">-session   optional     pam_reauthorize.so prepare</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>修改配置文件<code>/etc/pam.d/password-auth</code></strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请根据自身环境的配置文件进行修订，将sss改成ldap</span></span><br><span class="line"><span class="comment">#%PAM-1.0</span></span><br><span class="line"><span class="comment"># This file is auto-generated.</span></span><br><span class="line"><span class="comment"># User changes will be destroyed the next time authconfig is run.</span></span><br><span class="line">auth        required      pam_env.so</span><br><span class="line">auth        required      pam_faildelay.so delay=2000000</span><br><span class="line">auth        [default=1 ignore=ignore success=ok] pam_succeed_if.so uid &gt;= 1000 quiet</span><br><span class="line">auth        [default=1 ignore=ignore success=ok] pam_localuser.so</span><br><span class="line">auth        sufficient    pam_unix.so nullok try_first_pass</span><br><span class="line">auth        requisite     pam_succeed_if.so uid &gt;= 1000 quiet_success</span><br><span class="line"><span class="comment">#auth        sufficient    pam_sss.so forward_pass</span></span><br><span class="line">auth        sufficient    pam_ldap.so forward_pass</span><br><span class="line">auth        required      pam_deny.so</span><br><span class="line"></span><br><span class="line"><span class="comment">#account     required      pam_unix.so</span></span><br><span class="line">account     required      pam_unix.so broken_shadow</span><br><span class="line">account     sufficient    pam_localuser.so</span><br><span class="line">account     sufficient    pam_succeed_if.so uid &lt; 1000 quiet</span><br><span class="line"><span class="comment">#account     [default=bad success=ok user_unknown=ignore] pam_sss.so</span></span><br><span class="line">account     [default=bad success=ok user_unknown=ignore] pam_ldap.so</span><br><span class="line">account     required      pam_permit.so</span><br><span class="line"></span><br><span class="line">password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=</span><br><span class="line">password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok</span><br><span class="line"><span class="comment">#password    sufficient    pam_sss.so use_authtok</span></span><br><span class="line">password    sufficient    pam_ldap.so use_authtok</span><br><span class="line"></span><br><span class="line">password    required      pam_deny.so</span><br><span class="line"></span><br><span class="line">session     optional      pam_keyinit.so revoke</span><br><span class="line">session     required      pam_limits.so</span><br><span class="line">-session     optional      pam_systemd.so</span><br><span class="line">session     optional      pam_mkhomedir.so <span class="built_in">umask</span>=0077</span><br><span class="line">session     [success=1 default=ignore] pam_succeed_if.so service <span class="keyword">in</span> crond quiet use_uid</span><br><span class="line">session     required      pam_unix.so</span><br><span class="line"><span class="comment">#session     optional      pam_sss.so</span></span><br><span class="line">session     optional      pam_ldap.so</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>修改配置文件 <code>/etc/pam.d/system-auth</code> 配置文件</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请根据自身环境的配置文件进行修订，将sss改成ldap</span></span><br><span class="line"><span class="comment">#%PAM-1.0</span></span><br><span class="line"><span class="comment"># This file is auto-generated.</span></span><br><span class="line"><span class="comment"># User changes will be destroyed the next time authconfig is run.</span></span><br><span class="line">auth        required      pam_env.so</span><br><span class="line">auth        required      pam_faildelay.so delay=2000000</span><br><span class="line"><span class="comment">#auth        sufficient    pam_unix.so nullok try_first_pass</span></span><br><span class="line">auth        sufficient    pam_fprintd.so</span><br><span class="line">auth        [default=1 ignore=ignore success=ok] pam_succeed_if.so uid &gt;= 1000 quiet</span><br><span class="line">auth        [default=1 ignore=ignore success=ok] pam_localuser.so</span><br><span class="line">auth        sufficient    pam_unix.so nullok try_first_pass</span><br><span class="line">auth        requisite     pam_succeed_if.so uid &gt;= 1000 quiet_success</span><br><span class="line"><span class="comment">#auth        sufficient    pam_sss.so forward_pass</span></span><br><span class="line">auth        sufficient    pam_ldap.so forward_pass</span><br><span class="line">auth        required      pam_deny.so</span><br><span class="line"></span><br><span class="line">account     required      pam_unix.so broken_shadow</span><br><span class="line">account     sufficient    pam_localuser.so</span><br><span class="line">account     sufficient    pam_succeed_if.so uid &lt; 1000 quiet</span><br><span class="line"><span class="comment">#account     [default=bad success=ok user_unknown=ignore] pam_sss.so</span></span><br><span class="line">account     [default=bad success=ok user_unknown=ignore] pam_ldap.so</span><br><span class="line">account     required      pam_permit.so</span><br><span class="line"></span><br><span class="line">password    requisite     pam_pwquality.so try_first_pass local_users_only retry=3 authtok_type=</span><br><span class="line">password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok</span><br><span class="line"><span class="comment">#password    sufficient    pam_sss.so use_authtok</span></span><br><span class="line">password    sufficient    pam_ldap.so use_authtok</span><br><span class="line">password    required      pam_deny.so</span><br><span class="line"></span><br><span class="line">session     optional      pam_keyinit.so revoke</span><br><span class="line">session     required      pam_limits.so</span><br><span class="line">-session     optional      pam_systemd.so</span><br><span class="line">session     optional      pam_mkhomedir.so <span class="built_in">umask</span>=0077</span><br><span class="line">session     [success=1 default=ignore] pam_succeed_if.so service <span class="keyword">in</span> crond quiet use_uid</span><br><span class="line">session     required      pam_unix.so</span><br><span class="line"><span class="comment">#session     optional      pam_sss.so</span></span><br><span class="line">session     optional      pam_ldap.so</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>重启 ssh、sssd 和 nslcd 服务</strong></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart sshd sssd nslcd &amp;&amp; system status sshd sssd nslcd</span><br></pre></td></tr></table></figure><p>到此为止就完成了 OpenLDAP 与 SSH 的集成</p><p>6）<strong>验证 SSH 登录</strong></p><p>登录 Node03 或任意一台机器（其他机器同理操作）</p><ol><li>确认 user1 用户只存在于 OpenLDAP</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node02 ~]<span class="comment"># more /etc/passwd |grep user1</span></span><br><span class="line">[root@node02 ~]<span class="comment"># id user1</span></span><br><span class="line">uid=2000(user1) gid=3000(ldaps) <span class="built_in">groups</span>=3000(ldaps)</span><br><span class="line"></span><br><span class="line">[root@node03 ~]<span class="comment"># more /etc/passwd |grep user1</span></span><br><span class="line">[root@node03 ~]<span class="comment"># id user1</span></span><br><span class="line"><span class="built_in">id</span>: user1: no such user</span><br></pre></td></tr></table></figure><ol start="2"><li>su 切换至 user1 用户</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node02 ~]<span class="comment"># su user1</span></span><br><span class="line">[user1@node02 root]$ <span class="built_in">id</span> user1</span><br><span class="line">uid=2000(user1) gid=3000(ldaps) <span class="built_in">groups</span>=3000(ldaps)</span><br></pre></td></tr></table></figure><ol start="3"><li>ssh 登录</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@node03 ~]<span class="comment"># ssh user1@node02</span></span><br><span class="line">ssh: Could not resolve hostname node02: Name or service not known</span><br><span class="line">[root@node03 ~]<span class="comment"># ssh user1@188.188.3.142</span></span><br><span class="line">The authenticity of host <span class="string">&#x27;188.188.3.142 (188.188.3.142)&#x27;</span> can<span class="string">&#x27;t be established.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is SHA256:mgewFytLt6P16GDFrC0DBurU99r5WgqOcBExFk3mlMY.</span></span><br><span class="line"><span class="string">ECDSA key fingerprint is MD5:85:46:14:6a:1d:9f:2f:fb:93:22:7c:c8:e0:a6:33:92.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></span><br><span class="line"><span class="string">Warning: Permanently added &#x27;</span>188.188.3.142<span class="string">&#x27; (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">user1@188.188.3.142&#x27;</span>s password: </span><br><span class="line">Last login: Sat Oct 30 10:48:54 2021</span><br><span class="line">[user1@node02 ~]$ <span class="built_in">pwd</span></span><br><span class="line">/home/user1</span><br><span class="line">[user1@node02 ~]$ <span class="built_in">id</span></span><br><span class="line">uid=2000(user1) gid=3000(ldaps) <span class="built_in">groups</span>=3000(ldaps) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023</span><br></pre></td></tr></table></figure><h3 id="安装-phpldapadmin"><a href="#安装-phpldapadmin" class="headerlink" title="安装 phpldapadmin"></a>安装 phpldapadmin</h3><p>1）先安装对应的镜像源，不然会提示找不到软件包的问题</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum localinstall http://rpms.famillecollet.com/enterprise/remi-release-7.rpm</span><br><span class="line">$ yum install -y phpldapadmin</span><br></pre></td></tr></table></figure><p>2）配置 phpldapadmin</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/httpd/conf.d/phpldapadmin.conf</span><br><span class="line">  &lt;IfModule mod_authz_core.c&gt;</span><br><span class="line">    <span class="comment"># Apache 2.4</span></span><br><span class="line">    Require all granted</span><br><span class="line">  &lt;/IfModule&gt;</span><br><span class="line">  </span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"><span class="comment"># 修改配置用DN登录ldap</span></span><br><span class="line">$ vim /etc/phpldapadmin/config.php</span><br><span class="line"><span class="comment"># 398行，默认是使用uid进行登录，我这里改为cn，也就是用户名</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">&#x27;login&#x27;</span>,<span class="string">&#x27;attr&#x27;</span>,<span class="string">&#x27;cn&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 460行，关闭匿名登录，否则任何人都可以直接匿名登录查看所有人的信息</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">&#x27;login&#x27;</span>,<span class="string">&#x27;anon_bind&#x27;</span>,<span class="literal">false</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 519行，设置用户属性的唯一性，这里我将cn,sn加上了，以确保用户名的唯一性</span></span><br><span class="line"><span class="variable">$servers</span>-&gt;setValue(<span class="string">&#x27;unique&#x27;</span>,<span class="string">&#x27;attrs&#x27;</span>,array(<span class="string">&#x27;mail&#x27;</span>,<span class="string">&#x27;uid&#x27;</span>,<span class="string">&#x27;uidNumber&#x27;</span>,<span class="string">&#x27;cn&#x27;</span>,<span class="string">&#x27;sn&#x27;</span>));</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"><span class="comment"># 启动apache</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now httpd &amp;&amp; systemctl status httpd</span><br></pre></td></tr></table></figure><p>3）登录 phpldapadmin 界面，浏览器访问：<a href="http://ip/ldapadmin%EF%BC%8C%E8%B4%A6%E5%8F%B7%EF%BC%9Aadmin">http://ip/ldapadmin，账号：admin</a> 密码：Admin@#123，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211029192658487.png" alt="image-20211029192658487"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211030113537095.png" alt="image-20211030113537095"></p><h3 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h3><h4 id="LDAP-常用命令"><a href="#LDAP-常用命令" class="headerlink" title="LDAP 常用命令"></a>LDAP 常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询所有用户及用户组</span></span><br><span class="line">$ ldapsearch -LL -Y EXTERNAL -H ldapi:/// -b dc=devops,dc=com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某一用户</span></span><br><span class="line">$ ldapdelete -x -D cn=admin,dc=devops,dc=com <span class="string">&quot;uid=user1,ou=users,dc=sd,dc=devops,dc=com&quot;</span> -w Admin@<span class="comment">#123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为某一用户修改密码为12345</span></span><br><span class="line">$ ldappasswd -x -H ldap://188.188.3.141:389 -D <span class="string">&quot;cn=admin,dc=devopos,dc=com&quot;</span> -W Admin@<span class="comment">#123 &quot;uid=user1,ou=users,dc=sd,dc=devops,dc=com&quot; -s 12345</span></span><br></pre></td></tr></table></figure><h4 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h4><p>以 Root 用户执行命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份组织结构</span></span><br><span class="line">$ ldapsearch -x -D <span class="string">&quot;cn=admin,dc=apache,dc=org&quot;</span> -w ldap@123 -h node214 -p 389 -b <span class="string">&quot;dc=apache,dc=org&quot;</span> <span class="string">&quot;(objectclass=organizationalUnit)&quot;</span> &gt; apache_ou_bak.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份用户组</span></span><br><span class="line">$ ldapsearch -x -D <span class="string">&quot;cn=admin,dc=apache,dc=org&quot;</span> -w ldap@123 -h node214 -p 389 -b <span class="string">&quot;dc=apache,dc=org&quot;</span> <span class="string">&quot;(objectclass=posixGroup)&quot;</span> &gt; apache_group_bak.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备分用户</span></span><br><span class="line">$ ldapsearch -x -D <span class="string">&quot;cn=admin,dc=apache,dc=org&quot;</span> -w ldap@123 -h node214 -p 389 -b <span class="string">&quot;dc=apache,dc=org&quot;</span> <span class="string">&quot;(objectclass=inetOrgPerson)&quot;</span> &gt; apache_people_bak.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原组织结构</span></span><br><span class="line">$ ldapadd -x -H ldap://192.168.1.107:389 -D <span class="string">&quot;cn=admin,dc=apache,dc=org&quot;</span> -w 123456 -f apache_ou_bak.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原用户组</span></span><br><span class="line">$ ldapadd -x -H ldap://192.168.1.107:389 -D <span class="string">&quot;cn=admin,dc=apache,dc=org&quot;</span> -w 123456 -f apache_group_bak.ldif</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还原用户</span></span><br><span class="line">$ ldapadd -x -H ldap://192.168.1.107:389 -D <span class="string">&quot;cn=admin,dc=apache,dc=org&quot;</span> -w 123456 -f apache_people_bak.ldif</span><br></pre></td></tr></table></figure><ul><li>-H ldap:&#x2F;&#x2F;192.168.1.107:389                ldap server的服务器ip和端口</li><li>-D “cn&#x3D;admin,dc&#x3D;apache,dc&#x3D;org”      用来绑定服务器的DN，通常是admin的DN</li><li>-w 123456                                               绑定DN的密码</li><li>-f apache_people_bak.ldif                    使用ldif文件进行条目添加的文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openldap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx问题_解决重启nginx.pid文件掉失</title>
      <link href="/2022/04/07/nginx/nginx%E9%97%AE%E9%A2%98_%E8%A7%A3%E5%86%B3%E9%87%8D%E5%90%AFnginx.pid%E6%96%87%E4%BB%B6%E6%8E%89%E5%A4%B1/"/>
      <url>/2022/04/07/nginx/nginx%E9%97%AE%E9%A2%98_%E8%A7%A3%E5%86%B3%E9%87%8D%E5%90%AFnginx.pid%E6%96%87%E4%BB%B6%E6%8E%89%E5%A4%B1/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#编译之前，先创建nginx临时目录</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /var/temp/nginx -p</span><br><span class="line">$ tar -xf nginx-1.21.6.tar.gz</span><br><span class="line"></span><br><span class="line">$ ./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--pid-path=/var/run/nginx/nginx.pid \</span><br><span class="line">--lock-path=/var/lock/nginx.lock \</span><br><span class="line">--error-log-path=/var/log/nginx/error.log \</span><br><span class="line">--http-log-path=/var/log/nginx/access.log \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--http-client-body-temp-path=/var/temp/nginx/client \</span><br><span class="line">--http-proxy-temp-path=/var/temp/nginx/proxy \</span><br><span class="line">--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \</span><br><span class="line">--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \</span><br><span class="line">--http-scgi-temp-path=/var/temp/nginx/scgi</span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>注：<code>\</code> 代表在命令行中换行，用于提高可读性配置命令：</li></ul><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>–prefix</td><td>指定 nginx 安装目录</td></tr><tr><td>–pid-path</td><td>指向 nginx 的 pid</td></tr><tr><td>–lock-path</td><td>锁定安装文件，防止被恶意篡改或误操作</td></tr><tr><td>–error-log-path</td><td>错误日志</td></tr><tr><td>–http-log-path</td><td>日志</td></tr><tr><td>–with-http_gzip_static_module</td><td>启用 gzip 模块，在线实时压缩输出数据流</td></tr><tr><td>–http-client-body-temp-path</td><td>设定客户端请求的临时目录</td></tr><tr><td>–http-proxy-temp-path</td><td>设定 http 代理临时目录</td></tr><tr><td>–http-fastcgi-temp-path</td><td>设定 fastcgi 临时目录</td></tr><tr><td>–http-uwsgi-temp-path</td><td>设定 uwsgi 临时目录</td></tr><tr><td>–http-scgi-temp-path</td><td>设定 scgi 临时目录</td></tr></tbody></table><p>**错误提示：nginx[4115]: nginx: [emerg] open() “&#x2F;var&#x2F;run&#x2F;nginx&#x2F;nginx.pid” failed (2: No such file or directory) **</p><blockquote><p>起因：每次服务器重启后，<code>/var/run/nginx</code> 目录都会被删除，所以无法在这目录创建 nginx.pid文件，可以再次创建此目录，然后就可以运行了，但重启后又会丢失。</p></blockquote><ul><li>解决方法：</li></ul><p>打开配置文件，打开其中一个配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment"># 取消注释，打开此配置</span></span><br><span class="line">pid        logs/nginx.pid;</span><br></pre></td></tr></table></figure><p>在 nginx 安装目录下创建 logs 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/nginx/logs</span><br></pre></td></tr></table></figure><p>具体原因：在配置文件显示的指定 nginx.pid 文件存放位置，然后创建 logs 文件夹，当服务器重启后，logs 目录不会被删除。</p>]]></content>
      
      
      <categories>
          
          <category> lanmp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置_文件共享服务</title>
      <link href="/2022/04/07/nginx/nginx%E9%85%8D%E7%BD%AE_%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/04/07/nginx/nginx%E9%85%8D%E7%BD%AE_%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h3><p>在此略过</p><h3 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 文件共享功能</span></span><br><span class="line">        location /tools &#123;</span><br><span class="line">            <span class="built_in">alias</span>  /cloud_data</span><br><span class="line">            autoindex on;              <span class="comment"># 开启目录浏览功能</span></span><br><span class="line">            charset utf-8;             <span class="comment"># 支持中文显示</span></span><br><span class="line">            autoindex_exact_size off;  <span class="comment"># 关闭详细文件大小统计，让文件大小显示MB，GB单位，默认为b；</span></span><br><span class="line">            autoindex_localtime  on;   <span class="comment"># 显示文件修改日期</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启服务即生效</span></span><br><span class="line">$ systemctl restart nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211120153748968.png" alt="image-20211120153748968"></p>]]></content>
      
      
      <categories>
          
          <category> lanmp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Nginx(编译)</title>
      <link href="/2022/04/07/nginx/centos7%E9%83%A8%E7%BD%B2_Nginx(%E7%BC%96%E8%AF%91)/"/>
      <url>/2022/04/07/nginx/centos7%E9%83%A8%E7%BD%B2_Nginx(%E7%BC%96%E8%AF%91)/</url>
      
        <content type="html"><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ol><li>关闭防火墙</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld</span><br></pre></td></tr></table></figure><ol start="2"><li>停用 Selinux</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/sysconfig/selinux</span><br></pre></td></tr></table></figure><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><ol><li>安装依依赖包</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><ul><li>GCC 编译器</li><li>PCRE 库-兼容正则表达式库，Rewrite 模块和 Http 核心模块都会使用到 PCRE 正则表达式</li><li>Zlib 库-压缩算法，Nginx 的各个模块中需要使用 gzip 压缩</li><li>Openssl 开放源代码软件库包-应用程序可以使用这个包进行安全通信，并且避免被窃听</li></ul><ol start="2"><li>下载源码并解压编译运行</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.21.4.tar.gz</span><br><span class="line">$ tar -xf nginx-1.21.4.tar.gz</span><br><span class="line"><span class="comment"># 进入解压后的资源包，测试环境暂不指定任何参数，单一指定安装路径，直接执行编译并安装</span></span><br><span class="line">$ ./configure --prefix=/usr/local/nginx </span><br><span class="line">$ make &amp;&amp; make install </span><br><span class="line"><span class="comment"># 进入安装后的目录，运行可执行文件</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/nginx</span><br><span class="line">$ ./sbin/nginx</span><br></pre></td></tr></table></figure><p>确保系统防火墙关闭或端口已开放，浏览器输入本机 IP 地址，能看到 Nginx 欢迎页面就说明运行成功；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --permanent --zone=public --add-port=80/tcp</span><br></pre></td></tr></table></figure><p><strong>Configure 可提供多个自定义安装配置参数，如：</strong>[ <code>./configure –help</code> 查询详细参数]</p><blockquote><p>在<code>./configure</code> 配置中，”–with” 表示启用模块，”–without” 表示禁用模块</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参考例子，指定安装目录并且开启指定模块</span></span><br><span class="line">$ ./configure --prefix=/usr/local/nginx --with-http_perl_module --with-http_stub_status_module --with-http_ssl_module --with-openssl-opt=<span class="string">&quot;enable-tlsext&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>设置开机自启</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ol start="4"><li>开启服务并查看状态</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> --now nginx &amp;&amp; systemctl status nginx</span><br><span class="line">● nginx.service</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Fri 2021-11-19 23:08:08 CST; 8ms ago</span><br><span class="line">  Process: 21862 ExecStart=/usr/local/nginx/sbin/nginx (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 21863 (nginx)</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─21863 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">           └─21865 nginx: worker process</span><br><span class="line"></span><br><span class="line">Nov 19 23:08:08 share systemd[1]: Starting nginx.service...</span><br><span class="line">Nov 19 23:08:08 share systemd[1]: Started nginx.service.</span><br><span class="line"></span><br><span class="line">$ ps -ef | grep nginx</span><br><span class="line">root     21863     1  0 23:08 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx</span><br><span class="line">nobody   21865 21863  0 23:08 ?        00:00:00 nginx: worker process</span><br><span class="line">root     21867 16208  0 23:08 pts/0    00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211119150731084.png" alt="image-20211119150731084"></p>]]></content>
      
      
      <categories>
          
          <category> lanmp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_NFS服务器</title>
      <link href="/2022/04/07/nfs/centos7%E9%83%A8%E7%BD%B2_NFS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/04/07/nfs/centos7%E9%83%A8%E7%BD%B2_NFS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>版本环境：</p><ul><li><p>硬件系统：ESXI 6.7.0 Update 1 </p></li><li><p>系统版本：CentOS 7.9</p></li></ul><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>1）配置环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止并禁用防火墙</span></span><br><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭并禁用 SELinux</span></span><br><span class="line">$ setenforce 0</span><br><span class="line">$ sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><p>2）安装服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y nfs-utils rpcbind</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改归属组与用户</span></span><br><span class="line">$ <span class="built_in">chown</span> -R nfsnobody:nfsnobody /nfs</span><br></pre></td></tr></table></figure><p>3）配置 NFS</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑exports</span></span><br><span class="line">$ vi /etc/exports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入以下内容(格式：FS共享的目录 NFS客户端地址1(参数1,参数2,...) 客户端地址2(参数1,参数2,...))</span></span><br><span class="line">$ /nfs 188.188.4.0/24(rw,async,no_root_squash)</span><br></pre></td></tr></table></figure><blockquote><p>如果设置为 &#x2F;nfs *(rw,async,no_root_squash) 则对所以的IP都有效</p></blockquote><ul><li>常用选项：<ul><li>ro：客户端挂载后，其权限为只读，默认选项；</li><li>rw:读写权限；</li><li>sync：同时将数据写入到内存与硬盘中；</li><li>async：异步，优先将数据保存到内存，然后再写入硬盘；</li><li>Secure：要求请求源的端口小于1024</li></ul></li><li>用户映射：<ul><li>root_squash:当NFS客户端使用root用户访问时，映射到NFS服务器的匿名用户；</li><li>no_root_squash:当NFS客户端使用root用户访问时，映射到NFS服务器的root用户；</li><li>all_squash:全部用户都映射为服务器端的匿名用户；</li><li>anonuid&#x3D;UID：将客户端登录用户映射为此处指定的用户uid；</li><li>anongid&#x3D;GID：将客户端登录用户映射为此处指定的用户gid</li></ul></li></ul><p>4）设置自启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart rpcbind</span><br><span class="line">$ systemctl <span class="built_in">enable</span> nfs &amp;&amp; systemctl restart nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有可用的NFS地址</span></span><br><span class="line">$ showmount -e 127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>1）安装服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y nfs-utils rpcbind</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建挂载的文件夹，并挂载 nfs</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /nfs-data</span><br><span class="line">$ mount -t nfs -o nolock,vers=4 188.188.4.161:/nfs /nfs-data</span><br><span class="line">$ systemctl <span class="built_in">enable</span> nfs &amp;&amp; systemctl restart nfs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自挂载</span></span><br><span class="line">vim /etc/rc.d/rc.local</span><br><span class="line"><span class="comment">#在文件最后添加一行：</span></span><br><span class="line">mount -t nfs -o nolock,vers=4 188.188.4.161:/nfs /nfs-data</span><br></pre></td></tr></table></figure><ul><li>参数解释：<ul><li>mount：挂载命令</li><li>-o：挂载选项</li><li>nfs :使用的协议</li><li>nolock :不阻塞</li><li>vers : 使用的NFS版本号</li><li>IP : NFS服务器的IP（NFS服务器运行在哪个系统上，就是哪个系统的IP）</li><li>&#x2F;nfs: 要挂载的目录（Ubuntu的目录）</li><li>&#x2F;nfs-data : 要挂载到的目录（开发板上的目录，注意挂载成功后，&#x2F;mnt下原有数据将会被隐藏，无法找到）</li></ul></li></ul><p>2）查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nfs服务端信息</span></span><br><span class="line">$ nfsstat -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nfs客户端信息</span></span><br><span class="line">$ nfsstat -c</span><br></pre></td></tr></table></figure><ul><li>卸载挂载</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ umount /nfs-data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nfs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Nexus2.x</title>
      <link href="/2022/04/07/nexus/centos7%E9%83%A8%E7%BD%B2_Nexus2.x/"/>
      <url>/2022/04/07/nexus/centos7%E9%83%A8%E7%BD%B2_Nexus2.x/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Nexus 版本有两类：Pro 收费、OSS开源</p></blockquote><h3 id="前置环境"><a href="#前置环境" class="headerlink" title="前置环境"></a>前置环境</h3><p>首先安装好 Jdk 和 Maven 环境</p><ul><li>Java</li></ul><p>安装 Jenkins 前确保已配置好 JDK</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.oracle.com/otn/java/jdk/8u291-b10/d7fc238d0cbf4b0dac67be84580cfb4b/jdk-8u291-linux-x64.tar.gz</span><br><span class="line">$ tar -xf jdk-8u291-linux-x64.tar.gz -C /usr/local/ </span><br><span class="line">$ <span class="built_in">mv</span> /usr/local/jdk1.8.0_291 /usr/local/java</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">JRE_HOME=/usr/local/java/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><ul><li><p>Maven </p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz</span><br><span class="line">$ tar -xf apache-maven-3.8.1-bin.tar.gz -C /usr/local/ </span><br><span class="line">$ <span class="built_in">mv</span> /usr/local/apache-maven-3.8.1 /usr/local/maven</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># maven</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:/usr/local/mysql/bin:<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="Nexus-2-安装"><a href="#Nexus-2-安装" class="headerlink" title="Nexus 2 安装"></a>Nexus 2 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.sonatype.com/nexus/oss/nexus-2.14.20-02-bundle.tar.gz</span><br><span class="line">$ <span class="built_in">mkdir</span> /usr/local/nexus</span><br><span class="line">$ tar -xf nexus-2.14.20-02-bundle.tar.gz -C /usr/local/nexus</span><br></pre></td></tr></table></figure><p>修改&#x2F;nexus-2.14.20-02&#x2F;conf 目录下：nexus.properties，端口可以自定义，避免冲突</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sonatype Nexus</span></span><br><span class="line"><span class="comment"># ==============</span></span><br><span class="line"><span class="comment"># This is the most basic configuration of Nexus.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Jetty section</span></span><br><span class="line">application-port=8081</span><br><span class="line">application-host=0.0.0.0</span><br><span class="line">nexus-webapp=<span class="variable">$&#123;bundleBasedir&#125;</span>/nexus</span><br><span class="line">nexus-webapp-context-path=/nexus</span><br><span class="line"></span><br><span class="line"><span class="comment"># Nexus section</span></span><br><span class="line">nexus-work=<span class="variable">$&#123;bundleBasedir&#125;</span>/../sonatype-work/nexus</span><br><span class="line">runtime=<span class="variable">$&#123;bundleBasedir&#125;</span>/nexus/WEB-INF</span><br><span class="line"></span><br><span class="line"><span class="comment"># orientdb buffer size in megabytes</span></span><br><span class="line">storage.diskCache.bufferSize=4096</span><br></pre></td></tr></table></figure><p>在 <code>/nexus-2.14.20-02/bin/</code>目录下执行：<code>RUN_AS_USER=root ./nexus start</code></p><p>访问 <a href="http://192.168.100.52:8081/nexus">http://ip:port/nexus</a> ，登陆Nexus，默认的用户名是：admin、密码是：admin123</p><p><strong>设置一个环境变量，让 nexus 直接用 root 用户启动</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">$ <span class="built_in">echo</span> &gt;&gt; /etc/profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;# set nexus run as root&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;export RUN_AS_USER=root&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使配置文件生效</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">$ /opt/nexus/nexus-2.14.20-02/bin/nexus start</span><br><span class="line">****************************************</span><br><span class="line">WARNING - NOT RECOMMENDED TO RUN AS ROOT</span><br><span class="line">****************************************</span><br><span class="line">Starting Nexus OSS...</span><br><span class="line">Started Nexus OSS.</span><br><span class="line"></span><br><span class="line">$ netstat -tulnp | grep $(jps -l | grep org.sonatype.nexus.bootstrap.jsw.JswLauncher | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">tcp        0      0 0.0.0.0:8081            0.0.0.0:*               LISTEN      1768/java           </span><br><span class="line">tcp        0      0 127.0.0.1:32000         0.0.0.0:*               LISTEN      1768/java</span><br></pre></td></tr></table></figure><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt; /lib/systemd/system/nexus.service &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=nexus</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=forking</span></span><br><span class="line"><span class="string">Environment=RUN_AS_USER=root</span></span><br><span class="line"><span class="string">Environment=PATH=/root/.tiup/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/java/bin:/usr/local/maven/bin:/root/bin:/usr/local/java/bin:/usr/local/maven/bin:/usr/local/java/bin:/usr/local/maven/bin</span></span><br><span class="line"><span class="string">ExecStart=/opt/nexus/nexus-2.14.20-02/bin/nexus start</span></span><br><span class="line"><span class="string">ExecReload=/opt/nexus/nexus-2.14.20-02/bin/nexus restart</span></span><br><span class="line"><span class="string">ExecStop=/opt/nexus/nexus-2.14.20-02/bin/nexus stop</span></span><br><span class="line"><span class="string">PrivateTmp=true</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ lsof -i:8081</span><br><span class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    3299 root  491u  IPv4  38418      0t0  TCP *:tproxy (LISTEN)</span><br><span class="line">java    3299 root  495u  IPv4  38420      0t0  TCP data:tproxy-&gt;ec2-100-20-0-71.us-west-2.compute.amazonaws.com:57067 (CLOSE_WAIT)</span><br><span class="line">java    3299 root  496u  IPv4  38470      0t0  TCP data:tproxy-&gt;ec2-100-20-0-71.us-west-2.compute.amazonaws.com:62446 (CLOSE_WAIT)</span><br><span class="line">java    3299 root  497u  IPv4  38471      0t0  TCP data:tproxy-&gt;ec2-100-20-0-71.us-west-2.compute.amazonaws.com:61221 (CLOSE_WAIT)</span><br><span class="line">java    3299 root  498u  IPv4  38472      0t0  TCP data:tproxy-&gt;ec2-100-20-0-71.us-west-2.compute.amazonaws.com:62283 (ESTABLISHED)</span><br><span class="line">java    3299 root  500u  IPv4  38473      0t0  TCP data:tproxy-&gt;ec2-100-20-0-71.us-west-2.compute.amazonaws.com:58709 (ESTABLISHED)</span><br><span class="line">java    3299 root  501u  IPv4  38474      0t0  TCP data:tproxy-&gt;ec2-100-20-0-71.us-west-2.compute.amazonaws.com:57747 (ESTABLISHED)</span><br></pre></td></tr></table></figure><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><p>修改密码</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210803152414668.png" alt="image-20210803152414668"></p><p>点击<code>Repository Targets</code>可以管理仓库</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210803152624146.png" alt="image-20210803152624146"></p><p><strong>配置 maven 代理仓库</strong></p><p>默认的 maven 远程仓库地址为：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a> 地址在美国，太慢了，所以我们使用阿里云的远程仓库</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">http://maven.aliyun.com/nexus/content/groups/public/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210803153135248.png" alt="image-20210803153135248"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210803153827456.png" alt="image-20210803153827456"></p><p>更改 maven 当中的 settings.xml 配置文件，将中央仓库改为以下值（<code>注意IP地址改为自己的</code>）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">  &lt;<span class="built_in">id</span>&gt;central&lt;/id&gt;</span><br><span class="line">  &lt;name&gt;my maven&lt;/name&gt;</span><br><span class="line">  &lt;url&gt;http://188.188.3.110:8081/nexus/content/repositories/central/&lt;/url&gt;</span><br><span class="line">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><p>在<code>&lt;mirror&gt; &lt;/mirror&gt;</code>注释掉原有仓库，添加新的仓库，再打包 maven 项目即使用的正是搭建的 maven 私服</p>]]></content>
      
      
      <categories>
          
          <category> nexus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nextcloud问题_配置后台任务</title>
      <link href="/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E9%85%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E9%85%8D%E7%BD%AE%E5%90%8E%E5%8F%B0%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220215173415990.png" alt="image-20220215173415990"></p><blockquote><p>Cron 使用操作系统 cron 功能是执行常规任务的首选方法， 此方法可以执行预定作业，而不会受到 Web 服务器可能具有的固有限制，但在某些系统上，可能需要调用 php-cli 而不是 php；</p><p>上述方法可能在 Centos7 中不起作用，因为服务器有安装 systemd，所以使用 systemd 定时器替代 cron 作业。</p></blockquote><p>在 <code>/etc/systemd/system/</code> 创建这两个文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/nextcloudcron.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Nextcloud cron.php job</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User=nginx</span><br><span class="line">ExecStart=/usr/local/php/bin/php -f /usr/local/nginx/html/cron.php</span><br><span class="line">KillMode=process</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/nextcloudcron.timer</span><br><span class="line">[Unit]</span><br><span class="line">Description=Run Nextcloud cron.php every 5 minutes</span><br><span class="line"></span><br><span class="line">[Timer]</span><br><span class="line">OnBootSec=5min</span><br><span class="line">OnUnitActiveSec=5min</span><br><span class="line">Unit=nextcloudcron.service</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=timers.target</span><br></pre></td></tr></table></figure><p>定时器单元中的重要部分是 OnBootSec 和 OnUnitActiveSec 启动”会在启动5分钟后启动定时器，否则每次启动后都必须手动启动定时器。 OnUnitActiveSec 将在服务单元上次激活后设置一个15分钟的计时器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> --now nextcloudcron.timer</span><br></pre></td></tr></table></figure><p>注意:在管理菜单中选择 Cron 选项以查看后台作业</p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nextcloud问题_通过不被信任的域名访问</title>
      <link href="/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E9%80%9A%E8%BF%87%E4%B8%8D%E8%A2%AB%E4%BF%A1%E4%BB%BB%E7%9A%84%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/"/>
      <url>/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E9%80%9A%E8%BF%87%E4%B8%8D%E8%A2%AB%E4%BF%A1%E4%BB%BB%E7%9A%84%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220215164242531.png" alt="image-20220215164242531"></p><blockquote><p>NextCloud 在访问时，会自动判断已设置好的域名或 IP 是否被允许，如是固定 IP 的话，直接把域名或 IP 添加到配置文件即可。如是家用自建服务器，路由会每天都重置一次 IP，导致上述问题，通过下述方法可禁止 IP 限制</p></blockquote><ul><li>白名单，允许指定 IP 访问</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/html/config/config.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$CONFIG</span> = array (</span><br><span class="line">  <span class="string">&#x27;instanceid&#x27;</span> =&gt; <span class="string">&#x27;oc87xfzn8xfn&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;passwordsalt&#x27;</span> =&gt; <span class="string">&#x27;JfKh2vVxqg/dOxyzkLZGIabKfDgY3Z&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;secret&#x27;</span> =&gt; <span class="string">&#x27;fBjyvcbg3aXyvlbTf4yPovy7z8VubhlYiFDQn7EWAJBHUY6A&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;trusted_domains&#x27;</span> =&gt;</span><br><span class="line">  array (</span><br><span class="line">    0 =&gt; <span class="string">&#x27;188.188.3.4&#x27;</span>,</span><br><span class="line">    <span class="comment">#增加白名单</span></span><br><span class="line">    1 =&gt; <span class="string">&#x27;公网IP&#x27;</span>,</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><ul><li>解除 IP 访问限制</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/html/config/config.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$CONFIG</span> = array (</span><br><span class="line">  <span class="string">&#x27;instanceid&#x27;</span> =&gt; <span class="string">&#x27;oc87xfzn8xfn&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;passwordsalt&#x27;</span> =&gt; <span class="string">&#x27;JfKh2vVxqg/dOxyzkLZGIabKfDgY3Z&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;secret&#x27;</span> =&gt; <span class="string">&#x27;fBjyvcbg3aXyvlbTf4yPovy7z8VubhlYiFDQn7EWAJBHUY6A&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;trusted_domains&#x27;</span> =&gt;</span><br><span class="line">  array (</span><br><span class="line">    0 =&gt; <span class="string">&#x27;188.188.3.4&#x27;</span>,</span><br><span class="line">    <span class="comment">#增加白名单</span></span><br><span class="line">    1 =&gt; preg_match(<span class="string">&#x27;/cli/i&#x27;</span>,php_sapi_name())?<span class="string">&#x27;127.0.0.1&#x27;</span>:<span class="variable">$_SERVER</span>[<span class="string">&#x27;SERVER_NAME&#x27;</span>],</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p>解义：将当前访问的域名或 IP 动态的添加的信任的域名中</p><ul><li><code>$_SERVER[&#39;SERVER_NAME&#39;]</code> 为获取当前访问的域名或 IP</li><li>cli 模式下是无法获得的，所以增加了 cli 模式判断</li></ul>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nextcloud问题_解决安全与设置警告</title>
      <link href="/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E8%A7%A3%E5%86%B3%E5%AE%89%E5%85%A8%E4%B8%8E%E8%AE%BE%E7%BD%AE%E8%AD%A6%E5%91%8A/"/>
      <url>/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E8%A7%A3%E5%86%B3%E5%AE%89%E5%85%A8%E4%B8%8E%E8%AE%BE%E7%BD%AE%E8%AD%A6%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p>修改各配置文件后，记得重启相关的服务方可生效</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220215090741370.png" alt="image-20220215090741370"></p><p>1）问题一：<strong>一些文件未通过完整性检查</strong></p><p>通过无效信息可以得出 .htaccess，.user.ini 这二个文件是无效的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Technical information</span><br><span class="line">=====================</span><br><span class="line">The following list covers <span class="built_in">which</span> files have failed the integrity check. Please <span class="built_in">read</span></span><br><span class="line">the previous linked documentation to learn more about the errors and how to fix</span><br><span class="line">them.</span><br><span class="line"></span><br><span class="line">Results</span><br><span class="line">=======</span><br><span class="line">- core</span><br><span class="line">- INVALID_HASH</span><br><span class="line">- .htaccess</span><br><span class="line">- FILE_MISSING</span><br><span class="line">- .user.ini</span><br><span class="line"></span><br><span class="line">Raw output</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cp</span> .htaccess .user.ini /usr/local/nginx/html/</span><br></pre></td></tr></table></figure><p>解决方法：删除 .htaccess，.user.ini 两个文件，然后从 nextcloud 下载文件，复制 .htaccess，.user.ini 到网站根目录</p><p>2）问题二：<strong>PHP 内存限制低于建议值 512MB</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line"><span class="comment"># 找到 memory_limit = 128M，将128M修改为512M，数值按内存情况及需要而定，保存退出</span></span><br><span class="line">; Maximum amount of memory a script may consume (128MB)</span><br><span class="line">; http://php.net/memory-limit</span><br><span class="line">memory_limit = 512M</span><br></pre></td></tr></table></figure><p>3）问题三：<strong>PHP configuration option output_buffering must be disabled</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line"><span class="comment"># 找到 output_buffering 并;注释掉参数即可</span></span><br><span class="line">; output_buffering = 4096</span><br></pre></td></tr></table></figure><p>4）问题四：<strong>PHP 的安装似乎不正确，无法访问系统环境变量。getenv(“PATH”) 函数测试返回了一个空值</strong></p><p>确认环境变量是否有配置成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># php</span></span><br><span class="line"><span class="built_in">export</span> PHP_HOME=/usr/local/php</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PHP_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line">$ php -v</span><br><span class="line">PHP 7.4.27 (cli) (built: Feb 14 2022 15:53:46) ( NTS )</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v3.4.0, Copyright (c) Zend Technologies</span><br></pre></td></tr></table></figure><ul><li>方法一：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/php/etc/php-fpm.conf</span><br><span class="line"><span class="comment"># 在文中最后添加</span></span><br><span class="line"><span class="built_in">env</span>[PATH] = /usr/local/bin:/usr/bin:/bin:/usr/local/php/bin</span><br></pre></td></tr></table></figure><ul><li>方法二：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/php/etc/php-fpm.d/www.conf</span><br><span class="line"><span class="comment"># 去掉下面几行注释</span></span><br><span class="line"><span class="built_in">env</span>[HOSTNAME] = <span class="variable">$HOSTNAME</span>                     </span><br><span class="line"><span class="built_in">env</span>[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class="line"><span class="built_in">env</span>[TMP] = /tmp</span><br><span class="line"><span class="built_in">env</span>[TMPDIR] = /tmp</span><br><span class="line"><span class="built_in">env</span>[TEMP] = /tmp</span><br></pre></td></tr></table></figure><p>5）问题五：**”Strict-Transport-Security” HTTP 头未设为至少 “15552000” 秒。为了提高安全性，建议启用 HSTS**</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/vhosts/nextcloud.conf</span><br><span class="line">    <span class="comment"># HSTS settings</span></span><br><span class="line">    <span class="comment"># WARNING: Only add the preload option once you read about</span></span><br><span class="line">    <span class="comment"># the consequences in https://hstspreload.org/. This option</span></span><br><span class="line">    <span class="comment"># will add the domain to a hardcoded list that is shipped</span></span><br><span class="line">    <span class="comment"># in all major browsers and getting removed from this list</span></span><br><span class="line">    <span class="comment"># could take several months.</span></span><br><span class="line">    <span class="comment"># 取消下参数注释即可</span></span><br><span class="line">    add_header Strict-Transport-Security <span class="string">&quot;max-age=15768000; includeSubDomains; preload;&quot;</span> always;</span><br></pre></td></tr></table></figure><p>6）问题六：<strong>您的安装没有设置默认的电话区域</strong></p><p>编辑 Nextcloud config 目录中的 config.php 文件，在文件最下方， ); 前添加如下代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/html/config/config.php</span><br><span class="line">  <span class="string">&#x27;default_phone_region&#x27;</span> =&gt; <span class="string">&#x27;CN&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>7）问题七：<strong>内存缓存未配置。为了提升性能，请尽量配置内存缓存</strong></p><blockquote><p>PHP 中使用 Redis 前， 需要确保已经安装了 redis 服务及 PHP redis 驱动</p></blockquote><p>“Internal Server Error” 错误，原因在于设置了 Redis ，但未安装 php-redis 扩展</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/phpredis/phpredis/archive/refs/tags/5.3.7RC2.tar.gz -O phpredis-5.3.7RC2.tar.gz</span><br><span class="line">$ tar -xf phpredis-5.3.7RC2.tar.gz &amp;&amp; <span class="built_in">cd</span> ./phpredis-5.3.7RC2</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=redis</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/html/config/config.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$CONFIG</span> = array (</span><br><span class="line">  <span class="string">&#x27;instanceid&#x27;</span> =&gt; <span class="string">&#x27;oc87xfzn8xfn&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;passwordsalt&#x27;</span> =&gt; <span class="string">&#x27;JfKh2vVxqg/dOxyzkLZGIabKfDgY3Z&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;secret&#x27;</span> =&gt; <span class="string">&#x27;fBjyvcbg3aXyvlbTf4yPovy7z8VubhlYiFDQn7EWAJBHUY6A&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;trusted_domains&#x27;</span> =&gt;</span><br><span class="line">  array (</span><br><span class="line">    0 =&gt; <span class="string">&#x27;188.188.3.4&#x27;</span>,</span><br><span class="line">  ),</span><br><span class="line">  <span class="comment"># 增加下述Redis内容</span></span><br><span class="line">  <span class="string">&#x27;memcache.local&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcache.distributed&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcache.locking&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;redis&#x27;</span> =&gt; array(</span><br><span class="line">     <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;port&#x27;</span> =&gt; 6379,</span><br><span class="line">  ),</span><br><span class="line">  <span class="string">&#x27;datadirectory&#x27;</span> =&gt; <span class="string">&#x27;/usr/local/nginx/html/data&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbtype&#x27;</span> =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;version&#x27;</span> =&gt; <span class="string">&#x27;23.0.1.2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;overwrite.cli.url&#x27;</span> =&gt; <span class="string">&#x27;https://188.188.3.4&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbname&#x27;</span> =&gt; <span class="string">&#x27;nextcloud_db&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbhost&#x27;</span> =&gt; <span class="string">&#x27;127.0.0.1:3306&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbport&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbtableprefix&#x27;</span> =&gt; <span class="string">&#x27;oc_&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mysql.utf8mb4&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;dbuser&#x27;</span> =&gt; <span class="string">&#x27;yuen&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbpassword&#x27;</span> =&gt; <span class="string">&#x27;Sinath90?&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;installed&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;default_phone_region&#x27;</span> =&gt; <span class="string">&#x27;CN&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>8）问题八：<strong>The PHP OPcache module is not loaded (PHP 的 OPcache 模块未载入)</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.27/ext/opcache</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line"><span class="comment"># make install生成文件路径地址，抄写绝对路径；</span></span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果zend_extension = opcache.so不生效，请填写绝对路径</span></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">zend_extension = opcache.so</span><br><span class="line">opcache.enable=1</span><br><span class="line">opcache.enable_cli=1</span><br><span class="line">opcache.interned_strings_buffer=8</span><br><span class="line">opcache.max_accelerated_files=10000</span><br><span class="line">opcache.memory_consumption=128</span><br><span class="line">opcache.save_comments=1</span><br><span class="line">opcache.revalidate_freq=1</span><br></pre></td></tr></table></figure><p>9）问题九：<strong>该实例缺失了一些推荐的 PHP 模块</strong></p><ul><li>intl</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.27/ext/intl</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=intl</span><br></pre></td></tr></table></figure><ul><li>bcmath</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.27/ext/bcmath</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=bcmath</span><br></pre></td></tr></table></figure><ul><li>gmp</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.27/ext/gmp</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line">Installing header files:          /usr/local/php/include/php/</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=gmp</span><br></pre></td></tr></table></figure><ul><li><p>imagick</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一：先安装 imageMagic，再安装 imagick 扩展</span></span><br><span class="line">$ yum install -y ImageMagick*</span><br><span class="line">$ wget https://pecl.php.net/get/imagick-3.7.0.tgz</span><br><span class="line">$ tar -xf imagick-3.7.0.tgz &amp;&amp; <span class="built_in">cd</span> ./imagick-3.7.0</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line">Installing header files:          /usr/local/php/include/php/</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=imagick</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：编译安装，便于后期维护</span></span><br><span class="line">$ wget https://download.imagemagick.org/ImageMagick/download/ImageMagick-7.1.0-24.tar.gz</span><br><span class="line">$ tar -xf ImageMagick-7.1.0-24.tar.gz &amp;&amp; <span class="built_in">cd</span> ./ImageMagick-7.1.0-24</span><br><span class="line">$ ./configure --prefix=/usr/local/imagemagick</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ /usr/local/imagemagick/bin/convert -version</span><br><span class="line">Version: ImageMagick 7.1.0-24 Q16-HDRI x86_64 2022-02-12 https://imagemagick.org</span><br><span class="line">Copyright: (C) 1999-2021 ImageMagick Studio LLC</span><br><span class="line">License: https://imagemagick.org/script/license.php</span><br><span class="line">Features: Cipher DPC HDRI OpenMP(4.5) </span><br><span class="line">Delegates (built-in): bzlib freetype jng jpeg lzma png xml zip zlib</span><br><span class="line">Compiler: gcc (9.3)</span><br><span class="line"></span><br><span class="line">$ wget https://pecl.php.net/get/imagick-3.7.0.tgz</span><br><span class="line">$ tar -xf imagick-3.7.0.tgz &amp;&amp; <span class="built_in">cd</span> ./imagick-3.7.0</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line">Installing header files:          /usr/local/php/include/php/</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=imagick</span><br></pre></td></tr></table></figure></li><li><p>sodium</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">configure: error: Package requirements (libsodium &gt;= 1.0.8) were not met:</span><br><span class="line">No package <span class="string">&#x27;libsodium&#x27;</span> found</span><br><span class="line">$ wget https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-stable.tar.gz</span><br><span class="line">$ tar -xf libsodium-1.0.18-stable.tar.gz &amp;&amp; <span class="built_in">cd</span> ./libsodium-stable</span><br><span class="line">$ ./configure CC=<span class="string">&quot;gcc -m64&quot;</span> --prefix=/usr --libdir=/usr/lib64</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ ldconfig</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.27/ext/sodium</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=sodium</span><br></pre></td></tr></table></figure><p>所有问题修复完后，刷新即提示”所有检查已通过”</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220215133535661.png" alt="image-20220215133535661"></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nextcloud问题_生成缩略图</title>
      <link href="/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E7%94%9F%E6%88%90%E7%BC%A9%E7%95%A5%E5%9B%BE/"/>
      <url>/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E7%94%9F%E6%88%90%E7%BC%A9%E7%95%A5%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p><strong>预览配置</strong></p><p>Nextcloud 支持图片文件的<strong>预览</strong>、MP3 文件的封面和文本文件。这些选项控制启用和禁用预览以及缩略图大小，有效值为<code>true</code>, 启用<strong>预览</strong>，或 <code>false</code>, 禁用预览</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/html/config/config.php</span><br><span class="line">  <span class="comment">#图片预览</span></span><br><span class="line">  <span class="string">&#x27;enable_previews&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">  //最大预览尺寸</span><br><span class="line">  <span class="string">&#x27;preview_max_x&#x27;</span> =&gt; 2000,  //预览的最大宽度，以像素为单位。值null表示没有限制</span><br><span class="line">  <span class="string">&#x27;preview_max_y&#x27;</span> =&gt; 2000,  //预览的最大高度，以像素为单位。值null表示没有限制</span><br><span class="line">  <span class="string">&#x27;preview_max_filesize_image&#x27;</span> =&gt; 50,  //生成图像预览的最大文件大小,默认50M</span><br><span class="line">  <span class="string">&#x27;preview_max_memory&#x27;</span> =&gt; 128,         //创建图像会分配的内存默认128M</span><br><span class="line">  //图片大小缩放</span><br><span class="line">  <span class="string">&#x27;preview_max_scale_factor&#x27;</span> =&gt; 10,    //禁用缩放改成1，禁用最大比例因子改为null</span><br><span class="line">  <span class="string">&#x27;enabledPreviewProviders&#x27;</span> =&gt;         //开启支持的格式</span><br><span class="line">  array (</span><br><span class="line">    0 =&gt; <span class="string">&#x27;OC\\Preview\\PNG&#x27;</span>,</span><br><span class="line">    1 =&gt; <span class="string">&#x27;OC\\Preview\\JPEG&#x27;</span>,</span><br><span class="line">    2 =&gt; <span class="string">&#x27;OC\\Preview\\GIF&#x27;</span>,</span><br><span class="line">    3 =&gt; <span class="string">&#x27;OC\\Preview\\BMP&#x27;</span>,</span><br><span class="line">    4 =&gt; <span class="string">&#x27;OC\\Preview\\XBitmap&#x27;</span>,</span><br><span class="line">    5 =&gt; <span class="string">&#x27;OC\\Preview\\MP3&#x27;</span>,</span><br><span class="line">    6 =&gt; <span class="string">&#x27;OC\\Preview\\MarkDown&#x27;</span>,</span><br><span class="line">    7 =&gt; <span class="string">&#x27;OC\\Preview\\OpenDocument&#x27;</span>,</span><br><span class="line">    8 =&gt; <span class="string">&#x27;OC\\Preview\\Krita&#x27;</span>,</span><br><span class="line">    9 =&gt; <span class="string">&#x27;OC\\Preview\\HEIC&#x27;</span>,</span><br><span class="line">   10 =&gt; <span class="string">&#x27;OC\\Preview\\Movie&#x27;</span>,</span><br><span class="line">   11 =&gt; <span class="string">&#x27;OC\\Preview\\MP4&#x27;</span>,</span><br><span class="line">   12 =&gt; <span class="string">&#x27;OC\\Preview\\AVI&#x27;</span>,</span><br><span class="line">   13 =&gt; <span class="string">&#x27;OC\\Preview\\MKV&#x27;</span>,</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure><p><strong>手动设置缩略图参数</strong>，与上述内容一致</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预览图像的默认 JPEG 质量设置为“90”</span></span><br><span class="line">occ config:app:<span class="built_in">set</span> preview jpeg_quality --value=<span class="string">&quot;60&quot;</span></span><br><span class="line">//参考内容</span><br><span class="line">sudo -u apache php occ config:app:<span class="built_in">set</span> previewgenerator squareSizes --value=<span class="string">&quot;64 256 1024&quot;</span></span><br><span class="line">sudo -u apache php occ config:app:<span class="built_in">set</span> previewgenerator widthSizes  --value=<span class="string">&quot;64 256&quot;</span></span><br><span class="line">sudo -u apache php occ config:app:<span class="built_in">set</span> previewgenerator heightSizes --value=<span class="string">&quot;64 256&quot;</span></span><br><span class="line">sudo -u apache php occ config:system:<span class="built_in">set</span> preview_max_x --value 2000</span><br><span class="line">sudo -u apache php occ config:system:<span class="built_in">set</span> preview_max_y --value 2000</span><br><span class="line">sudo -u apache php occ config:app:<span class="built_in">set</span> preview jpeg_quality --value=<span class="string">&quot;60&quot;</span></span><br></pre></td></tr></table></figure><p>NextCloud 默认并不会为存储的图片提前生成缩略图，只有当在网页或客户端，访问到相应的图片时，才会在服务器上进行生成。此生成的策略，一定程度上节省了服务器的空间，但在管理上或同时访问下会加载特别慢</p><p><strong>提前生成图片缩略图</strong></p><blockquote><p>注意：此方法是以空间换时间的方式，提前生成好了缩略图，节省了需要用的时候的 cpu 计算时间，但是也占用了磁盘空间 (需要提前做好上述预览配置，减少文件像素大小，不然占用空间较大，占用的空间都好几十个G上涨)</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220216121927079.png" alt="image-20220216121927079"></p><p>1）应用市场安装插件并启用</p><p>2）手动触发程序</p><p>按照提示执行命令，因为 nextcloud 之前安装的权限为 nginx，因此由用户身份 nginx 执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo -u nginx php occ preview:generate-all -vvv</span><br><span class="line">The process control (PCNTL) extensions are required <span class="keyword">in</span> <span class="keyword">case</span> you want to interrupt long running commands - see https://www.php.net/manual/en/book.pcntl.php</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files/Cloud_Data</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files/Cloud_Data/File</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files/Cloud_Data/File/云原生面试题</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files/Cloud_Data/Film</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files/Cloud_Data/Film/兄弟连</span><br><span class="line">2022-02-16T04:13:56+00:00 Generating previews <span class="keyword">for</span> /YuiKuen.Yuen/files/Cloud_Data/Film/兄弟连/Readme.md</span><br><span class="line">2022-02-16T04:13:56+00:00 Generating previews <span class="keyword">for</span> /YuiKuen.Yuen/files/Cloud_Data/Film/兄弟连/兄弟连.jpeg</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files/Cloud_Data/Film/斯巴达克斯</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files/Cloud_Data/Film/斯巴达克斯/前传-斯巴达克斯:诸神竞技场</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files/Cloud_Data/Film/血战太平洋</span><br><span class="line">2022-02-16T04:13:56+00:00 Generating previews <span class="keyword">for</span> /YuiKuen.Yuen/files/Cloud_Data/Film/血战太平洋/Readme.md</span><br><span class="line">2022-02-16T04:13:56+00:00 Generating previews <span class="keyword">for</span> /YuiKuen.Yuen/files/Cloud_Data/Film/血战太平洋/血战太平洋.jpeg</span><br><span class="line">2022-02-16T04:13:56+00:00 Scanning folder /YuiKuen.Yuen/files/Cloud_Data/Photos</span><br><span class="line"></span><br><span class="line">$ sudo -u nginx php /usr/local/nginx/html/occ files:scan --all</span><br><span class="line">The process control (PCNTL) extensions are required <span class="keyword">in</span> <span class="keyword">case</span> you want to interrupt long running commands - see https://www.php.net/manual/en/book.pcntl.php</span><br><span class="line">Starting scan <span class="keyword">for</span> user 1 out of 1 (YuiKuen.Yuen)</span><br><span class="line">+---------+-------+--------------+</span><br><span class="line">| Folders | Files | Elapsed time |</span><br><span class="line">+---------+-------+--------------+</span><br><span class="line">| 29      | 103   | 00:00:00     |</span><br><span class="line">+---------+-------+--------------+</span><br></pre></td></tr></table></figure><p>同时缩略图会被存放在  <code>/usr/local/nginx/html/data/appdata_oc87xfzn8xfn/preview</code> 目录下</p><p>3）定时任务</p><p>当有新图片上传时，插件并不会自动触发，需要自行调用，可以将此命令加入到定时任务中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line">*/15 * * * * sudo -u nginx php /usr/local/nginx/html/occ preview:generate -vvv</span><br><span class="line">*/16 * * * * sudo -u nginx php /usr/local/nginx/html/occ files:scan --all</span><br></pre></td></tr></table></figure><p>4）查看缩略图占用情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/local/nginx/html/data/appdata_oc87xfzn8xfn/preview</span><br><span class="line">$ <span class="built_in">du</span> -h --max-depth=1 .</span><br><span class="line">1.7M./e</span><br><span class="line">2.0M./c</span><br><span class="line">1.9M./1</span><br><span class="line">708K./7</span><br><span class="line">1.1M./9</span><br><span class="line">1.5M./6</span><br><span class="line">1.5M./b</span><br><span class="line">764K./8</span><br><span class="line">2.0M./3</span><br><span class="line">1.3M./a</span><br><span class="line">828K./2</span><br><span class="line">532K./0</span><br><span class="line">256K./5</span><br><span class="line">760K./d</span><br><span class="line">956K./f</span><br><span class="line">488K./4</span><br><span class="line">18M.</span><br></pre></td></tr></table></figure><p><strong>设置视频生成预览图</strong></p><ul><li>安装插件：Preview generator</li><li>安装程序：FFmpeg</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz</span><br><span class="line">$ tar -xf ffmpeg-git-amd64-static.tar.xz &amp;&amp; <span class="built_in">cd</span> ./ffmpeg-git-20220108-amd64-static</span><br><span class="line">$ <span class="built_in">mv</span> ffmpeg ffprobe /usr/bin/</span><br><span class="line"></span><br><span class="line">ffmpeg -version</span><br><span class="line">ffmpeg version N-60236-gffb000fff8-static https://johnvansickle.com/ffmpeg/  Copyright (c) 2000-2022 the FFmpeg developers</span><br><span class="line">built with gcc 8 (Debian 8.3.0-6)</span><br><span class="line">configuration: --enable-gpl --enable-version3 --enable-static --disable-debug --disable-ffplay --disable-indev=sndio --disable-outdev=sndio --cc=gcc --enable-fontconfig --enable-frei0r --enable-gnutls --enable-gmp --enable-libgme --enable-gray --enable-libaom --enable-libfribidi --enable-libass --enable-libvmaf --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librubberband --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libvorbis --enable-libopus --enable-libtheora --enable-libvidstab --enable-libvo-amrwbenc --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libdav1d --enable-libxvid --enable-libzvbi --enable-libzimg</span><br><span class="line">libavutil      57. 18.100 / 57. 18.100</span><br><span class="line">libavcodec     59. 20.100 / 59. 20.100</span><br><span class="line">libavformat    59. 17.100 / 59. 17.100</span><br><span class="line">libavdevice    59.  5.100 / 59.  5.100</span><br><span class="line">libavfilter     8. 25.100 /  8. 25.100</span><br><span class="line">libswscale      6.  5.100 /  6.  5.100</span><br><span class="line">libswresample   4.  4.100 /  4.  4.100</span><br><span class="line">libpostproc    56.  4.100 / 56.  4.100</span><br><span class="line"></span><br><span class="line">$ ffprobe -version</span><br><span class="line">ffprobe version N-60236-gffb000fff8-static https://johnvansickle.com/ffmpeg/  Copyright (c) 2007-2022 the FFmpeg developers</span><br><span class="line">built with gcc 8 (Debian 8.3.0-6)</span><br><span class="line">configuration: --enable-gpl --enable-version3 --enable-static --disable-debug --disable-ffplay --disable-indev=sndio --disable-outdev=sndio --cc=gcc --enable-fontconfig --enable-frei0r --enable-gnutls --enable-gmp --enable-libgme --enable-gray --enable-libaom --enable-libfribidi --enable-libass --enable-libvmaf --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librubberband --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libvorbis --enable-libopus --enable-libtheora --enable-libvidstab --enable-libvo-amrwbenc --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libdav1d --enable-libxvid --enable-libzvbi --enable-libzimg</span><br><span class="line">libavutil      57. 18.100 / 57. 18.100</span><br><span class="line">libavcodec     59. 20.100 / 59. 20.100</span><br><span class="line">libavformat    59. 17.100 / 59. 17.100</span><br><span class="line">libavdevice    59.  5.100 / 59.  5.100</span><br><span class="line">libavfilter     8. 25.100 /  8. 25.100</span><br><span class="line">libswscale      6.  5.100 /  6.  5.100</span><br><span class="line">libswresample   4.  4.100 /  4.  4.100</span><br><span class="line">libpostproc    56.  4.100 / 56.  4.100</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220216143729570.png" alt="image-20220216143729570"></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nextcloud问题_开启外部存储功能</title>
      <link href="/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E5%BC%80%E5%90%AF%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%8A%9F%E8%83%BD/"/>
      <url>/2022/04/07/nextcloud/nextcloud%E9%97%AE%E9%A2%98_%E5%BC%80%E5%90%AF%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>NextCloud 默认是没有开启外部存储的功能，需要手动启用插件</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220215142638710.png" alt="image-20220215142638710"></p><p><strong>设置 – 左侧管理 – 外部存储</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220215150044961.png" alt="image-20220215150044961"></p><blockquote><p>虽然应用已添加成功，但还是提示<code>“smbclient” 未安装。无法挂载 &quot;SMB / CIFS&quot;, &quot;SMB / CIFS 使用 OC 登录信息&quot;。请联系管理员安装。</code></p></blockquote><ul><li>方法一：编译安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://pecl.php.net/get/smbclient-1.0.6.tgz</span><br><span class="line">$ tar -xf smbclient-1.0.6.tgz &amp;&amp; <span class="built_in">cd</span> ./smbclient-1.0.6</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=smbclient</span><br></pre></td></tr></table></figure><ul><li>方法二：通过 PECL 安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install libsmbclient libsmbclient-devel -y</span><br></pre></td></tr></table></figure><p><strong>安装完后，仅仅只是系统底层支持 smb client 了，而 nextcloud 是基于 php 的，还需要通过 PECL 命令来安装 php 对应的 smb 扩展</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pecl install smbclient</span><br><span class="line">$ pecl channel-update pecl.php.net</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=smbclient</span><br></pre></td></tr></table></figure><p>重新刷新浏览器即可使用</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220215155519652.png" alt="image-20220215155519652"></p><p><strong>题外内容</strong>：Docker 方式打开外部存储功能</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">exec</span> -it nextcloud bash</span><br><span class="line">~<span class="comment"># apt install smbclient libsmbclient-dev</span></span><br><span class="line">~<span class="comment"># pecl install smbclient</span></span><br><span class="line">~<span class="comment"># docker-php-ext-enable smbclient</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_LNMP&amp;Nextcloud(旧版)</title>
      <link href="/2022/04/07/nextcloud/centos7%E9%83%A8%E7%BD%B2_LNMP&amp;Nextcloud(%E6%97%A7%E7%89%88)/"/>
      <url>/2022/04/07/nextcloud/centos7%E9%83%A8%E7%BD%B2_LNMP&amp;Nextcloud(%E6%97%A7%E7%89%88)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>~~本文为个人原创，因某度盘的限速行为，所以才会想着自行搭建网盘使用。选择 NextCloud 主要是有 App 端，并且可以使用公司公网 IP，哈哈~~~</p><p><del>文中的环境可能因人而异，所以如搭建不成功的情况请检查个人的 Nginx 和 Php 环境，注意查看报错信息和日志记录！对于环境配置问题，原本是采用 Centos 7 3.10.0-1160.2.2.el7.x86_64 + Nginx 1.18 + Mysql 5.7.25 + Php 7.2，但最新版本 Nextcloud 20 版本提示已不再支持 php 7.2了，因此更正成 php 7.4，以下内容仅供参考；</del></p><p>本文为 20 年的旧档，以下教程仅供参考；</p></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>设置 Firewalld 和 SELinux</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ setenforce 0                                    </span><br><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --permanent --add-service=http</span><br><span class="line">$ firewall-cmd --permanent --add-service=https</span><br><span class="line">$ firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h3><ol><li>下载依赖并编译安装</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install pcre pcre-devel zlib zlib-devel openssl openssl-devel perl*</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/src</span><br><span class="line">$ wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line">$ tar -zxvf nginx-1.18.0.tar.gz &amp;&amp; <span class="built_in">cd</span> nginx-1.18.0</span><br><span class="line">$ ./configure --prefix=/usr/local/nginx --with-http_perl_module --with-http_stub_status_module --with-http_ssl_module --with-openssl-opt=<span class="string">&quot;enable-tlsext&quot;</span></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ol start="2"><li>创建权限用户</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ groupadd nginx</span><br><span class="line">$ useradd -M -g nginx -s /sbin/nologin nginx</span><br><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">user nginx nginx;</span><br></pre></td></tr></table></figure><ol start="3"><li>设置自启动服务</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> nginx.service</span><br><span class="line">$ systemctl start nginx.service</span><br></pre></td></tr></table></figure><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><ol><li>清除其他数据库信息</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa mysql</span><br><span class="line">$ rpm -qa | grep mariadb</span><br><span class="line">$ rpm -e --nodeps 文件名</span><br></pre></td></tr></table></figure><ol start="2"><li>安装环境依赖包并编译安装</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install wget cmake gcc gcc-c++ ncurses numactl ncurses-devel libaio-devel openssl openssl-devel libaio</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/src/</span><br><span class="line">$ wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">$ tar -zxvf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz -C /usr/local/</span><br><span class="line">$ <span class="built_in">mv</span> mysql-5.7.25-linux-glibc2.12-x86_64/ mysql/</span><br></pre></td></tr></table></figure><ol start="3"><li>创建权限用户并修改配置</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ groupadd mysql</span><br><span class="line">$ useradd -r -g mysql mysql</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/mysql/</span><br><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql ./</span><br><span class="line">$ <span class="built_in">cp</span> /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">$ vim /etc/init.d/mysql</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line"></span><br><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[client]</span><br><span class="line">port = 3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">port = 3306</span><br><span class="line">sort_buffer_size=16M</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_storage_engine = InnoDB</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/mysql/bin/</span><br><span class="line">$ ./mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line"><span class="comment"># 执行完毕后会自动生成默认的密码在执行记录中，注意复制出来</span></span><br><span class="line">$ service mysql start</span><br></pre></td></tr></table></figure><ol start="4"><li>修改默认 MySQL 密码及访问权限</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入mysql/bin目录下执行</span><br><span class="line">$ ./mysql -uroot -p</span><br><span class="line">Enter password:输入默认的临时密码</span><br><span class="line">set password=password(&#x27;新密码&#x27;);</span><br><span class="line">grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;访问密码&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><ol start="5"><li>设置开机启动和环境变量</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chkconfig --list</span><br><span class="line">$ chkconfig --add mysql</span><br><span class="line">$ chkconfig mysql on</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">$ systemctl status mysql.service</span><br><span class="line">$ systemctl restart mysql.service</span><br></pre></td></tr></table></figure><h3 id="PHP-安装"><a href="#PHP-安装" class="headerlink" title="PHP 安装"></a>PHP 安装</h3><ol><li>创建权限用户</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ groupadd php</span><br><span class="line">$ useradd -M -g php -s /sbin/nologin php</span><br></pre></td></tr></table></figure><ol start="2"><li>下载依赖并编译安装</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install libxml2-devel sqlite-devel libcurl-devel oniguruma-devel libpng-devel libjpeg-devel freetype-devel libzip-devel openssl-devel</span><br><span class="line"><span class="comment"># No package oniguruma-devel available.导致下述编译失败，提前补充依赖环境</span></span><br><span class="line">configure: error: Package requirements (oniguruma) were not met:</span><br><span class="line">No package <span class="string">&#x27;oniguruma&#x27;</span> found</span><br><span class="line">$ yum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-6.7.0-1.el7.x86_64.rpm</span><br><span class="line">$ yum -y install http://down.24kplus.com/linux/oniguruma/oniguruma-devel-6.7.0-1.el7.x86_64.rpm</span><br><span class="line">--------------------------------------------------------------------------------------------------</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/src</span><br><span class="line">$ wget https://www.php.net/distributions/php-7.4.13.tar.gz</span><br><span class="line">$ tar -zxvf php-7.4.13 &amp;&amp; <span class="built_in">cd</span> php-7.4.13</span><br><span class="line">$ ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mhash --with-openssl --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd --with-iconv --with-zlib --enable-inline-optimization --disable-debug --disable-rpath --enable-shared --enable-bcmath --enable-shmop --enable-sysvsem --enable-gd --with-jpeg --with-freetype --enable-mbregex --enable-mbstring --enable-ftp --enable-pcntl --enable-sockets --enable-soap --without-pear --with-gettext --enable-session --with-curl  --enable-opcache --enable-fpm --with-fpm-user=php --with-fpm-group=php --without-gdbm --enable-fast-install --disable-fileinfo</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><ol start="3"><li>创建配置文件</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制相关配置文件到php安装路径</span></span><br><span class="line">$ <span class="built_in">cp</span> /usr/local/src/php-7.4.13/sapi/fpm/init.d.php-fpm /usr/local/php/</span><br><span class="line">$ <span class="built_in">cp</span> /usr/local/src/php-7.4.13/php.ini-production /usr/local/php/etc/php.ini</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建php-fpm.conf配置文件</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/php/etc</span><br><span class="line">php-fpm.conf.default  php-fpm.d  php.ini</span><br><span class="line">$ <span class="built_in">cp</span> php-fpm.conf.default php-fpm.conf</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/php/etc/php-fpm.d</span><br><span class="line">$ <span class="built_in">cp</span> www.conf.default www.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动php-fpm测试启动脚本</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/php</span><br><span class="line">$ bash init.d.php-fpm start</span><br></pre></td></tr></table></figure><ol start="5"><li>创建自启服务</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/php-fpm.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=php-fpm</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/php/sbin/php-fpm</span><br><span class="line">PrivateTmp=True</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因之前已启动过php-fpm，现9000端口被占用无法启动服务，杀死进程再启动服务</span></span><br><span class="line">$ netstat -lntup | grep 9000</span><br><span class="line">$ killall php-fpm</span><br><span class="line">$ systemctl start php-fpm.service</span><br><span class="line">$ systemctl <span class="built_in">enable</span> php-fpm.service</span><br></pre></td></tr></table></figure><ol start="6"><li>环境变量配置</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># php</span></span><br><span class="line"><span class="built_in">export</span> PHP_HOME=/usr/local/php</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PHP_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查php-fpm是否正常安装</span></span><br><span class="line">$ php -v</span><br><span class="line">PHP 7.4.13 (cli) (built: Dec  8 2020 10:07:16) ( NTS )</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v3.4.0, Copyright (c) Zend Technologies</span><br></pre></td></tr></table></figure><h3 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h3><ol><li>确认编译和依赖环境</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -v</span><br><span class="line"><span class="comment"># 6以上要求gcc版本号在5以上</span></span><br><span class="line"><span class="comment"># Centos7 gcc版本默认4.8.3，Red Hat 为了软件的稳定和版本支持，yum 上版本也是4.8.3，所以无法使用yum进行软件更新，所以使用scl。</span></span><br><span class="line"><span class="comment"># scl软件集(Software Collections),是为了给 RHEL/CentOS 用户提供一种以方便、安全地安装和使用应用程序和运行时环境的多个（而且可能是更新的）版本的方式，同时避免把系统搞乱</span></span><br><span class="line">$ yum -y install centos-release-scl scl-utils-build</span><br><span class="line">$ yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line">$ scl <span class="built_in">enable</span> devtoolset-9 bash</span><br><span class="line"><span class="comment"># 注意：scl命令启用只是临时的，退出xshell或者重启就会恢复到原来的gcc版本。如果要长期生效的话，执行如下：</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.redis.io/releases/redis-6.0.9.tar.gz</span><br><span class="line">$ tar -zxvf redis-6.0.9.tar.gz &amp;&amp; <span class="built_in">cd</span> redis-6.0.9</span><br><span class="line">$ make &amp;&amp; <span class="built_in">cd</span> /usr/local/src/redis-6.0.9/src</span><br><span class="line">$ make install PREFIX=/usr/local/redis</span><br><span class="line">$ <span class="built_in">mkdir</span> /usr/local/redis/etc &amp;&amp; <span class="built_in">cd</span> /usr/local/src/redis</span><br><span class="line">$ <span class="built_in">cp</span> redis.conf /usr/local/redis/etc/</span><br></pre></td></tr></table></figure><ol start="2"><li>创建启动服务</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/redis.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># Type=forking</span></span><br><span class="line">PIDFile=/var/run/redis_6379.pid</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl start redis</span><br><span class="line">$ systemctl <span class="built_in">enable</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 命令软链接</span></span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/local/redis/bin/redis-cli /usr/bin/redis</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 异常处理</span></span><br><span class="line">WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is <span class="built_in">set</span> to the lower value of 128.</span><br><span class="line">解决方法：将/proc/sys/net/core/somaxconn值设置为redis配置文件中的tcp-baklog值一致即可</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;511&#x27;</span> &gt; /proc/sys/net/core/somaxconn</span><br><span class="line"><span class="comment"># 上述为临时，下述为永久处理</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;net.core.somaxconn= 1024&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">$ sysctl -p</span><br><span class="line"></span><br><span class="line">WARNING overcommit_memory is <span class="built_in">set</span> to 0! Background save may fail under low memory condition. To fix this issue add <span class="string">&#x27;vm.overcommit_memory = 1&#x27;</span> to /etc/sysctl...is to take effect.</span><br><span class="line">原因分析：overcommit_memory设置为0，在内存不足的情况下，后台保存会失败，要解决这个问题需要将此值改为1，然后重新加载，使其生效</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;vm.overcommit_memory=1&#x27;</span> &gt;&gt; /etc/sysctl.conf </span><br><span class="line">$ sysctl -p</span><br><span class="line"></span><br><span class="line">WARNING you have Transparent Huge Pages (THP) support enabled <span class="keyword">in</span> your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the <span class="built_in">command</span> .</span><br><span class="line">警告：您的内核中启用了透明的大页面（THP）支持。这将创建与ReDIS的延迟和内存使用问题。若要修复此问题，请运行命令“EngEng/mS/mL/mM/ExpListNo.HugPoIP/启用”为root，并将其添加到您的/etc/rc.local，以便在重新启动后保留设置。在禁用THP之后，必须重新启动redis。</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;never&#x27;</span> &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="comment"># 上述为临时，下述为永久处理,将如下加入到/etc/rc.local</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/enabled; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="Nextcloud-安装"><a href="#Nextcloud-安装" class="headerlink" title="Nextcloud 安装"></a>Nextcloud 安装</h3><ol><li>配置 php-fpm</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/php/etc/php-fpm.d/www.conf</span><br><span class="line"><span class="comment"># 去掉下面几行注释</span></span><br><span class="line"><span class="built_in">env</span>[HOSTNAME] = <span class="variable">$HOSTNAME</span>                     </span><br><span class="line"><span class="built_in">env</span>[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class="line"><span class="built_in">env</span>[TMP] = /tmp</span><br><span class="line"><span class="built_in">env</span>[TMPDIR] = /tmp</span><br><span class="line"><span class="built_in">env</span>[TEMP] = /tmp</span><br></pre></td></tr></table></figure><ol start="2"><li>为 Nextcloud 创建相应的用户和数据库。</li></ol><p>例如数据库为 nextcloud_db，用户为 nextclouduser，密码为 nextcloudpasswd：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot -p</span><br><span class="line">mysql&gt; create database nextcloud_db;         </span><br><span class="line">mysql&gt; create user nextclouduser@localhost identified by &#x27;nextcloudpasswd&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on nextcloud_db.* to nextclouduser@localhost identified by &#x27;nextcloudpasswd&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on *.* to &#x27;nextclouduser&#x27;@&#x27;%&#x27; identified by &#x27;nextcloudpasswd&#x27;;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure><ol start="3"><li>为 Nextcloud 添加 ssl 证书</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 没有就创建一个</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/nginx/cert/         </span><br><span class="line">把ssl证书存放到该目录下</span><br><span class="line">$ openssl req -new -x509 -days 365 -nodes -out ./nextcloud.crt -keyout ./nextcloud.key</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">.....................................................................................................................+++</span><br><span class="line">...................................................................................................+++</span><br><span class="line">writing new private key to <span class="string">&#x27;./nextcloud.key&#x27;</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN                                    <span class="comment"># 国家</span></span><br><span class="line">State or Province Name (full name) []:GuangDong                         <span class="comment"># 省份</span></span><br><span class="line">Locality Name (eg, city) [Default City]:DG                              <span class="comment"># 地区</span></span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:CompanyName       <span class="comment"># 公司名</span></span><br><span class="line">Organizational Unit Name (eg, section) []:IT                            <span class="comment"># 部门</span></span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:Cloud          # 域名</span></span><br><span class="line"><span class="string">Email Address []:yuikuen.yuen@hotmail.com                               # 邮箱</span></span><br><span class="line"><span class="string">[root@Cloud cert]# ll</span></span><br><span class="line"><span class="string">total 8</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 1399 Dec  4 09:48 nextcloud.crt</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 1704 Dec  4 09:48 nextcloud.key</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">然后将证书文件的权限设置为660</span></span><br><span class="line"><span class="string">$ chmod 600 /usr/local/nginx/cert/*</span></span><br><span class="line"><span class="string">$ ll</span></span><br><span class="line"><span class="string">total 8</span></span><br><span class="line"><span class="string">-rw-------. 1 root root 1399 Dec  4 09:48 nextcloud.crt</span></span><br><span class="line"><span class="string">-rw-------. 1 root root 1704 Dec  4 09:48 nextcloud.key</span></span><br></pre></td></tr></table></figure><ol start="4"><li>下载并安装 Nextcloud</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.nextcloud.com/server/releases/nextcloud-20.0.3.zip</span><br><span class="line">$ unzip nextcloud-20.0.3.zip</span><br><span class="line">$ <span class="built_in">mv</span> nextcloud /usr/local/nginx/html/nextcloud</span><br></pre></td></tr></table></figure><ol start="5"><li>修改配置并创建配置文件</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">location / &#123;</span><br><span class="line">    root html;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消注释并开启支持php</span></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root html;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后增加vhosts目录</span></span><br><span class="line">include /usr/local/nginx/vhosts/*.conf;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/vhosts/nextcloud.conf</span><br><span class="line">upstream  php-handler &#123;</span><br><span class="line">    server 127.0.0.1:9000;</span><br><span class="line">    <span class="comment">#server unix:/var/run/php5-fpm.sock;</span></span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    <span class="comment"># listen 80;</span></span><br><span class="line">    <span class="comment"># server_name 你的域名;</span></span><br><span class="line">    <span class="comment"># enforce https</span></span><br><span class="line">    rewrite ^(.*)$ https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /usr/local/nginx/cert/nextcloud.crt;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/cert/nextcloud.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add headers to serve security related headers</span></span><br><span class="line">    <span class="comment"># Before enabling Strict-Transport-Security headers please read into this</span></span><br><span class="line">    <span class="comment"># topic first.</span></span><br><span class="line">    add_header Strict-Transport-Security <span class="string">&quot;max-age=15768000;</span></span><br><span class="line"><span class="string">    includeSubDomains; preload;&quot;</span>;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    add_header X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">    add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">    add_header X-Robots-Tag none;</span><br><span class="line">    add_header X-Download-Options noopen;</span><br><span class="line">    add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Path to the root of your installation</span></span><br><span class="line">    root /usr/local/nginx/html/nextcloud/;</span><br><span class="line">    </span><br><span class="line">    location = /robots.txt &#123;</span><br><span class="line">        allow all;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># The following 2 rules are only needed for the user_webfinger app.</span></span><br><span class="line">    <span class="comment"># Uncomment it if you&#x27;re planning to use this app.</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span></span><br><span class="line">    <span class="comment">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json</span></span><br><span class="line">    <span class="comment"># last;  </span></span><br><span class="line">    </span><br><span class="line">    location = /.well-known/carddav &#123;</span><br><span class="line">      <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://<span class="variable">$host</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /.well-known/caldav &#123;</span><br><span class="line">      <span class="built_in">return</span> 301 <span class="variable">$scheme</span>://<span class="variable">$host</span>/remote.php/dav;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># set max upload size</span></span><br><span class="line">    client_max_body_size 1024M;   <span class="comment"># 上传文件最大限制，php.ini中也要修改。</span></span><br><span class="line">    fastcgi_buffers 64 4K;    </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Disable gzip to avoid the removal of the ETag header    </span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_comp_level 4;</span><br><span class="line">    gzip_min_length 256;</span><br><span class="line">    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;</span><br><span class="line">    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Uncomment if your server is build with the ngx_pagespeed module</span></span><br><span class="line">    <span class="comment"># This module is currently not supported.</span></span><br><span class="line">    <span class="comment">#pagespeed off;</span></span><br><span class="line">    error_page 403 /core/templates/403.php;</span><br><span class="line">    error_page 404 /core/templates/404.php;    </span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        rewrite ^ /index.php<span class="variable">$uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) &#123;</span><br><span class="line">        deny all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) &#123;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.*)$;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        fastcgi_param PATH_INFO <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">        fastcgi_param HTTPS on;</span><br><span class="line">        <span class="comment">#Avoid sending the security headers twice</span></span><br><span class="line">        fastcgi_param modHeadersAvailable <span class="literal">true</span>;</span><br><span class="line">        fastcgi_param front_controller_active <span class="literal">true</span>;</span><br><span class="line">        fastcgi_pass php-handler;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_request_buffering off;</span><br><span class="line">        fastcgi_read_timeout 150;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ ^/(?:updater|ocs-provider)(?:$|/) &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span>/ =404;</span><br><span class="line">        index index.php;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adding the cache control header for js and css files</span></span><br><span class="line">    <span class="comment"># Make sure it is BELOW the PHP block</span></span><br><span class="line">    location ~* \.(?:css|js)$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php$uri$is_args<span class="variable">$args</span>;</span><br><span class="line">        add_header Cache-Control <span class="string">&quot;public, max-age=7200&quot;</span>;</span><br><span class="line">        <span class="comment"># Add headers to serve security related headers (It is intended to</span></span><br><span class="line">        <span class="comment"># have those duplicated to the ones above)</span></span><br><span class="line">        <span class="comment"># Before enabling Strict-Transport-Security headers please read into</span></span><br><span class="line">        <span class="comment"># this topic first.</span></span><br><span class="line">        add_header Strict-Transport-Security <span class="string">&quot;max-age=15768000;includeSubDomains; preload;&quot;</span>;</span><br><span class="line">        add_header X-Content-Type-Options nosniff;</span><br><span class="line">        add_header X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>;</span><br><span class="line">        add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">        add_header X-Robots-Tag none;</span><br><span class="line">        add_header X-Download-Options noopen;</span><br><span class="line">        add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg)$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php$uri$is_args<span class="variable">$args</span>;</span><br><span class="line">        <span class="comment"># Optional: Don&#x27;t log access to other assets</span></span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题集"><a href="#问题集" class="headerlink" title="问题集"></a>问题集</h3><p><strong>报错1：未找到 PHP zip 模块未安装</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.13/ext/zip/</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">Configuring <span class="keyword">for</span>:</span><br><span class="line">PHP Api Version:         20190902</span><br><span class="line">Zend Module Api No:      20190902</span><br><span class="line">Zend Extension Api No:   320190902</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line"><span class="comment"># php.ini配置文件增加zip模块</span></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=zip</span><br></pre></td></tr></table></figure><p><strong>报错2：Zip 编译 &#x2F;usr&#x2F;local&#x2F;php&#x2F;bin&#x2F;phpize 时报 Libzip、Cmake 版本过旧</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CMake Error at CMakeLists.txt:4 (CMAKE_MINIMUM_REQUIRED):</span><br><span class="line">  CMake 3.0.2 or higher is required.  You are running version 2.8.12.2</span><br><span class="line">-- Configuring incomplete, errors occurred!</span><br><span class="line"><span class="comment"># 卸载旧版本再下载新版本安装</span></span><br><span class="line">$ yum remove cmake -y</span><br><span class="line">$ wget https://cmake.org/files/v3.19/cmake-3.19.0.tar.gz</span><br><span class="line">$ tar -zxvf cmake-3.19.0.tar.gz &amp;&amp; <span class="built_in">cd</span> cmake-3.19.0</span><br><span class="line">$ ./bootstrap</span><br><span class="line">$ gmake &amp;&amp; gmake install</span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/local/bin/cmake /usr/bin/</span><br><span class="line">-----------------------------------------------------------------------------------------------------</span><br><span class="line">configure: error: Package requirements (libzip &gt;= 0.11 libzip != 1.3.1 libzip != 1.7.0) were not met:</span><br><span class="line">Requested <span class="string">&#x27;libzip &gt;= 0.11&#x27;</span> but version of libzip is 0.10.1</span><br><span class="line">Consider adjusting the PKG_CONFIG_PATH environment variable <span class="keyword">if</span> you</span><br><span class="line">installed software <span class="keyword">in</span> a non-standard prefix.</span><br><span class="line">Alternatively, you may <span class="built_in">set</span> the environment variables LIBZIP_CFLAGS</span><br><span class="line">and LIBZIP_LIBS to avoid the need to call pkg-config.</span><br><span class="line">See the pkg-config man page <span class="keyword">for</span> more details.</span><br><span class="line"><span class="comment"># 卸载旧版本再下载新版本安装</span></span><br><span class="line">$ yum remove libzip -y</span><br><span class="line">$ wget https://libzip.org/download/libzip-1.7.3.tar.gz</span><br><span class="line">$ tar -zxvf libzip-1.7.3.tar.gz &amp;&amp; <span class="built_in">cd</span> libzip-1.7.3</span><br><span class="line">$ <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build \</span><br><span class="line">&amp;&amp; cmake -DCMAKE_INSTALL_PREFIX=/usr .. \</span><br><span class="line">&amp;&amp; make \</span><br><span class="line">&amp;&amp; sudo make install</span><br><span class="line"><span class="comment"># 或者使用下列方法</span></span><br><span class="line">rpm -Uvh http://rpms.remirepo.net/enterprise/remi-release-7.rpm </span><br><span class="line">yum —enablerepo=remi install libzip5-devel </span><br></pre></td></tr></table></figure><p><strong>报错3：登录无限循环或报、服务器不能完成您的请求、内部服务器错误不能完成请求</strong></p><p>请求的 ID 会不断改变，查询 logo 也没有太多有用的信息，基本是 php session 权限的问题，首先检查 php-fpm 的设置，确保 user 和 group 和 web 服务器一致；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/php/etc/php-fpm.d/www.conf</span><br><span class="line">; Unix user/group of processes</span><br><span class="line">; Note: The user is mandatory. If the group is not <span class="built_in">set</span>, the default user<span class="string">&#x27;s group</span></span><br><span class="line"><span class="string">;       will be used.</span></span><br><span class="line"><span class="string"># 根据客户端替换</span></span><br><span class="line"><span class="string">user = nginx</span></span><br><span class="line"><span class="string">group = nginx</span></span><br><span class="line"><span class="string">$ chown -R root:nginx /usr/local/php/include/php/ext/session/</span></span><br><span class="line"><span class="string">$ chown nginx:nginx -R /usr/local/nginx/html/nextcloud</span></span><br><span class="line"><span class="string">$ systemctl restart php-fpm</span></span><br><span class="line"><span class="string"># 如没有作用或你不知道web服务器用户是什么，可以试下下述命令再清空浏览器Cookie，就可以登陆成功；</span></span><br><span class="line"><span class="string">$ chmod -R 777 /usr/local/php/include/php/ext/session/</span></span><br></pre></td></tr></table></figure><p><strong>报错4：以下内容为无论是 Php 7.2 或 Php 7.4 在 ‘安全与设置警告’ 时都可能出现的情况；因为在安装的过程中，无报错并且也成功搭建使用，修正过程较为繁杂，在此记录以备使用。(Nextcloud 最新版本使用 Php 7.2 时提示 PHP 版本不再支持并且使用 cron 任务时总提醒有错误，因此才重新采用 Php 7.4 再部署)</strong></p><blockquote><p>关于 phpsize：<a href="https://www.php.net/manual/en/install.pecl.phpize.php">https://www.php.net/manual/en/install.pecl.phpize.php</a> 是用来扩展 php 扩展模块的，通过 phpize 可以建立 php的外挂模块，比如你想在原来编译好的 php 中加入 memcached 或者 ImageMagick 等扩展模块，可以使用 phpize。</p></blockquote><p><strong>报错5：PHP 内存限制低于建议值 512MB。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ./etc/php.ini</span><br><span class="line"><span class="comment"># 找到 memory_limit = 128M，将128M修改为512M，数值按内存情况及需要而定，保存退出</span></span><br><span class="line">; Maximum amount of memory a script may consume (128MB)</span><br><span class="line">; http://php.net/memory-limit</span><br><span class="line">memory_limit = 512M</span><br></pre></td></tr></table></figure><p><strong>报错6：PHP 的安装似乎不正确，无法访问系统环境变量。getenv(“PATH”) 函数测试返回了一个空值</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># php</span></span><br><span class="line"><span class="built_in">export</span> PHP_HOME=/usr/local/php</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PHP_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><strong>报错7：未找到 PHP 的 “fileinfo” 模块</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.13/ext/fileinfo/</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=fileinfo</span><br></pre></td></tr></table></figure><p><strong>报错8：PHP 的 OPcache 模块未载入</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.13/ext/opcache</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Build complete.</span><br><span class="line">Don<span class="string">&#x27;t forget to run &#x27;</span>make <span class="built_in">test</span><span class="string">&#x27;.</span></span><br><span class="line"><span class="string">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20170718/</span></span><br><span class="line"><span class="string"># make install生成文件路径地址，如果不列不生效，zend_extension抄写绝对路径；</span></span><br><span class="line"><span class="string">$ vim /usr/local/php/etc/php.ini</span></span><br><span class="line"><span class="string">[opcache]</span></span><br><span class="line"><span class="string">zend_extension = opcache.so</span></span><br><span class="line"><span class="string">opcache.enable=1</span></span><br><span class="line"><span class="string">opcache.enable_cli=1</span></span><br><span class="line"><span class="string">opcache.interned_strings_buffer=8</span></span><br><span class="line"><span class="string">opcache.max_accelerated_files=10000</span></span><br><span class="line"><span class="string">opcache.memory_consumption=128</span></span><br><span class="line"><span class="string">opcache.save_comments=1</span></span><br><span class="line"><span class="string">opcache.revalidate_freq=1</span></span><br></pre></td></tr></table></figure><p><strong>报错9：PHP 的 intl 模块未载入</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.13/ext/intl</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">checking <span class="keyword">for</span> icu-config... no         </span><br><span class="line">not found</span><br><span class="line">configure: error: Unable to detect ICU prefix or no failed. Please verify ICU install prefix and make sure icu-config works.</span><br><span class="line"><span class="comment"># 报错缺少依赖，安装后再执行上述编译</span></span><br><span class="line">$ yum install libicu-devel -y</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=intl</span><br></pre></td></tr></table></figure><p><strong>报错10：PHP 的 gmp 模块未载入</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.13/ext/gmp</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">configure: WARNING: You will need re2c 0.13.4 or later <span class="keyword">if</span> you want to regenerate PHP parsers.</span><br><span class="line">checking <span class="keyword">for</span> gawk... gawk</span><br><span class="line">checking <span class="keyword">for</span> GNU MP support... <span class="built_in">yes</span>, shared</span><br><span class="line">configure: error: Unable to locate gmp.h</span><br><span class="line"><span class="comment"># 缺少依赖并且re2c版本过旧,更新后重新执行编译安装</span></span><br><span class="line">$ yum install -y gmp-devel</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/skvadrik/re2c.git re2c</span><br><span class="line">$ <span class="built_in">cd</span> re2c</span><br><span class="line">$ <span class="built_in">mkdir</span> -p m4</span><br><span class="line">$ ./autogen.sh &amp;&amp; ./configure --prefix=/usr &amp;&amp; make &amp;&amp; make install</span><br><span class="line">$ re2c -v</span><br><span class="line">re2c 2.0.3</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=gmp</span><br></pre></td></tr></table></figure><p><strong>报错11：PHP 的 imagick 模块未载入</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先安装imageMagic，再安装imagick扩展</span></span><br><span class="line">$ yum install -y ImageMagick*</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"><span class="comment"># 上述命令快捷安装，但建议下述方法，便于以后维护图片存放地方</span></span><br><span class="line">$ wget http://www.imagemagick.org/download/ImageMagick.tar.gz</span><br><span class="line">$ tar -zxvf ImageMagick.tar.gz</span><br><span class="line">$ ./configure --prefix=/usr/local/imagemagick</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ /usr/local/imagemagick/bin/convert -version</span><br><span class="line"></span><br><span class="line">$ wget https://pecl.php.net/get/imagick-3.4.4.tgz</span><br><span class="line">$ tar -zxvf imagick-3.4.4.tgz &amp;&amp; <span class="built_in">cd</span> imagick-3.4.4</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=imagick</span><br></pre></td></tr></table></figure><p><strong>报错12：内存缓存未配置，为了提升使用体验，请尽量配置内存缓存</strong></p><p>“Internal Server Error”错误，原因在于设置了 Redis ，但未安装 php-redis 扩展</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/phpredis/phpredis/archive/5.3.2.tar.gz -O phpredis-5.3.2.tar.gz</span><br><span class="line">$ tar -zxvf phpredis-5.3.2.tar.gz &amp;&amp; <span class="built_in">cd</span> phpredis-5.3.2</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=redis</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/html/nextcloud/config/config.php</span><br><span class="line">&lt;?php</span><br><span class="line"><span class="variable">$CONFIG</span> = array (</span><br><span class="line">  <span class="string">&#x27;instanceid&#x27;</span> =&gt; <span class="string">&#x27;oc3qw04mfgb7&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;passwordsalt&#x27;</span> =&gt; <span class="string">&#x27;eaM689LAzlEexqqvrVNVbaT7XYqSj/&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;secret&#x27;</span> =&gt; <span class="string">&#x27;j00erJTSl4wEd8mVLOOyomNLZKma2RP8iYSSylPexWMtxaLR&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;trusted_domains&#x27;</span> =&gt;</span><br><span class="line">  array (</span><br><span class="line">    0 =&gt; <span class="string">&#x27;188.188.4.44&#x27;</span>,</span><br><span class="line">  ),</span><br><span class="line"><span class="comment"># 增加下述Redis内容</span></span><br><span class="line">  <span class="string">&#x27;memcache.local&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcache.distributed&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;memcache.locking&#x27;</span> =&gt; <span class="string">&#x27;\OC\Memcache\Redis&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;redis&#x27;</span> =&gt; array(</span><br><span class="line">     <span class="string">&#x27;host&#x27;</span> =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;port&#x27;</span> =&gt; 6379,</span><br><span class="line">     ),</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;datadirectory&#x27;</span> =&gt; <span class="string">&#x27;/home/cloud&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbtype&#x27;</span> =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;version&#x27;</span> =&gt; <span class="string">&#x27;20.0.2.2&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;overwrite.cli.url&#x27;</span> =&gt; <span class="string">&#x27;http://188.188.4.44/nextcloud&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbname&#x27;</span> =&gt; <span class="string">&#x27;nextcloud_db&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbhost&#x27;</span> =&gt; <span class="string">&#x27;127.0.0.1:3306&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbport&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbtableprefix&#x27;</span> =&gt; <span class="string">&#x27;oc_&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;mysql.utf8mb4&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&#x27;dbuser&#x27;</span> =&gt; <span class="string">&#x27;nextclouduser&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;dbpassword&#x27;</span> =&gt; <span class="string">&#x27;Sinath90?&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;installed&#x27;</span> =&gt; <span class="literal">true</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>报错13：HTTP 头 “Referrer-Policy” 未设置成 “no-referrer”，”no-referrer-when-downgrade”，”strict-origin”，”strict-origin-when-cross-origin” 或 “same-origin”。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/vhosts/nextcloud.conf</span><br><span class="line">...</span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /usr/local/nginx/cert/nextcloud.crt;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/cert/nextcloud.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Add headers to serve security related headers</span></span><br><span class="line">    <span class="comment"># Before enabling Strict-Transport-Security headers please read into this</span></span><br><span class="line">    <span class="comment"># topic first.</span></span><br><span class="line">    add_header Strict-Transport-Security <span class="string">&quot;max-age=15768000;</span></span><br><span class="line"><span class="string">    includeSubDomains; preload;&quot;</span>;</span><br><span class="line">    add_header X-Content-Type-Options nosniff;</span><br><span class="line">    add_header X-Frame-Options <span class="string">&quot;SAMEORIGIN&quot;</span>; </span><br><span class="line">    add_header X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">    add_header X-Robots-Tag none;</span><br><span class="line">    add_header X-Download-Options noopen;</span><br><span class="line">    add_header X-Permitted-Cross-Domain-Policies none;</span><br><span class="line">    add_header Referrer-Policy <span class="string">&quot;no-referrer&quot;</span>;   <span class="comment"># 增加此行配置</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>报错14：Cron 任务</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -u nginx -e</span><br><span class="line"><span class="comment"># 注意使用客户用户执行方可生效</span></span><br><span class="line">*/1  *  *  *  * sudo -u nginx php -f /usr/local/nginx/html/nextcloud/cron.php</span><br><span class="line">$ systemctl restart crond</span><br><span class="line">$ systemctl status crond</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看‘安全与设置警告’和‘后台任务’发现经常未正常执行，查看日志后发现执行报错</span></span><br><span class="line">(nginx) CMD (sudo -u nginx php -f /usr/local/nginx/html/nextcloud/cron.php)</span><br><span class="line">(CRON) ERROR <span class="built_in">chdir</span> failed (/home/nginx): No such file or directory</span><br><span class="line">(sudo) ERROR (getpwnam() failed)</span><br><span class="line">原因使用 nginx 这种 nologin 用户执行定时任务会报错，只需要在home目录下，创建个 nginx 文件夹就 OK 了；</span><br><span class="line">$ <span class="built_in">mkdir</span> /home/nginx</span><br><span class="line">$ <span class="built_in">chown</span> nginx:nginx /home/www</span><br><span class="line">$ ll /home/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用crontab来执行php，是不走apache,nginx，所以$_SERVER,$_ENV这类变量根本用不了</span></span><br><span class="line">(nginx) CMD (php -f /usr/local/nginx/html/nextcloud/cron.php)</span><br><span class="line">(nginx) CMDOUT (/bin/bash: php: <span class="built_in">command</span> not found)</span><br><span class="line">$ vim /etc/crontab</span><br><span class="line">*/1  *  *  *  * nginx /usr/local/php/bin/php -f /usr/local/nginx/html/nextcloud/cron.php &gt;&gt; /home/nginx/cron.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务成功、失败都会有提示mail,但postfix异常会导致报错，可采取删除解决</span></span><br><span class="line">$ systemctl stop postfix</span><br><span class="line">$ yum remove postfix</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_LNMP&amp;Nextcloud(新版)</title>
      <link href="/2022/04/07/nextcloud/centos7%E9%83%A8%E7%BD%B2_LNMP&amp;Nextcloud(%E6%96%B0%E7%89%88)/"/>
      <url>/2022/04/07/nextcloud/centos7%E9%83%A8%E7%BD%B2_LNMP&amp;Nextcloud(%E6%96%B0%E7%89%88)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 20 年那时已出过类似的安装教程，使用的是[Esxi 6.7 + CentOS 7.3 + Nginx 1.18 + MySQL 5.7 + Php 7.4]，后面使用中发现有不少的坑，现重新按照官网的最新版本 NextCloud 23 再搭建一次并解决之前的坑，在此记录一下；</p><p>文中的环境可能因人而异，所以如按教程搭建不成功的话，请注意查看 NextCloud、Nginx 等相关报错信息和日志记录，以下内容仅供参考；</p></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>1）设置 Firewalld 和 SELinux</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ setenforce 0                                    </span><br><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --permanent --add-service=http</span><br><span class="line">$ firewall-cmd --permanent --add-service=https</span><br><span class="line">$ firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>1）安装依赖 &amp; 库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure><p>2）解压编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.21.6.tar.gz</span><br><span class="line">$ tar -xf nginx-1.21.6.tar.gz &amp;&amp; <span class="built_in">cd</span> ./nginx-1.21.6</span><br><span class="line"></span><br><span class="line">$ ./configure \</span><br><span class="line">--prefix=/usr/local/nginx \</span><br><span class="line">--with-http_addition_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-openssl-opt=<span class="string">&quot;enable-tlsext&quot;</span></span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>3）创建权限用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ groupadd nginx</span><br><span class="line">$ useradd -M -g nginx -s /sbin/nologin nginx</span><br><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">user nginx nginx;</span><br></pre></td></tr></table></figure><p>4）设置开机自启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now nginx.service</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>1）清除其他数据库信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa mysql</span><br><span class="line">$ rpm -qa | grep mariadb</span><br><span class="line">$ rpm -e --nodeps mariadb-libs</span><br></pre></td></tr></table></figure><p>2）安装依赖环境并安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install wget cmake gcc gcc-c++ ncurses numactl ncurses-devel libaio-devel openssl openssl-devel libaio</span><br><span class="line">$ wget https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class="line">$ tar -xf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz -C /usr/local</span><br><span class="line">$ <span class="built_in">mv</span> /usr/local/mysql-8.0.20-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure><p>3）创建用户&amp;组、目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ groupadd mysql</span><br><span class="line">$ useradd -r -g mysql -s /sbin/nologin mysql</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/mysql/&#123;data,etc,<span class="built_in">log</span>&#125;</span><br><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql /usr/local/mysql/</span><br><span class="line">$ <span class="built_in">cp</span> /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">$ vim /etc/init.d/mysql</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br></pre></td></tr></table></figure><p>4）创建配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysql]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/data/mysql.sock</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">mysqlx_port = 33060</span><br><span class="line">mysqlx_socket = /usr/local/mysql/data/mysqlx.sock</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">socket = /usr/local/mysql/data/mysql.sock</span><br><span class="line">pid-file = /usr/local/mysql/data/mysqld.pid</span><br><span class="line">log-error = /usr/local/mysql/log/error.log</span><br><span class="line"><span class="comment">#这个就是用之前的身份认证插件</span></span><br><span class="line">default-authentication-plugin = mysql_native_password</span><br><span class="line"><span class="comment">#保证日志的时间正确</span></span><br><span class="line">log_timestamps = SYSTEM</span><br><span class="line">sort_buffer_size=10M</span><br></pre></td></tr></table></figure><p>5）初始化数据库，并查看日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/mysql/bin/</span><br><span class="line">$ ./mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line">$ tailf /usr/local/mysql/log/error.log</span><br><span class="line">2022-02-12T14:20:05.371035+08:00 0 [System] [MY-013169] [Server] /usr/local/mysql/bin/mysqld (mysqld 8.0.20) initializing of server <span class="keyword">in</span> progress as process 1450</span><br><span class="line">2022-02-12T14:20:05.380536+08:00 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">2022-02-12T14:20:07.661113+08:00 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">2022-02-12T14:20:09.814299+08:00 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: WlkhiG<span class="comment">#.c0el</span></span><br></pre></td></tr></table></figure><p>6）启动服务并修改密码、开启远程用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ service mysql start</span><br><span class="line">$ ./mysql -uroot -p</span><br><span class="line"># 修改临时密码</span><br><span class="line">mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;password&#x27;;</span><br><span class="line"># 创建远程用户</span><br><span class="line">mysql&gt; create user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line"># 查看用户创建情况</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; select host, user, authentication_string, plugin from user;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; exit</span><br></pre></td></tr></table></figure><p>7）设置开机自启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chkconfig --add mysql</span><br><span class="line">$ chkconfig mysql on</span><br><span class="line">$ chkconfig --list</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">$ systemctl restart mysql</span><br></pre></td></tr></table></figure><h3 id="Php"><a href="#Php" class="headerlink" title="Php"></a>Php</h3><p>1）下载依赖并编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install libsmbclient-devel libsodium ImageMagick-devel gmp gmp-devel libicu libicu-devel libxslt libxslt-devel autoconf automake libtool bzip2 bzip2-devel libxml2-devel sqlite-devel libcurl-devel oniguruma-devel libpng-devel libjpeg-devel freetype-devel libzip-devel openssl-devel</span><br><span class="line">$ wget https://www.php.net/distributions/php-7.4.27.tar.gz</span><br><span class="line">$ tar -xf php-7.4.27.tar.gz &amp;&amp; <span class="built_in">cd</span> ./php-7.4.27</span><br><span class="line">$ ./configure \</span><br><span class="line">--prefix=/usr/local/php/ \</span><br><span class="line">--with-config-file-path=/usr/local/php/etc \</span><br><span class="line">--with-config-file-scan-dir=/usr/local/php/etc/conf.d \</span><br><span class="line">--enable-fpm \</span><br><span class="line">--enable-soap \</span><br><span class="line">--with-openssl \</span><br><span class="line">--with-openssl-dir \</span><br><span class="line">--with-zlib \</span><br><span class="line">--with-iconv \</span><br><span class="line">--with-bz2 \</span><br><span class="line">--enable-gd \</span><br><span class="line">--with-jpeg \</span><br><span class="line">--with-freetype \</span><br><span class="line">--with-curl \</span><br><span class="line">--enable-dom \</span><br><span class="line">--enable-xml \</span><br><span class="line">--with-zip \</span><br><span class="line">--enable-ftp \</span><br><span class="line">--enable-mbstring \</span><br><span class="line">--enable-pdo \</span><br><span class="line">--with-pdo-mysql \</span><br><span class="line">--with-zlib-dir \</span><br><span class="line">--enable-session \</span><br><span class="line">--enable-shmop \</span><br><span class="line">--enable-simplexml \</span><br><span class="line">--enable-sockets \</span><br><span class="line">--enable-sysvmsg \</span><br><span class="line">--enable-sysvsem \</span><br><span class="line">--enable-sysvshm \</span><br><span class="line">--with-xsl \</span><br><span class="line">--enable-mysqlnd \</span><br><span class="line">--with-mysqli \</span><br><span class="line">--without-pear \</span><br><span class="line">--enable-opcache \</span><br><span class="line">--enable-fileinfo \</span><br><span class="line">--disable-short-tags</span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>2）创建配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> ./sapi/fpm/init.d.php-fpm /usr/local/php/</span><br><span class="line">$ <span class="built_in">cp</span> ./php.ini-production /usr/local/php/etc/php.ini</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/php/etc/</span><br><span class="line">$ <span class="built_in">cp</span> php-fpm.conf.default php-fpm.conf</span><br><span class="line">$ <span class="built_in">cp</span> ./php-fpm.d/www.conf.default ./php-fpm.d/www.conf</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/php</span><br><span class="line">$ bash init.d.php-fpm start</span><br><span class="line">Starting php-fpm  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>3）创建开机自启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/php-fpm.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=php-fpm</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/php/sbin/php-fpm</span><br><span class="line">PrivateTmp=True</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因之前已启动过php-fpm，现9000端口被占用无法启动服务，杀死进程再启动服务</span></span><br><span class="line">$ netstat -lntup | grep 9000</span><br><span class="line">$ killall php-fpm</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now php-fpm.service</span><br></pre></td></tr></table></figure><p>4）配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># php</span></span><br><span class="line"><span class="built_in">export</span> PHP_HOME=/usr/local/php</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$PHP_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查php-fpm是否正常安装</span></span><br><span class="line">$ php -v</span><br><span class="line">PHP 7.4.27 (cli) (built: Feb 14 2022 15:53:46) ( NTS )</span><br><span class="line">Copyright (c) The PHP Group</span><br><span class="line">Zend Engine v3.4.0, Copyright (c) Zend Technologies</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p>1）安装依赖环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gcc -v </span><br><span class="line">gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line"></span><br><span class="line">$ yum -y install centos-release-scl scl-utils-build</span><br><span class="line">$ yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line">$ scl <span class="built_in">enable</span> devtoolset-9 bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：scl命令启用只是临时的，退出xshell或者重启就会恢复到原来的gcc版本。如果要长期生效的话，执行如下：</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt;/etc/profile</span><br></pre></td></tr></table></figure><p>2）下载编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.redis.io/releases/redis-6.2.6.tar.gz</span><br><span class="line">$ tar -xf redis-6.2.6.tar.gz &amp;&amp; <span class="built_in">cd</span> ./redis-6.2.6</span><br><span class="line">$ make &amp;&amp; make install PREFIX=/usr/local/redis</span><br><span class="line">$ <span class="built_in">mkdir</span> /usr/local/redis/etc &amp;&amp; <span class="built_in">cp</span> redis.conf /usr/local/redis/etc/</span><br></pre></td></tr></table></figure><p>3）创建开机自启服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/redis.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Redis</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"><span class="comment"># Type=forking</span></span><br><span class="line">PIDFile=/var/run/redis_6379.pid</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 命令软链接</span></span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/local/redis/bin/redis-cli /usr/bin/redis</span><br></pre></td></tr></table></figure><h3 id="NextCloud"><a href="#NextCloud" class="headerlink" title="NextCloud"></a>NextCloud</h3><p>1）下载程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.nextcloud.com/server/releases/nextcloud-23.0.1.zip</span><br><span class="line">$ unzip nextcloud-23.0.1.zip</span><br><span class="line">$ <span class="built_in">mv</span> ./nextcloud/* /usr/local/nginx/html/</span><br></pre></td></tr></table></figure><p>2）创建对应的用户和数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">mysql&gt; create database nextcloud_db;</span><br><span class="line"></span><br><span class="line">mysql&gt; create user yuen@localhost identified by &#x27;password&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on nextcloud_db.* to yuen@localhost with grant option;</span><br><span class="line"></span><br><span class="line">mysql&gt; create user &#x27;yuen&#x27;@&#x27;%&#x27; identified by &#x27;password&#x27;;</span><br><span class="line">mysql&gt; grant all privileges on *.* to &#x27;yuen&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; exit</span><br></pre></td></tr></table></figure><p>3）添加 ssl 证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/nginx/cert</span><br><span class="line">$ openssl req -new -x509 -days 365 -nodes -out ./nextcloud.crt -keyout ./nextcloud.key</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">.....................................................................................................................+++</span><br><span class="line">...................................................................................................+++</span><br><span class="line">writing new private key to <span class="string">&#x27;./nextcloud.key&#x27;</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN                                    <span class="comment"># 国家</span></span><br><span class="line">State or Province Name (full name) []:GuangDong                         <span class="comment"># 省份</span></span><br><span class="line">Locality Name (eg, city) [Default City]:DG                              <span class="comment"># 地区</span></span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:CompanyName       <span class="comment"># 公司名</span></span><br><span class="line">Organizational Unit Name (eg, section) []:IT                            <span class="comment"># 部门</span></span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:Cloud          # 域名</span></span><br><span class="line"><span class="string">Email Address []:yuen@hotmail.com                                       # 邮箱</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ ll</span></span><br><span class="line"><span class="string">total 8</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 1399 Dec  4 09:48 nextcloud.crt</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 1704 Dec  4 09:48 nextcloud.key</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ chmod 600 /usr/local/nginx/cert/*</span></span><br></pre></td></tr></table></figure><p>4）添加配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment"># 取消注释并开启支持php</span></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    root html;</span><br><span class="line">    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">    fastcgi_index  index.php;</span><br><span class="line">    fastcgi_param  SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">    include        fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后增加vhosts目录</span></span><br><span class="line">include /usr/local/nginx/vhosts/*.conf;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/nginx/vhosts</span><br><span class="line">$ vim /usr/local/nginx/vhosts/nextcloud.conf</span><br><span class="line">upstream php-handler &#123;</span><br><span class="line">    server 127.0.0.1:9000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen [::]:80;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enforce HTTPS</span></span><br><span class="line">    <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443      ssl;</span><br><span class="line">    listen [::]:443 ssl;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use Mozilla&#x27;s guidelines for SSL/TLS settings</span></span><br><span class="line">    <span class="comment"># https://mozilla.github.io/server-side-tls/ssl-config-generator/</span></span><br><span class="line">    ssl_certificate     /usr/local/nginx/cert/nextcloud.crt;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/cert/nextcloud.key;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># HSTS settings</span></span><br><span class="line">    <span class="comment"># WARNING: Only add the preload option once you read about</span></span><br><span class="line">    <span class="comment"># the consequences in https://hstspreload.org/. This option</span></span><br><span class="line">    <span class="comment"># will add the domain to a hardcoded list that is shipped</span></span><br><span class="line">    <span class="comment"># in all major browsers and getting removed from this list</span></span><br><span class="line">    <span class="comment"># could take several months.</span></span><br><span class="line">    add_header Strict-Transport-Security <span class="string">&quot;max-age=15768000; includeSubDomains; preload;&quot;</span> always;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set max upload size and increase upload timeout:</span></span><br><span class="line">    client_max_body_size 10240M;</span><br><span class="line">    client_body_timeout 300s;</span><br><span class="line">    fastcgi_buffers 64 4K;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enable gzip but do not remove ETag headers</span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_comp_level 4;</span><br><span class="line">    gzip_min_length 256;</span><br><span class="line">    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth;</span><br><span class="line">    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pagespeed is not supported by Nextcloud, so if your server is built</span></span><br><span class="line">    <span class="comment"># with the `ngx_pagespeed` module, uncomment this line to disable it.</span></span><br><span class="line">    <span class="comment">#pagespeed off;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTP response headers borrowed from Nextcloud `.htaccess`</span></span><br><span class="line">    add_header Referrer-Policy                      <span class="string">&quot;no-referrer&quot;</span>   always;</span><br><span class="line">    add_header X-Content-Type-Options               <span class="string">&quot;nosniff&quot;</span>       always;</span><br><span class="line">    add_header X-Download-Options                   <span class="string">&quot;noopen&quot;</span>        always;</span><br><span class="line">    add_header X-Frame-Options                      <span class="string">&quot;SAMEORIGIN&quot;</span>    always;</span><br><span class="line">    add_header X-Permitted-Cross-Domain-Policies    <span class="string">&quot;none&quot;</span>          always;</span><br><span class="line">    add_header X-Robots-Tag                         <span class="string">&quot;none&quot;</span>          always;</span><br><span class="line">    add_header X-XSS-Protection                     <span class="string">&quot;1; mode=block&quot;</span> always;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Remove X-Powered-By, which is an information leak</span></span><br><span class="line">    fastcgi_hide_header X-Powered-By;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Path to the root of your installation</span></span><br><span class="line">    root /usr/local/nginx/html;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Specify how to handle directories -- specifying `/index.php$request_uri`</span></span><br><span class="line">    <span class="comment"># here as the fallback means that Nginx always exhibits the desired behaviour</span></span><br><span class="line">    <span class="comment"># when a client requests a path that corresponds to a directory that exists</span></span><br><span class="line">    <span class="comment"># on the server. In particular, if that directory contains an index.php file,</span></span><br><span class="line">    <span class="comment"># that file is correctly served; if it doesn&#x27;t, then the request is passed to</span></span><br><span class="line">    <span class="comment"># the front-end controller. This consistent behaviour means that we don&#x27;t need</span></span><br><span class="line">    <span class="comment"># to specify custom rules for certain paths (e.g. images and other assets,</span></span><br><span class="line">    <span class="comment"># `/updater`, `/ocm-provider`, `/ocs-provider`), and thus</span></span><br><span class="line">    <span class="comment"># `try_files $uri $uri/ /index.php$request_uri`</span></span><br><span class="line">    <span class="comment"># always provides the desired behaviour.</span></span><br><span class="line">    index index.php index.html /index.php<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rule borrowed from `.htaccess` to handle Microsoft DAV clients</span></span><br><span class="line">    location = / &#123;</span><br><span class="line">        <span class="keyword">if</span> ( <span class="variable">$http_user_agent</span> ~ ^DavClnt ) &#123;</span><br><span class="line">            <span class="built_in">return</span> 302 /remote.php/webdav/$is_args<span class="variable">$args</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location = /robots.txt &#123;</span><br><span class="line">        allow all;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Make a regex exception for `/.well-known` so that clients can still</span></span><br><span class="line">    <span class="comment"># access it despite the existence of the regex rule</span></span><br><span class="line">    <span class="comment"># `location ~ /(\.|autotest|...)` which would otherwise handle requests</span></span><br><span class="line">    <span class="comment"># for `/.well-known`.</span></span><br><span class="line">    location ^~ /.well-known &#123;</span><br><span class="line">        <span class="comment"># The rules in this block are an adaptation of the rules</span></span><br><span class="line">        <span class="comment"># in `.htaccess` that concern `/.well-known`.</span></span><br><span class="line"></span><br><span class="line">        location = /.well-known/carddav &#123; <span class="built_in">return</span> 301 /remote.php/dav/; &#125;</span><br><span class="line">        location = /.well-known/caldav  &#123; <span class="built_in">return</span> 301 /remote.php/dav/; &#125;</span><br><span class="line"></span><br><span class="line">        location /.well-known/acme-challenge    &#123; try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404; &#125;</span><br><span class="line">        location /.well-known/pki-validation    &#123; try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Let Nextcloud&#x27;s API for `/.well-known` URIs handle all other</span></span><br><span class="line">        <span class="comment"># requests by passing them to the front-end controller.</span></span><br><span class="line">        <span class="built_in">return</span> 301 /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rules borrowed from `.htaccess` to hide certain paths from clients</span></span><br><span class="line">    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/)  &#123; <span class="built_in">return</span> 404; &#125;</span><br><span class="line">    location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console)                &#123; <span class="built_in">return</span> 404; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ensure this block, which passes PHP files to the PHP process, is above the blocks</span></span><br><span class="line">    <span class="comment"># which handle static assets (as seen below). If this block is not declared first,</span></span><br><span class="line">    <span class="comment"># then Nginx will encounter an infinite rewriting loop when it prepends `/index.php`</span></span><br><span class="line">    <span class="comment"># to the URI, resulting in a HTTP 500 error response.</span></span><br><span class="line">    location ~ \.php(?:$|/) &#123;</span><br><span class="line">        <span class="comment"># Required for legacy support</span></span><br><span class="line">        rewrite ^/(?!index|remote|public|cron|core\/ajax\/update|status|ocs\/v[12]|updater\/.+|oc[ms]-provider\/.+|.+\/richdocumentscode\/proxy) /index.php<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">        fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">        <span class="built_in">set</span> <span class="variable">$path_info</span> <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line"></span><br><span class="line">        try_files <span class="variable">$fastcgi_script_name</span> =404;</span><br><span class="line"></span><br><span class="line">        include fastcgi_params;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        fastcgi_param PATH_INFO <span class="variable">$path_info</span>;</span><br><span class="line">        fastcgi_param HTTPS on;</span><br><span class="line"></span><br><span class="line">        fastcgi_param modHeadersAvailable <span class="literal">true</span>;         <span class="comment"># Avoid sending the security headers twice</span></span><br><span class="line">        fastcgi_param front_controller_active <span class="literal">true</span>;     <span class="comment"># Enable pretty urls</span></span><br><span class="line">        fastcgi_pass php-handler;</span><br><span class="line"></span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_request_buffering off;</span><br><span class="line"></span><br><span class="line">        fastcgi_max_temp_file_size 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.(?:css|js|svg|gif|png|jpg|ico|wasm|tflite)$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">        expires 6M;         <span class="comment"># Cache-Control policy borrowed from `.htaccess`</span></span><br><span class="line">        access_log off;     <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line"></span><br><span class="line">        location ~ \.wasm$ &#123;</span><br><span class="line">            default_type application/wasm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.woff2?$ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">        expires 7d;         <span class="comment"># Cache-Control policy borrowed from `.htaccess`</span></span><br><span class="line">        access_log off;     <span class="comment"># Optional: Don&#x27;t log access to assets</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Rule borrowed from `.htaccess`</span></span><br><span class="line">    location /remote &#123;</span><br><span class="line">        <span class="built_in">return</span> 301 /remote.php<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php<span class="variable">$request_uri</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5）浏览器打开 <a href="https://188.188.3.4/">https://188.188.3.4</a> (域名)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220214173001494.png" alt="image-20220214173001494"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220214173029053.png" alt="image-20220214173029053"></p><p><strong>最终效果：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220407172105024.png" alt="image-20220407172105024"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220407172206073.png" alt="image-20220407172206073"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220407172243529.png" alt="image-20220407172243529"></p><h3 id="异常问题"><a href="#异常问题" class="headerlink" title="异常问题"></a>异常问题</h3><p>1）php 编译失败</p><p><strong>下载安装 CMake</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408090742.png" alt="20220408090742.png"></p><blockquote><p>CMake Error at CMakeLists.txt:1 (cmake_minimum_required):<br>CMake 3.0.2 or higher is required.  You are running version 2.8.12.2</p></blockquote><p>卸载旧版本再下载新版本安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove cmake -y</span><br><span class="line">$ wget https://cmake.org/files/v3.22/cmake-3.22.1.tar.gz</span><br><span class="line">$ tar -xf cmake-3.22.1.tar.gz &amp;&amp; <span class="built_in">cd</span> ./cmake-3.22.1</span><br><span class="line">$ ./bootstrap</span><br><span class="line">$ gmake &amp;&amp; gmake install</span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/local/bin/cmake /usr/bin/</span><br></pre></td></tr></table></figure><p><strong>下载安装 oniguruma</strong></p><blockquote><p>No package oniguruma-devel available.<br>configure: error: Package requirements (oniguruma) were not met:<br>No package ‘oniguruma’ found</p></blockquote><ul><li>方法一：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install http://mirror.centos.org/centos-7/7.9.2009/cloud/x86_64/openstack-queens/Packages/o/oniguruma-6.7.0-1.el7.x86_64.rpm</span><br><span class="line">$ yum -y install http://mirror.centos.org/centos-7/7.9.2009/cloud/x86_64/openstack-queens/Packages/o/oniguruma-devel-6.7.0-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><ul><li>方法二：(方法一下载较慢时可选择编译安装)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408090945.png" alt="20220408090945.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/kkos/oniguruma/archive/refs/tags/v6.9.7.1.tar.gz</span><br><span class="line">$ tar -xf v6.9.7.1.tar.gz &amp;&amp; <span class="built_in">cd</span> ./oniguruma-6.9.7.1</span><br><span class="line">$ ./autogen.sh &amp;&amp; ./configure \</span><br><span class="line">--bindir=/usr/sbin/ \</span><br><span class="line">--sbindir=/usr/sbin/ \</span><br><span class="line">--libexecdir=/usr/libexec \</span><br><span class="line">--sysconfdir=/etc/ \</span><br><span class="line">--localstatedir=/var \</span><br><span class="line">--libdir=/usr/lib64/  \</span><br><span class="line">--includedir=/usr/include/ \</span><br><span class="line">--datarootdir=/usr/share \</span><br><span class="line">--infodir=/usr/share/info \</span><br><span class="line">--localedir=/usr/share/locale \</span><br><span class="line">--mandir=/usr/share/man/ \</span><br><span class="line">--docdir=/usr/share/doc/onig</span><br><span class="line"></span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><strong>下载安装 libzip</strong></p><blockquote><p>checking for libzip &gt;&#x3D; 0.11 libzip !&#x3D; 1.3.1 libzip !&#x3D; 1.7.0… no<br>configure: error: Package requirements (libzip &gt;&#x3D; 0.11 libzip !&#x3D; 1.3.1 libzip !&#x3D; 1.7.0) were not met:</p><p>Requested ‘libzip &gt;&#x3D; 0.11’ but version of libzip is 0.10.1</p></blockquote><p>卸载旧版本再下载新版本安装</p><ul><li>方法一：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408091118.png" alt="20220408091118.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove libzip -y</span><br><span class="line">$ wget https://libzip.org/download/libzip-1.8.0.tar.gz</span><br><span class="line">$ tar -xf libzip-1.8.0.tar.gz &amp;&amp; <span class="built_in">cd</span> ./libzip-1.8.0</span><br><span class="line">$ <span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build \</span><br><span class="line">&amp;&amp; cmake -DCMAKE_INSTALL_PREFIX=/usr .. \</span><br><span class="line">&amp;&amp; make \</span><br><span class="line">&amp;&amp; make install</span><br></pre></td></tr></table></figure><ul><li>方法二：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove libzip -y</span><br><span class="line">$ rpm -Uvh http://rpms.remirepo.net/enterprise/remi-release-7.rpm </span><br><span class="line">$ yum —enablerepo=remi install libzip5-devel </span><br></pre></td></tr></table></figure><p>2）redis 启动报 WARNING</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is <span class="built_in">set</span> to the lower value of 128.</span><br><span class="line">解决方法：将/proc/sys/net/core/somaxconn值设置为redis配置文件中的tcp-baklog值一致即可</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;511&#x27;</span> &gt; /proc/sys/net/core/somaxconn</span><br><span class="line"><span class="comment"># 上述为临时，下述为永久处理</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;net.core.somaxconn= 1024&#x27;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">$ sysctl -p</span><br><span class="line"></span><br><span class="line">WARNING overcommit_memory is <span class="built_in">set</span> to 0! Background save may fail under low memory condition. To fix this issue add <span class="string">&#x27;vm.overcommit_memory = 1&#x27;</span> to /etc/sysctl...is to take effect.</span><br><span class="line">原因分析：overcommit_memory设置为0，在内存不足的情况下，后台保存会失败，要解决这个问题需要将此值改为1，然后重新加载，使其生效</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;vm.overcommit_memory=1&#x27;</span> &gt;&gt; /etc/sysctl.conf </span><br><span class="line">$ sysctl -p</span><br><span class="line"></span><br><span class="line">WARNING you have Transparent Huge Pages (THP) support enabled <span class="keyword">in</span> your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the <span class="built_in">command</span> .</span><br><span class="line">警告：您的内核中启用了透明的大页面（THP）支持。这将创建与ReDIS的延迟和内存使用问题。若要修复此问题，请运行命令“EngEng/mS/mL/mM/ExpListNo.HugPoIP/启用”为root，并将其添加到您的/etc/rc.local，以便在重新启动后保留设置。在禁用THP之后，必须重新启动redis。</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;never&#x27;</span> &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="comment"># 上述为临时，下述为永久处理,将如下加入到/etc/rc.local</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/enabled; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">Increased maximum number of open files to 10032 (it was originally <span class="built_in">set</span> to 1024).</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3）内部服务器错误</p><blockquote><p>登录无限循环或提示服务器不能完成您的请求、内部服务器错误不能完成请求等，请求的 ID 会不断改变，查询 logo 也没有太多有用的信息；</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408091203.png" alt="20220408091203.png"></p><ul><li>原因一：</li></ul><p><strong>基本是 php session 权限的问题</strong>，首先检查 php-fpm 的设置，确保 user 和 group 和 web 服务器一致</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/php/etc/php-fpm.d/www.conf</span><br><span class="line"><span class="comment"># 根据客户端替换</span></span><br><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chown</span> -R root:nginx /usr/local/php/include/php/ext/session/</span><br><span class="line">$ <span class="built_in">chown</span> nginx:nginx -R /usr/local/nginx/html</span><br><span class="line">$ systemctl restart php-fpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如没有作用或你不知道web服务器用户是什么，可以试下下述命令再清空浏览器Cookie，就可以登陆成功；</span></span><br><span class="line">$ <span class="built_in">chmod</span> -R 777 /usr/local/php/include/php/ext/session/</span><br></pre></td></tr></table></figure><ul><li>原因二：</li></ul><p><strong>MySQL-sort_buffer_size 参数</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment"># 根据实际分配，MySQL官方文档推荐范围为256KB~2MB</span></span><br><span class="line">sort_buffer_size=10M</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220214172838493.png" alt="image-20220214172838493"></p>]]></content>
      
      
      <categories>
          
          <category> cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nextcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_MySQL8.0(编译安装)</title>
      <link href="/2022/04/07/mysql/centos7%E9%83%A8%E7%BD%B2_MySQL8.0(%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85)/"/>
      <url>/2022/04/07/mysql/centos7%E9%83%A8%E7%BD%B2_MySQL8.0(%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85)/</url>
      
        <content type="html"><![CDATA[<p>1）删除其它库信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa mysql</span><br><span class="line">$ rpm -qa | grep mariadb</span><br><span class="line">$ rpm -e --nodeps mariadb-libs</span><br></pre></td></tr></table></figure><p>2）解压并改名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class="line">$ <span class="built_in">mv</span> mysql-8.0.20-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure><p>3）创建用户&amp;组、目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ groupadd mysql</span><br><span class="line">$ useradd -r -g mysql -s /sbin/nologin mysql</span><br><span class="line">$ <span class="built_in">mkdir</span> /usr/local/mysql/&#123;data,etc,<span class="built_in">log</span>&#125;</span><br><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql /usr/local/mysql/</span><br></pre></td></tr></table></figure><p>4）编辑配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/mysql/etc/my.cnf</span><br><span class="line">[mysql]</span><br><span class="line">port = 3306</span><br><span class="line">socket = /usr/local/mysql/data/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">mysqlx_port = 33060</span><br><span class="line">mysqlx_socket = /usr/local/mysql/data/mysqlx.sock</span><br><span class="line">basedir = /usr/local/mysql</span><br><span class="line">datadir = /usr/local/mysql/data</span><br><span class="line">socket = /usr/local/mysql/data/mysql.sock</span><br><span class="line">pid-file = /usr/local/mysql/data/mysqld.pid</span><br><span class="line">log-error = /usr/local/mysql/log/error.log</span><br><span class="line"><span class="comment">#这个就是用之前的身份认证插件</span></span><br><span class="line">default-authentication-plugin = mysql_native_password</span><br><span class="line"><span class="comment">#保证日志的时间正确</span></span><br><span class="line">log_timestamps = SYSTEM</span><br></pre></td></tr></table></figure><p>5）初始化数据库，并查看日志</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/mysql</span><br><span class="line">$ bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line">$ tailf /usr/local/mysql/log/error.log</span><br><span class="line">2022-02-12T14:20:05.371035+08:00 0 [System] [MY-013169] [Server] /usr/local/mysql/bin/mysqld (mysqld 8.0.20) initializing of server <span class="keyword">in</span> progress as process 1450</span><br><span class="line">2022-02-12T14:20:05.380536+08:00 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.</span><br><span class="line">2022-02-12T14:20:07.661113+08:00 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.</span><br><span class="line">2022-02-12T14:20:09.814299+08:00 6 [Note] [MY-010454] [Server] A temporary password is generated <span class="keyword">for</span> root@localhost: :p7mmIHz&gt;4&gt;b</span><br></pre></td></tr></table></figure><p>记住临时密码，后面登录使用</p><p>6）设置启动文件，配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/local/mysql/support-files/mysql.server  /etc/init.d/mysqld</span><br><span class="line">$ /etc/init.d/mysqld start</span><br><span class="line">Starting MySQL.. SUCCESS!</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>7）登录并配置远程登录 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"># 重置临时密码</span><br><span class="line">mysql&gt; ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;Sinath90?&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select host, user, authentication_string, plugin from user;</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">| host      | user             | authentication_string                                                  | plugin                |</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">| localhost | mysql.infoschema | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | mysql.session    | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | mysql.sys        | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | root             | *9BFCDD1F1B1049D70D3BBE8EFD6684DC256EAAC9                              | mysql_native_password |</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line">#这里就可以看到root@localhost这里的密码已经是mysql_native_password方式了</span><br><span class="line">#创建远程用户登录</span><br><span class="line">mysql&gt; create user &#x27;root&#x27;@&#x27;%&#x27; identified by &#x27;Sinath90?&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; grant all privileges on *.* to &#x27;root&#x27;@&#x27;%&#x27; with grant option;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select host, user, authentication_string, plugin from user;</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">| host      | user             | authentication_string                                                  | plugin                |</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">| %         | root             | *9BFCDD1F1B1049D70D3BBE8EFD6684DC256EAAC9                              | mysql_native_password |</span><br><span class="line">| localhost | mysql.infoschema | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | mysql.session    | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | mysql.sys        | $A$005$THISISACOMBINATIONOFINVALIDSALTANDPASSWORDTHATMUSTNEVERBRBEUSED | caching_sha2_password |</span><br><span class="line">| localhost | root             | *9BFCDD1F1B1049D70D3BBE8EFD6684DC256EAAC9                              | mysql_native_password |</span><br><span class="line">+-----------+------------------+------------------------------------------------------------------------+-----------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; exit</span><br><span class="line">Bye</span><br></pre></td></tr></table></figure><p>8）配置开机自启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /usr/local/mysql/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">$ vim /etc/init.d/mysql</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line"></span><br><span class="line">$ systemctl status mysql.service</span><br><span class="line">$ systemctl restart mysql.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> lanmp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_MySQL5.7(编译安装)</title>
      <link href="/2022/04/07/mysql/centos7%E9%83%A8%E7%BD%B2_MySQL5.7(%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85)/"/>
      <url>/2022/04/07/mysql/centos7%E9%83%A8%E7%BD%B2_MySQL5.7(%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85)/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/63004ce2fa6b1c879efab77c4cb7560c.png" alt="image-20220401100245944"></p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>1）删除旧版本的 MySQL 及相关配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa mysql</span><br><span class="line">$ rpm -qa | grep mariadb </span><br><span class="line">$ rpm -e --nodeps mariadb-libs  <span class="comment"># 文件名</span></span><br><span class="line">$ <span class="built_in">rm</span> -rf /etc/my.cnf</span><br></pre></td></tr></table></figure><p>2）安装依赖并下载程序包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install wget cmake gcc gcc-c++ ncurses numactl ncurses-devel libaio-devel openssl openssl-devel libaio</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/src/</span><br><span class="line">$ wget https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.34-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">$ tar -zxvf mysql-5.7.35-linux-glibc2.12-x86_64.tar.gz -C /usr/local/ &amp;&amp; <span class="built_in">cd</span> /usr/local</span><br><span class="line">$ <span class="built_in">mv</span> mysql-5.7.35-linux-glibc2.12-x86_64  mysql &amp;&amp; <span class="built_in">cd</span> ./mysql/</span><br></pre></td></tr></table></figure><h3 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h3><p>1）添加 mysql 组和 mysql 用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ groupadd mysql</span><br><span class="line">$ useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure><p>2） 创建配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysql]</span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集 </span></span><br><span class="line">default-character-set=utf8</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#skip-name-resolve </span></span><br><span class="line"><span class="comment">#设置3306端口 </span></span><br><span class="line">port = 3306</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line"><span class="comment"># 设置mysql的安装目录 </span></span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录 </span></span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line"><span class="comment"># 允许最大连接数 </span></span><br><span class="line">max_connections=200</span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集 </span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎 </span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"><span class="comment">#lower_case_table_name=1 </span></span><br><span class="line">max_allowed_packet=16M</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><p>3）修改当前目录拥有者，并初始化 mysqld</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql ./</span><br><span class="line">$ ./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line"><span class="comment"># 执行完毕后会自动生成默认的密码在执行记录中，注意复制出来</span></span><br></pre></td></tr></table></figure><p>4）设置开机自启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制启动脚本到资源目录，并增加可执行权限</span></span><br><span class="line">$ <span class="built_in">cp</span> ./support-files/mysql.server /etc/rc.d/init.d/mysqld</span><br><span class="line">$ <span class="built_in">chmod</span> +x /etc/rc.d/init.d/mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 mysqld 服务加入到系统服务</span></span><br><span class="line">$ chkconfig --add mysqld</span><br><span class="line"><span class="comment"># 检查 mysqld 服务是否已经生效</span></span><br><span class="line">$ chkconfig --list mysqld</span><br><span class="line">mysqld         0:off1:off2:on3:on4:on5:on6:off</span><br><span class="line">表明 mysqld 服务已经生效，在2、3、4、5运行级别随系统启动而自动启动，以后可以使用 service 命令控制 mysql 的启动和停止</span><br><span class="line">- 查看启动项：chkconfig --list | grep -i mysql</span><br><span class="line">- 删除启动项：chkconfig --del mysql</span><br><span class="line"></span><br><span class="line">$ service mysqld start</span><br></pre></td></tr></table></figure><p>5）环境变量配置</p><p>将 mysql 的 bin 目录加入 PATH 环境变量，编辑 &#x2F;etc&#x2F;profile 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="配置-MySQL"><a href="#配置-MySQL" class="headerlink" title="配置 MySQL"></a>配置 MySQL</h3><p>1）测试登录并修改密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -u root -p</span><br><span class="line">Enter password:输入默认的临时密码</span><br><span class="line">&gt; set password=password(&#x27;新密码&#x27;);</span><br><span class="line">&gt; GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;访问密码&#x27;;</span><br><span class="line">&gt; flush privileges;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status mysqld</span><br><span class="line">● mysqld.service - LSB: start and stop MySQL</span><br><span class="line">   Loaded: loaded (/etc/rc.d/init.d/mysqld; bad; vendor preset: disabled)</span><br><span class="line">   Active: active (exited) since Wed 2021-08-04 17:35:16 CST; 7s ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line">  Process: 4711 ExecStart=/etc/rc.d/init.d/mysqld start (code=exited, status=0/SUCCESS)</span><br><span class="line"></span><br><span class="line">Aug 04 17:35:16 data systemd[1]: Starting LSB: start and stop MySQL...</span><br><span class="line">Aug 04 17:35:16 data mysqld[4711]: Starting MySQL SUCCESS!</span><br><span class="line">Aug 04 17:35:16 data systemd[1]: Started LSB: start and stop MySQL.</span><br><span class="line">Aug 04 17:35:16 data mysqld[4711]: 2021-08-04T09:35:16.706754Z mysqld_safe A mysqld process already exists</span><br></pre></td></tr></table></figure><p>2）开启远程登录</p><ul><li>确认关闭或开启防火墙 mysql-3306 端口的外部访问</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">--zone : 作用域，网络区域定义了网络连接的可信等级。这是一个一对多的关系，这意味着一次连接可以仅仅是一个区域的一部分，而一个区域可以用于很多连接</span><br><span class="line">--add-port : 添加端口与通信协议，格式为：端口/通讯协议，协议是tcp 或 udp</span><br><span class="line">--permanent : 永久生效，没有此参数系统重启后端口访问失效</span><br></pre></td></tr></table></figure><ul><li>使用 root 需要赋予远程权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL ON *.* TO user@&#x27;%&#x27; IDENTIFIED BY &#x27;password&#x27; WITH GRANT OPTION;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> lanmp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_MySQL5.7(源码安装)</title>
      <link href="/2022/04/07/mysql/centos7%E9%83%A8%E7%BD%B2_MySQL5.7(%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85)/"/>
      <url>/2022/04/07/mysql/centos7%E9%83%A8%E7%BD%B2_MySQL5.7(%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85)/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/191b421252628a0a109e01e7e405a7e9.png" alt="image-20220401101254577"></p><blockquote><p><strong>源码安装三步曲：配置—&gt;编译—&gt;安装</strong></p></blockquote><h3 id="安装须知"><a href="#安装须知" class="headerlink" title="安装须知"></a>安装须知</h3><ul><li>软件包：可在任意发行版的 Linux 下安装</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/c0ba76101ab1f2a92413ab7f929c8356.png" alt="image-20220401102821310"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql-boost-5.7.36.tar.gz</span><br></pre></td></tr></table></figure><ul><li>安装需求</li></ul><table><thead><tr><th>安装需求</th><th>具体配置</th></tr></thead><tbody><tr><td>安装目录（basedir）</td><td>&#x2F;usr&#x2F;local&#x2F;mysql</td></tr><tr><td>数据目录（datadir）</td><td>&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;data</td></tr><tr><td>端口号</td><td>3306</td></tr><tr><td>socket文件位置</td><td>$basedir&#x2F;mysql.sock</td></tr><tr><td>字符集</td><td>utf8mb4</td></tr></tbody></table><ul><li>常用配置选项</li></ul><table><thead><tr><th>配置选项</th><th>描述</th><th>默认值</th><th>建议值</th></tr></thead><tbody><tr><td>CMAKE_INSTALL_PREFIX</td><td>安装基目录 (basedir)</td><td>&#x2F;usr&#x2F;local&#x2F;mysql</td><td>根据需求</td></tr><tr><td>MYSQL_DATADIR</td><td>数据目录 (datadir)</td><td>$basedir&#x2F;data</td><td>根据需求</td></tr><tr><td>SYSCONFDIR</td><td>默认配置文件 my.cnf 路径</td><td></td><td>&#x2F;etc</td></tr><tr><td>MYSQL_TCP_PORT</td><td>TCP&#x2F;IP 端口</td><td>3306</td><td>非默认端口</td></tr><tr><td>MYSQL_UNIX_ADDR</td><td>套接字 socket 文件路径</td><td>&#x2F;tmp&#x2F;mysql.sock</td><td>$basedir&#x2F;</td></tr><tr><td>DEFAULT_CHARSET</td><td>默认字符集</td><td>latin1</td><td><strong>utf8mb4</strong></td></tr><tr><td>DEFAULT_COLLATION</td><td>默认校验规则</td><td>latin1_swedish_ci</td><td>utf8mb4_general_ci</td></tr><tr><td>WITH_EXTRA_CHARSETS</td><td>扩展字符集</td><td>all</td><td>all</td></tr><tr><td>ENABLED_LOCAL_INFILE</td><td>是否启用本地加载外部数据文件功能</td><td>OFF</td><td>建议开启</td></tr><tr><td>WITH_SSL</td><td>SSL 支持类型</td><td>system</td><td>建议显式指定</td></tr><tr><td>WITH_BOOST</td><td>Boost 库源代码的位置</td><td></td><td>Boost 库是构建 MySQL 所必需的,建议事先下载</td></tr></tbody></table><ul><li>存储引擎相关配置项</li></ul><p>以下选项值均为布尔值，0 或 1；0 代表不编译到服务器中，1 代表编译，建议都静态编译到服务器中。</p><p>其他的存储引擎可以根据实际需求在安装时通过 WITH_xxxx_STORAGE_ENGINE&#x3D;1 的方式编译到服务器中。</p><table><thead><tr><th>配置选项</th><th>描述</th></tr></thead><tbody><tr><td>WITH_INNOBASE_STORAGE_ENGINE</td><td>将 InnoDB 存储引擎插件构建为静态模块编译到服务器中；建议编译到服务器中</td></tr><tr><td>WITH_PARTITION_STORAGE_ENGINE</td><td>是否支持分区</td></tr><tr><td>WITH_FEDERATED_STORAGE_ENGINE</td><td>本地数据库是否可以访问远程 mysql 数据</td></tr><tr><td>WITH_BLACKHOLE_STORAGE_ENGINE</td><td>黑洞存储引擎，接收数据，但不存储，直接丢弃</td></tr><tr><td>WITH_MYISAM_STORAGE_ENGINE</td><td>将 MYISAM 存储引擎静态编译到服务器中</td></tr></tbody></table><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>1）安装相关依赖软件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install ncurses-devel cmake libaio-devel openssl-devel</span><br></pre></td></tr></table></figure><p>说明：环境不一样，可能还需要安装其他依赖包，比如 perl 相关的包</p><p>2）下载 Boost 库源代码(可选)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://sourceforge.net/projects/boost/files/boost/1.78.0/boost_1_78_0.tar.gz/download</span><br></pre></td></tr></table></figure><p>3）解压目录并根据需求进行配置安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xf mysql-boost-5.7.36.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> mysql-5.7.37</span><br></pre></td></tr></table></figure><p>4）基于 cmake 进行配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cmake . \</span><br><span class="line">-DCMAKE_INSTALL_PREFIX=/usr/local/mysql \</span><br><span class="line">-DMYSQL_DATADIR=/usr/local/mysql/data \</span><br><span class="line">-DMYSQL_TCP_PORT=3306 \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_PARTITION_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_MYISAM_STORAGE_ENGINE=1 \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DEXTRA_CHARSETS=all \</span><br><span class="line">-DDEFAULT_CHARSET=utf8mb4 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8mb4_general_ci \</span><br><span class="line">-DWITH_SSL=system \</span><br><span class="line">-DWITH_BOOST=boost</span><br><span class="line"></span><br><span class="line">选项说明：</span><br><span class="line">-DCMAKE_INSTALL_PREFIX ：安装路径</span><br><span class="line">-DMYSQL_DATADIR ：数据目录</span><br><span class="line">-DMYSQL_TCP_PORT ：端口号</span><br><span class="line">-DMYSQL_UNIX_ADDR ：套接字文件位置</span><br></pre></td></tr></table></figure><p>5）编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ make -j2 &amp;&amp; make install</span><br><span class="line">选项说明：</span><br><span class="line">-j2：代表同时开启多个线程共同实现编译操作</span><br></pre></td></tr></table></figure><h3 id="数据初始化"><a href="#数据初始化" class="headerlink" title="数据初始化"></a>数据初始化</h3><p>1）创建一个数据库专用账号 mysql(其所属组也为 mysql)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd -r -s /sbin/nologin mysql</span><br><span class="line">$ <span class="built_in">id</span> mysql</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>进入到安装目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/mysql</span><br></pre></td></tr></table></figure><p>2）创建 mysql-files 目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">创建系统变量`secure_file_priv`限制导入导出目录并修改权限</span><br><span class="line">$ <span class="built_in">mkdir</span> mysql-files</span><br><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql /usr/local/mysql</span><br><span class="line">$ <span class="built_in">chmod</span> 750 mysql-files</span><br></pre></td></tr></table></figure><p>3）数据库初始化操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line">...</span><br><span class="line">2022-04-03T02:43:31.295939Z 1 [Note] A temporary password is generated <span class="keyword">for</span> root@localhost: e!m<span class="comment">#BqYjf9OG</span></span><br></pre></td></tr></table></figure><p>4）拷贝 mysql.server 脚本到 <code>/etc/init.d</code> 目录，然后启动数据库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">$ service mysql start</span><br><span class="line">Starting MySQL.Logging to <span class="string">&#x27;/usr/local/mysql/data/Dev-Pc.err&#x27;</span>.</span><br><span class="line"> SUCCESS!</span><br></pre></td></tr></table></figure><p>5）编写 MySQL 配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line"><span class="comment"># 提前创建好目录文件</span></span><br><span class="line"><span class="comment">#log-error=/usr/local/mysql/log/error.log</span></span><br><span class="line"><span class="comment">#pid-file=/usr/local/mysql/mysql.pid</span></span><br><span class="line"></span><br><span class="line">$ service mysql restart</span><br><span class="line">Shutting down MySQL.. SUCCESS! </span><br><span class="line">Starting MySQL. SUCCESS!</span><br></pre></td></tr></table></figure><p>6）设置管理员密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/mysqladmin -uroot password <span class="string">&#x27;newpassword&#x27;</span> -p</span><br><span class="line">Enter password:e!m<span class="comment">#BqYjf9OG</span></span><br><span class="line">mysqladmin: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Warning: Since password will be sent to server <span class="keyword">in</span> plain text, use ssl connection to ensure password safety.</span><br></pre></td></tr></table></figure><p>测试密码修改是否成功</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 3</span><br><span class="line">Server version: 5.7.37 Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2022, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>7）安全设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bin/mysql_secure_installation</span><br><span class="line"><span class="comment"># 第一项回车跳过外，其他都选y</span></span><br><span class="line">Securing the MySQL server deployment.</span><br><span class="line"></span><br><span class="line">Enter password <span class="keyword">for</span> user root: </span><br><span class="line">The <span class="string">&#x27;validate_password&#x27;</span> plugin is installed on the server.</span><br><span class="line">The subsequent steps will run with the existing configuration</span><br><span class="line">of the plugin.</span><br><span class="line">Using existing password <span class="keyword">for</span> root.</span><br><span class="line"></span><br><span class="line">Estimated strength of the password: 50 </span><br><span class="line">Change the password <span class="keyword">for</span> root ? ((Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : </span><br><span class="line"></span><br><span class="line"> ... skipping.</span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to <span class="built_in">log</span> into MySQL without having to have</span><br><span class="line">a user account created <span class="keyword">for</span> them. This is intended only <span class="keyword">for</span></span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous <span class="built_in">users</span>? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : y</span><br><span class="line">Success.</span><br></pre></td></tr></table></figure><p>8）添加服务至开机启动项</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ chkconfig --add mysql</span><br><span class="line">$ chkconfig mysql on</span><br></pre></td></tr></table></figure><p>9）配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> lanmp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro操作_i3wm快捷键</title>
      <link href="/2022/04/07/manjaro/manjaro%E6%93%8D%E4%BD%9C_i3wm%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/04/07/manjaro/manjaro%E6%93%8D%E4%BD%9C_i3wm%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="i3wm快捷键"><a href="#i3wm快捷键" class="headerlink" title="i3wm快捷键"></a>i3wm快捷键</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Enter启动虚拟终端</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + A焦点转义到父窗口上</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + S堆叠布局</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + W标签布局</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + E默认布局</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + SpaceBar焦点在平铺式／浮动式转换</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + D启动 dmenu</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + H水平分割窗口</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + V垂直分割窗口</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + J焦点往左窗口移</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + K焦点往下窗口移</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + L焦点往上窗口移</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + ;焦点往右窗口移</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Shift + Q杀死当前窗口的进程</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Shift + E退出 i3</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Shift + C当场重新加载 i3config, 无需重启</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Shift + R重启 i3 （还重新加载了 i3config, 又没有退出过程）</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Shift + J窗口左移</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Shift + K窗口下移</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Shift + L窗口上移</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Shift + :窗口右移</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + Shift + SpaceBar窗口在平铺式／浮动式转换</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod  + &lt;数字键&gt; 切换window</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + <span class="built_in">shift</span> + &lt;数字键&gt; 将当前程序发送到指定window</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod + F 全屏</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod+F2 打开浏览器</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod+F3 打开资源管理器</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod+9 锁屏</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">mod+0 电源菜单</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> manjaro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i3wm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro安装_TimeShift备份工具</title>
      <link href="/2022/04/07/manjaro/manjaro%E5%AE%89%E8%A3%85_TimeShift%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/04/07/manjaro/manjaro%E5%AE%89%E8%A3%85_TimeShift%E5%A4%87%E4%BB%BD%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 Window 系统中，可以借助微软自带的工具或 Dism++ 等工具进行系统备份，当系统出现故障时，可通过备份的快照来恢复系统。而在 Linux 下也有类似的工具，如 <strong>TimeShift</strong>、<strong>Rsync</strong>、<strong>Fwbackups</strong> 等等，在此来介绍 Manjaro 下较为好用的 <strong>TimeShift</strong></p></blockquote><h3 id="程序下载"><a href="#程序下载" class="headerlink" title="程序下载"></a>程序下载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S timeshift</span><br></pre></td></tr></table></figure><h3 id="系统备份"><a href="#系统备份" class="headerlink" title="系统备份"></a>系统备份</h3><p>当成功安装后，桌面就会出现 <code>Timeshift</code> 的图标</p><ul><li>打开软件会出现设备向导</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/2021-12-07_19-16.png" alt="2021-12-07_19-16.png"></p><p>一般选择 RSYNC，它支持增量备份，在 RSYNC 模式每次备份的时候，只传输改变的部分。而 BTRFS 模式下支持创建一个系统的完整快照，根据自身需求设置；</p><ul><li>选择备份文件存储的位置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/2021-12-07_19-19.png" alt="2021-12-07_19-19.png"></p><p>注意：设置快照放在哪里，因为当恢复系统的时候，需要去选择快照</p><ul><li>选择备份时间</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/2021-12-07_19-19_1.png" alt="2021-12-07_19-19_1.png"></p><p>根据需要选择，其中”保留”后面的数字意思是：快照数量超过此数字时，会自动删除多余的快照</p><ul><li>选择要备份的目录（默认即可）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/2021-12-07_19-20.png" alt="2021-12-07_19-20.png"></p>]]></content>
      
      
      <categories>
          
          <category> manjaro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> timeshift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Manjaro安装_i3桌面及配置</title>
      <link href="/2022/04/07/manjaro/manjaro%E5%AE%89%E8%A3%85_i3%E6%A1%8C%E9%9D%A2%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/04/07/manjaro/manjaro%E5%AE%89%E8%A3%85_i3%E6%A1%8C%E9%9D%A2%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>操作系统安装的是 manjaro-i3-21.1.2-minimal，语言为简体中文</p></blockquote><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本操作</span></span><br><span class="line">$ sudo pacman -S  package <span class="comment"># 安装</span></span><br><span class="line">$ sudo pacman -R  package <span class="comment"># 删除单个软件包，保留其全部已经安装的依赖关系</span></span><br><span class="line">$ sudo pacman -Rs package <span class="comment"># 除指定软件包，及其所有没有被其他已安装软件包使用的依赖关系</span></span><br><span class="line">$ sudo pacman -Ss package <span class="comment"># 查找软件</span></span><br><span class="line">$ sudo pacman -Sc         <span class="comment"># 清空并且下载新数据</span></span><br><span class="line">$ sudo pacman -Syu        <span class="comment"># 升级所有软件包</span></span><br><span class="line">$ sudo pacman -Qs         <span class="comment"># 搜索已安装的包</span></span><br></pre></td></tr></table></figure><h3 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h3><p><strong>替换国源</strong></p><p>配置中国的 mirrors，在 终端 执行下面的命令从官方的源列表中对中国源进行测速和设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman-mirrors -i -c China -m rank</span><br></pre></td></tr></table></figure><p>为 Manjaro 增加中文社区的源来加速安装软件，在 <code>/etc/pacman.conf</code> 中添加 <code>archlinuxcn</code> 源，末尾加上：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustedOnly</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>安装 <code>archlinuxcn-keyring</code> 包以导入 <code>GPG key</code>，否则的话 key 验证失败会无法安装并安装 <code>base-devel</code> 工具包，最后同步更新系统：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -Syy</span><br><span class="line">$ sudo pacman -S archlinuxcn-keyring base-devel</span><br><span class="line">$ sudo pacman -Syyu</span><br></pre></td></tr></table></figure><p><strong>安装 yay</strong></p><p>Yay 是用 Go 编写的 Arch Linux AUR 包管理工具。具体可以查看 Arch Wiki</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S yay</span><br><span class="line">$ yay --aururl <span class="string">&quot;https://aur.tuna.tsinghua.edu.cn&quot;</span> --save <span class="comment"># 配置镜像源</span></span><br><span class="line">$ yay -P -g                                              <span class="comment"># 配置文件位于 ~/.config/yay/config.json </span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本操作</span></span><br><span class="line">$ yay -S package   <span class="comment"># 从 AUR 安装软件包</span></span><br><span class="line">$ yay -Rns package <span class="comment"># 删除包</span></span><br><span class="line">$ yay -Syu         <span class="comment"># 升级所有已安装的包</span></span><br><span class="line">$ yay -Ps          <span class="comment"># 打印系统统计信息</span></span><br><span class="line">$ yay -Qi package  <span class="comment"># 检查安装的版本</span></span><br></pre></td></tr></table></figure><p><strong>安装 ZSH</strong></p><p><a href="https://www.zsh.org/">Zsh</a> 是一款功能强大的 <a href="https://wiki.archlinux.org/title/Shell">Shell</a> 软件，既可以作为交互式终端来使用，也可以作为脚本语言解释器来使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/shells      <span class="comment"># 查看系统所有shell</span></span><br><span class="line">$ chsh -s /usr/bin/zsh <span class="comment"># 更改默认shell为zsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ohmyzsh</span></span><br><span class="line">$ wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line"><span class="comment"># zsh-syntax-highlighting：语法高亮</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># autosuggestions：记住用过的命令</span></span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br><span class="line"><span class="comment"># autojump：文件目录跳转</span></span><br><span class="line">$ sudo pacman -S autojump</span><br><span class="line">$ <span class="built_in">source</span> /usr/share/autojump/autojump.zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主题，这里使用的主题是powerlevel10k，详细信息可从Github找到</span></span><br><span class="line">$ git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br><span class="line"></span><br><span class="line">$ sudo vim ~/.zshrc                       <span class="comment"># 修改配置文件</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span>   <span class="comment"># 更改ZSH_THEME</span></span><br><span class="line">plugins=(git                              <span class="comment"># 更改plugins</span></span><br><span class="line">       zsh-autosuggestions</span><br><span class="line">       zsh-syntax-highlighting</span><br><span class="line">       sudo</span><br><span class="line">       extract</span><br><span class="line">       autojump</span><br><span class="line">     )</span><br><span class="line"><span class="comment"># 字体显示模糊 </span></span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=EN_US.UTF-8</span><br><span class="line"><span class="comment"># 文末添加</span></span><br><span class="line"><span class="built_in">eval</span> $(thefuck --<span class="built_in">alias</span>)</span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc                         <span class="comment"># 刷新配置,打开终端按提示进行配置即可</span></span><br></pre></td></tr></table></figure><p><strong>使用vim编辑时提错E437: terminal capability “cm” required</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 临时方法</span></span><br><span class="line"><span class="built_in">export</span> TERM=xterm</span><br><span class="line"><span class="comment"># 永久修改</span></span><br><span class="line">$ sudo vim /etc/profile</span><br><span class="line">$ sudo vim ~/.zshrc</span><br><span class="line"><span class="built_in">export</span> TERM=xterm</span><br></pre></td></tr></table></figure><p><strong>安装字体</strong></p><p>解决中文方格问题</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装常用的中文字体</span></span><br><span class="line">$ sudo pacman -S ttf-roboto noto-fonts ttf-dejavu powerline powerline-fonts powerline-vim</span><br><span class="line"><span class="comment"># 文泉驿</span></span><br><span class="line">$ sudo pacman -S wqy-bitmapfont wqy-microhei wqy-microhei-lite wqy-zenhei</span><br><span class="line"><span class="comment"># 思源字体</span></span><br><span class="line">$ sudo pacman -S noto-fonts-cjk adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts</span><br><span class="line"><span class="comment"># 其它字体</span></span><br><span class="line">$ sudo pacman -S ttf-font-awesome ttf-font-icons ttf-font-logos ttf-roboto-mono awesome-terminal-fonts nerd-fonts-complete ttf-fireflysung firefox-i18n-zh-cn thunderbird-i18n-zh-cn gimp-help-zh_cn man-pages-zh_cn &amp;&amp; fc-cache -fv &amp;&amp; locale-gen</span><br><span class="line"></span><br><span class="line"><span class="comment"># 桌面乱码问题：修改conky_main乱码，将Bitstream Vera字体替换成anti</span></span><br><span class="line">$ sudo vim /usr/share/conky/conky_maia</span><br><span class="line">:%s/Bitstream Vera/anti/</span><br></pre></td></tr></table></figure><p>字体模糊发虚</p><p>先系统设置生成 <code>~/.config/fontconfig/fonts.conf</code></p><ul><li>mod+z – Settings – Qt5 settings – 标签栏” 字体” – 创建”fonts.conf” (可以前置选择好自己的字体再创建，下为参考参数)</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">fontconfig</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;fonts.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">its:rules</span> <span class="attr">xmlns:its</span>=<span class="string">&quot;http://www.w3.org/2005/11/its&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">its:translateRule</span> <span class="attr">translate</span>=<span class="string">&quot;no&quot;</span> <span class="attr">selector</span>=<span class="string">&quot;/fontconfig/*[not(self::description)]&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">its:rules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Manjaro Font Config<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Font directory list --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/share/fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dir</span>&gt;</span>/usr/local/share/fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dir</span> <span class="attr">prefix</span>=<span class="string">&quot;xdg&quot;</span>&gt;</span>fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dir</span>&gt;</span>~/.fonts<span class="tag">&lt;/<span class="name">dir</span>&gt;</span> <span class="comment">&lt;!-- this line will be removed in the future --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动微调 微调 抗锯齿 内嵌点阵字体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">&quot;font&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;autohint&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">bool</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span> <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;hinting&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span> <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;antialias&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">bool</span>&gt;</span>true<span class="tag">&lt;/<span class="name">bool</span>&gt;</span> <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;embeddedbitmap&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">bool</span>&gt;</span>false<span class="tag">&lt;/<span class="name">bool</span>&gt;</span> <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 英文默认字体使用 Roboto 和 Noto Serif ,终端使用 DejaVu Sans Mono. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">&quot;any&quot;</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;prepend&quot;</span> <span class="attr">binding</span>=<span class="string">&quot;strong&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Noto Serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">&quot;pattern&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">&quot;any&quot;</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;prepend&quot;</span> <span class="attr">binding</span>=<span class="string">&quot;strong&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Roboto<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">&quot;pattern&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">&quot;any&quot;</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;prepend&quot;</span> <span class="attr">binding</span>=<span class="string">&quot;strong&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>DejaVu Sans Mono<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 中文默认字体使用思源宋体,不使用 Noto Sans CJK SC 是因为这个字体会在特定情况下显示片假字. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">&quot;lang&quot;</span> <span class="attr">compare</span>=<span class="string">&quot;contains&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>zh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;prepend&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Source Han Serif CN<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">&quot;lang&quot;</span> <span class="attr">compare</span>=<span class="string">&quot;contains&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>zh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;prepend&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Source Han Sans CN<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">&quot;lang&quot;</span> <span class="attr">compare</span>=<span class="string">&quot;contains&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>zh<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;prepend&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Noto Sans Mono CJK SC<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 把Linux没有的中文字体映射到已有字体，这样当这些字体未安装时会有替代字体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">&quot;pattern&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">&quot;any&quot;</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>SimHei<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">binding</span>=<span class="string">&quot;same&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Source Han Sans CN<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">&quot;pattern&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">&quot;any&quot;</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>SimSun<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">binding</span>=<span class="string">&quot;same&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Source Han Serif CN<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">match</span> <span class="attr">target</span>=<span class="string">&quot;pattern&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test</span> <span class="attr">qual</span>=<span class="string">&quot;any&quot;</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>SimSun-18030<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">&quot;family&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;assign&quot;</span> <span class="attr">binding</span>=<span class="string">&quot;same&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>Source Han Serif CN<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;match target=&quot;pattern&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;test qual=&quot;any&quot; name=&quot;family&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;string&gt;Microsoft YaHei&lt;/string&gt;</span></span><br><span class="line"><span class="comment">        &lt;/test&gt;</span></span><br><span class="line"><span class="comment">        &lt;edit name=&quot;family&quot; mode=&quot;assign&quot; binding=&quot;same&quot;&gt;</span></span><br><span class="line"><span class="comment">            &lt;string&gt;Source Han Sans CN&lt;/string&gt;</span></span><br><span class="line"><span class="comment">        &lt;/edit&gt;</span></span><br><span class="line"><span class="comment">    &lt;/match&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Load local system customization file --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">ignore_missing</span>=<span class="string">&quot;yes&quot;</span>&gt;</span>conf.d<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Font cache directory list --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cachedir</span>&gt;</span>/var/cache/fontconfig<span class="tag">&lt;/<span class="name">cachedir</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cachedir</span> <span class="attr">prefix</span>=<span class="string">&quot;xdg&quot;</span>&gt;</span>fontconfig<span class="tag">&lt;/<span class="name">cachedir</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- will be removed in the future --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cachedir</span>&gt;</span>~/.fontconfig<span class="tag">&lt;/<span class="name">cachedir</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Rescan in every 30s when FcFontSetList is called --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rescan</span>&gt;</span> <span class="tag">&lt;<span class="name">int</span>&gt;</span>30<span class="tag">&lt;/<span class="name">int</span>&gt;</span> <span class="tag">&lt;/<span class="name">rescan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>目录修改</strong></p><p>先将中文目录名称修改成英文，再修改配置文件信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.config/usr-dirs.dirs</span><br><span class="line">XDG_DESKTOP_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/Desktop&quot;</span></span><br><span class="line">XDG_DOWNLOAD_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/Downloads&quot;</span></span><br><span class="line">XDG_TEMPLATES_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/Templates&quot;</span></span><br><span class="line">XDG_PUBLICSHARE_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/Public&quot;</span></span><br><span class="line">XDG_DOCUMENTS_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/Documents&quot;</span></span><br><span class="line">XDG_MUSIC_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/Music&quot;</span></span><br><span class="line">XDG_PICTURES_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/Pictures&quot;</span></span><br><span class="line">XDG_VIDEOS_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/Videos&quot;</span></span><br></pre></td></tr></table></figure><p><strong>输入法</strong></p><p>fcitx 是 Free Chinese Input Toy for X 的缩写，国内也常称作小企鹅输入法，是一款 Linux 下的中文输入法:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S fcitx5-im</span><br><span class="line">$ sudo pacman -S fcitx5-chinese-addons</span><br><span class="line">$ sudo pacman -S fcitx5-rime</span><br><span class="line">$ sudo pacman -S fcitx5-configtool</span><br><span class="line">$ sudo nano ~/.pam_environment</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">INPUT_METHOD  DEFAULT=fcitx5</span><br><span class="line">GTK_IM_MODULE DEFAULT=fcitx5</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx5</span><br><span class="line">XMODIFIERS    DEFAULT=<span class="string">&quot;@im=fcitx5&quot;</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">$ sudo vim ~/.xprofile</span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx5</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx5</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx</span><br><span class="line">fcitx5 &amp;</span><br><span class="line"></span><br><span class="line">$ sudo vim ~/.i3/config</span><br><span class="line"><span class="comment"># Autostart applictions</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id fcitx</span><br></pre></td></tr></table></figure><p><strong>挂载 samba (按需配置)</strong></p><p>个人因有多台 PC&#x2F;Server 设备，为了 Win&#x2F;Linux 之间互联，可略过</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yay -S samba</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /home/username/share</span><br><span class="line"><span class="comment"># 挂载并设置自启</span></span><br><span class="line">$ smbclient //server-ip/share -U servername</span><br><span class="line">$ sudo mount -t cifs -l //server-ip/share /home/username/share -o username=servername,password=serverpassword</span><br><span class="line">$ sudo vim /etc/fstab</span><br><span class="line">$ //server-ip/share /home/username/share cifs defaults,username=servername,password=serverpassword 0 0</span><br></pre></td></tr></table></figure><h3 id="日常工具"><a href="#日常工具" class="headerlink" title="日常工具"></a>日常工具</h3><p>建议安装各自所需的，没必要全部安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yay -S google-chrome                            <span class="comment"># 浏览器</span></span><br><span class="line">$ vim ~/.config/mimeapps.list                     <span class="comment"># 默认值</span></span><br><span class="line">:%s/userapp-Pale Moon/google-chrome-stable/</span><br><span class="line">$ vim ~/.i3/config                                <span class="comment"># 快捷建</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+F2 <span class="built_in">exec</span> google-chrome-stable</span><br><span class="line">$ vim ~/.profile                                  <span class="comment"># 环境变量</span></span><br><span class="line"><span class="built_in">export</span> BROWSER=/usr/bin/google-chrome-stable</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">$ yay -S switchhosts                              <span class="comment"># github访问加速,选择.appimage版本</span></span><br><span class="line">- 标题：任意</span><br><span class="line">- 类型：Remote</span><br><span class="line">- URL: https://cdn.jsdelivr.net/gh/521xueweihan/GitHub520@main/hosts</span><br><span class="line">- 自动刷新时间：第一次添加可以先选择1 minute，有了规则以后，就可以选择1 hour</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">$ sudo pacman -S unrar unzip p7zip file-roller    <span class="comment"># 压缩软件</span></span><br><span class="line">$ sudo pacman -S timeshift                        <span class="comment"># 备份工具</span></span><br><span class="line">$ yay -S wps-office wps-office-mui-zh-cn wps-office-fonts ttf-wps-fonts  <span class="comment"># wps-office</span></span><br><span class="line">$ sudo pacman-S netease-cloud-music               <span class="comment"># 网易音乐</span></span><br><span class="line">$ yay -S picgo                                    <span class="comment"># 图床工具</span></span><br><span class="line">$ sudo pacman -S screenkey                        <span class="comment"># 屏幕键盘</span></span><br><span class="line">$ sudo pacman -S typora                           <span class="comment"># 编辑工具</span></span><br><span class="line">$ sudo pacman -S net-tools                        <span class="comment"># 网络工具</span></span><br><span class="line">$ sudo pacman -S aria2 filezilla                  <span class="comment"># 下载工具</span></span><br><span class="line">$ yay -S xmind                                    <span class="comment"># 思维导图</span></span><br><span class="line">$ sudo pacman -S foxitreader bookworm             <span class="comment"># pdf&amp;电子书</span></span><br><span class="line">$ sudo pacman -S wireshark-qt                     <span class="comment"># 抓包工具</span></span><br><span class="line">$ yay -S remmina freerdp                          <span class="comment"># 远程桌面</span></span><br><span class="line">$ sudo pacman -S mpv vlc                          <span class="comment"># 播放器</span></span><br></pre></td></tr></table></figure><h3 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S vim                              <span class="comment"># vim</span></span><br><span class="line">$ sudo pacman -S git                              <span class="comment"># git</span></span><br><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;usermail&quot;</span></span><br><span class="line">$ ssh-keygen -t rsa -c <span class="string">&quot;usermail&quot;</span></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">$ sudo pacman -S nodejs npm yarn                  <span class="comment"># nodejs &amp; npm &amp; yarn</span></span><br><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">$ sudo npm install -g hexo-cli                    <span class="comment"># hexo-blog</span></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">$ sudo pacman -S jdk8-openjdk jdk11-openjdk       <span class="comment"># java</span></span><br><span class="line">$ sudo archlinux-java <span class="built_in">set</span> java-8-openjdk          <span class="comment"># 版本转换</span></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">$ sudo pacman -S maven                            <span class="comment"># maven</span></span><br><span class="line">配置文件路径 `/opt/maven/conf/settings.xml`</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">$ sudo pacman -S python-pip                       <span class="comment"># pip</span></span><br><span class="line">$ pip install --user thefuck                      <span class="comment"># thefuck</span></span><br><span class="line"><span class="comment"># 下载慢时可更换源</span></span><br><span class="line">$ <span class="built_in">mkdir</span> ~/.pip</span><br><span class="line">$ nano ~/.pip/pip.conf</span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">$ yay -S pycharm                                  <span class="comment"># pycharm</span></span><br><span class="line">$ yay -S visual-studio-code-bin                   <span class="comment"># VScode</span></span><br><span class="line">$ yay -S jetbrains-toolbox                        <span class="comment"># Jetbrains 全家桶管理工具（包含Android Studio）</span></span><br><span class="line">$ sudo pacman -S make cmake                       <span class="comment"># 编译器</span></span><br><span class="line">$ sudo pacman -S clang                            <span class="comment"># C</span></span><br><span class="line">$ sudo pacman -S golang                           <span class="comment"># Go</span></span><br><span class="line">$ sudo pacman -S atom                             <span class="comment"># Atom</span></span><br><span class="line">$ sudo pacman -S gitkraken                        <span class="comment"># Gitkraken</span></span><br></pre></td></tr></table></figure><h3 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h3><p>系统优化包含于桌面美化之类，请各自选择是否适合自身</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl <span class="built_in">enable</span> fstrim.timer  <span class="comment"># 磁盘优化，SSD清理</span></span><br></pre></td></tr></table></figure><p><strong>zsh 修改主题</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br><span class="line"><span class="comment"># 主题，把默认的agnoster改为新的主题名称即可</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插件</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/.oh-my-zsh/custom/plugins/</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions</span><br><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">plugins=(</span><br><span class="line">git</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>更换没有的主题：<a href="https://github.com/Powerlevel9k/powerlevel9k">powerlevel9k</a>  <a href="https://github.com/romkatv/powerlevel10k">Powerlevel10k</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 旧版本与新版本，现以9k为例</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/bhilburn/powerlevel9k.git ~/.oh-my-zsh/custom/themes/powerlevel9k</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/romkatv/powerlevel10k ~/.oh-my-zsh/custom/themes/powerlevel10k</span><br><span class="line">$ sudo vim ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel9k/powerlevel9k&quot;</span></span><br><span class="line"><span class="comment">#自定义提示符内容，具体请查看github</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon context vcs)</span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(<span class="built_in">dir</span> time root_indicator)</span><br><span class="line">POWERLEVEL9K_MODE=<span class="string">&#x27;nerdfont-complete&#x27;</span></span><br><span class="line">POWERLEVEL9K_TIME_FORMAT=<span class="string">&#x27;%D&#123;%H:%M&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ==== Theme Settings ====</span></span><br><span class="line"><span class="comment"># PowerLevel9k</span></span><br><span class="line"><span class="comment"># 左侧栏目显示的要素（指定的关键字参考官网）</span></span><br><span class="line">POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(os_icon context <span class="built_in">dir</span> vcs)</span><br><span class="line"><span class="comment"># 右侧栏目显示的要素</span></span><br><span class="line">POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs time virtualenv)</span><br><span class="line"><span class="comment">#新起一行显示命令 (推荐！极其方便）</span></span><br><span class="line">POWERLEVEL9K_PROMPT_ON_NEWLINE=<span class="literal">true</span></span><br><span class="line"><span class="comment">#右侧状态栏与命令在同一行</span></span><br><span class="line">POWERLEVEL9K_RPROMPT_ON_NEWLINE=<span class="literal">true</span></span><br><span class="line"><span class="comment">#缩短目录层级</span></span><br><span class="line">POWERLEVEL9K_SHORTEN_DIR_LENGTH=1</span><br><span class="line"><span class="comment">#缩短目录策略：隐藏上层目录中间的字</span></span><br><span class="line"><span class="comment">#POWERLEVEL9K_SHORTEN_STRATEGY=&quot;truncate_middle&quot;</span></span><br><span class="line"><span class="comment">#添加链接上下链接箭头更方便查看</span></span><br><span class="line">POWERLEVEL9K_MULTILINE_FIRST_PROMPT_PREFIX=<span class="string">&quot;↱&quot;</span></span><br><span class="line">POWERLEVEL9K_MULTILINE_LAST_PROMPT_PREFIX=<span class="string">&quot;↳ &quot;</span></span><br><span class="line"><span class="comment"># 新的命令与上面的命令隔开一行</span></span><br><span class="line"><span class="comment">#POWERLEVEL9K_PROMPT_ADD_NEWLINE=true</span></span><br><span class="line"><span class="comment"># Git仓库状态的色彩指定</span></span><br><span class="line">POWERLEVEL9K_VCS_CLEAN_FOREGROUND=<span class="string">&#x27;blue&#x27;</span></span><br><span class="line">POWERLEVEL9K_VCS_CLEAN_BACKGROUND=<span class="string">&#x27;black&#x27;</span></span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=<span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND=<span class="string">&#x27;black&#x27;</span></span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=<span class="string">&#x27;red&#x27;</span></span><br><span class="line">POWERLEVEL9K_VCS_MODIFIED_BACKGROUND=<span class="string">&#x27;black&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>安装 alacritty</strong><br>alacritty 是一款仿终端工具，下载安装后，根据自需求进行配置即可，配置可参考 i3 配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S alacritty</span><br><span class="line">$ sudo vim ~/.i3/config</span><br><span class="line"><span class="comment"># start a terminal 修改默认终端</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Return <span class="built_in">exec</span> alacritty</span><br></pre></td></tr></table></figure><p>配置自定义<br>[Github 地址]:<a href="https://github.com/alacritty/alacritty/releases">https://github.com/alacritty/alacritty/releases</a><br>alacritty 配置文件与 i3 配置文件类似，若 .config 目录下没有 alacritty 目录则自行创建，并将上述配置文件根据自身版本复制过来</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">mkdir</span> ~/.config/alacritty</span><br><span class="line">$ sudo <span class="built_in">cp</span> /home/usrname/Downloads/alacritty.yml ~/.config/alacritty/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子：桌面背景透明化</span></span><br><span class="line">$ sudo vim ~/.config/alacritty/alacritty.yml</span><br><span class="line"><span class="comment"># Background opacity 背景不透明度</span></span><br><span class="line">background_opacity: 0.5</span><br></pre></td></tr></table></figure><p><strong>安装 feh</strong></p><p>背景壁纸自动刷新</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S feh</span><br><span class="line">$ sudo vim ~/.i3/config</span><br><span class="line"><span class="comment"># 首先创建背景目录，并设置每次启动 feh 自动随机选取壁纸作桌面</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id feh --randomize --big-fill /usr/share/backgrounds/*.jpg </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如上述不成功可尝试方法二</span></span><br><span class="line">$ vim ~/shell/wallpic.sh</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    find /usr/share/backgrounds -<span class="built_in">type</span> f \( -name <span class="string">&#x27;*.jpg&#x27;</span> -o -name <span class="string">&#x27;*.png&#x27;</span> \) -print0 |</span><br><span class="line">        <span class="built_in">shuf</span> -n1 -z | xargs -0 feh --bg-scale</span><br><span class="line">    <span class="built_in">sleep</span> 15m</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x wallpic.sh</span><br><span class="line"><span class="comment"># 设置开机自启脚本</span></span><br><span class="line">exec_always --no-startup-id ~/shell/wallpic.sh</span><br></pre></td></tr></table></figure><p>两种方法最后都使用 <code>$mod+shift+r</code> 重启 i3 就可以了</p><p><em>关于 feh 配置背景不生效问题</em>，虽然设置了 feh 桌面背景，但每次开机启动还是默认桌面背景，原因在于在 <code>~/.i3/config</code> 配置文件中可知，manjaro-i3 默认使用 <code>nitrogen</code> 来管理桌面背景的，配置文件在 <code>~/.config/nitrogen</code> ，可根据需要进行修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[xin_-1]</span><br><span class="line">file=/usr/share/backgrounds/i3_default_background.jpg</span><br><span class="line">mode=5</span><br><span class="line">bgcolor=<span class="comment">#002A36</span></span><br></pre></td></tr></table></figure><p><strong>安装 flameshot</strong></p><p>截图软件安装并设置快捷键</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S flameshot</span><br><span class="line">$ sudo vim ~/.i3/config</span><br><span class="line"><span class="comment"># 添加截图快捷方式</span></span><br><span class="line">bindsym Print --release <span class="built_in">exec</span> /usr/bin/flameshot gui</span><br><span class="line">for_window [class=<span class="string">&quot;flameshot&quot;</span>] floating <span class="built_in">enable</span> </span><br><span class="line"><span class="built_in">exec</span> --no-startup-id flameshot</span><br></pre></td></tr></table></figure><p><strong>终端透明渲染</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S picom</span><br><span class="line">$ sudo vim ~/.i3/config</span><br><span class="line">exec_always --no-startup-id picom</span><br><span class="line">$ sudo vim ~/.config/picom.conf</span><br><span class="line"><span class="comment"># Opacity</span></span><br><span class="line">inactive-opacity = 0.7;</span><br><span class="line">active-opacity = 0.9;</span><br></pre></td></tr></table></figure><p><strong>关闭桌面上左下角提示及右上角时间</strong><br>桌面上的信息都由 conky 服务提供，关闭 conky 服务并重置配置文件即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo <span class="built_in">kill</span> -9 $(ps aux | grep conky | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">$ sudo <span class="built_in">cd</span> /usr/share/conky</span><br><span class="line">$ sudo <span class="built_in">mv</span> conky_maia conky_maia.bak</span><br><span class="line">$ sudo <span class="built_in">mv</span> conky_1.10_shortcuts_maia conky_1.10_shortcuts_maia.bak</span><br><span class="line"><span class="comment"># 将下行进行注释</span></span><br><span class="line">$ sudo vim ~/.i3/config</span><br><span class="line"><span class="built_in">exec</span> --no-startup-id start_conky_maia</span><br></pre></td></tr></table></figure><p><strong>配置显示器</strong></p><p>首先要使用 <code>xrandr</code> 命令查看显示器参数，根据实际情况修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo vim ~/.i3/config</span><br><span class="line">xrandr --output HDMI-1 --same-as DVI-D-1 --auto           <span class="comment"># 双屏幕显示相同的内容--克隆</span></span><br><span class="line">xrandr --output HDMI-1 --same-as DVI-D-1 --mode 1280x1024 <span class="comment"># 指定外接显示器的分辨率</span></span><br><span class="line">xrandr --output HDMI-1 --right-of DVI-D-1 --auto          <span class="comment"># 外接显示器，设置为右侧扩展</span></span><br><span class="line">xrandr --output DVI-D-1 --off                             <span class="comment"># 关闭显示器</span></span><br><span class="line">xrandr --output HDMI-1 --auto --output DVI-D-1 --off      <span class="comment"># 打开HDMI-1接口显示器，关闭DVI-D-1接口显示器</span></span><br><span class="line">xrandr --output HDMI-0 --primary                          <span class="comment"># 设置主屏幕</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> manjaro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习_命令手册</title>
      <link href="/2022/04/07/linux/linux%E5%AD%A6%E4%B9%A0_%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/"/>
      <url>/2022/04/07/linux/linux%E5%AD%A6%E4%B9%A0_%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="D"><a href="#D" class="headerlink" title="D"></a>D</h3><h4 id="du"><a href="#du" class="headerlink" title="du"></a>du</h4><blockquote><p>显示每个文件和目录的磁盘使用空间</p><p><strong>du 命令</strong>是查看使用空间的，与 <strong>df 命令</strong>不同的是，<strong>du 命令</strong>是对文件和目录磁盘使用的空间的查看；</p></blockquote><p><strong>语法</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">du</span> [选项][文件]</span><br></pre></td></tr></table></figure><p><strong>选项</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a, --all                              显示目录中个别文件的大小。</span><br><span class="line">-B, --block-size=大小                   使用指定字节数的块</span><br><span class="line">-b, --bytes                            显示目录或文件大小时，以byte为单位。</span><br><span class="line">-c, --total                            除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</span><br><span class="line">-D, --dereference-args                 显示指定符号链接的源文件大小。</span><br><span class="line">-H, --si                               与-h参数相同，但是K，M，G是以1000为换算单位。</span><br><span class="line">-h, --human-readable                   以K，M，G为单位，提高信息的可读性。</span><br><span class="line">-k, --kilobytes                        以KB(1024bytes)为单位输出。</span><br><span class="line">-l, --count-links                      重复计算硬件链接的文件。</span><br><span class="line">-m, --megabytes                        以MB为单位输出。</span><br><span class="line">-L&lt;符号链接&gt;, --dereference&lt;符号链接&gt;     显示选项中所指定符号链接的源文件大小。</span><br><span class="line">-P, --no-dereference                   不跟随任何符号链接(默认)</span><br><span class="line">-0, --null                             将每个空行视作0 字节而非换行符</span><br><span class="line">-S, --separate-dirs                    显示个别目录的大小时，并不含其子目录的大小。</span><br><span class="line">-s, --summarize                        仅显示总计，只列出最后加总的值。</span><br><span class="line">-x, --one-file-xystem                  以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</span><br><span class="line">-X&lt;文件&gt;, --exclude-from=&lt;文件&gt;         在&lt;文件&gt;指定目录或文件。</span><br><span class="line">--apparent-size                        显示表面用量，而并非是磁盘用量；虽然表面用量通常会小一些，但有时它会因为稀疏文件间的<span class="string">&quot;洞&quot;</span>、内部碎片、非直接引用的块等原因而变大。</span><br><span class="line">--files0-from=F                        计算文件F中以NUL结尾的文件名对应占用的磁盘空间如果F的值是<span class="string">&quot;-&quot;</span>，则从标准输入读入文件名</span><br><span class="line">--exclude=&lt;目录或文件&gt;                   略过指定的目录或文件。</span><br><span class="line">--max-depth=N                          显示目录总计(与--all 一起使用计算文件)当N为指定数值时计算深度为N，等于0时等同--summarize</span><br><span class="line">--si                                   类似-h，但在计算时使用1000 为基底而非1024</span><br><span class="line">--time                                 显示目录或该目录子目录下所有文件的最后修改时间</span><br><span class="line">--time=WORD                            显示WORD时间，而非修改时间：atime，access，use，ctime 或status</span><br><span class="line">--time-style=样式                       按照指定样式显示时间(样式解释规则同<span class="string">&quot;date&quot;</span>命令)：full-iso，long-iso，iso，+FORMAT</span><br><span class="line">--<span class="built_in">help</span>                                 显示此帮助信息并退出</span><br><span class="line">--version                              显示版本信息并退出</span><br></pre></td></tr></table></figure><p><strong>实例</strong></p><ul><li>文件从大到小排序</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">du</span> -sh * | <span class="built_in">sort</span> -rh</span><br></pre></td></tr></table></figure><ul><li>只显示当前目录下子目录的大小</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">du</span> -sh ./*/</span><br></pre></td></tr></table></figure><ul><li>查看指定目录下文件所占的空间</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">du</span> ./*</span><br></pre></td></tr></table></figure><ul><li>只显示总和的大小</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">du</span> -s .</span><br></pre></td></tr></table></figure><ul><li>显示总和的大小且易读</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">du</span> -sh .</span><br></pre></td></tr></table></figure><h3 id="M"><a href="#M" class="headerlink" title="M"></a>M</h3><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p><strong>语法</strong></p><p><strong>选项</strong></p><p><strong>实例</strong></p><ul><li>批量重命名文件名(1.jpg、2.jpg…)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">11.jpg  12.jpg  13.jpg  14.jpg  15.jpg  16.jpg  17.jpg  18.jpg  19.jpg  20.jpg</span><br><span class="line">$ i=1;<span class="keyword">for</span> x <span class="keyword">in</span> *;<span class="keyword">do</span> <span class="built_in">mv</span> <span class="variable">$x</span> <span class="variable">$i</span>.jpg;<span class="built_in">let</span> i=i+1;<span class="keyword">done</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">10.jpg  1.jpg  2.jpg  3.jpg  4.jpg  5.jpg  6.jpg  7.jpg  8.jpg  9.jpg</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>025_Jenkins-部署方案优化</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/025_Jenkins-%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88%E4%BC%98%E5%8C%96/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/025_Jenkins-%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>之前部署方案存在的问题：</p><ul><li>一次只能选择一个微服务部署</li><li>只有一台生产部署服务器</li><li>每个微服务只有一个实例，容错率低</li></ul><p>优化方案：</p><ul><li>在一个 Jenkins 工程中可选择多个微服务同时发布</li><li>在一个 Jenkins 工程中可选择多台生产服务器同时部署</li><li>每个微服务都是以集群高可用形式部署</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/Jenkins%E6%96%B9%E6%A1%88%E4%BC%98%E5%8C%96.png"></p><h3 id="微服务配置"><a href="#微服务配置" class="headerlink" title="微服务配置"></a>微服务配置</h3><p>1）注册中心配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 集群版</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">EUREKA-HA</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 指定profile=eureka-server1</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">eureka-server1</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 指定当profile=eureka-server1时，主机名是eureka-server1</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">188.188</span><span class="number">.4</span><span class="number">.44</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">     <span class="comment"># 将自己注册到eureka-server1、eureka-server2这个Eureka上面去</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://188.188.4.44:10086/eureka/,http://188.188.4.45:10086/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10086</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">eureka-server2</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">188.188</span><span class="number">.4</span><span class="number">.45</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://188.188.4.44:10086/eureka/,http://188.188.4.45:10086/eureka/</span></span><br></pre></td></tr></table></figure><p>在启动微服务的时候，加入参数 <code>spring.profiles.active</code> 来读取对应的配置</p><p>2）其他微服务配置</p><p>除了 Eureka 注册中心以外，其他微服务配置都需要加入所有 Eureka 服务</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span>  </span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://188.188.4.44:10086/eureka,http://188.188.4.45:10086/eureka</span> <span class="comment"># Eureka访问地址</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="构建参数修改"><a href="#构建参数修改" class="headerlink" title="构建参数修改"></a>构建参数修改</h3><p>1）安装 <code>Extended Choice Parameter</code> 插件，支持多选框，创建流水线项目</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220124134544773.png" alt="image-20220124134544773"></p><p>2）完成多个项目代码审查功能</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220124150435746.png" alt="image-20220124150435746"></p><ul><li>脚本式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def tag = <span class="string">&quot;latest&quot;</span></span><br><span class="line">def harbor_url = <span class="string">&quot;188.188.3.83&quot;</span></span><br><span class="line">def harbor_project_name = <span class="string">&quot;spring&quot;</span></span><br><span class="line">def harbor_auth = <span class="string">&quot;f31ad7db-9383-4c71-afbf-d43d1138e673&quot;</span></span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">    //获取当前选择的项目名称</span><br><span class="line">    //tensquare_eureka_server@10086,tensquare_zuul@10020,... 项目名称、端口等微服务信息</span><br><span class="line">    def selectedProjects = <span class="string">&quot;<span class="variable">$&#123;project_name&#125;</span>&quot;</span>.<span class="built_in">split</span>(<span class="string">&#x27;,&#x27;</span>)  //字符串分割成字符串数组，以<span class="string">&quot;,&quot;</span>为分割</span><br><span class="line"></span><br><span class="line">    stage(<span class="string">&#x27;Pull Code&#x27;</span>) &#123;</span><br><span class="line">        checkout([<span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span>, branches: [[name: <span class="string">&quot;*/<span class="variable">$&#123;branch&#125;</span>&quot;</span>]], extensions: [], userRemoteConfigs: [[credentialsId: <span class="string">&#x27;gitlab-auth-ssh&#x27;</span>, url: <span class="string">&#x27;git@188.188.3.81:root/backend.git&#x27;</span>]]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(<span class="string">&#x27;Scan Code&#x27;</span>) &#123;</span><br><span class="line">        //引用当前Jenkins的SonarQubeScanner工具</span><br><span class="line">        def scannerHome = tool <span class="string">&#x27;SonarQube-Scanner&#x27;</span></span><br><span class="line">        withSonarQubeEnv(<span class="string">&#x27;SonarQube&#x27;</span>) &#123;</span><br><span class="line">            //以<span class="keyword">for</span>循环遍历所有微服务</span><br><span class="line">            <span class="keyword">for</span>(int i=0;i&lt;selectedProjects.size();i++)&#123;</span><br><span class="line">               //tensquare_eureka_server@10086</span><br><span class="line">               def currentProject = selectedProjects[i];</span><br><span class="line">               //当前遍历的项目名称</span><br><span class="line">               def currentProjectName = <span class="string">&quot;<span class="variable">$&#123;currentProject&#125;</span>&quot;</span>.<span class="built_in">split</span>(<span class="string">&quot;@&quot;</span>)[0]</span><br><span class="line">               //当前遍历的项目端口</span><br><span class="line">               def currentProjectPort = <span class="string">&quot;<span class="variable">$&#123;currentProject&#125;</span>&quot;</span>.<span class="built_in">split</span>(<span class="string">&quot;@&quot;</span>)[1]</span><br><span class="line"></span><br><span class="line">               sh <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">                   cd <span class="variable">$&#123;currentProjectName&#125;</span></span></span><br><span class="line"><span class="string">                   <span class="variable">$&#123;scannerHome&#125;</span>/bin/sonar-scanner</span></span><br><span class="line"><span class="string">               &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">               <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;currentProjectName&#125;</span>完成代码审查&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220124150656152.png" alt="image-20220124150656152"></p><p>3）编译、构建镜像并部署服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tag = &quot;latest&quot;</span><br><span class="line">def harbor_url = &quot;188.188.3.83&quot;</span><br><span class="line">def harbor_project_name = &quot;spring&quot;</span><br><span class="line">def harbor_auth = &quot;f31ad7db-9383-4c71-afbf-d43d1138e673&quot;</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line">    //获取当前选择的项目名称</span><br><span class="line">    //tensquare_eureka_server@10086,tensquare_zuul@10020,... 项目名称、端口等微服务信息</span><br><span class="line">    def selectedProjects = &quot;$&#123;project_name&#125;&quot;.split(&#x27;,&#x27;)  //字符串分割成字符串数组，以&quot;,&quot;为分割</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Scan Code&#x27;) &#123;</span><br><span class="line">        //引用当前Jenkins的SonarQubeScanner工具</span><br><span class="line">        def scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">        withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">            //以for循环遍历所有微服务</span><br><span class="line">            for(int i=0;i&lt;selectedProjects.size();i++)&#123;</span><br><span class="line">               //tensquare_eureka_server@10086</span><br><span class="line">               def currentProject = selectedProjects[i];</span><br><span class="line">               //当前遍历的项目名称</span><br><span class="line">               def currentProjectName = &quot;$&#123;currentProject&#125;&quot;.split(&quot;@&quot;)[0]</span><br><span class="line">               //当前遍历的项目端口</span><br><span class="line">               def currentProjectPort = &quot;$&#123;currentProject&#125;&quot;.split(&quot;@&quot;)[1]</span><br><span class="line"></span><br><span class="line">               sh &quot;&quot;&quot;</span><br><span class="line">                   cd $&#123;currentProjectName&#125;</span><br><span class="line">                   $&#123;scannerHome&#125;/bin/sonar-scanner</span><br><span class="line">               &quot;&quot;&quot;</span><br><span class="line">               echo &quot;$&#123;currentProjectName&#125;完成代码审查&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>024_Jenkins-部署前端静态web网站</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/024_Jenkins-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81web%E7%BD%91%E7%AB%99/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/024_Jenkins-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81web%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：nginx&#x2F;1.20.1</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl disable --now firewalld</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --add-service=http --permanent</span><br><span class="line">$ firewall-cmd --add-service=https --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>还需要关闭 selinux，将 SELINUX&#x3D;disabled</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /etc/selinux/conﬁg 编辑文件，永久关闭 SELINUX=disabled</span><br></pre></td></tr></table></figure><p><strong>项目流程：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/P22-Jenkins-%E9%83%A8%E7%BD%B2%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81web%E7%BD%91%E7%AB%99.png"></p><p>1）安装 Nginx</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install -y epel-release</span><br><span class="line">$ yum -y install nginx</span><br><span class="line">$ systemctl enable --now nginx</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220122150503816.png" alt="image-20220122150503816"></p><p>2）安装 NodeJS 插件</p><p>Manage Jenkins &gt; Global Tool Configuration</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220122152805253.png" alt="image-20220122152805253"></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>1）创建前端流水线项目</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220122153556047.png" alt="image-20220122153556047"></p><p>2）建立 Jenkinsfile 构建脚本</p><ul><li>脚本式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    stage(&#x27;pull code&#x27;) &#123; </span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/front.git&#x27;]]])</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;Build code&#x27;) &#123;</span><br><span class="line">        nodejs(&#x27;nodejs12&#x27;)&#123;</span><br><span class="line">            sh &#x27;&#x27;&#x27;</span><br><span class="line">                npm config set registry https://registry.npm.taobao.org  </span><br><span class="line">                npm install</span><br><span class="line">                npm run build</span><br><span class="line">            &#x27;&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;push code&#x27;) &#123;</span><br><span class="line">        sshPublisher(publishers: [sshPublisherDesc(configName: &#x27;server-44&#x27;, transfers: [sshTransfer(cleanRemote: false,remoteDirectory: &#x27;/usr/share/nginx/html&#x27;, remoteDirectorySDF: false, removePrefix: &#x27;dist&#x27;, sourceFiles: &#x27;dist/**&#x27;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;pull&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/front.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;build&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                nodejs(&#x27;nodejs12&#x27;)&#123;</span><br><span class="line">                sh &#x27;&#x27;&#x27;</span><br><span class="line">                npm config set registry https://registry.npm.taobao.org  </span><br><span class="line">                npm install</span><br><span class="line">                npm run build</span><br><span class="line">            &#x27;&#x27;&#x27;    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;push&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sshPublisher(publishers: [sshPublisherDesc(configName: &#x27;server-44&#x27;, transfers: [sshTransfer(cleanRemote: false,remoteDirectory: &#x27;/usr/share/nginx/html&#x27;, remoteDirectorySDF: false, removePrefix: &#x27;dist&#x27;, sourceFiles: &#x27;dist/**&#x27;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220122164734816.png" alt="image-20220122164734816"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>023_Jenkins-Docker+SpringCloud微服务构建</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/023_Jenkins-Docker+SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/023_Jenkins-Docker+SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h3><blockquote><p>Jenkins + Docker + SpringCloud 持续集成流程如下：</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/111.png"></p><ul><li>开发人员把代码提交到 Gitlab 代码仓库</li><li>Jenkins 从 Gitlab 中拉取项目源码，编译并打成 Jar 包，然后构建成 Docker 镜像，将镜像上传到 Harbor 私有仓库</li><li>Jenkins 发送 SSH 远程命令，让生产部署服务器到 Harbor 私有仓库拉取镜像到本地，然后创建容器</li><li>最后，用户可以访问到容器</li></ul><table><thead><tr><th>服务器名称</th><th>IP 地址</th><th>安装的软件</th></tr></thead><tbody><tr><td>代码托管服务器</td><td>188.188.3.81</td><td>Gitlab</td></tr><tr><td>持续集成服务器</td><td>188.188.3.82</td><td>Jenkins,Maven,Docker</td></tr><tr><td>Docker仓库服务器</td><td>188.188.3.83</td><td>Docker,Harbor</td></tr><tr><td>代码审查服务器</td><td>188.188.3.84</td><td>SonarQube</td></tr><tr><td>生产部署服务器</td><td>188.188.4.44</td><td>Docker,MySQL</td></tr></tbody></table><p><em>注意：上述流程需要提前配置好实验环境，安装好相关软件</em></p><p>项目架构：前后端分离</p><p>后端技术栈：SpringBoot+SpringCloud+SpringDataJpa（Spring全家桶）</p><p>前端技术栈：NodeJS+VueJS+ElementUI</p><p>微服务项目结构：</p><ul><li><p>parent：父工程，存放基础配置</p></li><li><p>eureka_server：SpringCloud 的 Eureka 注册中心</p></li><li><p>zuul：SpringCloud 的网关服务</p></li><li><p>common：通用工程，存入工具类</p></li><li><p>gathering：一个简单的业务模块，活动微服务相关逻辑</p></li><li><p>admin_server：基础权限认证中心，负责用户认证（JWT认证）</p></li></ul><p>数据库结构：</p><ul><li>user：用户认证数据库，存放用户账户数据，对应 admin_server 微服务</li><li>gathering：活动微服务数据库，对应 gathering 微服务</li></ul><h3 id="微服务持续集成"><a href="#微服务持续集成" class="headerlink" title="微服务持续集成"></a>微服务持续集成</h3><h4 id="项目代码上传到-Gitlab"><a href="#项目代码上传到-Gitlab" class="headerlink" title="项目代码上传到 Gitlab"></a>项目代码上传到 Gitlab</h4><p>1）将后端微服务和前端网站代码上传到 Gitlab</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220119111202428.png" alt="image-20220119111202428"></p><h4 id="从-Gitlab-拉取项目源码"><a href="#从-Gitlab-拉取项目源码" class="headerlink" title="从 Gitlab 拉取项目源码"></a>从 Gitlab 拉取项目源码</h4><p>1）创建项目并添加 Jenkinsfile 文件，添加拉取代码设计</p><ul><li>脚本式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>声明式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）添加创建化参数，将分支设置成变量</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220119165825192.png" alt="image-20220119165825192"></p><ul><li>脚本式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    stage(&#x27;Pull Code&#x27;) &#123;                                   //改成双引号+$&#123;变量名&#125;</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>声明式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">            steps &#123;                                           //改成双引号+$&#123;变量名&#125;</span><br><span class="line">                checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提交到-SonarQube-代码审查"><a href="#提交到-SonarQube-代码审查" class="headerlink" title="提交到 SonarQube 代码审查"></a>提交到 SonarQube 代码审查</h4><p>1）设置参数 <code>Choice Parameter</code> (因微服务项目都在同一个仓库下)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220119165033702.png" alt="image-20220119165033702"></p><p>2）每个项目的根目录下添加 sonar-project.properties</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># must be unique in a given SonarQube instance</span><br><span class="line">sonar.projectKey=tensquare_eureka_server</span><br><span class="line"></span><br><span class="line"># --- optional properties ---</span><br><span class="line"></span><br><span class="line"># defaults to project key</span><br><span class="line">sonar.projectName=tensquare_eureka_server</span><br><span class="line"># defaults to &#x27;not provided&#x27;</span><br><span class="line">sonar.projectVersion=v1.0</span><br><span class="line">sonar.exclusions=**/test/**,**/target/**</span><br><span class="line"> </span><br><span class="line"># Path is relative to the sonar-project.properties file. Defaults to .</span><br><span class="line">sonar.sources=.</span><br><span class="line"></span><br><span class="line">sonar.java.source=1.8</span><br><span class="line">sonar.java.target=1.8</span><br><span class="line">sonar.java.binaries=target</span><br><span class="line"></span><br><span class="line"># Encoding of the source code. Default is default system encoding</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure><p>注意：修改 <code>sonar.projectKey</code> 和 <code>sonar.projectName</code></p><p>3）修改 Jenkinsfile 构建脚本</p><ul><li>脚本式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Scan Code&#x27;) &#123;</span><br><span class="line">        def scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">        withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">            sh &quot;&quot;&quot;</span><br><span class="line">            cd $&#123;project_name&#125;</span><br><span class="line">            $&#123;scannerHome&#125;/bin/sonar-scanner</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Scan Code&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">                withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">                    sh &quot;&quot;&quot;</span><br><span class="line">                    cd $&#123;project_name&#125;</span><br><span class="line">                    $&#123;scannerHome&#125;/bin/sonar-scanner</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220119175037986.png" alt="image-20220119175037986"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220119180000949.png" alt="image-20220119180000949"></p><h4 id="插件构建-Docker-镜像"><a href="#插件构建-Docker-镜像" class="headerlink" title="插件构建 Docker 镜像"></a>插件构建 Docker 镜像</h4><p>利用 dockerﬁle-maven-plugin 插件构建 Docker 镜像</p><p>1）在每个微服务项目的 pom.xml 加入 dockerﬁle-maven-plugin 插件</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220120113336852.png" alt="image-20220120113336852"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>target/$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）在每个微服务项目根目录下建立 Dockerﬁle 文件</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220120113418169.png" alt="image-20220120113418169"></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#FROM java:8</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> <span class="variable">$&#123;JAR_FILE&#125;</span> app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9001</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>注意：每个项目的公开端口都不一样</p><p>3）修改 Jenkinsfile 构建脚本，并构建项目</p><ul><li>脚本式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Scan Code&#x27;) &#123;</span><br><span class="line">        def scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">        withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">            sh &quot;&quot;&quot;</span><br><span class="line">            cd $&#123;project_name&#125;</span><br><span class="line">            $&#123;scannerHome&#125;/bin/sonar-scanner</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;Build image&#x27;) &#123;</span><br><span class="line">        //编译，安装公共工程</span><br><span class="line">        sh &quot;mvn -f tensquare_common clean install&quot;</span><br><span class="line">        //编译，构建本地镜像</span><br><span class="line">        sh &quot;mvn -f $&#123;project_name&#125; clean package dockerfile:build&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Scan Code&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">                withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">                    sh &quot;&quot;&quot;</span><br><span class="line">                    cd $&#123;project_name&#125;</span><br><span class="line">                    $&#123;scannerHome&#125;/bin/sonar-scanner</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        stage(&#x27;Build image&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;mvn -f tensquare_common clean install&quot;</span><br><span class="line">                sh &quot;mvn -f $&#123;project_name&#125; clean package dockerfile:build&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220120174823525.png" alt="image-20220120174823525"></p><h4 id="上传至-Harbor-镜像仓库"><a href="#上传至-Harbor-镜像仓库" class="headerlink" title="上传至 Harbor 镜像仓库"></a>上传至 Harbor 镜像仓库</h4><p>1）使用凭证管理 Harbor 私服账户和密码</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220120180024281.png" alt="image-20220120180024281"></p><p>再生成凭证脚本代码</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220120180255958.png" alt="image-20220120180255958"></p><p>2）给镜像打上标签并上传至 Harbor</p><ul><li>脚本式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tag = &quot;latest&quot;</span><br><span class="line">def harbor_url = &quot;188.188.3.83&quot;</span><br><span class="line">def harbor_project_name = &quot;spring&quot;</span><br><span class="line">def harbor_auth = &quot;f31ad7db-9383-4c71-afbf-d43d1138e673&quot;</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Scan Code&#x27;) &#123;</span><br><span class="line">        def scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">        withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">            sh &quot;&quot;&quot;</span><br><span class="line">            cd $&#123;project_name&#125;</span><br><span class="line">            $&#123;scannerHome&#125;/bin/sonar-scanner</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;Build image&#x27;) &#123;</span><br><span class="line">        //定义镜像名称</span><br><span class="line">        def imageName = &quot;$&#123;project_name&#125;:$&#123;tag&#125;&quot; </span><br><span class="line">        //编译，安装公共工程</span><br><span class="line">        sh &quot;mvn -f tensquare_common clean install&quot;</span><br><span class="line">        //编译，构建本地镜像</span><br><span class="line">        sh &quot;mvn -f $&#123;project_name&#125; clean package dockerfile:build&quot;</span><br><span class="line">        //给镜像打标签</span><br><span class="line">        sh &quot;docker tag $&#123;imageName&#125; $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;imageName&#125;&quot;</span><br><span class="line">        //登录harbor,并上传镜像</span><br><span class="line">        withCredentials([usernamePassword(credentialsId: &quot;$&#123;harbor_auth&#125;&quot;, passwordVariable: &#x27;password&#x27;, usernameVariable: &#x27;username&#x27;)]) &#123;</span><br><span class="line">            sh &quot;docker login -u $&#123;username&#125; -p $&#123;password&#125; $&#123;harbor_url&#125;&quot;</span><br><span class="line">            sh &quot;docker push $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;imageName&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        //删除本地镜像</span><br><span class="line">        sh &quot;docker rmi -f $&#123;imageName&#125;&quot;</span><br><span class="line">        sh &quot;docker rmi -f $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;imageName&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明式</li></ul><p>注意：声明式此处使用了变量 <code>$&#123;BUILD_ID&#125;</code>，目的是区分是哪次的构建任务，脚本式修改同理；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def harbor_url = &quot;188.188.3.83&quot;</span><br><span class="line">def harbor_project_name = &quot;spring&quot;</span><br><span class="line">def harbor_auth = &quot;f31ad7db-9383-4c71-afbf-d43d1138e673&quot;</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Scan Code&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">                withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">                    sh &quot;&quot;&quot;</span><br><span class="line">                    cd $&#123;project_name&#125;</span><br><span class="line">                    $&#123;scannerHome&#125;/bin/sonar-scanner</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        stage(&#x27;Build image&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;mvn -f tensquare_common clean install&quot;</span><br><span class="line">                sh &quot;mvn -f $&#123;project_name&#125; clean package dockerfile:build&quot;</span><br><span class="line">                sh &quot;docker tag $&#123;project_name&#125;:latest $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;project_name&#125;:$&#123;BUILD_ID&#125;&quot;</span><br><span class="line">                withCredentials([usernamePassword(credentialsId: &quot;$&#123;harbor_auth&#125;&quot;, passwordVariable: &#x27;password&#x27;, usernameVariable: &#x27;username&#x27;)]) &#123;</span><br><span class="line">                    sh &quot;docker login -u $&#123;username&#125; -p $&#123;password&#125; $&#123;harbor_url&#125;&quot;</span><br><span class="line">                    sh &quot;docker push $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;project_name&#125;:$&#123;BUILD_ID&#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220121150356590.png" alt="image-20220121150356590"></p><h4 id="镜像拉取并远程发布"><a href="#镜像拉取并远程发布" class="headerlink" title="镜像拉取并远程发布"></a>镜像拉取并远程发布</h4><p>1）安装 <code>Publish Over SSH</code> 插件</p><p>安装插件，实现远程发送 Shell 命令，进行拉取镜像及发布应用 (插件已停用，请自行离线下载)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220121164143831.png" alt="image-20220121164143831"></p><p>2）配置远程部署服务器</p><ul><li>拷贝公钥到远程服务器 [Jenkins 服务器拷到远程部署服务器]</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-copy-id 188.188.4.44</span><br></pre></td></tr></table></figure><ul><li>系统配置 &gt; 添加远程服务器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220121165437882.png" alt="image-20220121165437882"></p><p>3）修改 Jenkins 脚本，选择 <code>SSH Server</code> 即可，通过 Jenkins SSH 调用远程部署服务器脚本</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220121170021421.png" alt="image-20220121170021421"></p><ul><li>脚本式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def tag = &quot;latest&quot;</span><br><span class="line">def harbor_url = &quot;188.188.3.83&quot;</span><br><span class="line">def harbor_project_name = &quot;spring&quot;</span><br><span class="line">def harbor_auth = &quot;f31ad7db-9383-4c71-afbf-d43d1138e673&quot;</span><br><span class="line"></span><br><span class="line">node &#123;</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stage(&#x27;Scan Code&#x27;) &#123;</span><br><span class="line">        def scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">        withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">            sh &quot;&quot;&quot;</span><br><span class="line">            cd $&#123;project_name&#125;</span><br><span class="line">            $&#123;scannerHome&#125;/bin/sonar-scanner</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;Build image&#x27;) &#123;</span><br><span class="line">        //定义镜像名称</span><br><span class="line">        def imageName = &quot;$&#123;project_name&#125;:$&#123;tag&#125;&quot; </span><br><span class="line">        //编译，安装公共工程</span><br><span class="line">        sh &quot;mvn -f tensquare_common clean install&quot;</span><br><span class="line">        //编译，构建本地镜像</span><br><span class="line">        sh &quot;mvn -f $&#123;project_name&#125; clean package dockerfile:build&quot;</span><br><span class="line">        //给镜像打标签</span><br><span class="line">        sh &quot;docker tag $&#123;imageName&#125; $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;imageName&#125;&quot;</span><br><span class="line">        //登录harbor,并上传镜像</span><br><span class="line">        withCredentials([usernamePassword(credentialsId: &quot;$&#123;harbor_auth&#125;&quot;, passwordVariable: &#x27;password&#x27;, usernameVariable: &#x27;username&#x27;)]) &#123;</span><br><span class="line">            sh &quot;docker login -u $&#123;username&#125; -p $&#123;password&#125; $&#123;harbor_url&#125;&quot;</span><br><span class="line">            sh &quot;docker push $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;imageName&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        //删除本地镜像</span><br><span class="line">        sh &quot;docker rmi -f $&#123;imageName&#125;&quot;</span><br><span class="line">        sh &quot;docker rmi -f $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;imageName&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;pull image&#x27;) &#123;</span><br><span class="line">        sshPublisher(publishers: [sshPublisherDesc(configName: &#x27;server-44&#x27;, transfers: [sshTransfer(cleanRemote: false, excludes: &#x27;&#x27;, execCommand: &quot;/root/deploy.sh $harbor_url $harbor_project_name $project_name $tag $port&quot;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>声明式</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def harbor_url = &quot;188.188.3.83&quot;</span><br><span class="line">def harbor_project_name = &quot;spring&quot;</span><br><span class="line">def harbor_auth = &quot;f31ad7db-9383-4c71-afbf-d43d1138e673&quot;</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;Pull Code&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &quot;*/$&#123;branch&#125;&quot;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/backend.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;Scan Code&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">                withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">                    sh &quot;&quot;&quot;</span><br><span class="line">                    cd $&#123;project_name&#125;</span><br><span class="line">                    $&#123;scannerHome&#125;/bin/sonar-scanner</span><br><span class="line">                    &quot;&quot;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        stage(&#x27;Build image&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sh &quot;mvn -f tensquare_common clean install&quot;</span><br><span class="line">                sh &quot;mvn -f $&#123;project_name&#125; clean package dockerfile:build&quot;</span><br><span class="line">                sh &quot;docker tag $&#123;project_name&#125;:latest $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;project_name&#125;:$&#123;BUILD_ID&#125;&quot;</span><br><span class="line">                withCredentials([usernamePassword(credentialsId: &quot;$&#123;harbor_auth&#125;&quot;, passwordVariable: &#x27;password&#x27;, usernameVariable: &#x27;username&#x27;)]) &#123;</span><br><span class="line">                    sh &quot;docker login -u $&#123;username&#125; -p $&#123;password&#125; $&#123;harbor_url&#125;&quot;</span><br><span class="line">                    sh &quot;docker push $&#123;harbor_url&#125;/$&#123;harbor_project_name&#125;/$&#123;project_name&#125;:$&#123;BUILD_ID&#125;&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">        stage(&#x27;Pull image&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                sshPublisher(publishers: [sshPublisherDesc(configName: &#x27;server-44&#x27;, transfers: [sshTransfer(cleanRemote: false, excludes: &#x27;&#x27;, execCommand: &quot;/root/deploy.sh $harbor_url $harbor_project_name $project_name $&#123;BUILD_ID&#125; $port&quot;)], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>脚本文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line"><span class="comment">#接收外部参数</span></span><br><span class="line">harbor_url=<span class="variable">$1</span></span><br><span class="line">harbor_project_name=<span class="variable">$2</span></span><br><span class="line">project_name=<span class="variable">$3</span></span><br><span class="line">tag=<span class="variable">$4</span></span><br><span class="line">port=<span class="variable">$5</span></span><br><span class="line">imageName=<span class="variable">$harbor_url</span>/<span class="variable">$harbor_project_name</span>/<span class="variable">$project_name</span>:<span class="variable">$tag</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$imageName</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#停掉并删除无用的docker容器</span></span><br><span class="line">docker stop $(docker ps | grep <span class="variable">$&#123;project_name&#125;</span>|awk <span class="string">&#x27;&#123;print  $1&#125;&#x27;</span>|sed <span class="string">&#x27;s/%//g&#x27;</span>)</span><br><span class="line">docker <span class="built_in">rm</span> $(sudo docker ps -a | grep <span class="variable">$&#123;project_name&#125;</span>|awk <span class="string">&#x27;&#123;print  $1&#125;&#x27;</span>|sed <span class="string">&#x27;s/%//g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取镜像id</span></span><br><span class="line">imagesid=`docker images|grep -i <span class="variable">$imageName</span>|awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断镜像是否存在如果存在则删除，否则不删除</span></span><br><span class="line"><span class="keyword">if</span>  [ ! -n <span class="string">&quot;<span class="variable">$imagesid</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$imagesid</span> <span class="string">&quot;is null&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    docker rmi -f <span class="variable">$imagesid</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录Harbor私服</span></span><br><span class="line">docker login -u itcast -p Itcast123 <span class="variable">$harbor_url</span></span><br><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line">docker pull <span class="variable">$imageName</span></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker run -di -p <span class="variable">$port</span>:<span class="variable">$port</span> --name=<span class="variable">$&#123;project_name&#125;</span> --restart=always <span class="variable">$imageName</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;容器启动成功&quot;</span></span><br></pre></td></tr></table></figure><p>注意：因为声明式的 Tag 是根据构建次数来生成，所以进行删除 <code>imagesid</code> 时未能生效，可使用定期删除镜像任务</p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>022_Harbor-创建用户和项目</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/022_Harbor-%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%92%8C%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/022_Harbor-%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%92%8C%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="创建用户和项目"><a href="#创建用户和项目" class="headerlink" title="创建用户和项目"></a>创建用户和项目</h3><p>1）创建项目</p><p>Harbor 的项目分为公开和私有的：</p><ul><li>公开项目：所有用户都可以访问，通常存放公共的镜像，默认有 library 公共项目</li><li>私有项目：只有授权用户才可以访问，通常存放项目本身的镜像</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220119100501734.png" alt="image-20220119100501734"></p><p>2）创建用户</p><p>创建用户 spring&#x2F;spring123</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220119100748034.png" alt="image-20220119100748034"></p><p>3）给私有项目分配用户</p><p>进入 spring 项目 &gt; 成员</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220119100842098.png" alt="image-20220119100842098"></p><table><thead><tr><th>角色</th><th>权限说明</th></tr></thead><tbody><tr><td>访客</td><td>对于指定项目拥有只读权限</td></tr><tr><td>开发人员</td><td>对于指定项目拥有读写权限</td></tr><tr><td>维护人员</td><td>对于指定项目拥有读写权限，创建 webhooks</td></tr><tr><td>项目管理员</td><td>除了读写权限，同时拥有用户管理&#x2F;镜像扫描等管理权限</td></tr></tbody></table><h3 id="镜像上传下载"><a href="#镜像上传下载" class="headerlink" title="镜像上传下载"></a>镜像上传下载</h3><p><strong>把镜像上传到 Harbor</strong></p><p>1）给镜像打上标签</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker tag eureka:v1 188.188.3.83/spring/eureka:v1</span><br></pre></td></tr></table></figure><p>2）推送镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker push 188.188.3.83/spring/eureka:v1</span><br></pre></td></tr></table></figure><p>如报错，是因为 Docker 没把 Harbor 加入信任列表中</p><p>3）把 Harbor 地址加入到 Docker 信任列表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;:[</span><br><span class="line">    &quot;https://eihzr0te.mirror.aliyuncs.com&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;],</span><br><span class="line"> &quot;insecure-registries&quot;:[&quot;188.188.3.83&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）重启 Docker，再次推送命令，会提示权限不足，需要登录 Harbor，再推送镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker login -u username -p password 188.188.3.83</span><br></pre></td></tr></table></figure><p><strong>从 Harbor 下载镜像</strong></p><p>1）安装 Docker，并正常启动 Docker</p><p>2）将 Harbor 地址加入 <code>daemon.json</code> 信任列表，重启服务</p><p>3）先登录，再从 Harbor 下载镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull 188.188.3.83/spring/eureka:v1</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>021_CentOS7-安装Harbor(offline)</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/021_CentOS7-%E5%AE%89%E8%A3%85Harbor(offline)/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/021_CentOS7-%E5%AE%89%E8%A3%85Harbor(offline)/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署："><a href="#环境部署：" class="headerlink" title="环境部署："></a>环境部署：</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：docker-ce-19.03.15 + docker-compose-linux-x86_64(v2.2.2) + harbor v2.4.1</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl disable --now firewalld</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --add-service=ssh --permanent</span><br><span class="line">$ firewall-cmd --add-service=http --permanent</span><br><span class="line">$ firewall-cmd --add-service=https --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><blockquote><p>Docker 要求系统内核版本高于3.10，安装前请确认系统内核版本是否支持</p></blockquote><p>安装需要的软件包，yum-util 提供 yum-config-manager 功能，另外两个 是devicemapper 驱动依赖的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum -y install yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>由于国内访问不到 docker 官方镜像的缘故，可以通过 aliyun 的源来完成</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">$ yum makecache fast</span><br></pre></td></tr></table></figure><p>安装 docker，默认最新版(<strong>docker-ce:社区版 ee:企业版</strong>)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install docker-ce docker-ce-cli containerd.io -y</span><br></pre></td></tr></table></figure><p><strong>参考：安装特定docker版本(先列出列出可用版本)–可选择性安装</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line">$ yum install docker-ce-19.03.15 docker-ce-cli-19.03.15 containerd.io -y</span><br></pre></td></tr></table></figure><p>所有节点设置防火墙规则，并让生效(关闭防火墙可略过)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /lib/systemd/system/docker.service</span><br><span class="line">[Service]</span><br><span class="line">ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT</span><br><span class="line"></span><br><span class="line"># 启动并加入开机启动</span><br><span class="line">$ systemctl start docker &amp;&amp; systemctl enable docker</span><br></pre></td></tr></table></figure><p>镜像加速器：阿里云加速器，daocloud 加速器，中科大加速器<br>Docker 中国官方镜像加速：<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat &gt; /etc/docker/daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">      &quot;https://eihzr0te.mirror.aliyuncs.com&quot;,</span><br><span class="line">      &quot;https://dockerhub.mirrors.nwafu.edu.cn/&quot;,</span><br><span class="line">      &quot;https://mirror.ccs.tencentyun.com&quot;,</span><br><span class="line">      &quot;https://docker.mirrors.ustc.edu.cn/&quot;,</span><br><span class="line">      &quot;https://reg-mirror.qiniu.com&quot;,</span><br><span class="line">      &quot;http://hub-mirror.c.163.com/&quot;,</span><br><span class="line">      &quot;https://registry.docker-cn.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 重启 docker 服务</span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="安装-Docker-compose"><a href="#安装-Docker-compose" class="headerlink" title="安装 Docker-compose"></a>安装 Docker-compose</h3><blockquote><p>Docker Compose 是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用，使用 compose，可以通过 YAML 文件声明式的定义应用程序的各个服务，并由单个命令完成应用的创建和启动</p></blockquote><p>1）在线安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -L &quot;https://github.com/docker/compose/releases/download/v1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">$ chmod +x /usr/local/bin/docker-compose</span><br><span class="line">$ docker-compose --version</span><br></pre></td></tr></table></figure><p>2）离线安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/docker/compose/releases/download/v2.2.2/docker-compose-linux-x86_64</span><br><span class="line">$ mv docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">$ chmod +x /usr/local/bin/docker-compose</span><br><span class="line">$ docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="安装-Harbor"><a href="#安装-Harbor" class="headerlink" title="安装 Harbor"></a>安装 Harbor</h3><blockquote><p>本文采用 http 和离线安装方式，如需使用 https + 域名方式，请参考 Harbor 官方文档</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/goharbor/harbor/releases/download/v2.4.1/harbor-offline-installer-v2.4.1.tgz</span><br><span class="line">$ tar -xf harbor-offline-installer-v2.3.1.tgz -C /opt/ &amp;&amp; cd /opt/harbor</span><br><span class="line">$ cp harbor.yml.tmpl harbor.yml &amp;&amp; vim harbor.yml</span><br></pre></td></tr></table></figure><p>1）修改配置文件，若是采用 http 方式搭建，可忽视 https 的配置部分，将其注释掉</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Configuration file of Harbor</span><br><span class="line"></span><br><span class="line"># The IP address or hostname to access admin UI and registry service.</span><br><span class="line"># DO NOT use localhost or 127.0.0.1, because Harbor needs to be accessed by external clients.</span><br><span class="line">hostname: 188.188.3.83                            //http+IP方式</span><br><span class="line"></span><br><span class="line"># http related config</span><br><span class="line">http:</span><br><span class="line">  # port for http, default is 80. If https enabled, this port will redirect to https port</span><br><span class="line">  port: 80                                        //端口可自定义</span><br><span class="line"></span><br><span class="line"># https related config                            //非https，注释</span><br><span class="line"># https:</span><br><span class="line">#   # https port for harbor, default is 443</span><br><span class="line">#   port: 443</span><br><span class="line">#   # The path of cert and key files for nginx</span><br><span class="line">#   certificate: /your/certificate/path</span><br><span class="line">#   private_key: /your/private/key/path</span><br><span class="line"></span><br><span class="line"># # Uncomment following will enable tls communication between all harbor components</span><br><span class="line"># internal_tls:</span><br><span class="line">#   # set enabled to true means internal tls is enabled</span><br><span class="line">#   enabled: true</span><br><span class="line">#   # put your cert and key files on dir</span><br><span class="line">#   dir: /etc/harbor/tls/internal</span><br><span class="line"></span><br><span class="line"># Uncomment external_url if you want to enable external proxy</span><br><span class="line"># And when it enabled the hostname will no longer used</span><br><span class="line"># external_url: https://reg.mydomain.com:8433</span><br><span class="line"></span><br><span class="line"># The initial password of Harbor admin</span><br><span class="line"># It only works in first time to install harbor</span><br><span class="line"># Remember Change the admin password from UI after launching Harbor.</span><br><span class="line">harbor_admin_password: Harbor12345                //登录密码</span><br><span class="line"></span><br><span class="line"># Harbor DB configuration</span><br><span class="line">database:</span><br><span class="line">  # The password for the root user of Harbor DB. Change this before any production use.</span><br><span class="line">  password: root123</span><br><span class="line">  # The maximum number of connections in the idle connection pool. If it &lt;=0, no idle connections are retained.</span><br><span class="line">  max_idle_conns: 100</span><br><span class="line">  # The maximum number of open connections to the database. If it &lt;= 0, then there is no limit on the number of open connections.</span><br><span class="line">  # Note: the default number of connections is 1024 for postgres of harbor.</span><br><span class="line">  max_open_conns: 900</span><br><span class="line"></span><br><span class="line"># The default data volume</span><br><span class="line">data_volume: /data                                //数据存放路径</span><br></pre></td></tr></table></figure><p>执行预备脚本 <code>./prepare</code>，待测试完出现 <code>Successfully called func: create_root_cert</code> 表示可正常部署</p><p>2）执行安装脚本(<code>--with-chartmuseum</code> 是安装chart仓库，不使用helm可不添加该参数)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ./install.sh --with-chartmuseum --with-trivy</span><br><span class="line"># 成功部署会显示以下提示</span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br></pre></td></tr></table></figure><p>3）设置开机自启动</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /usr/lib/systemd/system/harbor.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Harbor</span><br><span class="line">After=docker.service systemd-networkd.service systemd-resolved.service</span><br><span class="line">Requires=docker.service</span><br><span class="line">Documentation=http://github.com/vmware/harbor</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">ExecStart=/usr/local/bin/docker-compose -f  /opt/harbor/docker-compose.yml up</span><br><span class="line">ExecStop=/usr/local/bin/docker-compose -f /opt/harbor/docker-compose.yml down</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl enable --now harbor &amp;&amp; systemctl status harbor</span><br></pre></td></tr></table></figure><p>使用浏览器打开 <a href="http://188.188.3.83/">http://188.188.3.83</a>  账密：admin&#x2F;Harbor12345 即可登录<br><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220118154117139.png" alt="image-20220118154117139"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>020_Jenkins-流水线项目实现代码审查</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/020_Jenkins-%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/020_Jenkins-%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>非流水项目同样可以使用 sonar-project.properties 文件方式</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115173152107.png" alt="image-20220115173152107"></p><p>1）在项目根目录下，创建 sonar-project.properties 文件</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115173923880.png" alt="image-20220115173923880"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 测试实例</span><br><span class="line"># must be unique in a given SonarQube instance</span><br><span class="line">sonar.projectKey=pipeline_demo</span><br><span class="line"></span><br><span class="line"># --- optional properties ---</span><br><span class="line"></span><br><span class="line"># defaults to project key</span><br><span class="line">sonar.projectName=pipeline_demo</span><br><span class="line"># defaults to &#x27;not provided&#x27;</span><br><span class="line">sonar.projectVersion=$BUILD_DISPLAY_NAME</span><br><span class="line">sonar.exclusions=**/test/**,**/target/**</span><br><span class="line"> </span><br><span class="line"># Path is relative to the sonar-project.properties file. Defaults to .</span><br><span class="line">sonar.sources=.</span><br><span class="line"></span><br><span class="line">sonar.java.source=1.8</span><br><span class="line">sonar.java.target=1.8</span><br><span class="line"></span><br><span class="line"># Encoding of the source code. Default is default system encoding</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure><p>2）修改 Jenkinsfile，加入 SonarQube 代码审查阶段</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;拉取代码&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/web_demo.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;扫描代码&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               script &#123;</span><br><span class="line">                   //引入Jenkins配置的全局变量SonarQube-Scanner工具</span><br><span class="line">                   scannerHome = tool &#x27;SonarQube-Scanner&#x27;</span><br><span class="line">               &#125;</span><br><span class="line">               //引入Jenkins配置的系统设置服务器环境</span><br><span class="line">               withSonarQubeEnv(&#x27;SonarQube&#x27;) &#123;</span><br><span class="line">                   sh &quot;$&#123;scannerHome&#125;/bin/sonar-scanner&quot;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        stage(&#x27;编译构建&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               sh &#x27;mvn clean package&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        stage(&#x27;部署发布&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               deploy adapters: [tomcat8(credentialsId: &#x27;tomcat-auth&#x27;, path: &#x27;&#x27;, url: &#x27;http://188.188.4.44:8080&#x27;)], contextPath: null, war: &#x27;target/*.war&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            emailext(</span><br><span class="line">                subject: &#x27;构建通知：$&#123;PROJECT_NAME&#125; - Build # $&#123;BUILD_NUMBER&#125; - $&#123;BUILD_STATUS&#125;!&#x27;,body: &#x27;$&#123;FILE,path=&quot;email.html&quot;&#125;&#x27;,to: &#x27;228003666@qq.com&#x27;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3）查看审查结果，到 Jenkins、SonarQube 的 UI 界面可以查看详细内容<br><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220117140925561.png" alt="image-20220117140925561"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>019_Jenkins-非流水线项目实现代码审查</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/019_Jenkins-%E9%9D%9E%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/019_Jenkins-%E9%9D%9E%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%A0%81%E5%AE%A1%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>以自由风格的 web_demo 项目为例</p></blockquote><p><strong>配置 SonarQube 分析属性，可以指向现有的 Sonar-project.properties 文件或直接在分析属性字段中设置分析属性</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115172337368.png" alt="image-20220115172337368"></p><p>1）创建项目，以之前的 maven 构建步骤一样，构建 &gt; 增加步骤 Execute SonarQube Scanner</p><ul><li>Task to run：SonarQube 执行的命令</li><li>JDK：Jenkins 全局变量的 JDK 版本</li><li>Path to project properties：代码审查的配置文件路径（sonar-project.properties）</li><li>Analysis properties：填写代码审查的配置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115172003283.png" alt="image-20220115172003283"></p><p><strong>根据自身的环境进行填写 Analysis properties</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 官网参考文档</span><br><span class="line"># must be unique in a given SonarQube instance</span><br><span class="line">sonar.projectKey=my:project                //唯一标记，供代码到sonarqube所定义的唯一标记</span><br><span class="line"></span><br><span class="line"># --- optional properties ---</span><br><span class="line"></span><br><span class="line"># defaults to project key</span><br><span class="line">#sonar.projectName=My project              //项目的名称，一般与key一样</span><br><span class="line"># defaults to &#x27;not provided&#x27;</span><br><span class="line">#sonar.projectVersion=1.0                  //版本号</span><br><span class="line">sonar.exclusions=**/test/**,**/target/**   //排除的元素，过滤不去扫描的文件目录</span><br><span class="line"> </span><br><span class="line"># Path is relative to the sonar-project.properties file. Defaults to .</span><br><span class="line">#sonar.sources=.                           //指定sonarqube扫描的路径，一般为根目录，或指定目录/src/man/**</span><br><span class="line"></span><br><span class="line">sonar.java.source=1.8                      //jdk的版本</span><br><span class="line">sonar.java.target=1.8</span><br><span class="line"></span><br><span class="line"># Encoding of the source code. Default is default system encoding</span><br><span class="line">#sonar.sourceEncoding=UTF-8                //源码的编码格式</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 测试实例</span><br><span class="line"># must be unique in a given SonarQube instance</span><br><span class="line">sonar.projectKey=free-web_demo</span><br><span class="line"></span><br><span class="line"># --- optional properties ---</span><br><span class="line"></span><br><span class="line"># defaults to project key</span><br><span class="line">sonar.projectName=free-web_demo</span><br><span class="line"># defaults to &#x27;not provided&#x27;</span><br><span class="line">sonar.projectVersion=$BUILD_DISPLAY_NAME</span><br><span class="line">sonar.exclusions=**/test/**,**/target/**</span><br><span class="line"> </span><br><span class="line"># Path is relative to the sonar-project.properties file. Defaults to .</span><br><span class="line">sonar.sources=.</span><br><span class="line"></span><br><span class="line">sonar.java.source=1.8</span><br><span class="line">sonar.java.target=1.8</span><br><span class="line"></span><br><span class="line"># Encoding of the source code. Default is default system encoding</span><br><span class="line">sonar.sourceEncoding=UTF-8</span><br></pre></td></tr></table></figure><p>2）点击构建后，可查看构建日志及 SonarQube 项目结果</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115162807498.png" alt="image-20220115162807498"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115162901547.png" alt="image-20220115162901547"></p><p>3）在 SonarQube 点击项目，可详细查看 Bug、异常、问题等具体错误信息</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115163347601.png" alt="image-20220115163347601"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>018_Jenkins-与SonarQube整合</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/018_Jenkins-%E4%B8%8ESonarQube%E6%95%B4%E5%90%88/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/018_Jenkins-%E4%B8%8ESonarQube%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Jenkins 代码审查过程</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115143204263.png" alt="image-20220115143204263"></p><p>1）安装 SonarQube Scanner 插件，添加 SonarQube 凭证</p><p>插件已安装后，首先到 SonarQube &gt; 右上角用户管理 &gt; 安全 &gt; 填写令牌名称，创建 Token</p><p><strong>【sonarqube 支持生成用户 token，以便在命令行或者脚本中使用 token 代表账号操作 sonarbue，避免造成账号密码的泄露】</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115144153276.png" alt="image-20220115144153276"></p><p>(d9428e7bbaf27369829987d643be7c6f14503ce4，token 要记下来后面使用)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115150042647.png" alt="image-20220115150042647"></p><p>2）进行 SonarQube 配置</p><p>Manage Jenkins &gt; Configure System &gt; SonarQube Servers</p><p>首先添加刚安装好的 SonarQube 服务器地址及凭证认证</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115150711126.png" alt="image-20220115150711126"></p><p>Manage Jenkins &gt; Global Tool Configuration</p><p>Jenkins 使用代码扫描功能还需要整合 SonarQube Scanner，才能与 SonarQube 进行交互</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115151155456.png" alt="image-20220115151155456"></p><p><strong>关闭审查结果上传到 SCM 功能</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220115155511656.png" alt="image-20220115155511656"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>017_CentOS7-安装SonarQube</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/017_CentOS7-%E5%AE%89%E8%A3%85SonarQube/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/017_CentOS7-%E5%AE%89%E8%A3%85SonarQube/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：SonarQube 8.9.6 LTS + JDK 11 + PostgreSQL 12</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl disable --now firewalld</span><br><span class="line">$ sed -i &#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27; /etc/selinux/config /etc/sysconfig/selinux</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --zone=public --add-port=9000/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><blockquote><p>注意：根据不同版本，需要的环境支持也不一样，在此使用得是 JDK11、PostgreSQL 12</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408120851.png" alt="20220408120851.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408120926.png" alt="20220408120926.png"></p><p>1）<strong>内核配置</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysctl.conf</span><br><span class="line"># 文件末尾加入如下配置</span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">fs.file-max=65536</span><br><span class="line">$ sysctl -p</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /etc/security/limits.conf</span><br><span class="line"># 文件末尾加入如下配置</span><br><span class="line">*softnofile65536</span><br><span class="line">*hardnofile65536</span><br><span class="line">*softnproc4096</span><br><span class="line">*hardnproc4096</span><br></pre></td></tr></table></figure><p>2）安装 Java</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install -y java-11-openjdk java-11-openjdk-devel</span><br><span class="line"></span><br><span class="line"># 查看并确认具体安装路径</span><br><span class="line">$ which java</span><br><span class="line">$ ls -lr /usr/bin/java</span><br><span class="line">$ ls -lrt /etc/alternatives/java</span><br><span class="line">/etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64/bin/java</span><br><span class="line"></span><br><span class="line"># 配置环境变量</span><br><span class="line">$ vim /etc/profile</span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">$ source /etc/profile</span><br></pre></td></tr></table></figure><p>3）安装 PostgreSQL</p><ul><li>下载 RPM 文件安装并初始化</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm -y</span><br><span class="line">$ yum install postgresql10-contrib postgresql10-server -y</span><br><span class="line">$ /usr/pgsql-10/bin/postgresql-10-setup initdb</span><br></pre></td></tr></table></figure><ul><li>修改配置，开启访问权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /var/lib/pgsql/10/data/pg_hba.conf&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 peer、ident 改为 trust ，改了6行</span></span><br><span class="line">$ vim /var/lib/pgsql/10/data/pg_hba.conf</span><br><span class="line"><span class="comment"># &quot;local&quot; is for Unix domain socket connections only</span></span><br><span class="line"><span class="built_in">local</span>   all             all                                     trust</span><br><span class="line"><span class="comment"># IPv4 local connections:</span></span><br><span class="line">host    all             all             127.0.0.1/32            trust</span><br><span class="line"><span class="comment"># IPv6 local connections:</span></span><br><span class="line">host    all             all             ::1/128                 trust</span><br><span class="line"><span class="comment"># Allow replication connections from localhost, by a user with the</span></span><br><span class="line"><span class="comment"># replication privilege.</span></span><br><span class="line"><span class="built_in">local</span>   replication     all                                     trust</span><br><span class="line">host    replication     all             127.0.0.1/32            trust</span><br><span class="line">host    replication     all             ::1/128                 trust</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl enable --now postgresql-10.service</span><br></pre></td></tr></table></figure><ul><li>创建用户及数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ su - postgres</span><br><span class="line">Last login: Mon Nov  1 11:14:43 CST 2021 on pts/0</span><br><span class="line">-bash-4.2$ psql</span><br><span class="line">psql (10.18)</span><br><span class="line">Type &quot;help&quot; for help.</span><br><span class="line">postgres=# CREATE DATABASE sonar TEMPLATE template0 ENCODING &#x27;utf8&#x27; ;</span><br><span class="line">postgres=# create user sonar;</span><br><span class="line">postgres=# alter user sonar with password &#x27;sonar&#x27;;</span><br><span class="line">postgres=# alter role sonar createdb;</span><br><span class="line">postgres=# alter role sonar superuser;</span><br><span class="line">postgres=# alter role sonar createrole;</span><br><span class="line">postgres=# alter database sonar owner to sonar;</span><br><span class="line">postgres=# \q</span><br><span class="line">-bash-4.2$ exit</span><br></pre></td></tr></table></figure><h3 id="安装-SonarQube"><a href="#安装-SonarQube" class="headerlink" title="安装 SonarQube"></a>安装 SonarQube</h3><ul><li>添加独立用户，下载安装包并解压修改权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ adduser sonar</span><br><span class="line">$ wget -c https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-8.9.6.50800.zip</span><br><span class="line">$ unzip sonarqube-8.9.6.50800.zip</span><br><span class="line">$ mv sonarqube-8.9.6.50800 /usr/local/sonarqube</span><br><span class="line">$ chown -R sonar:sonar /usr/local/sonarqube/</span><br></pre></td></tr></table></figure><ul><li>配置修改，链接 postgresql</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/sonarqube/conf/sonar.properties</span><br><span class="line">sonar.jdbc.username=sonar</span><br><span class="line">sonar.jdbc.password=sonar</span><br><span class="line">sonar.jdbc.url=jdbc:postgresql://localhost/sonar</span><br><span class="line">sonar.jdbc.maxActive=60</span><br><span class="line">sonar.jdbc.maxIdle=5</span><br><span class="line">sonar.jdbc.minIdle=2</span><br><span class="line">sonar.jdbc.maxWait=5000</span><br><span class="line">sonar.jdbc.minEvictableIdleTimeMillis=600000</span><br><span class="line">sonar.jdbc.timeBetweenEvictionRunsMillis=30000</span><br><span class="line">sonar.jdbc.removeAbandoned=true</span><br><span class="line">sonar.jdbc.removeAbandonedTimeout=60</span><br></pre></td></tr></table></figure><ul><li>修改环境变量</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line">export SONAR_HOME=/usr/local/sonarqube</span><br><span class="line">export SONAR_RUNNER_HOME=/usr/local/sonar-scanner</span><br><span class="line">export PATH=$PATH:$SONAR_RUNNER_HOME/bin</span><br><span class="line">export PATH=$PATH:$SONAR_HOME/bin</span><br><span class="line">$ source /etc/profile</span><br></pre></td></tr></table></figure><ul><li>启动服务并设置开机自启</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ su - sonar</span><br><span class="line">$ cd /usr/local/sonarqube/bin/linux-x86-64/</span><br><span class="line">$ ./sonar.sh start</span><br><span class="line">Starting SonarQube...</span><br><span class="line">Started SonarQube.</span><br><span class="line"># 其他命令</span><br><span class="line">Usage: ./sonar.sh &#123; console | start | stop | force-stop | restart | status | dump &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/sonar.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=SonarQube Server</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"> </span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/sonarqube/bin/linux-x86-64/sonar.sh start</span><br><span class="line">ExecStop= /usr/local/sonarqube/bin/linux-x86-64/sonar.sh stop</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line">LimitNPROC=4096</span><br><span class="line">User=sonar</span><br><span class="line">Group=sonar</span><br><span class="line">Restart=on-failure</span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl restart sonar.service</span><br><span class="line">$ systemctl enable --now sonar.service &amp;&amp; systemctl status sonar.service</span><br></pre></td></tr></table></figure><h3 id="程序汉化"><a href="#程序汉化" class="headerlink" title="程序汉化"></a>程序汉化</h3><blockquote><p>汉化请自行到 Github 下载相应版本，再上传到 <code>./sonarqube/extensions/plugins</code>，重启服务即可</p><p>默认账密 admin&#x2F;admin，<a href="http://server-ip:9000/">http://server-IP:9000</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408121010.png" alt="20220408121010.png"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonarqube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>016_Jenkins-配置邮箱服务</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/016_Jenkins-%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/016_Jenkins-%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>1）安装 Email Extension 插件，并设置邮箱相关参数</p><p>设置系统发件人邮箱</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114165421158.png" alt="image-20220114165421158"></p><p>设置邮件参数</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114164738248.png" alt="image-20220114164738248"></p><p>设置 Jenkins 默认邮箱信息，并测试功能是否正常</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114165313400.png" alt="image-20220114165313400"></p><p>2）准备邮件内容</p><p>PS：邮件相关全局参数参考列表：</p><p>系统设置 &gt; Extended E-mail Notification &gt; Content Token Reference，点击旁边的 ? 号</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114170312325.png" alt="image-20220114170312325"></p><p>在项目根目录编写 email.html，并把文件推送到 Gitlab，内容如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var=&quot;JOB_NAME&quot;&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">topmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;4&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">style</span>=<span class="string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0000FF&quot;</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称<span class="symbol">&amp;nbsp;</span>：<span class="symbol">&amp;nbsp;</span>$&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号<span class="symbol">&amp;nbsp;</span>：<span class="symbol">&amp;nbsp;</span>第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因：<span class="symbol">&amp;nbsp;</span>$&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志：<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;console&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>Url<span class="symbol">&amp;nbsp;</span>：<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录<span class="symbol">&amp;nbsp;</span>：<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;ws&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>Url<span class="symbol">&amp;nbsp;</span>：<span class="symbol">&amp;nbsp;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>Changes Since Last</span><br><span class="line">            Successful Build:<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>历史变更记录 : <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;changes&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> $&#123;CHANGES_SINCE_LAST_SUCCESS,reverse=true, format=&quot;Changes for Build #%n:<span class="tag">&lt;<span class="name">br</span> /&gt;</span>%c<span class="tag">&lt;<span class="name">br</span> /&gt;</span>&quot;,showPaths=true,changesFormat=&quot;<span class="tag">&lt;<span class="name">pre</span>&gt;</span>[%a]<span class="tag">&lt;<span class="name">br</span> /&gt;</span>%m<span class="tag">&lt;/<span class="name">pre</span>&gt;</span>&quot;,pathFormat=&quot;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>%p&quot;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Failed Test Results<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span></span></span><br><span class="line"><span class="tag">                <span class="attr">style</span>=<span class="string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;</span>&gt;</span>$FAILED_TESTS<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>构建日志 (最后 100行):<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;80&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;30&quot;</span> <span class="attr">readonly</span>=<span class="string">&quot;readonly&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">style</span>=<span class="string">&quot;font-family: Courier New&quot;</span>&gt;</span>$&#123;BUILD_LOG, maxLines=100&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写 Jenkinsfile 添加构建后发送邮件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;拉取代码&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/web_demo.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;编译构建&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               sh &#x27;mvn clean package&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        stage(&#x27;部署发布&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               deploy adapters: [tomcat8(credentialsId: &#x27;tomcat-auth&#x27;, path: &#x27;&#x27;, url: &#x27;http://188.188.4.44:8080&#x27;)], contextPath: null, war: &#x27;target/*.war&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    post &#123;</span><br><span class="line">        always &#123;</span><br><span class="line">            emailext(</span><br><span class="line">                subject: &#x27;构建通知：$&#123;PROJECT_NAME&#125; - Build # $&#123;BUILD_NUMBER&#125; - $&#123;BUILD_STATUS&#125;!&#x27;,body: &#x27;$&#123;FILE,path=&quot;email.html&quot;&#125;&#x27;,to: &#x27;228003666@qq.com&#x27;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114172401714.png" alt="image-20220114172401714"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>015_Jenkins-参数化构建(入门)</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/015_Jenkins-%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BA(%E5%85%A5%E9%97%A8)/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/015_Jenkins-%E5%8F%82%E6%95%B0%E5%8C%96%E6%9E%84%E5%BB%BA(%E5%85%A5%E9%97%A8)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在项目构建的过程中，有时需要根据需求，由用户输入一些动态的参数，从而影响整个构建结果，这时就可以使用参数化构建</p></blockquote><p>Jenkins [This project is parameterized] 支持的参数类型有：</p><ul><li>凭据参数</li><li>字符参数：String Parameter</li><li>密码参数：Password Parameter</li><li>布尔值参数：Boolean Parameter</li><li>文件参数：File Parameter</li><li>文本参数：Multi-line Parameter</li><li>运行时间参数：Run Parameter</li><li>选项参数：Choice Parameter</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114153813576.png" alt="image-20220114153813576"></p><p>接下通过简单例子进行说明：手动输入 Gitlab 项目的分支名称来部署不同的分支项目</p><p>1）项目创建分支</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114154924880.png" alt="image-20220114154924880"></p><p>2）在 Jenkins 添加字符类型参数</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114155226492.png" alt="image-20220114155226492"></p><p>3）改变 Pipeline 流水线代码</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114155503968.png" alt="image-20220114155503968"></p><p>输入分支名称，构建即可，构建完成后可查看结果为 V1 分支的项目</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114155733208.png" alt="image-20220114155733208"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>014_Jenkins-Githook自动触发构建</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/014_Jenkins-Githook%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91%E6%9E%84%E5%BB%BA/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/014_Jenkins-Githook%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>轮询 SCM 可以实现 Gitlab 代码更新，项目自动构建，但定时扫描整个项目的代码，无疑是增加系统的压力。而更好的方案就是利用 Gitlab 的 webhook 实现代码 push 到仓库，立即触发项目自动构建</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114143540169.png" alt="image-20220114143540169"></p><p><strong>安装Gitlab hook 插件</strong>，设置自动构建</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114150159960.png" alt="image-20220114150159960"></p><p><strong>Gitlab 配置 Webhook</strong></p><p>1）使用 root 账户登录到后台，点击 Admin Area &gt; Settngs &gt; Network</p><p>勾选”Allow requests to the local network from web hooks and services”</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114150524536.png" alt="image-20220114150524536"></p><p>2）在项目添加 webhook</p><p>点击项目 &gt; Settings &gt; webhooks</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114151808598.png" alt="image-20220114151808598"></p><p><strong>注意事项：需要提前到 Jenkins 配置，否则会报错</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114152031016.png" alt="image-20220114152031016"></p><p>修改 Jenkins Gitlab 配置，再次测试</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114152251194.png" alt="image-20220114152251194"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114152204768.png" alt="image-20220114152204768"></p><p>通过修改代码并提交 push，即自动发起构建任务</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114152447065.png" alt="image-20220114152447065"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114152622866.png" alt="image-20220114152622866"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>013_Jenkins-常用构建触发器</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/013_Jenkins-%E5%B8%B8%E7%94%A8%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/013_Jenkins-%E5%B8%B8%E7%94%A8%E6%9E%84%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Jenkins 内置 4 种构建触发器：</p><ul><li>触发远程构建（Trigger builds remotely）</li><li>其他工程构建后触发（Build after other projects are build）</li><li>定时构建（Build periodically）</li><li>轮询SCM（Poll SCM）</li></ul><h3 id="触发远程构建"><a href="#触发远程构建" class="headerlink" title="触发远程构建"></a>触发远程构建</h3><p>通过访问特殊的预定义URL(便于脚本)来触发新的构建，以字符串的形式提供授权令牌来控制是否拒绝构建</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113182205511.png" alt="image-20220113182205511"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113182730783.png" alt="image-20220113182730783"></p><h3 id="其他工程构建后触发"><a href="#其他工程构建后触发" class="headerlink" title="其他工程构建后触发"></a>其他工程构建后触发</h3><p>待前置工程完成后即可触发，例子如下：</p><p>1）创建前置工程流水线</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114110146037.png" alt="image-20220114110146037"></p><p>2）配置需要触发的工程</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114110346655.png" alt="image-20220114110346655"></p><p>前置工程 Build Now 时，后置工程自动触发任务进行 Build 操作</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114110521435.png" alt="image-20220114110521435"></p><h3 id="定时构建"><a href="#定时构建" class="headerlink" title="定时构建"></a>定时构建</h3><p>定时构建与 crontab 功能同义，都是制定时间任务进行</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114111035305.png" alt="image-20220114111035305"></p><p>定时字符串从左往右分别为：分 时 日 月 周</p><p><strong>参考例子：</strong></p><blockquote><p>每30分钟构建一次：H代表形参 H&#x2F;30 * * * *  </p><ul><li>如时为10，H为2(分)，表示意思：10:02、10:32、11:02、11:32…</li><li>如时为10，H为0(分)，表示意思：整点 10:00、10:30、11:00…</li></ul><p>每2小时构建一次：H H&#x2F;2 * * *</p><ul><li>H未定义，表示任意点数开始</li></ul><p>每天的8点，12点，22点，一天构建3次(多个时间点中间逗号隔开)：0 8,12,22 * * *</p><ul><li>0代表整点，小时以逗号隔开，设定定期时间8、12、22</li></ul><p>每天中午12点定时构建一次：H 12 * * *</p><p>每天下午18点定时构建一次：H 18 * * *</p><ul><li>24小时制，定时任务</li></ul><p>在每个小时的前半个小时内的每10分种：H(0-29)&#x2F;10 * * * *</p><p>每两小时一次，每个工作日上午9点到下午5点(也许是上午10:38，下午12:38，下午2:38，下午4:38：H H(9-16)&#x2F;2 * * 1-5</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114121703856.png" alt="image-20220114121703856"></p><p>根据定时构建，每隔一分钟执行一次</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114121757257.png" alt="image-20220114121757257"></p><h3 id="轮询-SCM"><a href="#轮询-SCM" class="headerlink" title="轮询 SCM"></a>轮询 SCM</h3><p>指定时扫描本地代码仓库的代码是否有变更，如果代码有变更就触发项目构建</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114141259200.png" alt="image-20220114141259200"></p><p>每两分钟进行一次轮询，判断代码是否有变动，有则构建(阶段视图显示为commit)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220114141447004.png" alt="image-20220114141447004"></p><p>注意：这次构建触发器，Jenkins 会定时扫描本地整个项目的代码，增大系统的开销，不建议使用</p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>012_Jenkins-编译构建与远程部署脚本编写</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/012_Jenkins-%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/012_Jenkins-%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA%E4%B8%8E%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>直接在 Jenkins 的 UI 界面编写 Pipeline 代码，这样不方便日常脚本维护，建议把 Pipeline 脚本放在项目中，与源代码一起进行版本控制</p></blockquote><p><strong>Pipeline Script from SCM</strong></p><p>1）在项目根目录建立 Jenkinsfile 文件，把内容复制到该文件中</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113173536547.png" alt="image-20220113173536547"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113173740240.png" alt="image-20220113173740240"></p><p>2）在项目中引用该文件</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113180333561.png" alt="image-20220113180333561"></p><p>3）构建项目，读取 Jenkinsfile 文件再进行流水线</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113180859016.png" alt="image-20220113180859016"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>011_Jenkins-构建项目类型</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/011_Jenkins-%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/011_Jenkins-%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>Jenkins 中自动构建项目的类型有很多，常用的有以下三种：</p><ul><li>自动风格软件项目（FreeStyle Project）</li><li>Maven 项目（Maven Project）</li><li>流水线项目（Pipeline Project）</li></ul><p>每个类型的构建其实都可以完成一样的构建过程与结果，请根据实际需求来选择</p><h3 id="FreeStyle"><a href="#FreeStyle" class="headerlink" title="FreeStyle"></a>FreeStyle</h3><p>下面演示创建一个自由风格项目来完成项目的集成过程：</p><blockquote><p>拉取代码 &gt; 编译 &gt; 打包 &gt; 部署</p></blockquote><p>1）创建项目，配置源码管理，从 gitlab 拉取代码</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113140038334.png" alt="image-20220113140038334"> </p><p>2）编译打包，Build &gt; Add build step &gt; Execute shell</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113140224947.png" alt="image-20220113140224947"></p><p>3）项目部署，把项目部署到远程的 Tomcat(Jenkins 本身无法实现远程部署到 Tomcat 的功能，需要安装 Deploy to container 插件实现)</p><ul><li>安装 Deploy to container 插件</li><li>添加 Tomcat 用户凭证</li></ul><p>4）添加构建后操作</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113142042633.png" alt="image-20220113142042633"></p><p>点击”Build Now”，开始构建过程</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113142553015.png" alt="image-20220113142553015"></p><p>5）部署成功后，访问测试 <a href="http://188.188.4.44:8080/web_demo-1.0-SNAPSHOT/">http://188.188.4.44:8080/web_demo-1.0-SNAPSHOT/</a></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113142814239.png" alt="image-20220113142814239"></p><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>1）安装 Maven Integration 插件并创建 Maven 项目</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113145022489.png" alt="image-20220113145022489"></p><p>2）配置项目，拉取代码和远程部署的过程和 FreeStyle 一样，只有”构建”部分不同</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113145554130.png" alt="image-20220113145554130"></p><p>3）点击”Build Now”，开始构建过程</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113145939578.png" alt="image-20220113145939578"></p><p>4）部署成功后，访问测试 <a href="http://188.188.4.44:8080/web_demo-1.0-SNAPSHOT/">http://188.188.4.44:8080/web_demo-1.0-SNAPSHOT/</a></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113150032166.png" alt="image-20220113150032166"></p><h3 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h3><p>Pipeline 有两种语法，<strong>Declarative(声明式)</strong> 和 <strong>Scripted Pipeline(脚本式)</strong> 语法</p><p>Pipeline 也有两种创建方法，可以直接在 Jenkins 的 Web UI 界面中输入脚本；也可以通过创建一个 Jenkinsfile 脚本文件放入项目源码库中；</p><blockquote><p>一般推荐使用 Jenkins 中直接从源代码控制(SCM)直接载入 Jenkinsfile Pipeline 这种方法</p></blockquote><p>1）安装插件 Pipeline，安装插件后，创建项目“流水线”类型</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113152914943.png" alt="image-20220113152914943"></p><h4 id="Declarative-声明式"><a href="#Declarative-声明式" class="headerlink" title="Declarative 声明式"></a>Declarative 声明式</h4><p>流水线 &gt; 选择 HelloWorld 模板</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113153059375.png" alt="image-20220113153059375"></p><ul><li>agent：指定部署的节点，这里选择所有 any</li><li>stages：代表整个流水线的所有执行阶段，通常只有1个，里面可包含多个 stage</li><li>stage：代表流水线中的某个阶段，可能出现 n 个，一般分为拉取代码、编译构建、部署等阶段</li><li>steps：代表一个阶段内需要执行的逻辑，里面可以是 shell 脚本、git 拉取代码，ssh 远程发布等任意操作</li></ul><p>编写简单声明式 Pipeline 模板：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;拉取代码&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;拉取代码&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;编译构建&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;编译构建&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        stage(&#x27;部署发布&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo &#x27;部署发布&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113154154702.png" alt="image-20220113154154702"></p><h4 id="Scripted-脚本式"><a href="#Scripted-脚本式" class="headerlink" title="Scripted 脚本式"></a>Scripted 脚本式</h4><p>采用同样方式创建，这次选择”Scripted Pipeline”</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113155041530.png" alt="image-20220113155041530"></p><p>模板解释：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    def mvnHome</span><br><span class="line">    stage(&#x27;Preparation&#x27;) &#123; // for display purposes</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;Build&#x27;) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;Results&#x27;) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Node：节点，可以是 Jenkins 的 Master 或 Agent，是执行 Step 的执行环境</li><li>Stage：阶段，Pipeline 可划分多个 Stage，每个代表一组操作，如：Build、Test、Deploy</li><li>Step  ：步骤，最基本的操作单元，如打印一段话、构建一个 Docker 镜像，由各类插件组成，又如命令：she ‘make’，就相当于 shell 终端下执行 make 命令</li></ul><p>编写简单脚本式 Pipeline 模板：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    def mvnHome</span><br><span class="line">    stage(&#x27;拉取代码&#x27;) &#123; // for display purposes</span><br><span class="line">       echo &#x27;拉取代码&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;编译构建&#x27;) &#123;</span><br><span class="line">       echo &#x27;编译构建&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(&#x27;部署发布&#x27;) &#123;</span><br><span class="line">       echo &#x27;部署发布&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113160232336.png" alt="image-20220113160232336"></p><p>构建结果和声明式一样！</p><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>通过 <code>Pipeline Syntax(语法流水线)</code> 定制流水线过程</p><ul><li>拉取代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113170627313.png" alt="image-20220113170627313"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;拉取代码&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/web_demo.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>编译打包</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113171357343.png" alt="image-20220113171357343"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;拉取代码&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/web_demo.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;编译构建&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               sh &#x27;mvn clean package&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>部署发布</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113171609788.png" alt="image-20220113171609788"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&#x27;拉取代码&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], extensions: [], userRemoteConfigs: [[credentialsId: &#x27;gitlab-auth-ssh&#x27;, url: &#x27;git@188.188.3.81:root/web_demo.git&#x27;]]])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#x27;编译构建&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               sh &#x27;mvn clean package&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        stage(&#x27;部署发布&#x27;) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">               deploy adapters: [tomcat8(credentialsId: &#x27;tomcat-auth&#x27;, path: &#x27;&#x27;, url: &#x27;http://188.188.4.44:8080&#x27;)], contextPath: null, war: &#x27;target/*.war&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113172101629.png" alt="image-20220113172101629"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>010_Jenkins-Maven安装及配置</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/010_Jenkins-Maven%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/010_Jenkins-Maven%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 Jenkins 服务器上，我们需要安装 Maven 来编译和打包项目</p></blockquote><h3 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h3><p>下载或上传 Maven 软件包到服务器进行解压，配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz</span><br><span class="line">$ tar -xf apache-maven-3.8.1-bin.tar.gz -C /usr/local/ &amp;&amp; mv /usr/local/apache-maven-3.8.1 /usr/local/maven</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"># maven</span><br><span class="line">export MAVEN_HOME=/usr/local/maven</span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:/usr/local/mysql/bin:$&#123;MAVEN_HOME&#125;/bin:$PATH</span><br><span class="line">$ source /etc/profile</span><br><span class="line"></span><br><span class="line">$ mvn -v</span><br><span class="line">Apache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)</span><br><span class="line">Maven home: /usr/local/maven</span><br><span class="line">Java version: 1.8.0_291, vendor: Oracle Corporation, runtime: /usr/local/java/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: &quot;linux&quot;, version: &quot;5.15.10-1.el7.elrepo.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</span><br></pre></td></tr></table></figure><h3 id="配置关联"><a href="#配置关联" class="headerlink" title="配置关联"></a>配置关联</h3><p>Manage Jenkins &gt; Global Tool Configuration &gt; JDK，配置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113112135582.png" alt="image-20220113112135582"></p><p>Manage Jenkins &gt; Global Tool Configuration &gt; Maven，配置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113112240946.png" alt="image-20220113112240946"></p><p><strong>添加 Jenkins 全局变量</strong></p><p>Manage Jenkins &gt; Configure System &gt; Global Properties，添加三个全局变量 JAVA_HOME、M2_HOME、PATH+EXTRA</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113112521754.png" alt="image-20220113112521754"></p><p><strong>修改 Maven 的 Settings.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ mkdir -p /root/.m2/repo                            //创建本地仓库目录</span><br><span class="line">$ vim /usr/local/maven/conf/settings.xml</span><br><span class="line">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line">  --&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/root/.m2/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span>  //取消注释并修改本地仓库位置</span><br><span class="line">  </span><br><span class="line"># 添加阿里云公共仓库</span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a>测试配置</h3><p>使用之前的 springboot_demo 测试项目，构建 &gt; 增加构建步骤 &gt; Execute Shell</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113114904777.png" alt="image-20220113114904777"></p><p>构建成功，除了源码正常拉取外，还从阿里公共库下载组件并打包成 jar 包</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113115228336.png" alt="image-20220113115228336"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ll ~/.m2/repo/</span><br><span class="line">total 4</span><br><span class="line">drwxr-x---.  3 root root   19 Jan 13 11:50 antlr</span><br><span class="line">drwxr-x---.  3 root root   25 Jan 13 11:50 aopalliance</span><br><span class="line">drwxr-x---.  3 root root   38 Jan 13 11:51 backport-util-concurrent</span><br><span class="line">drwxr-x---.  3 root root   17 Jan 13 11:50 ch</span><br><span class="line">drwxr-x---.  3 root root   25 Jan 13 11:51 classworlds</span><br><span class="line">drwxr-x---. 10 root root  128 Jan 13 11:51 com</span><br><span class="line">drwxr-x---.  3 root root   27 Jan 13 11:50 commons-codec</span><br><span class="line">drwxr-x---.  3 root root   33 Jan 13 11:50 commons-collections</span><br><span class="line">drwxr-x---.  3 root root   35 Jan 13 11:50 commons-configuration</span><br><span class="line">drwxr-x---.  3 root root   24 Jan 13 11:51 commons-io</span><br><span class="line">drwxr-x---.  3 root root   28 Jan 13 11:50 commons-jxpath</span><br><span class="line">drwxr-x---.  3 root root   26 Jan 13 11:50 commons-lang</span><br><span class="line">drwxr-x---.  3 root root   29 Jan 13 11:50 commons-logging</span><br><span class="line">drwxr-x---.  7 root root   91 Jan 13 11:50 io</span><br><span class="line">drwxr-x---.  9 root root  113 Jan 13 11:52 javax</span><br><span class="line">drwxr-x---.  3 root root   23 Jan 13 11:50 joda-time</span><br><span class="line">drwxr-x---.  3 root root   19 Jan 13 11:51 junit</span><br><span class="line">drwxr-x---.  5 root root   50 Jan 13 11:51 net</span><br><span class="line">drwxr-x---. 32 root root 4096 Jan 13 11:52 org</span><br><span class="line">drwxr-x---.  3 root root   22 Jan 13 11:50 stax</span><br><span class="line">drwxr-x---.  3 root root   21 Jan 13 11:50 xmlpull</span><br><span class="line">drwxr-x---.  3 root root   22 Jan 13 11:50 xpp3</span><br><span class="line"></span><br><span class="line">$ ll /root/.jenkins/workspace/project-ssh/target</span><br><span class="line">total 46080</span><br><span class="line">drwxr-x---. 3 root root       59 Jan 13 11:51 classes</span><br><span class="line">drwxr-x---. 3 root root       25 Jan 13 11:51 generated-sources</span><br><span class="line">drwxr-x---. 2 root root       28 Jan 13 11:52 maven-archiver</span><br><span class="line">drwxr-x---. 3 root root       35 Jan 13 11:51 maven-status</span><br><span class="line">-rw-r-----. 1 root root 47178795 Jan 13 11:52 spring-cloud-eureka-0.0.1-SNAPSHOT.jar</span><br><span class="line">-rw-r-----. 1 root root     3540 Jan 13 11:52 spring-cloud-eureka-0.0.1-SNAPSHOT.jar.original</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>009_Jenkins-凭证管理</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/009_Jenkins-%E5%87%AD%E8%AF%81%E7%AE%A1%E7%90%86/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/009_Jenkins-%E5%87%AD%E8%AF%81%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><blockquote><p>凭据可以用来存储需要密文保护的数据库密码、GitLab 密码信息、Docker 私有仓库密码等，以便 Jenkins 可以和这些第三方的应用进行交互</p></blockquote><ol><li>要在 Jenkins 使用凭证管理功能，需要安装 Credentials Binding 插件</li></ol><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112164930438.png" alt="image-20220112164930438"></p><p>安装后在管理页面就可看到 Manage Credentials</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112165622831.png" alt="image-20220112165622831"></p><p>凭证类型有 5 种：</p><ul><li>Username with password：用户名和密码</li><li>SSH Username with private key：使用 SSH 用户和密钥</li><li>Secret file：需要保密的文本文件，使用时 Jenkins 会将文件复制到一个临时目录中，再将文件路径设置到一个变量中，等构建结束后，所复制的 Secret file 就会被删除</li><li>Secret test：需要保存的一个加密的文本串，如钉钉机器人或 Github 的 API Token</li><li>Certificate：通过上传证书文件的方式</li></ul><p>常用凭证类型：<em>Username with password</em>(用户密码) &amp; <em>SSH Username with private key</em>(SSH 密钥)</p><blockquote><p>接下来以使用 Git 工具到 GitLab 拉取项目源码为例</p></blockquote><ol start="2"><li>安装 Git 插件和 Git 工具</li></ol><p>为了让 Jenkins 支持从 GitLab 拉取源码，需要安装 Git 插件以及在 CentOS 7上安装 Git 工具</p><h3 id="创建凭证"><a href="#创建凭证" class="headerlink" title="创建凭证"></a>创建凭证</h3><h4 id="账密类型"><a href="#账密类型" class="headerlink" title="账密类型"></a>账密类型</h4><p>1）Jenkins &gt; 系统管理 &gt; Manage Credentials &gt; 系统 &gt; 全局凭证 &gt; 添加凭证</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112172011934.png" alt="image-20220112172011934"></p><p>选择”Username with password”，输入Gitlab的用户名和密码，点击”确定”  (添加之前搭建 GitLab 所创建的测试用户)</p><p>2）测试凭证</p><p>创建一个 AuthStyle 项目：新建 Item &gt; AuthStyle  Project &gt; 确定</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112172401992.png" alt="image-20220112172401992"></p><p>找到”源码管理” &gt;”Git”，在 Repository URL 复制 Gitlab 中的项目 URL</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112172621641.png" alt="image-20220112172621641"></p><p>按照提示进入填写，在 Credentials 选择凭证就不报错了(http类型)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112173137880.png" alt="image-20220112173137880"></p><p>保存配置后，点击构建 “Build Now” 开始构建项目</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112173341208.png" alt="image-20220112173341208"></p><p>查看 <code>/var/lib/jenkins/workspace/</code> 目录，可查看已从 GitLab 成功拉取的代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pwd</span><br><span class="line">/var/lib/jenkins/workspace</span><br><span class="line">$ ll</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x. 4 root root 81 Jan 12 17:33 AuthStyle</span><br><span class="line">drwxr-xr-x. 2 root root  6 Jan 12 17:33 AuthStyle@tmp</span><br><span class="line">$ cd AuthStyle</span><br><span class="line">$ ls</span><br><span class="line">pom.xml  README.en.md  README.md  src</span><br></pre></td></tr></table></figure><h4 id="SSH-密钥"><a href="#SSH-密钥" class="headerlink" title="SSH 密钥"></a>SSH 密钥</h4><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112174607414.png" alt="image-20220112174607414"></p><p>1）Jenkins 服务器使用 root 用户生成公钥 &amp; 私钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;[your_mail]&quot; -f ~/.ssh/[custom_name]</span><br><span class="line">$ ssh-keygen -t rsa -C &quot;jenkins@example.com&quot;              //一路回车即可</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:CZu+JqYfJ8Y8RqXJhSfanl3W6KrDq7eWqhJ83/+lEBM jenkins@example.com</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|     .           |</span><br><span class="line">|    o =  E       |</span><br><span class="line">|   + B + +.      |</span><br><span class="line">|. . * o So.      |</span><br><span class="line">|.. * + +  o      |</span><br><span class="line">| ...%.= ..   .   |</span><br><span class="line">|.  oO*.+  . o    |</span><br><span class="line">|o.+O=Bo ...o     |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">$ ll ~/.ssh/</span><br><span class="line">total 8</span><br><span class="line">-rw-------. 1 root root 1675 Jan 12 18:02 id_rsa            //私钥</span><br><span class="line">-rw-r--r--. 1 root root  401 Jan 12 18:02 id_rsa.pub        //公钥</span><br></pre></td></tr></table></figure><p>2）把生成的公钥放在 GitLab 中</p><p>以 root 账户登录 &gt; 点击头像 &gt; Settings &gt; SSH Keys</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112180548841.png" alt="image-20220112180548841"></p><p>复制刚才的 id_rsa.pub 文件内容到上述图位置，点击”添加密钥”</p><p>3）在 Jenkins 中添加凭证，配置私钥</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112180943301.png" alt="image-20220112180943301"></p><p>4）测试凭证是否可用</p><p>新建”project-ssh”项目 &gt; 源码管理 &gt; Git，使用 GitLab 的 SSH 连接，并且选择 SSH 凭证</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113105817658.png" alt="image-20220113105817658"></p><p>同样构建并查看相关目录是否成功拉取</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113110058226.png" alt="image-20220113110058226"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ll ~/.jenkins/workspace/</span><br><span class="line">total 0</span><br><span class="line">drwxr-x---. 4 root root 81 Jan 13 10:58 project-ssh</span><br><span class="line">drwxr-x---. 2 root root  6 Jan 13 10:58 project-ssh@tmp</span><br><span class="line">$ ll ~/.jenkins/workspace/project-ssh</span><br><span class="line">total 12</span><br><span class="line">-rw-r-----. 1 root root 2336 Jan 13 10:58 pom.xml</span><br><span class="line">-rw-r-----. 1 root root  186 Jan 13 10:58 README.en.md</span><br><span class="line">-rw-r-----. 1 root root  176 Jan 13 10:58 README.md</span><br><span class="line">drwxr-x---. 3 root root   18 Jan 13 10:58 src</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>008_Jenkins-用户权限管理</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/008_Jenkins-%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/008_Jenkins-%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Jenkins 用户权限可利用 <a href="https://plugins.jenkins.io/role-strategy">Role-based Authorization Strategy</a> 插件来管理 </p></blockquote><h3 id="开启插件"><a href="#开启插件" class="headerlink" title="开启插件"></a>开启插件</h3><p><strong>安装 Role-based Authorization Strategy 插件</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112144903191.png" alt="image-20220112144903191"></p><p><strong>开启权限全局安全配置</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112145013240.png" alt="image-20220112145013240"></p><p>授权策略切换为”Role-Based Strategy”，保存</p><h3 id="创建角色"><a href="#创建角色" class="headerlink" title="创建角色"></a>创建角色</h3><p>在系统管理页面进入 Manage and Assign Roles</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112145804915.png" alt="image-20220112145804915"></p><p>点击”Manage Roles”，查看角色管理</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112150447722.png" alt="image-20220112150447722"></p><ul><li>Global roles(全局角色)：管理员等高级用户可以创建基于全局的角色</li><li>Item roles(项目角色)：针对某个或者某些项目的角色</li><li>Node roles(节点角色)：节点相关的权限，多为主从时使用</li></ul><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>在系统管理页面进入 Manage Users(管理用户)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112152906136.png" alt="image-20220112152906136"></p><p>分别创建两个用户：rd001 &amp; rd002</p><h3 id="实验例子"><a href="#实验例子" class="headerlink" title="实验例子"></a>实验例子</h3><p>通过创建不同的全局角色来给用户分配不同的角色权限</p><ul><li><p>baseRole：全局角色，只绑定 Overall(全部) 下的 Read 权限，便于新增用户的基本访问权限管理</p><p>注：如不绑定相应角色的用户为提示 <font color=red>用户名 is missing the Overall&#x2F;Read permission</font></p></li><li><p>role1：项目角色，使用正则表达式绑定”pro.*”，意思是只能操作 pro 开头的项目</p></li><li><p>role2：项目角色，使用正则表达式绑定”dev.*”，意思是只能操作 dev 开头的项目</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112152040113.png" alt="image-20220112152040113"></p><p><strong>给用户分配角色</strong>，系统管理页面进入 Manage and Assign Roles，点击 Assign Roles</p><ul><li>rd001 用户分别绑定 baseRole 和 role1 角色</li><li>rd002 用户分别绑定 baseRole 和 role2 角色</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112153620521.png" alt="image-20220112153620521"></p><p><strong>创建项目测试权限</strong></p><p>以管理员账户创建两个项目，分别为 <code>prod001</code> 和 <code>dev001</code></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112153948552.png" alt="image-20220112153948552"></p><p>结果为：用户 rd001 只能查看前缀为 <code>pro</code> 的项目</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112154024335.png" alt="image-20220112154024335"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>007_Jenkins-插件管理</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/007_Jenkins-%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/007_Jenkins-%E6%8F%92%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>安装 Jenkins 时，一般都会选择跳过插件安装，因为 Jenkins 插件需要连接默认官网下载，速度非常慢，而且经常会失败，所以一般都会跳过插件安装</p></blockquote><p>1）修改 Jenkins 插件下载地址</p><p>Jenkins 国外官方插件地址下载速度非常慢，所以可以修改为国内插件地址：</p><p>Jenkins &gt; Manage Jenkins &gt; Manage Plugins，点击标签 Advanced</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112142954124.png" alt="image-20220112142954124"></p><p>2）进入 Jenkins 文件目录 <code>/var/lib/jenkins/updates</code> ，其它安装方式目录可能会在 <code>/root/.jenkins</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /var/lib/jenkins/updates/</span><br><span class="line">$ sed -i &#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json</span><br></pre></td></tr></table></figure><p>最后，把 Update Site 改为国内插件下载</p><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p></blockquote><p>Sumbit后，在浏览器输入： <a href="http://188.188.3.82:8080/restart">http://188.188.3.82:8080/restart</a> ，重启Jenkins</p><p>3）安装中文汉化插件</p><p>Jenkins &gt; Manage Jenkins &gt; Manage Plugins，点击标签 Available，搜索”Chinese”</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112144002694.png" alt="image-20220112144002694"></p><p>重启 Jenkins 后，就看到 Jenkins 汉化了</p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>006_CentOS7-安装Tomcat</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/006_CentOS7-%E5%AE%89%E8%A3%85Tomcat/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/006_CentOS7-%E5%AE%89%E8%A3%85Tomcat/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署："><a href="#环境部署：" class="headerlink" title="环境部署："></a>环境部署：</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：apache-tomcat-8.5.73</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl disable --now firewalld</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --add-service=http --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113121341703.png" alt="image-20220113121341703"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113121504186.png" alt="image-20220113121504186"></p><p>首先确保 JDK 环境正常，再根据实际需要下载源码包；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-8/v8.5.73/bin/apache-tomcat-8.5.73.tar.gz</span><br><span class="line">$ tar -xf apache-tomcat-8.5.73.tar.gz -C /usr/local/</span><br><span class="line">$ mv /usr/local/apache-tomcat-8.5.73 tomcat</span><br></pre></td></tr></table></figure><h3 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h3><p>解压完成后即可以启动 Tomcat，检查是否安装成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cd /usr/local/tomcat/bin</span><br><span class="line">$ ./sh startup.sh </span><br><span class="line">Using CATALINA_BASE:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_HOME:   /usr/local/tomcat</span><br><span class="line">Using CATALINA_TMPDIR: /usr/local/tomcat/temp</span><br><span class="line">Using JRE_HOME:        /usr/local/java/jre</span><br><span class="line">Using CLASSPATH:       /usr/local/tomcat/bin/bootstrap.jar:/usr/local/tomcat/bin/tomcat-juli.jar</span><br><span class="line">Tomcat started.</span><br><span class="line"></span><br><span class="line">$ lsof -i:8080</span><br><span class="line">COMMAND  PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    2000 root   49u  IPv6  59146      0t0  TCP *:webcache (LISTEN)</span><br><span class="line"></span><br><span class="line">$ curl http://188.188.3.112:8080</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;Apache Tomcat/8.5.40&lt;/title&gt;</span><br><span class="line">        &lt;link href=&quot;favicon.ico&quot; rel=&quot;icon&quot; type=&quot;image/x-icon&quot; /&gt;</span><br><span class="line">        &lt;link href=&quot;favicon.ico&quot; rel=&quot;shortcut icon&quot; type=&quot;image/x-icon&quot; /&gt;</span><br><span class="line">        &lt;link href=&quot;tomcat.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h3><ul><li>首先，需要为tomcat配置pid</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/tomcat/bin/catalina.sh</span><br><span class="line"><span class="comment"># Copy CATALINA_BASE from CATALINA_HOME if not already set</span></span><br><span class="line">[ -z <span class="string">&quot;<span class="variable">$CATALINA_BASE</span>&quot;</span> ] &amp;&amp; CATALINA_BASE=<span class="string">&quot;<span class="variable">$CATALINA_HOME</span>&quot;</span></span><br><span class="line">CATALINA_PID=<span class="string">&quot;<span class="variable">$CATALINA_BASE</span>/tomcat.pid&quot;</span>  <span class="comment"># 设置pid。一定要加在CATALINA_BASE定义后面，要不然pid会生成到/下面</span></span><br></pre></td></tr></table></figure><ul><li>添加 tomcat.service</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /lib/systemd/system/tomcat.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Tomcat</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">Environment=<span class="string">&quot;JAVA_HOME=/usr/local/java&quot;</span></span><br><span class="line">PIDFile=/usr/local/tomcat/tomcat.pid</span><br><span class="line">ExecStart=/usr/local/tomcat/bin/startup.sh</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>在浏览器上打开 <a href="http://188.188.4.44:8080/">http://188.188.4.44:8080</a> 即可查看 Tomcat 服务<br><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113133432372.png" alt="image-20220113133432372"></p><h3 id="配置角色"><a href="#配置角色" class="headerlink" title="配置角色"></a>配置角色</h3><p>默认情况下 Tomcat 是没有配置用户角色权限的</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113133633274.png" alt="image-20220113133633274"></p><p>在部署项目到 Tomcat 服务器时，需要用到 Tomcat 的用户，所以需要修改配置，添加用户及权限(账密都为tomcat)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/tomcat/conf/tomcat-users.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;tomcat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;role1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-script&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-status&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-script&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">password</span>=<span class="string">&quot;tomcat&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,manager-script,tomcat,admin-gui,admin-script&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：为了能够刚才配置的用户登录到 Tomcat，还需要修改以下配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$ vim /usr/local/tomcat/webapps/manager/META-INF/context.xml</span><br><span class="line"># 注释以下配置</span><br><span class="line"> <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  &lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span></span><br><span class="line"><span class="comment">         allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br></pre></td></tr></table></figure><p>重启 Tomcat ,访问测试</p><p>访问：<a href="http://188.188.4.44:8080/manager/html">http://188.188.4.44:8080/manager/html</a> ，输入账密，看到以下页面代表成功</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220113134500909.png" alt="image-20220113134500909"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>005_CentOS7-安装Jenkins(YUM)</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/005_CentOS7-%E5%AE%89%E8%A3%85Jenkins(YUM)/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/005_CentOS7-%E5%AE%89%E8%A3%85Jenkins(YUM)/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：java-1.8.0-openjdk + jenkins-2.319.1-1.1.noarch.rpm</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl disable --now firewalld</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>安装 Jenkins 前确保已配置好 JDK</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.oracle.com/otn/java/jdk/8u291-b10/d7fc238d0cbf4b0dac67be84580cfb4b/jdk-8u291-linux-x64.tar.gz</span><br><span class="line">$ tar -xf jdk-8u291-linux-x64.tar.gz -C /usr/local/ &amp;&amp; <span class="built_in">mv</span> /usr/local/jdk1.8.0_291 /usr/local/java</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">JRE_HOME=/usr/local/java/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>安装 daemonize (按照官网提示 <code>yum install epel-release # repository that provides &#39;daemonize&#39;</code>)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum -y install epel-release</span><br><span class="line">$ yum -y install daemonize</span><br></pre></td></tr></table></figure><h3 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h3><p>安装方法采用官网，下载较慢，不推荐使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载yum源并引入key</span><br><span class="line">$ wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">$ rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line">$ yum install jenkins -y</span><br></pre></td></tr></table></figure><p>修改<code>/etc/sysconfig/jenkins</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysconfig/jenkins</span><br><span class="line">JENKINS_USER=&quot;root&quot;</span><br><span class="line">JENKINS_PORT=&quot;8080&quot;</span><br><span class="line">JENKINS_JAVA_OPTIONS=&quot;-Djava.awt.headless=true -Duser.timezone=Asia/Shanghai&quot;</span><br></pre></td></tr></table></figure><p>修改<code>/etc/init.d/jenkins</code> 将<code>java</code>位置添加进<code>candidates</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">candidates=&quot;</span><br><span class="line">/etc/alternatives/java</span><br><span class="line">/usr/lib/jvm/java-1.8.0/bin/java</span><br><span class="line">/usr/lib/jvm/jre-1.8.0/bin/java</span><br><span class="line">/usr/lib/jvm/java-11.0/bin/java</span><br><span class="line">/usr/lib/jvm/jre-11.0/bin/java</span><br><span class="line">/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class="line">/usr/bin/java</span><br><span class="line"># 添加自身安装的jdk的java位置</span><br><span class="line">/usr/local/java/bin/java</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><h3 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl enable --now jenkins</span><br></pre></td></tr></table></figure><p>获取管理员初始密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yuikuen_yuen/blog-picgo/raw/master/images/image-20220112141123079.png" alt="image-20220112141123079.png"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p><p><a href="https://www.jenkins.io/zh/">Jenkins 官网</a></p><p><a href="https://www.jenkins.io/zh/doc/book/installing/">Jenkins 安装教程</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>004_CentOS7-安装Jenkins(WAR)</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/004_CentOS7-%E5%AE%89%E8%A3%85Jenkins(WAR)/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/004_CentOS7-%E5%AE%89%E8%A3%85Jenkins(WAR)/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：jdk-8u291-linux-x64 + Jenkins-2.289.2</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl disable --now firewalld</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408115324.png" alt="20220408115324.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408115355.png" alt="20220408115355.png"></p><p>安装 Jenkins 前确保已配置好 JDK</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.oracle.com/otn/java/jdk/8u291-b10/d7fc238d0cbf4b0dac67be84580cfb4b/jdk-8u291-linux-x64.tar.gz</span><br><span class="line">$ tar -xf jdk-8u291-linux-x64.tar.gz -C /usr/local/ &amp;&amp; <span class="built_in">mv</span> /usr/local/jdk1.8.0_291 /usr/local/java</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">JRE_HOME=/usr/local/java/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="启用程序"><a href="#启用程序" class="headerlink" title="启用程序"></a>启用程序</h3><ul><li>启动方式一：直接运行 war 包</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://get.jenkins.io/war-stable/2.289.2/jenkins.war</span><br><span class="line">$ <span class="built_in">nohup</span> java -jar jenkins.war --httpPort=8080 &amp;</span><br></pre></td></tr></table></figure><ul><li>启动方式二：参考 Tomcat 部署方式，确认 Tomcat 服务正常运行</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/tomcat/webapps/ROOT</span><br><span class="line">$ <span class="built_in">rm</span> -rf *</span><br><span class="line">$ <span class="built_in">cp</span> /usr/local/src/jenkins.war . </span><br><span class="line">$ jar –xvf jenkins.war</span><br><span class="line">$ systemctl restart tomcat</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p><p><a href="https://www.jenkins.io/zh/">Jenkins 官网</a></p><p><a href="https://www.jenkins.io/zh/doc/book/installing/">Jenkins 安装教程</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>003_CentOS7-安装Jenkins(RPM)</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/003_CentOS7-%E5%AE%89%E8%A3%85Jenkins(RPM)/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/003_CentOS7-%E5%AE%89%E8%A3%85Jenkins(RPM)/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：java-1.8.0-openjdk + jenkins-2.319.1-1.1.noarch.rpm</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl disable --now firewalld</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>安装 Jenkins 前确保已配置好 JDK</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.oracle.com/otn/java/jdk/8u291-b10/d7fc238d0cbf4b0dac67be84580cfb4b/jdk-8u291-linux-x64.tar.gz</span><br><span class="line">$ tar -xf jdk-8u291-linux-x64.tar.gz -C /usr/local/ &amp;&amp; <span class="built_in">mv</span> /usr/local/jdk1.8.0_291 /usr/local/java</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">JRE_HOME=/usr/local/java/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3><p>RPM 文件都一样，国内建议选用清华源下载上传较快捷</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112113126361.png" alt="image-20220112113126361"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112112750858.png" alt="image-20220112112750858"></p><h3 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat-stable/jenkins-2.319.1-1.1.noarch.rpm</span><br><span class="line">$ rpm -ivh jenkins-2.319.1-1.1.noarch.rpm  --force --nodeps</span><br><span class="line">warning: jenkins-2.319.1-1.1.noarch.rpm: Header V4 RSA/SHA512 Signature, key ID 45f2c3d5: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">Updating / installing...</span><br><span class="line">   1:jenkins-2.319.1-1.1              ################################# [100%]</span><br></pre></td></tr></table></figure><p>修改<code>/etc/sysconfig/jenkins</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim /etc/sysconfig/jenkins</span><br><span class="line">JENKINS_USER=&quot;root&quot;</span><br><span class="line">JENKINS_PORT=&quot;8080&quot;</span><br><span class="line">JENKINS_JAVA_OPTIONS=&quot;-Djava.awt.headless=true -Duser.timezone=Asia/Shanghai&quot;</span><br></pre></td></tr></table></figure><p>修改<code>/etc/init.d/jenkins</code> 将<code>java</code>位置添加进<code>candidates</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">candidates=&quot;</span><br><span class="line">/etc/alternatives/java</span><br><span class="line">/usr/lib/jvm/java-1.8.0/bin/java</span><br><span class="line">/usr/lib/jvm/jre-1.8.0/bin/java</span><br><span class="line">/usr/lib/jvm/java-11.0/bin/java</span><br><span class="line">/usr/lib/jvm/jre-11.0/bin/java</span><br><span class="line">/usr/lib/jvm/java-11-openjdk-amd64</span><br><span class="line">/usr/bin/java</span><br><span class="line"># 添加自身安装的jdk的java位置</span><br><span class="line">/usr/local/java/bin/java</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><h3 id="启动程序"><a href="#启动程序" class="headerlink" title="启动程序"></a>启动程序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl enable --now jenkins</span><br></pre></td></tr></table></figure><p>获取管理员初始密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112141123079.png" alt="image-20220112141123079"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>未安装 daemonize</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Job for jenkins.service failed because the control process exited with error code. See &quot;systemctl status jenkins.service&quot; and &quot;journalctl -xe&quot; for details.</span><br><span class="line">[root@jenkins src]# systemctl status jenkins</span><br><span class="line">● jenkins.service - LSB: Jenkins Automation Server</span><br><span class="line">   Loaded: loaded (/etc/rc.d/init.d/jenkins; bad; vendor preset: disabled)</span><br><span class="line">   Active: failed (Result: exit-code) since Wed 2022-01-12 13:51:43 CST; 10s ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line">  Process: 1733 ExecStart=/etc/rc.d/init.d/jenkins start (code=exited, status=127)</span><br><span class="line"></span><br><span class="line">Jan 12 13:51:43 jenkins systemd[1]: Starting LSB: Jenkins Automation Server...</span><br><span class="line">Jan 12 13:51:43 jenkins jenkins[1733]: Starting Jenkins /etc/rc.d/init.d/jenkins: line 115: daemonize: command not found</span><br><span class="line">Jan 12 13:51:43 jenkins jenkins[1733]: [FAILED]</span><br><span class="line">Jan 12 13:51:43 jenkins systemd[1]: jenkins.service: control process exited, code=exited status=127</span><br><span class="line">Jan 12 13:51:43 jenkins systemd[1]: Failed to start LSB: Jenkins Automation Server.</span><br><span class="line">Jan 12 13:51:43 jenkins systemd[1]: Unit jenkins.service entered failed state.</span><br><span class="line">Jan 12 13:51:43 jenkins systemd[1]: jenkins.service failed.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安装后解决</span><br><span class="line">$ yum -y install epel-release</span><br><span class="line">$ yum -y install daemonize</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>002_GitLab-添加组&amp;用户及创建项目</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/002_GitLab-%E6%B7%BB%E5%8A%A0%E7%BB%84&amp;%E7%94%A8%E6%88%B7%E5%8F%8A%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/002_GitLab-%E6%B7%BB%E5%8A%A0%E7%BB%84&amp;%E7%94%A8%E6%88%B7%E5%8F%8A%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="创建群组"><a href="#创建群组" class="headerlink" title="创建群组"></a>创建群组</h3><p>使用管理员 root 创建组，一个组里面可以有多个项目分支，可以将开发添加到组里面进行设置权限，不同的组就是公司不同的开发项目或者服务模块，不同的组添加不同的开发即可实现对开发设置权限的管理</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112102106101.png" alt="image-20220112102106101"></p><p>按照上述步骤提示进行创建组，根据自身实际情况选择组的使用权限</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112102302457.png" alt="image-20220112102302457"></p><p>创建后可直接创建项目或再创建子群组</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112102548776.png" alt="image-20220112102548776"></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>项目可以在组内创建，或在个人账号页面下进行创建（创建方法可空白项目或导入等）</p><blockquote><p>组内创建及个人创建项目操作方法一样，只是目录位置不一</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112102755938.png" alt="image-20220112102755938"></p><ul><li>创建空白项目，直接输入新的项目名称即可</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112103223210.png" alt="image-20220112103223210"></p><ul><li>导入项目，可根据自身需要，从另外的代码仓库将代码进行导入</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112103349442.png" alt="image-20220112103349442"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>使用管理员 root 点击 <code>Admin</code> 进入管理界面进行创建</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112103629801.png" alt="image-20220112103629801"></p><p>找到左侧菜单栏，选择 <code>用户</code> 并点击 <code>新用户</code> </p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112103749105.png" alt="image-20220112103749105"></p><p>创建用户主要注意用户的权限，是普通用户还是管理员</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112104201027.png" alt="image-20220112104201027"></p><p>修改密码，默认创建会根据邮箱下发激活，公司内部使用可由管理员进行设定</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112104447547.png" alt="image-20220112104447547"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112104508193.png" alt="image-20220112104508193"></p><blockquote><p>权限分配：回到群组或项目，可以点击成员进行分配用户及角色(权限)</p></blockquote><p>GitLab 用户在组里面有 5 种不同权限：</p><ul><li>Guest：可以创建 issue、发表评论，不能读写版本库</li><li>Reporter：可以克隆代码，不能提交，QA、PM可以赋予这个权限</li><li>Developer：可以克隆代码、开发、提交、push，普通开发可以赋予这个权限</li><li>Maintainer：可以创建项目、添加tag、保护分支、添加项目成员、编辑项目，核心开发可以赋予这个权限</li><li>Owner：可以设置项目访问权限 - Visilility Level、删除项目、迁移项目、管理组成员，开发组组长可以赋予这个权限</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112105235824.png" alt="image-20220112105235824"></p><p>注意：一般企业应用不建议开启外部用户注册功能，建议取消并由管理员进行创建分配</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112104708944.png" alt="image-20220112104708944"></p><p><strong>参考文献</strong></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001_CentOS7-安装GitLab</title>
      <link href="/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/001_CentOS7-%E5%AE%89%E8%A3%85GitLab/"/>
      <url>/2022/04/07/learn/001%E9%BB%91%E9%A9%AC%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Jenkins%E4%BB%8E%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%88%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/001_CentOS7-%E5%AE%89%E8%A3%85GitLab/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署："><a href="#环境部署：" class="headerlink" title="环境部署："></a>环境部署：</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：gitlab-ce-14.1.0</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ systemctl disable --now firewalld</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --add-service=ssh --permanent</span><br><span class="line">$ firewall-cmd --add-service=http --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><blockquote><p>配置依赖环境</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum -y install policycoreutils openssh-server openssh-clients postfix</span><br><span class="line">$ systemctl enable --now sshd postfix</span><br></pre></td></tr></table></figure><h3 id="安装-GitLab"><a href="#安装-GitLab" class="headerlink" title="安装 GitLab"></a>安装 GitLab</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408114829.png" alt="20220408114829.png"></p><ul><li>方法一：配置源地址，再通过 Yum 在线安装</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ cat /etc/yum.repos.d/gitlab-ce.repo</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=gitlab-ce</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ yum -y install gitlab-ce-14.1.0</span><br></pre></td></tr></table></figure><ul><li>方法二：下载 Rpm 文件，再直接离线安装</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-14.1.0-ce.0.el7.x86_64.rpm</span><br><span class="line">$ rpm -ivh gitlab-ce-14.1.0-ce.0.el7.x86_64.rpm --force --nodeps</span><br></pre></td></tr></table></figure><h3 id="配置-GitLab"><a href="#配置-GitLab" class="headerlink" title="配置 GitLab"></a>配置 GitLab</h3><p>修改 <code>/etc/gitlab/gitlab.rb</code> 配置文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## GitLab URL 可为域名或本机IP</span><br><span class="line">external_url &#x27;http://yk-gitlab.net&#x27;</span><br></pre></td></tr></table></figure><p>邮箱配置 (非必要，自先选择)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">### GitLab email server settings</span><br><span class="line">gitlab_rails[&#x27;smtp_enable&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.qq.com&quot;           //邮件服务</span><br><span class="line">gitlab_rails[&#x27;smtp_port&#x27;] = 465                        //465默认开启smtp_tls</span><br><span class="line">gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;sinath@vip.qq.com&quot;   //发件人地址</span><br><span class="line">gitlab_rails[&#x27;smtp_password&#x27;] = &quot;****************&quot;     //邮箱授权码(自行百度)</span><br><span class="line">gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;qq.com&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_tls&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_pool&#x27;] = false</span><br><span class="line"></span><br><span class="line">### Email Settings</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_enabled&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;sinath@vip.qq.com&#x27; //发件人邮箱</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_display_name&#x27;] = &#x27;sinath&#x27;    //发件人名称</span><br><span class="line">user[&#x27;git_user_email&#x27;] = &quot;sinath@vip.qq.com&quot;            //同上</span><br></pre></td></tr></table></figure><blockquote><p>初始化服务，修改配置后需要执行命令初始化并重启</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl reconfigure</span><br><span class="line">$ gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>正常输出日志代表部署成功，初始管理员用户为 <strong>root</strong>，密码在安装过程中已随机生成并保存在 <code>/etc/gitlab/initial_root_password</code>中，有效期 24 小时</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Running handlers:</span><br><span class="line">Running handlers complete</span><br><span class="line">Chef Infra Client finished, 572/1520 resources updated in 04 minutes 16 seconds</span><br><span class="line"></span><br><span class="line">Notes:</span><br><span class="line">Default admin account has been configured with following details:</span><br><span class="line">Username: root</span><br><span class="line">Password: You didn&#x27;t opt-in to print initial root password to STDOUT.</span><br><span class="line">Password stored to /etc/gitlab/initial_root_password. This file will be cleaned up in first reconfigure run after 24 hours.</span><br><span class="line"></span><br><span class="line">NOTE: Because these credentials might be present in your log files in plain text, it is highly recommended to reset the password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.</span><br><span class="line"></span><br><span class="line">gitlab Reconfigured!</span><br><span class="line"></span><br><span class="line">$ cat /etc/gitlab/initial_root_password</span><br><span class="line"># WARNING: This value is valid only in the following conditions</span><br><span class="line">#          1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails[&#x27;initial_root_password&#x27;]` setting in `gitlab.rb`, it was provided before database was seeded for the first time (usually, the first reconfigure run).</span><br><span class="line">#          2. Password hasn&#x27;t been changed manually, either via UI or via command line.</span><br><span class="line">#</span><br><span class="line">#          If the password shown here doesn&#x27;t work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.</span><br><span class="line"></span><br><span class="line">Password: d5WxYmXvXbEOfpzm/LZ6Bibmc+HzNTGpjNQU/3hdbh0=</span><br><span class="line"></span><br><span class="line"># NOTE: This file will be automatically deleted in the first reconfigure run after 24 hours.</span><br></pre></td></tr></table></figure><h3 id="验证状态"><a href="#验证状态" class="headerlink" title="验证状态"></a>验证状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl status</span><br><span class="line">down: alertmanager: 0s, normally up, want up; run: log: (pid 3505) 5177s</span><br><span class="line">run: gitaly: (pid 4357) 5105s; run: log: (pid 2680) 5280s</span><br><span class="line">run: gitlab-exporter: (pid 4366) 5105s; run: log: (pid 3264) 5194s</span><br><span class="line">run: gitlab-workhorse: (pid 4322) 5106s; run: log: (pid 3113) 5214s</span><br><span class="line">run: grafana: (pid 4579) 5094s; run: log: (pid 4120) 5123s</span><br><span class="line">run: logrotate: (pid 4252) 1693s; run: log: (pid 2576) 5292s</span><br><span class="line">run: nginx: (pid 3158) 5210s; run: log: (pid 3176) 5207s</span><br><span class="line">run: node-exporter: (pid 4334) 5106s; run: log: (pid 3228) 5200s</span><br><span class="line">run: postgres-exporter: (pid 4572) 5094s; run: log: (pid 3716) 5159s</span><br><span class="line">run: postgresql: (pid 2827) 5274s; run: log: (pid 2848) 5271s</span><br><span class="line">run: prometheus: (pid 4383) 5104s; run: log: (pid 3463) 5182s</span><br><span class="line">run: puma: (pid 3025) 5228s; run: log: (pid 3036) 5225s</span><br><span class="line">run: redis: (pid 2609) 5287s; run: log: (pid 2617) 5286s</span><br><span class="line">run: redis-exporter: (pid 4368) 5105s; run: log: (pid 3359) 5188s</span><br><span class="line">run: sidekiq: (pid 3053) 5222s; run: log: (pid 3067) 5219s</span><br><span class="line"></span><br><span class="line">$ lsof -i:80</span><br><span class="line">COMMAND  PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   3158       root    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   3159 gitlab-www    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   3160 gitlab-www    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   3161 gitlab-www    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   3162 gitlab-www    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408114915.png" alt="20220408114915.png"></p><h3 id="程序-amp-目录"><a href="#程序-amp-目录" class="headerlink" title="程序&amp;目录"></a>程序&amp;目录</h3><p>GitLab由主要由以下服务构成，他们共同承担了Gitlab的运作需要</p><ul><li>nginx: 静态web服务器</li><li>gitlab-shell: 用于处理Git命令和修改authorized keys列表</li><li>gitlab-workhorse: 轻量级的反向代理服务器</li><li>logrotate：日志文件管理工具</li><li>postgresql：数据库</li><li>redis：缓存数据库</li><li>sidekiq：用于在后台执行队列任务（异步执行）</li><li>unicorn：HTTP服务，GitLab Rails应用是托管在这个服务器上面的</li></ul><p>主要程序目录</p><ul><li>主配置文件: &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</li><li>文档根目录: &#x2F;opt&#x2F;gitlab</li><li>默认存储库位置: &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;git-data&#x2F;repositories</li><li>Nginx配置文件: &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx&#x2F;conf&#x2F;gitlab-http.conf</li><li>Postgresql数据目录: &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;postgresql&#x2F;data</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>控制台打开：gitlab-rails</li><li>数据库命令：gitlab-psql</li><li>数据备份还原：gitlab-rake</li><li>客户端操作命令：gitlab-ctl<ul><li>启动：gitlab-ctl start</li><li>停止：gitlab-ctl stop</li><li>重启：gitlab-ctl restart</li><li>查看：gitlab-ctl status</li><li>日志：gitlab-ctl tail nginx(组件)</li></ul></li></ul><p><strong>参考文献</strong></p><p><a href="https://about.gitlab.com/install/#already-installed">Install self-managed GitLab</a></p><p><a href="https://www.bilibili.com/video/BV1kJ411p7mV?from=search&seid=16079250692279453903&spm_id_from=333.337.0.0">黑马程序员Java教程自动化部署Jenkins从环境配置到项目开发</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>001_Linux 系统文件目录用途</title>
      <link href="/2022/04/07/learn/000%E9%BB%91%E9%A9%ACLinux%E4%BA%91%E8%AE%A1%E7%AE%97+%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%913.0/001_Linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%94%A8%E9%80%94/"/>
      <url>/2022/04/07/learn/000%E9%BB%91%E9%A9%ACLinux%E4%BA%91%E8%AE%A1%E7%AE%97+%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%913.0/001_Linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%94%A8%E9%80%94/</url>
      
        <content type="html"><![CDATA[<h3 id="Linux-系统文件架构"><a href="#Linux-系统文件架构" class="headerlink" title="Linux 系统文件架构"></a>Linux 系统文件架构</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220226133958750.png" alt="image-20220226133958750"></p><p>在 Linux 根目录（&#x2F;）下包含很多的子目录，称为一级目录。</p><ul><li>例如 <code>bin、boot、dev</code> 等。</li></ul><p>同时，各一级目录下还含有很多子目录，称为二级目录。</p><ul><li>例如 <code>/bin/bash、/bin/ed</code> 等。</li></ul><table><thead><tr><th>目录</th><th>解义</th></tr></thead><tbody><tr><td>&#x2F;bin</td><td>系统命令目录</td></tr><tr><td>&#x2F;sbin</td><td>超级命令目录，只能超级管理员可以执行的命令</td></tr><tr><td>&#x2F;boot</td><td>系统目录，类似于Windows中的C盘</td></tr><tr><td>&#x2F;dev</td><td>设备文件目录，硬盘、光驱、U盘都属于设备文件，&#x2F;dev&#x2F;sr0代表光驱设备，必须先挂载才能使用</td></tr><tr><td>&#x2F;etc</td><td>非常重要，代表系统的配置文件目录。大部分软件安装完成后，其配置文件都存放在此目录</td></tr><tr><td>&#x2F;home</td><td>普通用户的家目录，用户登录后会自动切换到此目录</td></tr><tr><td>&#x2F;root</td><td>超级管理员的家目录，超级管理员登录后会自动切换到此目录</td></tr><tr><td>&#x2F;lib</td><td>安装软件时的库配置文件目录，32位</td></tr><tr><td>&#x2F;lib64</td><td>安装软件时的库配置文件目录，64位</td></tr><tr><td>&#x2F;media</td><td>挂载目录，早期Linux挂载目录，用于挂载光盘以及软盘</td></tr><tr><td>&#x2F;mnt</td><td>挂载目录，用来挂载额外的设备，如 U 盘、移动硬盘和其他操作系统的分区</td></tr><tr><td>&#x2F;opt</td><td>第三方软件目录，这个目录是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。不过笔者还是习惯把软件放到 &#x2F;usr&#x2F;local&#x2F; 目录中，也就是说，&#x2F;usr&#x2F;local&#x2F; 目录也可以用来安装软件</td></tr><tr><td>&#x2F;usr</td><td>系统程序目录，类似Windows中的Program Files</td></tr><tr><td>&#x2F;proc</td><td>虚拟文件系统。该目录中的数据并不保存在硬盘上，而是保存到内存中。主要保存系统的内核、进程、外部设备状态和网络状态等。</td></tr><tr><td>&#x2F;tmp</td><td>临时文件目录，在该目录下，所有用户都可以访问和写入。建议此目录中不能保存重要数据，最好每次开机都把该目录清理</td></tr><tr><td>&#x2F;var</td><td>经常变化的文件目录，网页文件、数据文件、日志文件</td></tr></tbody></table><p><strong>参考文献</strong></p><p><a href="https://space.bilibili.com/37974444">黑马linux云计算+运维开发3.0</a></p>]]></content>
      
      
      <categories>
          
          <category> learn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s问题_关机重启后Pod状态为CreateContainerError</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%97%AE%E9%A2%98_%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF%E5%90%8EPod%E7%8A%B6%E6%80%81%E4%B8%BACreateContainerError/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%97%AE%E9%A2%98_%E5%85%B3%E6%9C%BA%E9%87%8D%E5%90%AF%E5%90%8EPod%E7%8A%B6%E6%80%81%E4%B8%BACreateContainerError/</url>
      
        <content type="html"><![CDATA[<h3 id="问题导读"><a href="#问题导读" class="headerlink" title="问题导读"></a>问题导读</h3><p><strong>CrashLoopBackOff 异常状态修复</strong></p><blockquote><p>一般 Pod 异常的处理方式，就是把 Pod 给删除掉，然后 K8s 集群会重新创建该 Pod，之后 Pod 的状态就成回 Running 了。</p></blockquote><p><strong>问题：</strong>测试环境模拟服务器设备断电操作，发现相关组件的 Pod 未自动恢复，并且状态为 <code>CrashLoopBackOff</code>，采取方案是给相关的 Pod 进行删除处理，但最后还是 <code>CreateContainerError</code> 或 <code>CrashLoopBackOff</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po -A -owide</span><br><span class="line">NAMESPACE              NAME                                            READY   STATUS                 RESTARTS   AGE     IP               NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">ingress-nginx          ingress-nginx-controller-5mcnd                  0/1     Running                1          5h18m   188.188.3.131    k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">ingress-nginx          ingress-nginx-defaultbackend-84f4777fbb-tdr9j   1/1     Running                1          5h18m   172.25.244.209   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-kube-controllers-5c6b7c9d86-fcsjl        0/1     Running                5          4d13h   188.188.3.131    k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-489bm                               0/1     CreateContainerError   4          4d13h   188.188.3.132    k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-7cggr                               1/1     Running                5          4d13h   188.188.3.121    k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-8bqkj                               0/1     CreateContainerError   4          4d13h   188.188.3.123    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-9m2g5                               0/1     CreateContainerError   4          4d13h   188.188.3.134    k8s-node04     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-k5l5h                               0/1     Running                5          4d13h   188.188.3.122    k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-t4cds                               0/1     CreateContainerError   4          4d13h   188.188.3.133    k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-xjpsl                               0/1     CreateContainerError   4          4d13h   188.188.3.131    k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            coredns-746fcb4bc5-qk97f                        1/1     Running                7          4d22h   172.25.244.210   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            metrics-server-55c49f8f44-kslgf                 0/1     CreateContainerError   6          4d22h   172.18.195.20    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper-79c5968bdc-f4vpt      1/1     Running                7          4d21h   172.25.92.80     k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard-658485d5c7-wstfj           0/1     CrashLoopBackOff       6          4d21h   172.18.195.19    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>从上述异常，可以看到与 <code>calico</code> 相关的 Pod 也是错误状态，因此其他组件待 <code>calico</code> 起来即正常启动；</p><p>1）首先删除异常的 Pod ，如 <code>calico-node-489bm </code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl delete po calico-node-489bm -n kube-system</span><br></pre></td></tr></table></figure><p>2）删除后重新启动新的 Pod ，查看启动状态及相关日志信息，看日志信息应该是该 pod 对应的容器处于 <code>创建、运行、启动失败</code> 这种情况。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl describe po calico-node-xxxxx -n kube-system</span><br><span class="line">$ kubectl logs -f calico-node-xxxxx -n kube-system</span><br></pre></td></tr></table></figure><p>3）通过 kube describe 命令去查看 Pod 的状态发现没有提示任何错误，但是当通过命令 kube logs 查看 pod 的日志时，可以看到提示日志 <code>Failed to update lock: Operation cannot be fulfilled on endpoints &quot;kube-controller-manager&quot;: the obj</code></p><blockquote><p>在 pod 所在节点通过 <code>docker ps -a | grep calico</code>，查找关于 pod 在该节点创建的 docker 容器发现，有残余的 docker 容器存在，同时退出的容器的名称 ID 都小于存活的容器的名称 ID（就是名称最后面的_ID），此时 Kubernetes 就认为已经退出的容器才是正确的并且一直在等待他们进入 up 的状态（同时运行了两个 Pod <code>316bf56db58c_4 &amp; 316bf56db58c_5</code>）</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps -a | grep calico</span><br><span class="line">6ec41b3cd69e   5749e8b276f9                                                          <span class="string">&quot;/opt/cni/bin/install&quot;</span>   Less than a second ago   Exited (0) 11 minutes ago                       k8s_install-cni_calico-node-489bm_kube-system_1fb72c8b-beba-4979-a512-316bf56db58c_5</span><br><span class="line">395adea037a2   registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.2   <span class="string">&quot;/pause&quot;</span>                 Less than a second ago   Up Less than a second                           k8s_POD_calico-node-489bm_kube-system_1fb72c8b-beba-4979-a512-316bf56db58c_5</span><br><span class="line">1ece827695ba   c4d75af7e098                                                          <span class="string">&quot;start_runit&quot;</span>            Less than a second ago   Exited (255) Less than a second ago             k8s_calico-node_calico-node-489bm_kube-system_1fb72c8b-beba-4979-a512-316bf56db58c_4</span><br><span class="line">80817d06bfcc   registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.2   <span class="string">&quot;/pause&quot;</span>                 Less than a second ago   Exited (255) Less than a second ago             k8s_POD_calico-node-489bm_kube-system_1fb72c8b-beba-4979-a512-316bf56db58c_4</span><br><span class="line">e60925ca658b   c4d75af7e098                                                          <span class="string">&quot;start_runit&quot;</span>            11 minutes ago           Up 11 minutes                                   k8s_calico-node_calico-node-489bm_kube-system_1fb72c8b-beba-4979-a512-316bf56db58c_5</span><br><span class="line">c0f387141008   5660150975fb                                                          <span class="string">&quot;/usr/local/bin/flex…&quot;</span>   11 minutes ago           Exited (0) 11 minutes ago                       k8s_flexvol-driver_calico-node-489bm_kube-system_1fb72c8b-beba-4979-a512-316bf56db58c_0</span><br></pre></td></tr></table></figure><p><strong>最终问题原因：</strong>因为服务器重启后，重建新的 Pod，但个别容器未正常下线，导致重建的新 Pod 上线后，Node 中存多个同名的容器，K8s 集群未正常获取正确的 <code>calico-node-xxxxx</code></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>停掉所有正在运行的容器 + 删除所有已经停止的容器</code>，之后所有的容器会被 k8s 集群重新构建运行，原先某些处于非正常状态的 pod 都可以正常运行（因测试环境可以杀死所有容器，生产环境建议杀死根源组件容器即可恢复，减少误删除操作，导致数据掉失）</p><p>1）先暂停 <code>kubelet</code> 服务。因为这个服务运行的话会有一些容器停不掉，并且也无法删除。执行命令如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl stop kubelet</span><br></pre></td></tr></table></figure><p>2）停掉或杀死所有正在运行的容器(注意生产环境杀死根源组件容器即可)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">kill</span> $(docker ps -a -q)</span><br></pre></td></tr></table></figure><p>3）删除所有已经停止的容器。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker <span class="built_in">rm</span> $(docker ps -a -q)</span><br></pre></td></tr></table></figure><p>4）再次查看 k8s 集群的状态。先通过 <code>systemctl start kubelet</code> 命令启动 kubelet 服务，然后通过运行 <code>kubectl get nodes</code> 和<code>kubectl get pods -n kube-system</code> 命令我们发现所有的节点和 pod 均处于正常的状态，k8s 集群再次成功运行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po -A -owide</span><br><span class="line">NAMESPACE              NAME                                            READY   STATUS              RESTARTS   AGE     IP              NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">ingress-nginx          ingress-nginx-controller-5mcnd                  0/1     ContainerCreating   1          5h25m   188.188.3.131   k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">ingress-nginx          ingress-nginx-defaultbackend-84f4777fbb-tdr9j   0/1     ContainerCreating   1          5h25m   &lt;none&gt;          k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-kube-controllers-5c6b7c9d86-fcsjl        0/1     ContainerCreating   5          4d13h   188.188.3.131   k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-489bm                               0/1     PodInitializing     0          4d13h   188.188.3.132   k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-7cggr                               0/1     Init:0/2            0          4d13h   188.188.3.121   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-8bqkj                               0/1     Init:0/2            0          4d13h   188.188.3.123   k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-9m2g5                               0/1     Init:0/2            0          4d13h   188.188.3.134   k8s-node04     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-k5l5h                               0/1     Init:0/2            0          4d13h   188.188.3.122   k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-t4cds                               0/1     Init:0/2            0          4d13h   188.188.3.133   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-xjpsl                               0/1     PodInitializing     4          4d13h   188.188.3.131   k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            coredns-746fcb4bc5-qk97f                        0/1     ContainerCreating   7          4d22h   &lt;none&gt;          k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            metrics-server-55c49f8f44-kslgf                 0/1     ContainerCreating   0          4d22h   &lt;none&gt;          k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper-79c5968bdc-f4vpt      0/1     ContainerCreating   7          4d22h   &lt;none&gt;          k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard-658485d5c7-wstfj           0/1     ContainerCreating   0          4d22h   &lt;none&gt;          k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">$ kubectl get po -A -owide</span><br><span class="line">NAMESPACE              NAME                                            READY   STATUS    RESTARTS   AGE     IP               NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">ingress-nginx          ingress-nginx-controller-5mcnd                  1/1     Running   0          5h25m   188.188.3.131    k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">ingress-nginx          ingress-nginx-defaultbackend-84f4777fbb-tdr9j   1/1     Running   0          5h25m   172.25.244.212   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-kube-controllers-5c6b7c9d86-fcsjl        1/1     Running   0          4d13h   188.188.3.131    k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-489bm                               1/1     Running   0          4d13h   188.188.3.132    k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-7cggr                               1/1     Running   0          4d13h   188.188.3.121    k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-8bqkj                               1/1     Running   0          4d13h   188.188.3.123    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-9m2g5                               1/1     Running   0          4d13h   188.188.3.134    k8s-node04     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-k5l5h                               1/1     Running   0          4d13h   188.188.3.122    k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-t4cds                               1/1     Running   0          4d13h   188.188.3.133    k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            calico-node-xjpsl                               1/1     Running   0          4d13h   188.188.3.131    k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            coredns-746fcb4bc5-qk97f                        1/1     Running   0          4d22h   172.25.244.211   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system            metrics-server-55c49f8f44-kslgf                 1/1     Running   0          4d22h   172.18.195.24    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubernetes-dashboard   dashboard-metrics-scraper-79c5968bdc-f4vpt      1/1     Running   0          4d22h   172.25.92.81     k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard-658485d5c7-wstfj           1/1     Running   0          4d22h   172.18.195.23    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s问题_NFS-Provisioner存储卷报错</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%97%AE%E9%A2%98_NFS-Provisioner%E5%AD%98%E5%82%A8%E5%8D%B7%E6%8A%A5%E9%94%99/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%97%AE%E9%A2%98_NFS-Provisioner%E5%AD%98%E5%82%A8%E5%8D%B7%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p><strong>问题 01：</strong></p><p>创建 PVC 后状态一直为 Pending（状态为Pending则为异常，Bound为成功），详情如下：</p><p><code>waiting for a volume to be created, either by external provisioner &quot;fuseim.pri/ifs&quot; or manually created by system administrator</code></p><p>解决问题：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> 755 -R /nfs/data</span><br></pre></td></tr></table></figure><p>给 nfs 目录给予相应的权限</p><p><strong>问题 02：</strong></p><p>上述问题设定权限后还是 Pending 状态，可按下述排查步骤进行处理；</p><ol><li>通过 kubectl describe 命令查看错误提示信息，信息中有：<code>waiting for a volume to be created, either by external provisioner “fuseim.pri/ifs” or manually created by system administrator</code></li><li>通过 kubectl logs 命令查看 pod（nfs-client-provisioner）日志，日志中有：<code>unexpected error getting claim reference: selfLink was empty, can’t make reference</code></li><li>再根据错误信息 2 进行查找问题。</li></ol><p>参考资料：</p><blockquote><p> In v1.16, we will deprecate the SelfLink field in both ObjectMeta and ListMeta objects by: documenting in field definition that it is deprecated and is going to be removed adding a release-note about field deprecation We will also introduce a feature gate to allow disabling setting SelfLink fields and opaque the logic setting it behind this feature gate.</p><p> <strong>In v1.20 (12 months and 4 release from v1.16) we will switch off the feature gate</strong> <strong>which will automatically disable setting SelfLinks. However it will</strong> <strong>still be possible to revert the behavior by changing value of a</strong> <strong>feature gate</strong>.</p><p> In v1.21, we will get rid of the whole code propagating those fields and fields themselves. In the meantime, we will go over places referencing that field (see below) and get rid of those too.</p><p>As you see, you can enable it back with <a href="https://kubernetes.io/docs/reference/command-line-tools-reference/feature-gates/">featureGate</a>: <code>RemoveSelfLink=false</code> although its not recommented and SelfLink will be permamently removed in v1.21</p><p>Also check this issue on github: <a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner/issues/25">Using Kubernetes v1.20.0, getting “unexpected error getting claim reference: selfLink was empty, can’t make reference</a></p></blockquote><ul><li>根据上述解答，kubernetes 1.20版本开始，将默认禁用 selfLink</li></ul><p>解决方法：</p><ol><li><p>确认当前环境（kubeadm、二进制等）</p></li><li><p>Kubeadm 解决方法，可通过 <code>find / -name kube-apiserver.yaml</code>命令，找到 kube-apiserver.yaml 文件进行编辑；</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">/etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">kube-apiserver</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">--feature-gates=RemoveSelfLink=false</span>  <span class="comment"># 添加此参数设备</span></span><br><span class="line"><span class="comment"># 然后重新应用配置</span></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">/etc/kubernetes/manifests/kube-apiserver.yaml</span></span><br></pre></td></tr></table></figure></li><li><p>二进制方式，可通过<code>systemctl status kube-apiserver.service</code>命令找到 kube-apiserver.service 文件进行编辑；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-apiserver \</span><br><span class="line">      --v=2  \</span><br><span class="line">      --logtostderr=<span class="literal">true</span>  \</span><br><span class="line">      --allow-privileged=<span class="literal">true</span>  \</span><br><span class="line">      --bind-address=0.0.0.0  \</span><br><span class="line">      --secure-port=6443  \</span><br><span class="line">.....</span><br><span class="line">      --feature-gates=RemoveSelfLink=<span class="literal">false</span>  <span class="comment"># 最后增加此参数</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10s</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载kube-apiserver.service</span></span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl restart kube-apiserver</span><br></pre></td></tr></table></figure><p>重新删除一下 nfs 插件，观察日志，直到日志显示<code>successfully acquired lease to provision for pvc default/pvc-sc</code>，即为成功</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s问题_Calico网络异常处理</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%97%AE%E9%A2%98_Calico%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%97%AE%E9%A2%98_Calico%E7%BD%91%E7%BB%9C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong>问题一：Calico 服务异常，导致无响应</strong></p><blockquote><p>Warning  Unhealthy       2d21h (x2 over 2d21h)    kubelet  Readiness probe failed: calico&#x2F;node is not ready: BIRD is not ready: Error querying BIRD: unable to connect to BIRDv4 socket: dial unix &#x2F;var&#x2F;run&#x2F;bird&#x2F;bird.ctl: connect: no such file or directory</p></blockquote><p><strong>Calico 问题排障</strong>，根据提示 <strong>估计是没用发现实际真正的网卡</strong></p><p><strong>解决方法</strong>：调整 calicao 网络插件的网卡发现机制，修改 <code>IP_AUTODETECTION_METHOD</code> 对应的 value 值。官方提供的 yaml 文件中，ip 识别策略（IPDETECTMETHOD）没有配置，即默认为 first-found，这会导致一个网络异常的 ip 作为 nodeIP 被注册，从而影响 node-to-node mesh。我们可以修改成 can-reach 或者 interface 的策略，尝试连接某一个 Ready 的 node 的 IP，以此选择出正确的 IP。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@master01 ~]<span class="comment"># kubectl get po -A</span></span><br><span class="line">NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system            calico-kube-controllers-5c59f7dcf4-f5gxd     1/1     Running   6          5d2h</span><br><span class="line">kube-system            calico-node-4swcw                            0/1     Running   5          5d2h</span><br><span class="line">kube-system            calico-node-bd59d                            1/1     Running   7          5d17h</span><br><span class="line">kube-system            calico-node-bzxwt                            1/1     Running   9          5d17h</span><br><span class="line">kube-system            calico-node-fb8t8                            1/1     Running   8          5d17h</span><br><span class="line">kube-system            calico-node-svvs8                            1/1     Running   7          5d17h</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Events:</span><br><span class="line">  Type     Reason     Age    From               Message</span><br><span class="line">  ----     ------     ----   ----               -------</span><br><span class="line">  Normal   Scheduled  4m24s  default-scheduler  Successfully assigned kube-system/calico-node-t4xxg to node02</span><br><span class="line">...</span><br><span class="line">  Warning  Unhealthy  4m9s   kubelet            Readiness probe failed: calico/node is not ready: BIRD is not ready: Error querying BIRD: unable to connect to BIRDv4 socket: dial unix /var/run/calico/bird.ctl: connect: connection refused</span><br><span class="line">  Warning  Unhealthy  4m4s   kubelet            Readiness probe failed: 2021-05-25 03:48:51.666 [INFO][184] confd/health.go 180: Number of node(s) with BGP peering established = 0</span><br><span class="line">calico/node is not ready: BIRD is not ready: BGP not established with 188.188.4.221,188.188.4.222,188.188.4.223,188.188.4.224</span><br></pre></td></tr></table></figure><p><strong>修改 calico.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">            <span class="comment"># Cluster type to identify the deployment type</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CLUSTER_TYPE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;k8s,bgp&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">IP_AUTODETECTION_METHOD</span>        <span class="comment"># ens根据实际网卡开头配置</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;interface=ens.*&quot;</span>             </span><br><span class="line">            <span class="comment"># Auto-detect the BGP IP address.</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">IP</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;autodetect&quot;</span></span><br><span class="line">            <span class="comment"># Enable IPIP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CALICO_IPV4POOL_IPIP</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;Always&quot;</span></span><br><span class="line">            <span class="comment"># Enable or Disable VXLAN on the default IP pool.</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CALICO_IPV4POOL_VXLAN</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;Never&quot;</span></span><br><span class="line"><span class="comment"># 重新 apply .yaml</span></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">calico-etcd.yaml</span></span><br></pre></td></tr></table></figure><p><strong>问题二：Calico BIRD is not ready: BGP not established</strong></p><p>因为官方的 step by step 太傻白甜，没有把 <code>IP_AUTODETECTION_METHOD</code> 这个 IP 检测方法的参数放入 <code>calico.yaml</code> 中，calico 会使用第一个找到的 network interface（往往是错误的 interface），导致 Calico 把 master 也算进 nodes，于是 master BGP 启动失败，而其他 workers 则启动成功。</p><p><strong>解决方法：</strong>首先通过内网 IP 确认你的有效 network interface，在这里我是 <code>eth0</code>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@m ~]<span class="comment"># ifconfig</span></span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 0.0.0.0</span><br><span class="line">        ether 02:42:0e:2b:bc:ae  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 45198  bytes 6611728 (6.3 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 50964  bytes 89457718 (85.3 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.19.151.153  netmask 255.255.240.0  broadcast 172.19.159.255</span><br><span class="line">        ether 00:16:3e:02:ca:21  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 55416904  bytes 13367102550 (12.4 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 53227785  bytes 10051909618 (9.3 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        loop  txqueuelen 1  (Local Loopback)</span><br><span class="line">        RX packets 31894042  bytes 3635575069 (3.3 GiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 31894042  bytes 3635575069 (3.3 GiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">tunl0: flags=193&lt;UP,RUNNING,NOARP&gt;  mtu 1440</span><br><span class="line">        inet 192.168.159.0  netmask 255.255.255.255</span><br><span class="line">        tunnel   txqueuelen 1  (IPIP Tunnel)</span><br><span class="line">        RX packets 15  bytes 1958 (1.9 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 17  bytes 1290 (1.2 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>编辑 <code>calico.yaml</code> 找到 <code>name: IP</code>，在它上面写入：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CLUSTER_TYPE</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;k8s,bgp&quot;</span></span><br><span class="line">          <span class="comment"># 新增部分</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">IP_AUTODETECTION_METHOD</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;interface=eth0&quot;</span></span><br><span class="line">          <span class="comment"># value: &quot;interface=eth.*&quot;</span></span><br><span class="line">          <span class="comment"># value: &quot;interface=can-reach=www.baidu.com&quot;</span></span><br><span class="line">          <span class="comment"># 新增部分结束</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">IP</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;autodetect&quot;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CALICO_IPV4POOL_IPIP</span></span><br><span class="line">            <span class="attr">value:</span> <span class="string">&quot;Always&quot;</span></span><br></pre></td></tr></table></figure><p>在注释中还有2个写法：</p><p><code>eth.*</code> 这个写法是 GoLang 的正则，它可以匹配到 eth0、eth1 等。</p><p><code>can-reach</code> 将用第一个可以识别这个地址的<code>network interface</code></p><p>IP 和 IP_AUTODETECTION_METHOD 是互斥关系。</p><p>如果是多次执行过 <code>kubectl apply -f calico.yaml</code>的主机，应该先清理 cni 文件，再 apply：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> -rf /var/lib/cni</span><br><span class="line">$ kubectl apply -f calico.yaml </span><br></pre></td></tr></table></figure><p><strong>问题三：Calico 虽然已经正常启动，但每次发布新容器都会提示 Failed to create pod sandbox: rpc error: code &#x3D; Unknown desc &#x3D; [failed to set up sandbox container …</strong></p><p>错误信息 &amp; 容器状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Type     Reason                  Age                From               Message</span><br><span class="line">----     ------                  ----               ----               -------</span><br><span class="line">Normal   Scheduled               58s                default-scheduler  Successfully assigned kube-system/calico-kube-controllers-66686fdb54-fg954 to k8s-node04</span><br><span class="line">Warning  FailedCreatePodSandBox  58s                kubelet            Failed to create pod sandbox: rpc error: code = Unknown desc = [failed to <span class="built_in">set</span> up sandbox container <span class="string">&quot;df3752050f957c78a0a91f74f79bb409c783e3e38911c9a7dd3c4f542ee0d9d7&quot;</span> network <span class="keyword">for</span> pod <span class="string">&quot;calico-kube-controllers-66686fdb54-fg954&quot;</span>: networkPlugin cni failed to <span class="built_in">set</span> up pod <span class="string">&quot;calico-kube-controllers-66686fdb54-fg954_kube-system&quot;</span> network: error getting ClusterInformation: connection is unauthorized: Unauthorized, failed to clean up sandbox container <span class="string">&quot;df3752050f957c78a0a91f74f79bb409c783e3e38911c9a7dd3c4f542ee0d9d7&quot;</span> network <span class="keyword">for</span> pod <span class="string">&quot;calico-kube-controllers-66686fdb54-fg954&quot;</span>: networkPlugin cni failed to teardown pod <span class="string">&quot;calico-kube-controllers-66686fdb54-fg954_kube-system&quot;</span> network: error getting ClusterInformation: connection is unauthorized: Unauthorized]</span><br><span class="line">Normal   SandboxChanged          40s (x3 over 57s)  kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class="line">Normal   Pulling                 40s                kubelet            Pulling image <span class="string">&quot;registry.cn-beijing.aliyuncs.com/dotbalo/kube-controllers:v3.19.1&quot;</span></span><br><span class="line">Normal   Pulled                  36s                kubelet            Successfully pulled image <span class="string">&quot;registry.cn-beijing.aliyuncs.com/dotbalo/kube-controllers:v3.19.1&quot;</span> <span class="keyword">in</span> 3.962153679s</span><br><span class="line">Normal   Created                 33s                kubelet            Created container calico-kube-controllers</span><br><span class="line">Normal   Started                 33s                kubelet            Started container calico-kube-controllers</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coredns和metrics-server无法运行，重复create pod sandbox，旧的容器无法下线；</span></span><br><span class="line">$ kubectl get po -A</span><br><span class="line">NAMESPACE     NAME                                       READY   STATUS              RESTARTS      AGE</span><br><span class="line">kube-system   calico-kube-controllers-66686fdb54-pkd78   1/1     Running             2 (55m ago)   73m</span><br><span class="line">kube-system   calico-node-6qx9w                          1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   calico-node-7zhq5                          1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   calico-node-f72fq                          1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   calico-node-f7xm8                          1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   calico-node-gkrvn                          1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   calico-node-lfn9c                          1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   calico-node-r2mh2                          1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   calico-typha-67c6dc57d6-76vht              1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   calico-typha-67c6dc57d6-rd5n5              1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   calico-typha-67c6dc57d6-smcjm              1/1     Running             1 (55m ago)   73m</span><br><span class="line">kube-system   coredns-7684f7549-bxslj                    0/1     ContainerCreating   0             30s</span><br><span class="line">kube-system   metrics-server-5c8b499fd7-h5vcw            0/1     ContainerCreating   0             17s</span><br><span class="line"></span><br><span class="line">$ kubectl describe po coredns-7684f7549-bxslj -n kube-system</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason                  Age                From               Message</span><br><span class="line">  ----     ------                  ----               ----               -------</span><br><span class="line">  Normal   Scheduled               79s                default-scheduler  Successfully assigned kube-system/coredns-7684f7549-bxslj to k8s-master01</span><br><span class="line">  Warning  FailedCreatePodSandBox  78s                kubelet            Failed to create pod sandbox: rpc error: code = Unknown desc = [failed to <span class="built_in">set</span> up sandbox container <span class="string">&quot;4dbbd4297ea1be815273911b8b94ec0324f001c80055bf2136a6704884f9df24&quot;</span> network <span class="keyword">for</span> pod <span class="string">&quot;coredns-7684f7549-bxslj&quot;</span>: networkPlugin cni failed to <span class="built_in">set</span> up pod <span class="string">&quot;coredns-7684f7549-bxslj_kube-system&quot;</span> network: error getting ClusterInformation: connection is unauthorized: Unauthorized, failed to clean up sandbox container <span class="string">&quot;4dbbd4297ea1be815273911b8b94ec0324f001c80055bf2136a6704884f9df24&quot;</span> network <span class="keyword">for</span> pod <span class="string">&quot;coredns-7684f7549-bxslj&quot;</span>: networkPlugin cni failed to teardown pod <span class="string">&quot;coredns-7684f7549-bxslj_kube-system&quot;</span> network: error getting ClusterInformation: connection is unauthorized: Unauthorized]</span><br><span class="line">  Normal   SandboxChanged          12s (x6 over 78s)  kubelet            Pod sandbox changed, it will be killed and re-created.</span><br><span class="line"></span><br><span class="line">$ docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE                                                           COMMAND                  CREATED                  STATUS                              PORTS               NAMES</span><br><span class="line">c251a40b346b        c4d75af7e098                                                    <span class="string">&quot;start_runit&quot;</span>            Less than a second ago   Up Less than a second                                   k8s_calico-node_calico-node-6qx9w_kube-system_5b0f7e76-1c88-47a1-87d1-c62adfb17aa4_1</span><br><span class="line">a2066540be35        5660150975fb                                                    <span class="string">&quot;/usr/local/bin/flex…&quot;</span>   Less than a second ago   Exited (0) Less than a second ago                       k8s_flexvol-driver_calico-node-6qx9w_kube-system_5b0f7e76-1c88-47a1-87d1-c62adfb17aa4_0</span><br><span class="line">fe8fcefc2ae0        5749e8b276f9                                                    <span class="string">&quot;/opt/cni/bin/install&quot;</span>   Less than a second ago   Exited (0) Less than a second ago                       k8s_install-cni_calico-node-6qx9w_kube-system_5b0f7e76-1c88-47a1-87d1-c62adfb17aa4_0</span><br><span class="line">6750afe6a338        5749e8b276f9                                                    <span class="string">&quot;/opt/cni/bin/calico…&quot;</span>   Less than a second ago   Exited (0) Less than a second ago                       k8s_upgrade-ipam_calico-node-6qx9w_kube-system_5b0f7e76-1c88-47a1-87d1-c62adfb17aa4_1</span><br><span class="line">cd4d1d51f7f5        1680f4d98085                                                    <span class="string">&quot;/sbin/tini -- calic…&quot;</span>   Less than a second ago   Up Less than a second                                   k8s_calico-typha_calico-typha-67c6dc57d6-rd5n5_kube-system_ee2de75d-04a6-4836-85d6-cafa7d9a7a0b_1</span><br><span class="line">ad51d77617cb        registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5   <span class="string">&quot;/pause&quot;</span>                 Less than a second ago   Up Less than a second                                   k8s_POD_calico-node-6qx9w_kube-system_5b0f7e76-1c88-47a1-87d1-c62adfb17aa4_1</span><br><span class="line">e30420bf9c33        registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5   <span class="string">&quot;/pause&quot;</span>                 Less than a second ago   Up Less than a second                                   k8s_POD_calico-typha-67c6dc57d6-rd5n5_kube-system_ee2de75d-04a6-4836-85d6-cafa7d9a7a0b_1</span><br><span class="line">4dbbd4297ea1        registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5   <span class="string">&quot;/pause&quot;</span>                 About a minute ago       Exited (0) About a minute ago                           k8s_POD_coredns-7684f7549-bxslj_kube-system_14b9e985-6c14-45c7-a160-a6bfb9b50974_0</span><br><span class="line">aafb666e6ec2        registry.cn-beijing.aliyuncs.com/dotbalo/node                   <span class="string">&quot;start_runit&quot;</span>            About an hour ago        Exited (0) 56 minutes ago                               k8s_calico-node_calico-node-6qx9w_kube-system_5b0f7e76-1c88-47a1-87d1-c62adfb17aa4_0</span><br><span class="line">16f35cc289f3        registry.cn-beijing.aliyuncs.com/dotbalo/typha                  <span class="string">&quot;/sbin/tini -- calic…&quot;</span>   About an hour ago        Exited (1) 56 minutes ago                               k8s_calico-typha_calico-typha-67c6dc57d6-rd5n5_kube-system_ee2de75d-04a6-4836-85d6-cafa7d9a7a0b_0</span><br><span class="line">34047e7d565c        registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5   <span class="string">&quot;/pause&quot;</span>                 About an hour ago        Exited (0) 56 minutes ago                               k8s_POD_calico-typha-67c6dc57d6-rd5n5_kube-system_ee2de75d-04a6-4836-85d6-cafa7d9a7a0b_0</span><br><span class="line">307b5d12c171        registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.5   <span class="string">&quot;/pause&quot;</span>                 About an hour ago        Exited (0) 56 minutes ago </span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong>更改 calico.yaml，重新 apply</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">            <span class="comment"># Cluster type to identify the deployment type</span></span><br><span class="line">            - name: CLUSTER_TYPE</span><br><span class="line">              value: <span class="string">&quot;k8s,bgp&quot;</span></span><br><span class="line">            <span class="comment"># 新增本地网卡名称</span></span><br><span class="line">            - name: IP_AUTODETECTION_METHOD  </span><br><span class="line">              value: <span class="string">&quot;interface=ens192&quot;</span></span><br><span class="line">            <span class="comment"># Auto-detect the BGP IP address.</span></span><br><span class="line">            - name: IP</span><br><span class="line">              value: <span class="string">&quot;autodetect&quot;</span></span><br><span class="line">$ kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -n kube-system</span><br><span class="line">NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">calico-kube-controllers-66686fdb54-fg954   1/1     Running   0          15m</span><br><span class="line">calico-node-4hpn7                          1/1     Running   0          15m</span><br><span class="line">calico-node-fnmqf                          1/1     Running   0          15m</span><br><span class="line">calico-node-hlrk6                          1/1     Running   0          15m</span><br><span class="line">calico-node-kdw8k                          1/1     Running   0          15m</span><br><span class="line">calico-node-twgzg                          1/1     Running   0          15m</span><br><span class="line">calico-node-xj2q2                          1/1     Running   0          15m</span><br><span class="line">calico-node-zlrlt                          1/1     Running   0          15m</span><br><span class="line">calico-typha-67c6dc57d6-lkzzc              1/1     Running   0          15m</span><br><span class="line">calico-typha-67c6dc57d6-m9dlw              1/1     Running   0          15m</span><br><span class="line">calico-typha-67c6dc57d6-s6lq7              1/1     Running   0          15m</span><br><span class="line">coredns-7684f7549-rxj8w                    1/1     Running   0          14m</span><br><span class="line">[root@k8s-master01 CoreDNS]<span class="comment"># kubectl describe po coredns-7684f7549-rxj8w -n kube-system</span></span><br><span class="line">...</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason     Age   From               Message</span><br><span class="line">  ----     ------     ----  ----               -------</span><br><span class="line">  Normal   Scheduled  14m   default-scheduler  Successfully assigned kube-system/coredns-7684f7549-rxj8w to k8s-master02</span><br><span class="line">  Normal   Pulling    14m   kubelet            Pulling image <span class="string">&quot;registry.cn-beijing.aliyuncs.com/dotbalo/coredns:1.8.4&quot;</span></span><br><span class="line">  Normal   Pulled     14m   kubelet            Successfully pulled image <span class="string">&quot;registry.cn-beijing.aliyuncs.com/dotbalo/coredns:1.8.4&quot;</span> <span class="keyword">in</span> 3.936673033s</span><br><span class="line">  Normal   Created    14m   kubelet            Created container coredns</span><br><span class="line">  Normal   Started    14m   kubelet            Started container coredns</span><br><span class="line">  Warning  Unhealthy  14m   kubelet            Readiness probe failed: HTTP probe failed with statuscode: 503</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> calico </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s配置_kubectl命令补全</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%85%8D%E7%BD%AE_kubectl%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%85%8D%E7%BD%AE_kubectl%E5%91%BD%E4%BB%A4%E8%A1%A5%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>默认 bash 包含了自动补全，只要我们输入几个命令的首字母，通过 TAB 键，就可以补全命令，而 bash-completion 相当于 bash 的扩展包，这个包提供了一些额外的补全功能，本文通过 bash-completion 来设置 kubectl 参数命令的补全</p></blockquote><p>1）安装 bash-completion</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install bash-completion</span><br></pre></td></tr></table></figure><p>2）使其立即生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /usr/share/bash-completion/bash_completion</span><br><span class="line">$ <span class="built_in">source</span> &lt;(kubectl completion bash)</span><br></pre></td></tr></table></figure><p>3）添加环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>4）通过命令验证设置是否正常</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">type</span> _init_completion</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubectl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s配置_Cert-manager申请免费HTTPS证书</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%85%8D%E7%BD%AE_%20Cert-manager%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9HTTPS%E8%AF%81%E4%B9%A6/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%85%8D%E7%BD%AE_%20Cert-manager%E7%94%B3%E8%AF%B7%E5%85%8D%E8%B4%B9HTTPS%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>cert-manager 是一个云原生证书管理开源工具，用于在 Kubernetes 集群中提供 HTTPS 证书并自动续期。以下示例介绍了如何使用 cert-manager 自动申请免费证书并自动续期。</p></blockquote><p>1）部署 cert-manager</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.1.0/cert-manager.yaml</span><br></pre></td></tr></table></figure><p>2）查看 Pod 状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -n cert-manager</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">cert-manager-1           1/1     Running   0          2m11s</span><br><span class="line">cert-manager-cainjector  1/1     Running   0          2m11s</span><br><span class="line">cert-manager-webhook     1/1     Running   0          2m10s</span><br></pre></td></tr></table></figure><p>3）创建 ClusterIssuer</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">|</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">letsencrypt-prod-http01</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">acme:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">&lt;your_email_name@gmail.com&gt;</span>  <span class="comment">#替换为您的邮箱名。</span></span><br><span class="line">    <span class="attr">privateKeySecretRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">letsencrypt-http01</span></span><br><span class="line">    <span class="attr">solvers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http01:</span> </span><br><span class="line">        <span class="attr">ingress:</span></span><br><span class="line">          <span class="attr">class:</span> <span class="string">nginx</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>4）查看 ClusterIssuer。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get clusterissuer</span><br><span class="line">NAME                         READY   AGE</span><br><span class="line">letsencrypt-prod-http01      True    17s</span><br></pre></td></tr></table></figure><p>5）创建 Ingress 资源对象。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">&lt;&lt;EOF</span> <span class="string">|</span> <span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="bullet">-</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-tls</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">&quot;letsencrypt-prod-http01&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;your_domain_name&gt;</span>        <span class="comment"># 替换为您的域名。</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">ingress-tls</span>   </span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">&lt;your_domain_name&gt;</span>    <span class="comment"># 替换为您的域名。</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">&lt;your_service_name&gt;</span>  <span class="comment"># 替换为您的后端服务名。</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="string">&lt;your_service_port&gt;</span>  <span class="comment"># 替换为您的服务端口。</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong>：替换的域名 <strong>your_domain_name</strong> 必须符合以下条件：</p><ul><li>域名不能超过64个字符</li><li>不支持泛域名</li><li>在公网以 HTTP 协议可正常访问</li></ul><p>6）执行以下命令，查看证书。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get cert</span><br><span class="line">NAME          READY   SECRET     AGE</span><br><span class="line">ingress-tls   True    ingress-tls   52m</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：如果 <strong>READY</strong> 状态不为 <strong>True</strong>，可通过 <code>kubectl describe cert ingress-tls</code> 查看证书处理过程。</p><p>7）查看 Secret。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get secret  ingress-tls</span><br><span class="line">NAME          TYPE                DATA   AGE</span><br><span class="line">ingress-tls   kubernetes.io/tls   2      2m</span><br></pre></td></tr></table></figure><p>8）通过 Web 浏览器输入 <code>https:[网站域名]</code> 访问设置的域名</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_二进制1.20.x</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_%E4%BA%8C%E8%BF%9B%E5%88%B61.20.x/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_%E4%BA%8C%E8%BF%9B%E5%88%B61.20.x/</url>
      
        <content type="html"><![CDATA[<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p><strong>安装规划</strong></p><ul><li>配置环境：ESXI 6.7.0<ul><li>系统版本：CentOS-7.9-Minimal</li><li>Docker 版本：20.10.x</li><li>Kubernetes Server 版本：1.20.x</li><li>Etcd 版本：v3.5.0</li><li>Pod 网段：172.16.0.0&#x2F;12</li><li>Service 网段：110.96.0.0&#x2F;12</li></ul></li></ul><p>注：宿主机网段、K8s Server 网段、Pod 网段不能重复</p><table><thead><tr><th>主机名</th><th>IP</th><th align="left">组件</th></tr></thead><tbody><tr><td>k8s-master-lb</td><td>188.188.3.110</td><td align="left">&#x2F;</td></tr><tr><td>k8s-master01</td><td>188.188.3.111</td><td align="left">kube-apiserver，kube-controller-manager，kube-scheduler，etcd，kubelet，kube-proxy，docker</td></tr><tr><td>k8s-master02</td><td>188.188.3.112</td><td align="left">kube-apiserver，kube-controller-manager，kube-scheduler，etcd，kubelet，kube-proxy，docker</td></tr><tr><td>k8s-master03</td><td>188.188.3.113</td><td align="left">kube-apiserver，kube-controller-manager，kube-scheduler，etcd，kubelet，kube-proxy，docker</td></tr><tr><td>k8s-node01</td><td>188.188.3.114</td><td align="left">kubelet，kube-proxy，docker</td></tr><tr><td>k8s-node02</td><td>188.188.3.115</td><td align="left">kubelet，kube-proxy，docker</td></tr></tbody></table><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><p><strong>安装常用工具</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install wget jq psmisc lrzsz vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git expect -y</span><br></pre></td></tr></table></figure><p><strong>所有节点配置 Hostname&amp;Hosts 文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hostnamectl set-hostname k8s-master01 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname k8s-master02 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname k8s-master03 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname k8s-node01 &amp;&amp; bash</span><br><span class="line">$ hostnamectl set-hostname k8s-node02 &amp;&amp; bash</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">188.188.3.110 k8s-master-lb </span></span><br><span class="line"><span class="string">188.188.3.111 k8s-master01</span></span><br><span class="line"><span class="string">188.188.3.112 k8s-master02</span></span><br><span class="line"><span class="string">188.188.3.113 k8s-master03</span></span><br><span class="line"><span class="string">188.188.3.114 k8s-node01</span></span><br><span class="line"><span class="string">188.188.3.115 k8s-node02</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p><strong>设置阿里云源</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">$ yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">$ sed -i -e <span class="string">&#x27;/mirrors.cloud.aliyuncs.com/d&#x27;</span> -e <span class="string">&#x27;/mirrors.aliyuncs.com/d&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure><p><strong>所有节点关闭防火墙、selinux、swap</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据实际环境确认是否关闭防火墙</span></span><br><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld NetworkManager</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久关闭 Selinux</span></span><br><span class="line">$ setenforce 0</span><br><span class="line">$ sed -i <span class="string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/sysconfig/selinux</span><br><span class="line">$ sed -i <span class="string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久关闭虚拟内存</span></span><br><span class="line">$ swapoff -a &amp;&amp; sysctl -w vm.swappiness=0</span><br><span class="line">$ sed -ri <span class="string">&#x27;/^[^#]*swap/s@^@#@&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><p><strong>所有节点安装 ntpdate，同步时间</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -ivh http://mirrors.wlnmp.com/centos/wlnmp-release-centos.noarch.rpm</span><br><span class="line">$ yum install ntpdate -y</span><br><span class="line">$ <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span><br><span class="line">$ ntpdate time2.aliyun.com</span><br><span class="line">$ crontab -e</span><br><span class="line"><span class="comment"># 加入到crontab</span></span><br><span class="line">*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com</span><br></pre></td></tr></table></figure><h4 id="发放密钥"><a href="#发放密钥" class="headerlink" title="发放密钥"></a>发放密钥</h4><blockquote><p>k8s-master01 节点生成证书，并发放到其他节点作免密登录，集群管理也在 k8s-master01 上操作；</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span> -f /root/.ssh/id_rsa</span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> k8s-master01 k8s-master02 k8s-master03 k8s-node01 k8s-node02;<span class="keyword">do</span></span><br><span class="line">expect -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">spawn ssh-copy-id -i /root/.ssh/id_rsa.pub root@<span class="variable">$i</span></span></span><br><span class="line"><span class="string">        expect &#123;</span></span><br><span class="line"><span class="string">                \&quot;*yes/no*\&quot; &#123;send \&quot;yes\r\&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">                \&quot;*password*\&quot; &#123;send \&quot;Password\r\&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">                \&quot;*Password*\&quot; &#123;send \&quot;Password\r\&quot;;&#125;</span></span><br><span class="line"><span class="string">        &#125; &quot;</span></span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure><h4 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h4><p><strong>配置 limit</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -SHn 65535</span><br><span class="line">$ vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 末尾添加如下内容</span></span><br><span class="line">* soft nofile 655360</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft <span class="built_in">nproc</span> 655350</span><br><span class="line">* hard <span class="built_in">nproc</span> 655350</span><br><span class="line">* soft memlock unlimited</span><br><span class="line">* hard memlock unlimited</span><br></pre></td></tr></table></figure><p><strong>内核升级</strong></p><blockquote><p>在 Kubernetes 1.18 版本出现 DNS 解析异常，原因是最新 Kubernetes 使用 IPVS 模块比较新，需要内核系统版本支持，所以需要升级为最新内核</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有节点升级系统，此处升级没有升级内核</span></span><br><span class="line">$ yum update -y --exclude=kernel* </span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过下载 kernel image 的 rpm 包进行安装</span></span><br><span class="line">$ rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># ELRepo中有两个内核选项，kernel-lt(长期支持版本)，kernel-ml(主线最新版本)，采用长期支持版本(kernel-lt)，更稳定一些</span></span><br><span class="line">$ yum -y install kernel-lt --enablerepo=elrepo-kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内核顺序</span></span><br><span class="line">$ grub2-set-default 0 &amp;&amp; grub2-mkconfig -o /etc/grub2.cfg</span><br><span class="line">$ grubby --args=<span class="string">&quot;user_namespace.enable=1&quot;</span> --update-kernel=<span class="string">&quot;<span class="subst">$(grubby --default-kernel)</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用下面命令看看确认下是否启动默认内核指向上面安装的内核</span></span><br><span class="line">$ grubby --default-kernel &amp;&amp; reboot now</span><br></pre></td></tr></table></figure><p><strong>配置 ipvs 模块</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在内核 4.19+ 版本 nf_conntrack_ipv4 已经改为 nf_conntrack，4.18 以下使用 nf_conntrack_ipv4 即可</span></span><br><span class="line">$ yum install ipvsadm ipset sysstat conntrack libseccomp -y</span><br><span class="line">$ vim /etc/modules-load.d/ipvs.conf </span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_lc</span><br><span class="line">ip_vs_wlc</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_lblc</span><br><span class="line">ip_vs_lblcr</span><br><span class="line">ip_vs_dh</span><br><span class="line">ip_vs_sh</span><br><span class="line">ip_vs_fo</span><br><span class="line">ip_vs_nq</span><br><span class="line">ip_vs_sed</span><br><span class="line">ip_vs_ftp</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack</span><br><span class="line">ip_tables</span><br><span class="line">ip_set</span><br><span class="line">xt_set</span><br><span class="line">ipt_set</span><br><span class="line">ipt_rpfilter</span><br><span class="line">ipt_REJECT</span><br><span class="line">ipip</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now systemd-modules-load.service</span><br></pre></td></tr></table></figure><p><strong>配置 k8s 内核</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启一些k8s集群中必须的内核参数，所有节点配置k8s内核</span></span><br><span class="line">$ <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">fs.may_detach_mounts = 1</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1</span></span><br><span class="line"><span class="string">net.ipv4.conf.all.route_localnet = 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vm.panic_on_oom=0</span></span><br><span class="line"><span class="string">fs.inotify.max_user_watches=89100</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string">net.netfilter.nf_conntrack_max=2310720</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_time = 600</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_probes = 3</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_intvl =15</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_tw_buckets = 36000</span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_reuse = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_orphans = 327680</span></span><br><span class="line"><span class="string">net.ipv4.tcp_orphan_retries = 3</span></span><br><span class="line"><span class="string">net.ipv4.tcp_syncookies = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="line"><span class="string">net.ipv4.ip_conntrack_max = 65536</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="line"><span class="string">net.ipv4.tcp_timestamps = 0</span></span><br><span class="line"><span class="string">net.core.somaxconn = 16384</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">$ sysctl --system &amp;&amp; reboot now</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查加载情况</span></span><br><span class="line">$ lsmod | grep --color=auto -e ip_vs -e nf_conntrack</span><br></pre></td></tr></table></figure><p>所有节点配置完内核后，重启服务器，保证重启后内核依旧加载</p><h3 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line">$ yum install docker-ce-20.10.* docker-cli-20.10.* -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有机器配置加速源并配置docker的启动参数使用systemd,使用systemd是官方的建议,详见 https://kubernetes.io/docs/setup/cri/</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /etc/docker/</span><br><span class="line">$ <span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now docker &amp;&amp; systemctl status docker</span><br></pre></td></tr></table></figure><h3 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h3><h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><p><strong>所有节点提前创建程序目录</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /opt/cni/bin /etc/etcd/ssl /etc/kubernetes/pki /etc/kubernetes/manifests/ /etc/systemd/system/kubelet.service.d /var/lib/kubelet /var/log/kubernetes</span><br></pre></td></tr></table></figure><p><strong>下载 kubernetes &amp; etcd 安装包文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master01节点</span></span><br><span class="line">$ wget https://dl.k8s.io/v1.20.13/kubernetes-server-linux-amd64.tar.gz</span><br><span class="line">$ wget https://github.com/etcd-io/etcd/releases/download/v3.5.0/etcd-v3.5.0-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar -xf kubernetes-server-linux-amd64.tar.gz  --strip-components=3 -C /usr/local/bin kubernetes/server/bin/kube&#123;<span class="built_in">let</span>,ctl,-apiserver,-controller-manager,-scheduler,-proxy&#125;</span><br><span class="line">$ tar -zxvf etcd-v3.5.0-linux-amd64.tar.gz --strip-components=1 -C /usr/local/bin etcd-v3.5.0-linux-amd64/etcd&#123;,ctl&#125;</span><br><span class="line"></span><br><span class="line">$ kubelet --version</span><br><span class="line">Kubernetes v1.20.13</span><br><span class="line">$ etcdctl version</span><br><span class="line">etcdctl version: 3.5.0</span><br><span class="line">API version: 3.5</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发送到其他节点</span></span><br><span class="line">$ MasterNodes=<span class="string">&#x27;k8s-master02 k8s-master03&#x27;</span></span><br><span class="line">$ WorkNodes=<span class="string">&#x27;k8s-node01 k8s-node02&#x27;</span></span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> <span class="variable">$MasterNodes</span>; <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">$NODE</span>; </span><br><span class="line">  scp /usr/local/bin/kube&#123;<span class="built_in">let</span>,ctl,-apiserver,-controller-manager,-scheduler,-proxy&#125; <span class="variable">$NODE</span>:/usr/local/bin/; </span><br><span class="line">  scp /usr/local/bin/etcd* <span class="variable">$NODE</span>:/usr/local/bin/;</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> <span class="variable">$WorkNodes</span>; <span class="keyword">do</span></span><br><span class="line">  scp /usr/local/bin/kube&#123;<span class="built_in">let</span>,-proxy&#125; <span class="variable">$NODE</span>:/usr/local/bin/ ;</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h4><p><strong>下载自签工具</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget <span class="string">&quot;https://pkg.cfssl.org/R1.2/cfssl_linux-amd64&quot;</span> -O /usr/local/bin/cfssl</span><br><span class="line">$ wget <span class="string">&quot;https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64&quot;</span> -O /usr/local/bin/cfssljson</span><br><span class="line">$ <span class="built_in">chmod</span> +x /usr/local/bin/cfssl /usr/local/bin/cfssljson</span><br></pre></td></tr></table></figure><p>**创建 <code>ca-config.json</code> 和 <code>ca-csr.json</code> **</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim ca-config.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;signing&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;expiry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;876000h&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;kubernetes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;usages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;signing&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;key encipherment&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;server auth&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;client auth&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;expiry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;876000h&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim ca-csr.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kubernetes&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;algo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;L&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DG&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;O&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;OU&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes-manual&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ca&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;expiry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;876000h&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="组件自签"><a href="#组件自签" class="headerlink" title="组件自签"></a>组件自签</h4><ul><li><p><strong>ETCD 证书</strong></p><p><strong>Master01 节点生成 Etcd 证书</strong>，生成证书的CSR文件：证书签名请求文件，配置了一些域名、公司、单位</p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim etcd-ca-csr.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;etcd&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;algo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;L&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DG&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;O&quot;</span><span class="punctuation">:</span> <span class="string">&quot;etcd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;OU&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Etcd Security&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ca&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;expiry&quot;</span><span class="punctuation">:</span> <span class="string">&quot;876000h&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim etcd-csr.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;etcd&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;algo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;L&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DG&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;O&quot;</span><span class="punctuation">:</span> <span class="string">&quot;etcd&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;OU&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Etcd Security&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare /etc/etcd/ssl/etcd-ca</span><br><span class="line"><span class="comment"># 注意hostname、profile参数之类要与之前设置对应</span></span><br><span class="line">$ cfssl gencert \</span><br><span class="line">   -ca=/etc/etcd/ssl/etcd-ca.pem \</span><br><span class="line">   -ca-key=/etc/etcd/ssl/etcd-ca-key.pem \</span><br><span class="line">   -config=ca-config.json \</span><br><span class="line">   -hostname=127.0.0.1,k8s-master01,k8s-master02,k8s-master03,188.188.3.111,188.188.3.112,188.188.3.113 \</span><br><span class="line">   -profile=kubernetes \</span><br><span class="line">   etcd-csr.json | cfssljson -bare /etc/etcd/ssl/etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将证书复制到其他节点</span></span><br><span class="line">$ MasterNodes=<span class="string">&#x27;k8s-master02 k8s-master03&#x27;</span></span><br><span class="line">$ WorkNodes=<span class="string">&#x27;k8s-node01 k8s-node02&#x27;</span></span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> <span class="variable">$MasterNodes</span>; <span class="keyword">do</span></span><br><span class="line">     ssh <span class="variable">$NODE</span> <span class="string">&quot;mkdir -p /etc/etcd/ssl&quot;</span></span><br><span class="line">     <span class="keyword">for</span> FILE <span class="keyword">in</span> etcd-ca-key.pem  etcd-ca.pem  etcd-key.pem  etcd.pem; <span class="keyword">do</span></span><br><span class="line">       scp /etc/etcd/ssl/<span class="variable">$&#123;FILE&#125;</span> <span class="variable">$NODE</span>:/etc/etcd/ssl/<span class="variable">$&#123;FILE&#125;</span></span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line"> <span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>K8s 组件证书</strong></p><p>Master01 生成 kubernetes 证书 [110.96.0. 是 k8s service 的网段，如需更改 k8s service 网段，那就要更改 110.96.0.1，如果不是高可用集群，188.188.3.130 为 Master01 的 IP]</p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim apiserver-csr.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kube-apiserver&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;algo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;L&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DG&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;O&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;OU&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes-manual&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># apiserver</span></span><br><span class="line">$ cfssl gencert -initca ca-csr.json | cfssljson -bare /etc/kubernetes/pki/ca</span><br><span class="line"></span><br><span class="line">$ cfssl gencert \</span><br><span class="line">   -ca=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">   -ca-key=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">   -config=ca-config.json \</span><br><span class="line">   -hostname=110.96.0.1,188.188.3.110,127.0.0.1,kubernetes,kubernetes.default,kubernetes.default.svc,kubernetes.default.svc.cluster,kubernetes.default.svc.cluster.local,188.188.3.111,188.188.3.112,188.188.3.113 \</span><br><span class="line">   -profile=kubernetes \</span><br><span class="line">   apiserver-csr.json | cfssljson -bare /etc/kubernetes/pki/apiserver</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim front-proxy-ca-csr.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kubernetes&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;algo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim front-proxy-client-csr.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;front-proxy-client&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">     <span class="attr">&quot;algo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">     <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># proxy</span></span><br><span class="line">$ cfssl gencert -initca front-proxy-ca-csr.json | cfssljson -bare /etc/kubernetes/pki/front-proxy-ca </span><br><span class="line">$ cfssl gencert \</span><br><span class="line">    -ca=/etc/kubernetes/pki/front-proxy-ca.pem \</span><br><span class="line">    -ca-key=/etc/kubernetes/pki/front-proxy-ca-key.pem \</span><br><span class="line">    -config=ca-config.json \</span><br><span class="line">    -profile=kubernetes \</span><br><span class="line">    front-proxy-client-csr.json | cfssljson -bare /etc/kubernetes/pki/front-proxy-client</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim manager-csr.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system:kube-controller-manager&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;algo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;L&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DG&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;O&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system:kube-controller-manager&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;OU&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes-manual&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># controller-manager</span></span><br><span class="line">$ cfssl gencert \</span><br><span class="line">    -ca=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">    -ca-key=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">    -config=ca-config.json \</span><br><span class="line">    -profile=kubernetes \</span><br><span class="line">    manager-csr.json | cfssljson -bare /etc/kubernetes/pki/controller-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-cluster：设置一个集群项，</span></span><br><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">    --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">    --embed-certs=<span class="literal">true</span> \</span><br><span class="line">    --server=https://188.188.3.110:8443 \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置一个环境项，一个上下文</span></span><br><span class="line">$ kubectl config set-context system:kube-controller-manager@kubernetes \</span><br><span class="line">    --cluster=kubernetes \</span><br><span class="line">    --user=system:kube-controller-manager \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># set-credentials 设置一个用户项</span></span><br><span class="line">$ kubectl config set-credentials system:kube-controller-manager \</span><br><span class="line">    --client-certificate=/etc/kubernetes/pki/controller-manager.pem \</span><br><span class="line">    --client-key=/etc/kubernetes/pki/controller-manager-key.pem \</span><br><span class="line">    --embed-certs=<span class="literal">true</span> \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用某个环境当做默认环境</span></span><br><span class="line">$ kubectl config use-context system:kube-controller-manager@kubernetes \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim scheduler-csr.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system:kube-scheduler&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;algo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;L&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DG&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;O&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system:kube-scheduler&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;OU&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes-manual&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scheduler</span></span><br><span class="line">$ cfssl gencert \</span><br><span class="line">    -ca=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">    -ca-key=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">    -config=ca-config.json \</span><br><span class="line">    -profile=kubernetes \</span><br><span class="line">    scheduler-csr.json | cfssljson -bare /etc/kubernetes/pki/scheduler</span><br><span class="line"></span><br><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">    --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">    --embed-certs=<span class="literal">true</span> \</span><br><span class="line">    --server=https://188.188.3.110:8443 \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config set-credentials system:kube-scheduler \</span><br><span class="line">    --client-certificate=/etc/kubernetes/pki/scheduler.pem \</span><br><span class="line">    --client-key=/etc/kubernetes/pki/scheduler-key.pem \</span><br><span class="line">    --embed-certs=<span class="literal">true</span> \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config set-context system:kube-scheduler@kubernetes \</span><br><span class="line">    --cluster=kubernetes \</span><br><span class="line">    --user=system:kube-scheduler \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config use-context system:kube-scheduler@kubernetes \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">$ vim admin-csr.json</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;CN&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;algo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rsa&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2048</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;C&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;ST&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;L&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DG&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;O&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system:masters&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;OU&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Kubernetes-manual&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># admin</span></span><br><span class="line">$ cfssl gencert \</span><br><span class="line">    -ca=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">    -ca-key=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">    -config=ca-config.json \</span><br><span class="line">    -profile=kubernetes \</span><br><span class="line">    admin-csr.json | cfssljson -bare /etc/kubernetes/pki/admin</span><br><span class="line"></span><br><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">    --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">    --embed-certs=<span class="literal">true</span> \</span><br><span class="line">    --server=https://188.188.3.110:8443 \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/admin.kubeconfig</span><br><span class="line">   </span><br><span class="line">$ kubectl config set-credentials kubernetes-admin \</span><br><span class="line">    --client-certificate=/etc/kubernetes/pki/admin.pem \</span><br><span class="line">    --client-key=/etc/kubernetes/pki/admin-key.pem \</span><br><span class="line">    --embed-certs=<span class="literal">true</span> \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/admin.kubeconfig</span><br><span class="line">   </span><br><span class="line">$ kubectl config set-context kubernetes-admin@kubernetes \</span><br><span class="line">    --cluster=kubernetes \</span><br><span class="line">    --user=kubernetes-admin \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/admin.kubeconfig</span><br><span class="line">   </span><br><span class="line">$ kubectl config use-context kubernetes-admin@kubernetes \</span><br><span class="line">    --kubeconfig=/etc/kubernetes/admin.kubeconfig</span><br></pre></td></tr></table></figure><p><strong>创建 Secret，并将所有证书发至其他节点</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl genrsa -out /etc/kubernetes/pki/sa.key 2048</span><br><span class="line">$ openssl rsa -<span class="keyword">in</span> /etc/kubernetes/pki/sa.key -pubout -out /etc/kubernetes/pki/sa.pub</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> k8s-master02 k8s-master03; <span class="keyword">do</span> </span><br><span class="line"><span class="keyword">for</span> FILE <span class="keyword">in</span> $(<span class="built_in">ls</span> /etc/kubernetes/pki | grep -v etcd); <span class="keyword">do</span> </span><br><span class="line">scp /etc/kubernetes/pki/<span class="variable">$&#123;FILE&#125;</span> <span class="variable">$NODE</span>:/etc/kubernetes/pki/<span class="variable">$&#123;FILE&#125;</span>;</span><br><span class="line"><span class="keyword">done</span>; </span><br><span class="line"><span class="keyword">for</span> FILE <span class="keyword">in</span> admin.kubeconfig controller-manager.kubeconfig scheduler.kubeconfig; <span class="keyword">do</span> </span><br><span class="line">scp /etc/kubernetes/<span class="variable">$&#123;FILE&#125;</span> <span class="variable">$NODE</span>:/etc/kubernetes/<span class="variable">$&#123;FILE&#125;</span>;</span><br><span class="line"><span class="keyword">done</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> /etc/kubernetes/pki/ |<span class="built_in">wc</span> -l</span><br><span class="line">23</span><br></pre></td></tr></table></figure><h3 id="高可用安装"><a href="#高可用安装" class="headerlink" title="高可用安装"></a>高可用安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅master安装</span></span><br><span class="line">$ yum install keepalived haproxy -y</span><br></pre></td></tr></table></figure><ul><li>HAProxy</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/haproxy/haproxy.cfg</span><br><span class="line">global</span><br><span class="line">  maxconn  2000</span><br><span class="line">  ulimit-n  16384</span><br><span class="line">  <span class="built_in">log</span>  127.0.0.1 local0 err</span><br><span class="line">  stats <span class="built_in">timeout</span> 30s</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  mode  http</span><br><span class="line">  option  httplog</span><br><span class="line">  <span class="built_in">timeout</span> connect 5000</span><br><span class="line">  <span class="built_in">timeout</span> client  50000</span><br><span class="line">  <span class="built_in">timeout</span> server  50000</span><br><span class="line">  <span class="built_in">timeout</span> http-request 15s</span><br><span class="line">  <span class="built_in">timeout</span> http-keep-alive 15s</span><br><span class="line"></span><br><span class="line">frontend k8s-master</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:8443</span><br><span class="line">  <span class="built_in">bind</span> 127.0.0.1:8443</span><br><span class="line">  mode tcp</span><br><span class="line">  option tcplog</span><br><span class="line">  tcp-request inspect-delay 5s</span><br><span class="line">  default_backend k8s-master</span><br><span class="line"></span><br><span class="line">backend k8s-master</span><br><span class="line">  mode tcp</span><br><span class="line">  option tcplog</span><br><span class="line">  option tcp-check</span><br><span class="line">  balance roundrobin</span><br><span class="line">  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100</span><br><span class="line">  server k8s-master01    188.188.3.111:6443  check</span><br><span class="line">  server k8s-master02    188.188.3.112:6443  check</span><br><span class="line">  server k8s-master03    188.188.3.113:6443  check</span><br></pre></td></tr></table></figure><ul><li>KeepAlived</li></ul><p>Master 节点修改 <code>vim /etc/keepalived/keepalived.conf</code></p><p><strong>Master 01</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span></span><br><span class="line">    interval 5 </span><br><span class="line">    weight -5</span><br><span class="line">    fall 2</span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens192</span><br><span class="line">    mcast_src_ip 188.188.3.111</span><br><span class="line">    virtual_router_id 13</span><br><span class="line">    priority 101</span><br><span class="line">    nopreempt</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.3.110</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">      chk_apiserver </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p><strong>Master 02</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span></span><br><span class="line">    interval 5 </span><br><span class="line">    weight -5</span><br><span class="line">    fall 2</span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens192</span><br><span class="line">    mcast_src_ip 188.188.3.112</span><br><span class="line">    virtual_router_id 13</span><br><span class="line">    priority 100</span><br><span class="line">    nopreempt</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.3.110</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">      chk_apiserver </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p><strong>Master 03</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span></span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    fall 2  </span><br><span class="line">    rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens192</span><br><span class="line">    mcast_src_ip 188.188.3.113</span><br><span class="line">    virtual_router_id 13</span><br><span class="line">    priority 99</span><br><span class="line">    nopreempt</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.3.110</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">      chk_apiserver </span><br><span class="line">&#125; &#125;</span><br></pre></td></tr></table></figure><p><strong>设置断线自动切换脚本</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/keepalived/check_apiserver.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">err=0</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 3)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    check_code=$(pgrep haproxy)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$check_code</span> == <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        err=$(<span class="built_in">expr</span> <span class="variable">$err</span> + 1)</span><br><span class="line">        <span class="built_in">sleep</span> 1</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        err=0</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$err</span> != <span class="string">&quot;0&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;systemctl stop keepalived&quot;</span></span><br><span class="line">    /usr/bin/systemctl stop keepalived</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x /etc/keepalived/check_apiserver.sh</span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now haproxy keepalived</span><br><span class="line">$ systemctl status haproxy keepalived</span><br></pre></td></tr></table></figure><h3 id="服务配置"><a href="#服务配置" class="headerlink" title="服务配置"></a>服务配置</h3><ul><li>ETCD Master 节点修改 <code>vim /etc/etcd/etcd.config.yml</code></li></ul><p><strong>Master 01</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;k8s-master01&#x27;</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">wal-dir:</span> <span class="string">/var/lib/etcd/wal</span></span><br><span class="line"><span class="attr">snapshot-count:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">heartbeat-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">election-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">quota-backend-bytes:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">listen-peer-urls:</span> <span class="string">&#x27;https://188.188.3.111:2380&#x27;</span></span><br><span class="line"><span class="attr">listen-client-urls:</span> <span class="string">&#x27;https://188.188.3.111:2379,http://127.0.0.1:2379&#x27;</span></span><br><span class="line"><span class="attr">max-snapshots:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">max-wals:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">cors:</span></span><br><span class="line"><span class="attr">initial-advertise-peer-urls:</span> <span class="string">&#x27;https://188.188.3.111:2380&#x27;</span></span><br><span class="line"><span class="attr">advertise-client-urls:</span> <span class="string">&#x27;https://188.188.3.111:2379&#x27;</span></span><br><span class="line"><span class="attr">discovery:</span></span><br><span class="line"><span class="attr">discovery-fallback:</span> <span class="string">&#x27;proxy&#x27;</span></span><br><span class="line"><span class="attr">discovery-proxy:</span></span><br><span class="line"><span class="attr">discovery-srv:</span></span><br><span class="line"><span class="attr">initial-cluster:</span> <span class="string">&#x27;k8s-master01=https://188.188.3.111:2380,k8s-master02=https://188.188.3.112:2380,k8s-master03=https://188.188.3.113:2380&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-token:</span> <span class="string">&#x27;etcd-k8s-cluster&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-state:</span> <span class="string">&#x27;new&#x27;</span></span><br><span class="line"><span class="attr">strict-reconfig-check:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">enable-v2:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enable-pprof:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">proxy:</span> <span class="string">&#x27;off&#x27;</span></span><br><span class="line"><span class="attr">proxy-failure-wait:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-refresh-interval:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">proxy-dial-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">proxy-write-timeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-read-timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">client-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">peer-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">peer-client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">log-package-levels:</span></span><br><span class="line"><span class="attr">log-outputs:</span> [<span class="string">default</span>]</span><br><span class="line"><span class="attr">force-new-cluster:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>Master 02</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;k8s-master02&#x27;</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">wal-dir:</span> <span class="string">/var/lib/etcd/wal</span></span><br><span class="line"><span class="attr">snapshot-count:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">heartbeat-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">election-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">quota-backend-bytes:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">listen-peer-urls:</span> <span class="string">&#x27;https://188.188.3.112:2380&#x27;</span></span><br><span class="line"><span class="attr">listen-client-urls:</span> <span class="string">&#x27;https://188.188.3.112:2379,http://127.0.0.1:2379&#x27;</span></span><br><span class="line"><span class="attr">max-snapshots:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">max-wals:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">cors:</span></span><br><span class="line"><span class="attr">initial-advertise-peer-urls:</span> <span class="string">&#x27;https://188.188.3.112:2380&#x27;</span></span><br><span class="line"><span class="attr">advertise-client-urls:</span> <span class="string">&#x27;https://188.188.3.112:2379&#x27;</span></span><br><span class="line"><span class="attr">discovery:</span></span><br><span class="line"><span class="attr">discovery-fallback:</span> <span class="string">&#x27;proxy&#x27;</span></span><br><span class="line"><span class="attr">discovery-proxy:</span></span><br><span class="line"><span class="attr">discovery-srv:</span></span><br><span class="line"><span class="attr">initial-cluster:</span> <span class="string">&#x27;k8s-master01=https://188.188.3.111:2380,k8s-master02=https://188.188.3.112:2380,k8s-master03=https://188.188.3.113:2380&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-token:</span> <span class="string">&#x27;etcd-k8s-cluster&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-state:</span> <span class="string">&#x27;new&#x27;</span></span><br><span class="line"><span class="attr">strict-reconfig-check:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">enable-v2:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enable-pprof:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">proxy:</span> <span class="string">&#x27;off&#x27;</span></span><br><span class="line"><span class="attr">proxy-failure-wait:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-refresh-interval:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">proxy-dial-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">proxy-write-timeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-read-timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">client-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">peer-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">peer-client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">log-package-levels:</span></span><br><span class="line"><span class="attr">log-outputs:</span> [<span class="string">default</span>]</span><br><span class="line"><span class="attr">force-new-cluster:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>Master 03</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;k8s-master03&#x27;</span></span><br><span class="line"><span class="attr">data-dir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">wal-dir:</span> <span class="string">/var/lib/etcd/wal</span></span><br><span class="line"><span class="attr">snapshot-count:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">heartbeat-interval:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">election-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">quota-backend-bytes:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">listen-peer-urls:</span> <span class="string">&#x27;https://188.188.3.113:2380&#x27;</span></span><br><span class="line"><span class="attr">listen-client-urls:</span> <span class="string">&#x27;https://188.188.3.113:2379,http://127.0.0.1:2379&#x27;</span></span><br><span class="line"><span class="attr">max-snapshots:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">max-wals:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">cors:</span></span><br><span class="line"><span class="attr">initial-advertise-peer-urls:</span> <span class="string">&#x27;https://188.188.3.113:2380&#x27;</span></span><br><span class="line"><span class="attr">advertise-client-urls:</span> <span class="string">&#x27;https://188.188.3.113:2379&#x27;</span></span><br><span class="line"><span class="attr">discovery:</span></span><br><span class="line"><span class="attr">discovery-fallback:</span> <span class="string">&#x27;proxy&#x27;</span></span><br><span class="line"><span class="attr">discovery-proxy:</span></span><br><span class="line"><span class="attr">discovery-srv:</span></span><br><span class="line"><span class="attr">initial-cluster:</span> <span class="string">&#x27;k8s-master01=https://188.188.3.111:2380,k8s-master02=https://188.188.3.112:2380,k8s-master03=https://188.188.3.113:2380&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-token:</span> <span class="string">&#x27;etcd-k8s-cluster&#x27;</span></span><br><span class="line"><span class="attr">initial-cluster-state:</span> <span class="string">&#x27;new&#x27;</span></span><br><span class="line"><span class="attr">strict-reconfig-check:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">enable-v2:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">enable-pprof:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">proxy:</span> <span class="string">&#x27;off&#x27;</span></span><br><span class="line"><span class="attr">proxy-failure-wait:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-refresh-interval:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">proxy-dial-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">proxy-write-timeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">proxy-read-timeout:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">client-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">peer-transport-security:</span></span><br><span class="line">  <span class="attr">cert-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd.pem&#x27;</span></span><br><span class="line">  <span class="attr">key-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-key.pem&#x27;</span></span><br><span class="line">  <span class="attr">peer-client-cert-auth:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trusted-ca-file:</span> <span class="string">&#x27;/etc/kubernetes/pki/etcd/etcd-ca.pem&#x27;</span></span><br><span class="line">  <span class="attr">auto-tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">log-package-levels:</span></span><br><span class="line"><span class="attr">log-outputs:</span> [<span class="string">default</span>]</span><br><span class="line"><span class="attr">force-new-cluster:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>配置开机自动服务</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/etcd.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Etcd Service</span><br><span class="line">Documentation=https://coreos.com/etcd/docs/latest/</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">ExecStart=/usr/local/bin/etcd --config-file=/etc/etcd/etcd.config.yml</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10</span><br><span class="line">LimitNOFILE=65536</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">Alias=etcd3.service</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mkdir</span> /etc/kubernetes/pki/etcd</span><br><span class="line">$ <span class="built_in">ln</span> -s /etc/etcd/ssl/* /etc/kubernetes/pki/etcd/</span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now etcd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认ETCD状态</span></span><br><span class="line">$ <span class="built_in">export</span> ETCDCTL_API=3</span><br><span class="line">$ etcdctl --endpoints=<span class="string">&quot;188.188.3.113:2379,188.188.3.112:2379,188.188.3.111:2379&quot;</span> \</span><br><span class="line">   --cacert=/etc/kubernetes/pki/etcd/etcd-ca.pem \</span><br><span class="line">   --cert=/etc/kubernetes/pki/etcd/etcd.pem \</span><br><span class="line">   --key=/etc/kubernetes/pki/etcd/etcd-key.pem \</span><br><span class="line">   endpoint status --write-out=table</span><br></pre></td></tr></table></figure><ul><li>Apiserver</li></ul><p><strong>创建 kube-apiserver 服务</strong>，Master 节点创建 <code>vim /usr/lib/systemd/system/kube-apiserver.service </code></p><p><strong>Master 01</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-apiserver \</span><br><span class="line">      --v=2  \</span><br><span class="line">      --logtostderr=<span class="literal">true</span>  \</span><br><span class="line">      --allow-privileged=<span class="literal">true</span>  \</span><br><span class="line">      --bind-address=0.0.0.0  \</span><br><span class="line">      --secure-port=6443  \</span><br><span class="line">      --insecure-port=0  \</span><br><span class="line">      --advertise-address=188.188.3.111 \</span><br><span class="line">      --service-cluster-ip-range=110.96.0.0/12  \</span><br><span class="line">      --service-node-port-range=30000-32767  \</span><br><span class="line">      --etcd-servers=https://188.188.3.111:2379,https://188.188.3.112:2379,https://188.188.3.113:2379 \</span><br><span class="line">      --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem  \</span><br><span class="line">      --etcd-certfile=/etc/etcd/ssl/etcd.pem  \</span><br><span class="line">      --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem  \</span><br><span class="line">      --client-ca-file=/etc/kubernetes/pki/ca.pem  \</span><br><span class="line">      --tls-cert-file=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --service-account-key-file=/etc/kubernetes/pki/sa.pub  \</span><br><span class="line">      --service-account-signing-key-file=/etc/kubernetes/pki/sa.key  \</span><br><span class="line">      --service-account-issuer=https://kubernetes.default.svc.cluster.local \</span><br><span class="line">      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname  \</span><br><span class="line">      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota  \</span><br><span class="line">      --authorization-mode=Node,RBAC  \</span><br><span class="line">      --enable-bootstrap-token-auth=<span class="literal">true</span>  \</span><br><span class="line">      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem  \</span><br><span class="line">      --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem  \</span><br><span class="line">      --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem  \</span><br><span class="line">      --requestheader-allowed-names=aggregator  \</span><br><span class="line">      --requestheader-group-headers=X-Remote-Group  \</span><br><span class="line">      --requestheader-extra-headers-prefix=X-Remote-Extra-  \</span><br><span class="line">      --requestheader-username-headers=X-Remote-User</span><br><span class="line">      <span class="comment"># --token-auth-file=/etc/kubernetes/token.csv</span></span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10s</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><strong>Master 02</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-apiserver \</span><br><span class="line">      --v=2  \</span><br><span class="line">      --logtostderr=<span class="literal">true</span>  \</span><br><span class="line">      --allow-privileged=<span class="literal">true</span>  \</span><br><span class="line">      --bind-address=0.0.0.0  \</span><br><span class="line">      --secure-port=6443  \</span><br><span class="line">      --insecure-port=0  \</span><br><span class="line">      --advertise-address=188.188.3.112 \</span><br><span class="line">      --service-cluster-ip-range=110.96.0.0/12  \</span><br><span class="line">      --service-node-port-range=30000-32767  \</span><br><span class="line">      --etcd-servers=https://188.188.3.111:2379,https://188.188.3.112:2379,https://188.188.3.113:2379 \</span><br><span class="line">      --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem  \</span><br><span class="line">      --etcd-certfile=/etc/etcd/ssl/etcd.pem  \</span><br><span class="line">      --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem  \</span><br><span class="line">      --client-ca-file=/etc/kubernetes/pki/ca.pem  \</span><br><span class="line">      --tls-cert-file=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --service-account-key-file=/etc/kubernetes/pki/sa.pub  \</span><br><span class="line">      --service-account-signing-key-file=/etc/kubernetes/pki/sa.key  \</span><br><span class="line">      --service-account-issuer=https://kubernetes.default.svc.cluster.local \</span><br><span class="line">      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname  \</span><br><span class="line">      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota  \</span><br><span class="line">      --authorization-mode=Node,RBAC  \</span><br><span class="line">      --enable-bootstrap-token-auth=<span class="literal">true</span>  \</span><br><span class="line">      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem  \</span><br><span class="line">      --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem  \</span><br><span class="line">      --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem  \</span><br><span class="line">      --requestheader-allowed-names=aggregator  \</span><br><span class="line">      --requestheader-group-headers=X-Remote-Group  \</span><br><span class="line">      --requestheader-extra-headers-prefix=X-Remote-Extra-  \</span><br><span class="line">      --requestheader-username-headers=X-Remote-User</span><br><span class="line">      <span class="comment"># --token-auth-file=/etc/kubernetes/token.csv</span></span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10s</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p><strong>Master 03</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes API Server</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-apiserver \</span><br><span class="line">      --v=2  \</span><br><span class="line">      --logtostderr=<span class="literal">true</span>  \</span><br><span class="line">      --allow-privileged=<span class="literal">true</span>  \</span><br><span class="line">      --bind-address=0.0.0.0  \</span><br><span class="line">      --secure-port=6443  \</span><br><span class="line">      --insecure-port=0  \</span><br><span class="line">      --advertise-address=188.188.3.113 \</span><br><span class="line">      --service-cluster-ip-range=110.96.0.0/12  \</span><br><span class="line">      --service-node-port-range=30000-32767  \</span><br><span class="line">      --etcd-servers=https://188.188.3.111:2379,https://188.188.3.112:2379,https://188.188.3.113:2379 \</span><br><span class="line">      --etcd-cafile=/etc/etcd/ssl/etcd-ca.pem  \</span><br><span class="line">      --etcd-certfile=/etc/etcd/ssl/etcd.pem  \</span><br><span class="line">      --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem  \</span><br><span class="line">      --client-ca-file=/etc/kubernetes/pki/ca.pem  \</span><br><span class="line">      --tls-cert-file=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --tls-private-key-file=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --kubelet-client-certificate=/etc/kubernetes/pki/apiserver.pem  \</span><br><span class="line">      --kubelet-client-key=/etc/kubernetes/pki/apiserver-key.pem  \</span><br><span class="line">      --service-account-key-file=/etc/kubernetes/pki/sa.pub  \</span><br><span class="line">      --service-account-signing-key-file=/etc/kubernetes/pki/sa.key  \</span><br><span class="line">      --service-account-issuer=https://kubernetes.default.svc.cluster.local \</span><br><span class="line">      --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname  \</span><br><span class="line">      --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,ResourceQuota  \</span><br><span class="line">      --authorization-mode=Node,RBAC  \</span><br><span class="line">      --enable-bootstrap-token-auth=<span class="literal">true</span>  \</span><br><span class="line">      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem  \</span><br><span class="line">      --proxy-client-cert-file=/etc/kubernetes/pki/front-proxy-client.pem  \</span><br><span class="line">      --proxy-client-key-file=/etc/kubernetes/pki/front-proxy-client-key.pem  \</span><br><span class="line">      --requestheader-allowed-names=aggregator  \</span><br><span class="line">      --requestheader-group-headers=X-Remote-Group  \</span><br><span class="line">      --requestheader-extra-headers-prefix=X-Remote-Extra-  \</span><br><span class="line">      --requestheader-username-headers=X-Remote-User</span><br><span class="line">      <span class="comment"># --token-auth-file=/etc/kubernetes/token.csv</span></span><br><span class="line"></span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=10s</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now kube-apiserver</span><br><span class="line">$ systemctl status kube-apiserver</span><br></pre></td></tr></table></figure><ul><li>ControllerManager</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master</span></span><br><span class="line">$ vim /usr/lib/systemd/system/kube-controller-manager.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Controller Manager</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-controller-manager \</span><br><span class="line">      --v=2 \</span><br><span class="line">      --logtostderr=<span class="literal">true</span> \</span><br><span class="line">      --address=127.0.0.1 \</span><br><span class="line">      --root-ca-file=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">      --cluster-signing-cert-file=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">      --cluster-signing-key-file=/etc/kubernetes/pki/ca-key.pem \</span><br><span class="line">      --service-account-private-key-file=/etc/kubernetes/pki/sa.key \</span><br><span class="line">      --kubeconfig=/etc/kubernetes/controller-manager.kubeconfig \</span><br><span class="line">      --leader-elect=<span class="literal">true</span> \</span><br><span class="line">      --use-service-account-credentials=<span class="literal">true</span> \</span><br><span class="line">      --node-monitor-grace-period=40s \</span><br><span class="line">      --node-monitor-period=5s \</span><br><span class="line">      --pod-eviction-timeout=2m0s \</span><br><span class="line">      --controllers=*,bootstrapsigner,tokencleaner \</span><br><span class="line">      --allocate-node-cidrs=<span class="literal">true</span> \</span><br><span class="line">      --cluster-cidr=172.16.0.0/12 \</span><br><span class="line">      --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem \</span><br><span class="line">      --node-cidr-mask-size=24</span><br><span class="line">      </span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now kube-controller-manager</span><br><span class="line">$ systemctl status kube-controller-manager</span><br></pre></td></tr></table></figure><ul><li>Scheduler</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master</span></span><br><span class="line">$ vim /usr/lib/systemd/system/kube-scheduler.service </span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Scheduler</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-scheduler \</span><br><span class="line">      --v=2 \</span><br><span class="line">      --logtostderr=<span class="literal">true</span> \</span><br><span class="line">      --address=127.0.0.1 \</span><br><span class="line">      --leader-elect=<span class="literal">true</span> \</span><br><span class="line">      --kubeconfig=/etc/kubernetes/scheduler.kubeconfig</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now kube-scheduler</span><br><span class="line">$ systemctl status kube-scheduler.service</span><br></pre></td></tr></table></figure><h3 id="TLS-Bootstrapping"><a href="#TLS-Bootstrapping" class="headerlink" title="TLS Bootstrapping"></a>TLS Bootstrapping</h3><blockquote><p>在 Master01 创建 bootstrap<br>注意：如果要修改 bootstrap.secret.yaml 的 token-id 和 token-secret ，需要保证字符串一致的，并且位数是一样的。还要保证 c8ad9c.2e4d610cf3e7426e 与你修改的字符串要一致</p></blockquote><p>在配置文件中的 token 定义中，需要注意：</p><ul><li>token 的 name 必须是 <code>bootstrap-token-&lt;token-id&gt;</code> 的格式</li><li>token 的 type 必须是 <code>bootstrap.kubernetes.io/token</code></li><li>token 的 token-id 和 token-secret 分别是6位和16位数字和字母的组合</li><li><code>auth-extra-groups</code> 定义了 token 代表的用户所属的额外的 group，而默认 group 名为 <code>system:bootstrappers</code></li><li>这种类型 token 代表的用户名为 <code>system:bootstrap:&lt;token-id&gt;</code>，在本文中就是 <code>system:bootstrap:abcdef</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成随机字符串</span></span><br><span class="line">$ <span class="built_in">cat</span> /dev/urandom | <span class="built_in">head</span> -n 22 | <span class="built_in">md5sum</span> | <span class="built_in">head</span> -c 22</span><br><span class="line">dd4414.74c103b52e297e6c</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">bootstrap.secret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">bootstrap-token-dd4414</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">bootstrap.kubernetes.io/token</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;The default bootstrap token generated by &#x27;kubelet &#x27;.&quot;</span></span><br><span class="line">  <span class="attr">token-id:</span> <span class="string">dd4414</span></span><br><span class="line">  <span class="attr">token-secret:</span> <span class="string">74c103b52e297e6c</span></span><br><span class="line">  <span class="attr">usage-bootstrap-authentication:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">usage-bootstrap-signing:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">auth-extra-groups:</span>  <span class="string">system:bootstrappers:default-node-token,system:bootstrappers:worker,system:bootstrappers:ingress</span> </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubelet-bootstrap</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:node-bootstrapper</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Group</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:bootstrappers:default-node-token</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-autoapprove-bootstrap</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:certificates.k8s.io:certificatesigningrequests:nodeclient</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Group</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:bootstrappers:default-node-token</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node-autoapprove-certificate-rotation</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:certificates.k8s.io:certificatesigningrequests:selfnodeclient</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Group</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:nodes</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">kubernetes.io/bootstrapping:</span> <span class="string">rbac-defaults</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:kube-apiserver-to-kubelet</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes/proxy</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes/stats</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes/log</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes/spec</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes/metrics</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:kube-apiserver</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">system:kube-apiserver-to-kubelet</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">User</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kube-apiserver</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">   --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">   --embed-certs=<span class="literal">true</span> \</span><br><span class="line">   --server=https://188.188.3.110:8443 \</span><br><span class="line">   --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config set-credentials tls-bootstrap-token-user \</span><br><span class="line">   --token=dd4414.74c103b52e297e6c \</span><br><span class="line">   --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config set-context tls-bootstrap-token-user@kubernetes \</span><br><span class="line">   --cluster=kubernetes \</span><br><span class="line">   --user=tls-bootstrap-token-user \</span><br><span class="line">   --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line">$ kubectl config use-context tls-bootstrap-token-user@kubernetes \</span><br><span class="line">   --kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /root/.kube ; <span class="built_in">cp</span> /etc/kubernetes/admin.kubeconfig /root/.kube/config</span><br><span class="line">$ kubectl create -f bootstrap.secret.yaml</span><br></pre></td></tr></table></figure><h3 id="Node-配置"><a href="#Node-配置" class="headerlink" title="Node 配置"></a>Node 配置</h3><p>将证书复制到其他节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/kubernetes/</span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> k8s-master02 k8s-master03 k8s-node01 k8s-node02; <span class="keyword">do</span></span><br><span class="line">     ssh <span class="variable">$NODE</span> <span class="built_in">mkdir</span> -p /etc/kubernetes/pki /etc/etcd/ssl /etc/etcd/ssl</span><br><span class="line">     <span class="keyword">for</span> FILE <span class="keyword">in</span> etcd-ca.pem etcd.pem etcd-key.pem; <span class="keyword">do</span></span><br><span class="line">       scp /etc/etcd/ssl/<span class="variable">$FILE</span> <span class="variable">$NODE</span>:/etc/etcd/ssl/</span><br><span class="line">     <span class="keyword">done</span></span><br><span class="line">     <span class="keyword">for</span> FILE <span class="keyword">in</span> pki/ca.pem pki/ca-key.pem pki/front-proxy-ca.pem bootstrap-kubelet.kubeconfig; <span class="keyword">do</span></span><br><span class="line">       scp /etc/kubernetes/<span class="variable">$FILE</span> <span class="variable">$NODE</span>:/etc/kubernetes/<span class="variable">$&#123;FILE&#125;</span></span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"> <span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>Kubelet 配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有节点配置 kubelet</span></span><br><span class="line">$ vim /usr/lib/systemd/system/kubelet.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kubelet</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=docker.service</span><br><span class="line">Requires=docker.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kubelet</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">StartLimitInterval=0</span><br><span class="line">RestartSec=10</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"><span class="comment"># kubelet service 配置文件</span></span><br><span class="line">$ vim /etc/systemd/system/kubelet.service.d/10-kubelet.conf</span><br><span class="line">[Service]</span><br><span class="line">Environment=<span class="string">&quot;KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig --kubeconfig=/etc/kubernetes/kubelet.kubeconfig&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_SYSTEM_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_CONFIG_ARGS=--config=/etc/kubernetes/kubelet-conf.yml --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.2&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;KUBELET_EXTRA_ARGS=--node-labels=node.kubernetes.io/node=&#x27;&#x27; &quot;</span></span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=/usr/local/bin/kubelet <span class="variable">$KUBELET_KUBECONFIG_ARGS</span> <span class="variable">$KUBELET_CONFIG_ARGS</span> <span class="variable">$KUBELET_SYSTEM_ARGS</span> <span class="variable">$KUBELET_EXTRA_ARGS</span></span><br><span class="line"></span><br><span class="line">$ vim /etc/kubernetes/kubelet-conf.yml</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">address: 0.0.0.0</span><br><span class="line">port: 10250</span><br><span class="line">readOnlyPort: 10255</span><br><span class="line">authentication:</span><br><span class="line">  anonymous:</span><br><span class="line">    enabled: <span class="literal">false</span></span><br><span class="line">  webhook:</span><br><span class="line">    cacheTTL: 2m0s</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  x509:</span><br><span class="line">    clientCAFile: /etc/kubernetes/pki/ca.pem</span><br><span class="line">authorization:</span><br><span class="line">  mode: Webhook</span><br><span class="line">  webhook:</span><br><span class="line">    cacheAuthorizedTTL: 5m0s</span><br><span class="line">    cacheUnauthorizedTTL: 30s</span><br><span class="line">cgroupDriver: systemd</span><br><span class="line">cgroupsPerQOS: <span class="literal">true</span></span><br><span class="line">clusterDNS:</span><br><span class="line">- 110.96.0.10</span><br><span class="line">clusterDomain: cluster.local</span><br><span class="line">containerLogMaxFiles: 5</span><br><span class="line">containerLogMaxSize: 10Mi</span><br><span class="line">contentType: application/vnd.kubernetes.protobuf</span><br><span class="line">cpuCFSQuota: <span class="literal">true</span></span><br><span class="line">cpuManagerPolicy: none</span><br><span class="line">cpuManagerReconcilePeriod: 10s</span><br><span class="line">enableControllerAttachDetach: <span class="literal">true</span></span><br><span class="line">enableDebuggingHandlers: <span class="literal">true</span></span><br><span class="line">enforceNodeAllocatable:</span><br><span class="line">- pods</span><br><span class="line">eventBurst: 10</span><br><span class="line">eventRecordQPS: 5</span><br><span class="line">evictionHard:</span><br><span class="line">  imagefs.available: 15%</span><br><span class="line">  memory.available: 100Mi</span><br><span class="line">  nodefs.available: 10%</span><br><span class="line">  nodefs.inodesFree: 5%</span><br><span class="line">evictionPressureTransitionPeriod: 5m0s</span><br><span class="line">failSwapOn: <span class="literal">true</span></span><br><span class="line">fileCheckFrequency: 20s</span><br><span class="line">hairpinMode: promiscuous-bridge</span><br><span class="line">healthzBindAddress: 127.0.0.1</span><br><span class="line">healthzPort: 10248</span><br><span class="line">httpCheckFrequency: 20s</span><br><span class="line">imageGCHighThresholdPercent: 85</span><br><span class="line">imageGCLowThresholdPercent: 80</span><br><span class="line">imageMinimumGCAge: 2m0s</span><br><span class="line">iptablesDropBit: 15</span><br><span class="line">iptablesMasqueradeBit: 14</span><br><span class="line">kubeAPIBurst: 10</span><br><span class="line">kubeAPIQPS: 5</span><br><span class="line">makeIPTablesUtilChains: <span class="literal">true</span></span><br><span class="line">maxOpenFiles: 1000000</span><br><span class="line">maxPods: 110</span><br><span class="line">nodeStatusUpdateFrequency: 10s</span><br><span class="line">oomScoreAdj: -999</span><br><span class="line">podPidsLimit: -1</span><br><span class="line">registryBurst: 10</span><br><span class="line">registryPullQPS: 5</span><br><span class="line">resolvConf: /etc/resolv.conf</span><br><span class="line">rotateCertificates: <span class="literal">true</span></span><br><span class="line">runtimeRequestTimeout: 2m0s</span><br><span class="line">serializeImagePulls: <span class="literal">true</span></span><br><span class="line">staticPodPath: /etc/kubernetes/manifests</span><br><span class="line">streamingConnectionIdleTimeout: 4h0m0s</span><br><span class="line">syncFrequency: 1m0s</span><br><span class="line">volumeStatsAggPeriod: 1m0s</span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now kubelet &amp;&amp; systemctl status kubelet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志并确认节点连接情况</span></span><br><span class="line">$ <span class="built_in">tail</span> -f /var/log/messages</span><br><span class="line">$ kubectl get node</span><br><span class="line">NAME        STATUS     ROLES    AGE   VERSION</span><br><span class="line">k8s-master01   NotReady   &lt;none&gt;   14s   v1.20.13</span><br><span class="line">k8s-master02   NotReady   &lt;none&gt;   13s   v1.20.13</span><br><span class="line">k8s-master03   NotReady   &lt;none&gt;   13s   v1.20.13</span><br><span class="line">k8s-node01   NotReady   &lt;none&gt;   14s   v1.20.13</span><br><span class="line">k8s-node02   NotReady   &lt;none&gt;   13s   v1.20.13</span><br></pre></td></tr></table></figure><ul><li>kube-proxy 配置</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master01节点操作</span></span><br><span class="line">$ kubectl -n kube-system create serviceaccount kube-proxy</span><br><span class="line">$ kubectl create clusterrolebinding system:kube-proxy \</span><br><span class="line">   --clusterrole system:node-proxier \</span><br><span class="line">   --serviceaccount kube-system:kube-proxy</span><br><span class="line">   </span><br><span class="line">$ SECRET=$(kubectl -n kube-system get sa/kube-proxy \</span><br><span class="line">   --output=jsonpath=<span class="string">&#x27;&#123;.secrets[0].name&#125;&#x27;</span>)</span><br><span class="line">   </span><br><span class="line">$ JWT_TOKEN=$(kubectl -n kube-system get secret/<span class="variable">$SECRET</span> \</span><br><span class="line">   --output=jsonpath=<span class="string">&#x27;&#123;.data.token&#125;&#x27;</span> | <span class="built_in">base64</span> -d)</span><br><span class="line">$ PKI_DIR=/etc/kubernetes/pki</span><br><span class="line">$ K8S_DIR=/etc/kubernetes</span><br><span class="line"></span><br><span class="line">$ kubectl config set-cluster kubernetes \</span><br><span class="line">   --certificate-authority=/etc/kubernetes/pki/ca.pem \</span><br><span class="line">   --embed-certs=<span class="literal">true</span> \</span><br><span class="line">   --server=https://188.188.3.110:8443 \</span><br><span class="line">   --kubeconfig=<span class="variable">$&#123;K8S_DIR&#125;</span>/kube-proxy.kubeconfig</span><br><span class="line">   </span><br><span class="line">$ kubectl config set-credentials kubernetes \</span><br><span class="line">   --token=<span class="variable">$&#123;JWT_TOKEN&#125;</span> \</span><br><span class="line">   --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig</span><br><span class="line">   </span><br><span class="line">$ kubectl config set-context kubernetes \</span><br><span class="line">   --cluster=kubernetes \</span><br><span class="line">   --user=kubernetes \</span><br><span class="line">   --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig</span><br><span class="line">   </span><br><span class="line">$ kubectl config use-context kubernetes \</span><br><span class="line">   --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">kube-proxy.conf</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">bindAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">clientConnection:</span></span><br><span class="line">  <span class="attr">acceptContentTypes:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">burst:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">contentType:</span> <span class="string">application/vnd.kubernetes.protobuf</span></span><br><span class="line">  <span class="attr">kubeconfig:</span> <span class="string">/etc/kubernetes/kube-proxy.kubeconfig</span></span><br><span class="line">  <span class="attr">qps:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">clusterCIDR:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line"><span class="attr">configSyncPeriod:</span> <span class="string">15m0s</span></span><br><span class="line"><span class="attr">conntrack:</span></span><br><span class="line">  <span class="attr">max:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">maxPerCore:</span> <span class="number">32768</span></span><br><span class="line">  <span class="attr">min:</span> <span class="number">131072</span></span><br><span class="line">  <span class="attr">tcpCloseWaitTimeout:</span> <span class="string">1h0m0s</span></span><br><span class="line">  <span class="attr">tcpEstablishedTimeout:</span> <span class="string">24h0m0s</span></span><br><span class="line"><span class="attr">enableProfiling:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">healthzBindAddress:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:10256</span></span><br><span class="line"><span class="attr">hostnameOverride:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">iptables:</span></span><br><span class="line">  <span class="attr">masqueradeAll:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">masqueradeBit:</span> <span class="number">14</span></span><br><span class="line">  <span class="attr">minSyncPeriod:</span> <span class="string">0s</span></span><br><span class="line">  <span class="attr">syncPeriod:</span> <span class="string">30s</span></span><br><span class="line"><span class="attr">ipvs:</span></span><br><span class="line">  <span class="attr">masqueradeAll:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">minSyncPeriod:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">scheduler:</span> <span class="string">&quot;rr&quot;</span></span><br><span class="line">  <span class="attr">syncPeriod:</span> <span class="string">30s</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">metricsBindAddress:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:10249</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">&quot;ipvs&quot;</span></span><br><span class="line"><span class="attr">nodePortAddresses:</span> <span class="literal">null</span></span><br><span class="line"><span class="attr">oomScoreAdj:</span> <span class="number">-999</span></span><br><span class="line"><span class="attr">portRange:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">udpIdleTimeout:</span> <span class="string">250ms</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim kube-proxy.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Kubernetes Kube Proxy</span><br><span class="line">Documentation=https://github.com/kubernetes/kubernetes</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/local/bin/kube-proxy \</span><br><span class="line">  --config=/etc/kubernetes/kube-proxy.conf \</span><br><span class="line">  --v=2</span><br><span class="line"></span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果更改了集群Pod的网段，需要更改kube-proxy/kube-proxy.conf的clusterCIDR: 172.16.0.0/12参数为pod的网段</span></span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> k8s-master01 k8s-master02 k8s-master03; <span class="keyword">do</span></span><br><span class="line">     scp <span class="variable">$&#123;K8S_DIR&#125;</span>/kube-proxy.kubeconfig <span class="variable">$NODE</span>:/etc/kubernetes/kube-proxy.kubeconfig</span><br><span class="line">     scp kube-proxy/kube-proxy.conf <span class="variable">$NODE</span>:/etc/kubernetes/kube-proxy.conf</span><br><span class="line">     scp kube-proxy/kube-proxy.service <span class="variable">$NODE</span>:/usr/lib/systemd/system/kube-proxy.service</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ <span class="keyword">for</span> NODE <span class="keyword">in</span> k8s-node01 k8s-node02; <span class="keyword">do</span></span><br><span class="line">     scp /etc/kubernetes/kube-proxy.kubeconfig <span class="variable">$NODE</span>:/etc/kubernetes/kube-proxy.kubeconfig</span><br><span class="line">     scp kube-proxy/kube-proxy.conf <span class="variable">$NODE</span>:/etc/kubernetes/kube-proxy.conf</span><br><span class="line">     scp kube-proxy/kube-proxy.service <span class="variable">$NODE</span>:/usr/lib/systemd/system/kube-proxy.service</span><br><span class="line"> <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now kube-proxy </span><br><span class="line">$ systemctl status kube-proxy</span><br></pre></td></tr></table></figure><h3 id="Calico"><a href="#Calico" class="headerlink" title="Calico"></a>Calico</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408114329.png" alt="20220408114329.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/20220408114411.png" alt="20220408114411.png"></p><p>Master01 节点执行即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最新版本</span></span><br><span class="line">$ curl https://docs.projectcalico.org/manifests/calico-etcd.yaml -o calico-etcd.yaml</span><br><span class="line"><span class="comment"># 可选择性版本下载</span></span><br><span class="line">$ curl https://docs.projectcalico.org/archive/v3.20/manifests/calico-etcd.yaml -o calico-etcd.yaml</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s#etcd_endpoints: &quot;http://&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;&quot;#etcd_endpoints: &quot;https://188.188.3.111:2379,https://188.188.3.112:2379,https://188.188.3.113:2379&quot;#g&#x27;</span> calico-etcd.yaml</span><br><span class="line">$ ETCD_CA=`<span class="built_in">cat</span> /etc/kubernetes/pki/etcd/etcd-ca.pem | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">$ ETCD_CERT=`<span class="built_in">cat</span> /etc/kubernetes/pki/etcd/etcd.pem | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">$ ETCD_KEY=`<span class="built_in">cat</span> /etc/kubernetes/pki/etcd/etcd-key.pem | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">$ sed -i <span class="string">&quot;s@# etcd-key: null@etcd-key: <span class="variable">$&#123;ETCD_KEY&#125;</span>@g; s@# etcd-cert: null@etcd-cert: <span class="variable">$&#123;ETCD_CERT&#125;</span>@g; s@# etcd-ca: null@etcd-ca: <span class="variable">$&#123;ETCD_CA&#125;</span>@g&quot;</span> calico-etcd.yaml</span><br><span class="line">$ sed -i <span class="string">&#x27;s#etcd_ca: &quot;&quot;#etcd_ca: &quot;/calico-secrets/etcd-ca&quot;#g; s#etcd_cert: &quot;&quot;#etcd_cert: &quot;/calico-secrets/etcd-cert&quot;#g; s#etcd_key: &quot;&quot; #etcd_key: &quot;/calico-secrets/etcd-key&quot; #g&#x27;</span> calico-etcd.yaml</span><br><span class="line">$ POD_SUBNET=<span class="string">&quot;172.16.0.0/12&quot;</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s@# - name: CALICO_IPV4POOL_CIDR@- name: CALICO_IPV4POOL_CIDR@g; s@#   value: &quot;192.168.0.0/16&quot;@  value: &#x27;</span><span class="string">&quot;<span class="variable">$&#123;POD_SUBNET&#125;</span>&quot;</span><span class="string">&#x27;@g&#x27;</span> calico-etcd.yaml</span><br><span class="line">$ kubectl apply -f calico-etcd.yaml</span><br><span class="line">$ kubectl get node</span><br><span class="line">NAME        STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master01   Ready    &lt;none&gt;   25m   v1.20.13</span><br><span class="line">k8s-master02   Ready    &lt;none&gt;   25m   v1.20.13</span><br><span class="line">k8s-master03   Ready    &lt;none&gt;   25m   v1.20.13</span><br><span class="line">k8s-node01   Ready    &lt;none&gt;   25m   v1.20.13</span><br><span class="line">k8s-node02   Ready    &lt;none&gt;   25m   v1.20.13</span><br></pre></td></tr></table></figure><h3 id="CoreDNS"><a href="#CoreDNS" class="headerlink" title="CoreDNS"></a>CoreDNS</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/coredns/deployment.git</span><br><span class="line">$ <span class="built_in">cd</span> deployment/kubernetes</span><br><span class="line">$ ./deploy.sh -s -i 110.96.0.10 | kubectl apply -f -</span><br><span class="line">$ kubectl get po -n kube-system -l k8s-app=kube-dns</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-79685cc44f-pckqh   1/1     Running   0          33s</span><br></pre></td></tr></table></figure><h3 id="Metrics-Server"><a href="#Metrics-Server" class="headerlink" title="Metrics Server"></a>Metrics Server</h3><p>在新版的 Kubernetes 中，系统资源的采集均使用 Metrics-server，可通过 Metrics 采集节点和 Pod 的内存、磁盘、CPU 和网络的使用率。</p><p><strong>查看版本兼容是否合适</strong></p><table><thead><tr><th>Metrics Server</th><th>Metrics API group&#x2F;version</th><th>Supported Kubernetes version</th></tr></thead><tbody><tr><td>0.6.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>*1.19+</td></tr><tr><td>0.5.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>*1.8+</td></tr><tr><td>0.4.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>*1.8+</td></tr><tr><td>0.3.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>1.8-1.21</td></tr></tbody></table><p>提前下载镜像并修改镜像地址信息和添加证书认证，否则无法下载到镜像</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.5.2/components.yaml</span><br><span class="line"><span class="comment"># 添加证书验证并修改证书</span></span><br><span class="line"><span class="comment"># nu:129~137</span></span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - args:</span><br><span class="line">        - --cert-dir=/tmp</span><br><span class="line">        - --secure-port=4443</span><br><span class="line">        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span><br><span class="line">        - --kubelet-use-node-status-port</span><br><span class="line">        - --metric-resolution=15s</span><br><span class="line">        <span class="comment"># 添加证书认证内容，参考&#x27;配置聚合层&#x27;,并修改镜像地址</span></span><br><span class="line">        - --kubelet-insecure-tls</span><br><span class="line">        - --requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.pem <span class="comment"># change to front-proxy-ca.crt for kubeadm</span></span><br><span class="line">        - --requestheader-username-headers=X-Remote-User</span><br><span class="line">        - --requestheader-group-headers=X-Remote-Group</span><br><span class="line">        - --requestheader-extra-headers-prefix=X-Remote-Extra-</span><br><span class="line">        image: registry.cn-hongkong.aliyuncs.com/yk-k8s/metrics-server:v0.5.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># nu:167~176</span></span><br><span class="line">        volumeMounts:</span><br><span class="line">        - mountPath: /tmp</span><br><span class="line">          name: tmp-dir</span><br><span class="line">        <span class="comment"># 添加证书路径，进行hostPath挂载</span></span><br><span class="line">        - name: ca-ssl</span><br><span class="line">          mountPath: /etc/kubernetes/pki</span><br><span class="line">      nodeSelector:</span><br><span class="line">        kubernetes.io/os: linux</span><br><span class="line">      priorityClassName: system-cluster-critical</span><br><span class="line">      serviceAccountName: metrics-server</span><br><span class="line">      volumes:</span><br><span class="line">      - emptyDir: &#123;&#125;</span><br><span class="line">        name: tmp-dir</span><br><span class="line">      - name: ca-ssl</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /etc/kubernetes/pki</span><br><span class="line">          </span><br><span class="line">$ kubectl create -f .</span><br><span class="line">$ kubectl get po -n kube-system -l k8s-app=metrics-server</span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">metrics-server-665db49cc4-hh5zt   1/1     Running   0          32s</span><br></pre></td></tr></table></figure><h3 id="集群验证"><a href="#集群验证" class="headerlink" title="集群验证"></a>集群验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span>&lt;&lt;<span class="string">EOF | kubectl apply -f -</span></span><br><span class="line"><span class="string">apiVersion: v1</span></span><br><span class="line"><span class="string">kind: Pod</span></span><br><span class="line"><span class="string">metadata:</span></span><br><span class="line"><span class="string">  name: busybox</span></span><br><span class="line"><span class="string">  namespace: default</span></span><br><span class="line"><span class="string">spec:</span></span><br><span class="line"><span class="string">  containers:</span></span><br><span class="line"><span class="string">  - name: busybox</span></span><br><span class="line"><span class="string">    image: busybox:1.28</span></span><br><span class="line"><span class="string">    command:</span></span><br><span class="line"><span class="string">      - sleep</span></span><br><span class="line"><span class="string">      - &quot;3600&quot;</span></span><br><span class="line"><span class="string">    imagePullPolicy: IfNotPresent</span></span><br><span class="line"><span class="string">  restartPolicy: Always</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> busybox -n default -- nslookup kubernetes</span><br><span class="line">Server:    110.96.0.10</span><br><span class="line">Address 1: 110.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kubernetes</span><br><span class="line">Address 1: 110.96.0.1 kubernetes.default.svc.cluster.local</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> busybox -n default -- nslookup kube-dns.kube-system</span><br><span class="line">Server:    110.96.0.10</span><br><span class="line">Address 1: 110.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Name:      kube-dns.kube-system</span><br><span class="line">Address 1: 110.96.0.10 kube-dns.kube-system.svc.cluster.local</span><br></pre></td></tr></table></figure><h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><p>Dashboard 用于展示集群中的各类资源，同时也可以通过 Dashboard 实时查看 Pod 的日志和在容器中执行一些命令等</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br><span class="line">$ vim admin.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding </span><br><span class="line">metadata: </span><br><span class="line">  name: admin-user</span><br><span class="line">  annotations:</span><br><span class="line">    rbac.authorization.kubernetes.io/autoupdate: <span class="string">&quot;true&quot;</span></span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">$ kubectl apply -f .</span><br></pre></td></tr></table></figure><p>Chrome 修改启动参数 <code>--test-type --ignore-certificate-errors</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更改dashboard的svc为NodePort，浏览登录确认状态</span></span><br><span class="line">$ kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br><span class="line">ports:</span><br><span class="line">- port: 443</span><br><span class="line">  protocol: TCP</span><br><span class="line">  targetPort: 8443</span><br><span class="line">selector:</span><br><span class="line">  k8s-app: kubernetes-dashboard</span><br><span class="line">sessionAffinity: None</span><br><span class="line"><span class="built_in">type</span>: ClusterIP</span><br><span class="line"></span><br><span class="line">$ kubectl get po,svc -n kubernetes-dashboard</span><br><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper-79c5968bdc-h6zqm   1/1     Running   0          7m7s</span><br><span class="line">pod/kubernetes-dashboard-658485d5c7-d5zs7        1/1     Running   0          7m7s</span><br><span class="line"></span><br><span class="line">NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/dashboard-metrics-scraper   ClusterIP   110.102.53.159   &lt;none&gt;        8000/TCP        7m7s</span><br><span class="line">service/kubernetes-dashboard        NodePort    110.100.245.8    &lt;none&gt;        443:30000/TCP   7m7s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看token值</span></span><br><span class="line">$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211210172922199.png" alt="image-20211210172922199"></p><h3 id="关键性配置"><a href="#关键性配置" class="headerlink" title="关键性配置"></a>关键性配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有节点修改Docker日志大小及下载、重启策略</span></span><br><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line">&#123; </span><br><span class="line"> <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;https://registry.docker-cn.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span></span><br><span class="line">  ],</span><br><span class="line"> <span class="string">&quot;exec-opts&quot;</span>: [<span class="string">&quot;native.cgroupdriver=systemd&quot;</span>],</span><br><span class="line"> <span class="string">&quot;max-concurrent-downloads&quot;</span>: 10, </span><br><span class="line"> <span class="string">&quot;max-concurrent-uploads&quot;</span>: 5, </span><br><span class="line"> <span class="string">&quot;log-opts&quot;</span>: &#123;   </span><br><span class="line"> <span class="string">&quot;max-size&quot;</span>: <span class="string">&quot;300m&quot;</span>,  </span><br><span class="line"> <span class="string">&quot;max-file&quot;</span>: <span class="string">&quot;2&quot;</span> </span><br><span class="line"> &#125;, </span><br><span class="line"> <span class="string">&quot;live-restore&quot;</span>: <span class="literal">true</span></span><br><span class="line"> &#125; </span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master节点修改证书期限</span></span><br><span class="line">$ vim /usr/lib/systemd/system/kube-controller-manager.service</span><br><span class="line"><span class="comment"># --feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true \</span></span><br><span class="line">--cluster-signing-duration=876000h0m0s \</span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart kube-controller-manager.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有节点添加安全扫描及下载策略</span></span><br><span class="line"><span class="comment"># --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384    --image-pull-progress-deadline=30m</span></span><br><span class="line">$ vim /etc/systemd/system/kubelet.service.d/10-kubelet.conf</span><br><span class="line">[Service] </span><br><span class="line">Environment=<span class="string">&quot;KUBELET_KUBECONFIG_ARGS=--kubeconfig=/etc/kubernetes/kubelet.kubeconfig --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.kubeconfig&quot;</span> </span><br><span class="line">Environment=<span class="string">&quot;KUBELET_SYSTEM_ARGS=--network-plugin=cni --cni-conf-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin&quot;</span> </span><br><span class="line">Environment=<span class="string">&quot;KUBELET_CONFIG_ARGS=--config=/etc/kubernetes/kubelet-conf.yml  --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.1&quot;</span> </span><br><span class="line">Environment=<span class="string">&quot;KUBELET_EXTRA_ARGS=&#x27;&#x27; --tls-cipher-suites=TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384    --image-pull-progress-deadline=30m &quot;</span></span><br><span class="line">ExecStart= </span><br><span class="line">ExecStart=/usr/local/bin/kubelet <span class="variable">$KUBELET_KUBECONFIG_ARGS</span> <span class="variable">$KUBELET_CONFIG_ARGS</span> <span class="variable">$KUBELET_SYSTEM_ARGS</span> <span class="variable">$KUBELET_EXTRA_ARGS</span> </span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart kubelet</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有节点添加容器启动限制</span></span><br><span class="line">$ vim /etc/kubernetes/kubelet-conf.yml</span><br><span class="line">rotateServerCertificates: <span class="literal">true</span></span><br><span class="line">allowedUnsafeSysctls:</span><br><span class="line"> - <span class="string">&quot;net.core*&quot;</span></span><br><span class="line"> - <span class="string">&quot;net.ipv4.*&quot;</span></span><br><span class="line">kubeReserved:</span><br><span class="line">  cpu: <span class="string">&quot;1&quot;</span></span><br><span class="line">  memory: 1Gi</span><br><span class="line">  ephemeral-storage: 10Gi</span><br><span class="line">systemReserved:</span><br><span class="line">  cpu: <span class="string">&quot;1&quot;</span></span><br><span class="line">  memory: 1Gi</span><br><span class="line">  ephemeral-storage: 10Gi</span><br><span class="line">  </span><br><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart kubelet</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://ke.qq.com/course/2738602">更多学习内容请参考-K8s全栈架构师(基于世界五百强生产经验研发)</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_Redis Cluster集群(三主三从模式)</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_Redis%20Cluster%E9%9B%86%E7%BE%A4(%E4%B8%89%E4%B8%BB%E4%B8%89%E4%BB%8E%E6%A8%A1%E5%BC%8F)/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_Redis%20Cluster%E9%9B%86%E7%BE%A4(%E4%B8%89%E4%B8%BB%E4%B8%89%E4%BB%8E%E6%A8%A1%E5%BC%8F)/</url>
      
        <content type="html"><![CDATA[<h3 id="架构框架"><a href="#架构框架" class="headerlink" title="架构框架"></a>架构框架</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210902161929099.png" alt="image-20210902161929099"></p><blockquote><p>每个 Redis 实例都依赖于一个配置文件，该文件可以跟踪其他集群实例及其角色，结合使用 Kubernetes StatefulSets 和PersistentVolumes 实现 redis cluster</p></blockquote><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><p>1）测试环境使用动态 NFS 作为挂载卷，需要部署 NFS 动态 StorageClass，可参考 kubernetes部署_NFS-Subdir-External-Provisioner</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get deploy -n nfs-storage</span><br><span class="line">NAME                     READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nfs-client-provisioner   1/1     1            1           163m</span><br></pre></td></tr></table></figure><p>2）创建集群的 redis-class.yaml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-nfs-storage</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">nfs-client</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Retain</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get sc -n redis-cluster</span><br><span class="line">NAME                PROVISIONER   RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">redis-nfs-storage   nfs-client    Retain          Immediate           <span class="literal">false</span>                  38m</span><br></pre></td></tr></table></figure><h3 id="部署集群"><a href="#部署集群" class="headerlink" title="部署集群"></a>部署集群</h3><p>1）创建 configmap</p><p>redis 配置文件使用 configmap 方式进行挂载，如果将配置封装到 docker image 中的话，每次修改配置就需要重新 apply，并且 StatefulSet 类型的资源不能通过修改 <code>&#39;replicas&#39;, &#39;template&#39;, and &#39;updateStrategy&#39;</code> 等字段来进行更新,否则就会报错；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 参考脚本</span></span><br><span class="line">$ <span class="built_in">cat</span> fix-ip.sh </span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">CLUSTER_CONFIG=<span class="string">&quot;/data/nodes.conf&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$&#123;CLUSTER_CONFIG&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">&quot;<span class="variable">$&#123;POD_IP&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Unable to determine Pod IP address!&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Updating my IP to <span class="variable">$&#123;POD_IP&#125;</span> in <span class="variable">$&#123;CLUSTER_CONFIG&#125;</span>&quot;</span></span><br><span class="line">    sed -i.bak -e <span class="string">&quot;/myself/ s/ .*:6379@16379/ <span class="variable">$&#123;POD_IP&#125;</span>:6379@16379/&quot;</span> <span class="variable">$&#123;CLUSTER_CONFIG&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">update.sh:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    #!/bin/sh</span></span><br><span class="line"><span class="string">    CLUSTER_CONFIG=&quot;/data/nodes.conf&quot;</span></span><br><span class="line"><span class="string">    if [ -f $&#123;CLUSTER_CONFIG&#125; ]; then</span></span><br><span class="line"><span class="string">      if [ -z &quot;$&#123;POD_IP&#125;&quot; ]; then</span></span><br><span class="line"><span class="string">        echo &quot;Unable to determine Pod IP address!&quot;</span></span><br><span class="line"><span class="string">        exit 1</span></span><br><span class="line"><span class="string">      fi</span></span><br><span class="line"><span class="string">      echo &quot;Updating my IP to $&#123;POD_IP&#125; in $&#123;CLUSTER_CONFIG&#125;&quot;</span></span><br><span class="line"><span class="string">      sed -i.bak -e &#x27;/myself/ s/[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;/&#x27;$&#123;POD_IP&#125;&#x27;/&#x27; $&#123;CLUSTER_CONFIG&#125;</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">    exec &quot;$@&quot;</span></span><br><span class="line"><span class="string"></span>  <span class="attr">redis.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    bind 0.0.0.0</span></span><br><span class="line"><span class="string">    cluster-enabled yes</span></span><br><span class="line"><span class="string">    cluster-require-full-coverage no</span></span><br><span class="line"><span class="string">    cluster-node-timeout 30000</span></span><br><span class="line"><span class="string">    cluster-config-file /data/nodes.conf</span></span><br><span class="line"><span class="string">    cluster-migration-barrier 1</span></span><br><span class="line"><span class="string">    appendonly yes</span></span><br><span class="line"><span class="string">    protected-mode no</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line"><span class="comment"># cluster-migration-barrier那些分配后仍然剩余migration barrier个从节点的主节点才会触发节点分配，而不是分配前有migration barrier个从节点的主节点就会触发节点分配，默认是1，生产环境建议维持默认值</span></span><br><span class="line"><span class="comment"># protected-mode no参数是为了禁止外网访问redis，如果启用了，则只能够通过lookback ip（127.0.0.1）访问Redis，如果外网访问redis，会报出异常。</span></span><br><span class="line"><span class="comment"># apiVersion: apps.kruise.io/v1beta1控制器这里使用kruise提供的Advanced StatefulSet，如果集群没有安装kruise，可以使用 apps/v1</span></span><br></pre></td></tr></table></figure><p><strong>需要注意：</strong>update.sh 脚本的作用用于当 redis 集群某 pod 重建后 Pod IP 发生变化，在 <code>/data/nodes.conf</code> 中将新的 Pod IP 替换原Pod IP，不然集群会出问题。</p><p>2）创建 StatefulSet</p><p>volumeClaimTemplates 用于 StatefulSet 控制器场景</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">16379</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">16379</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gossip</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">redis-cluster</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">redis-cluster</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis:6.2.5-alpine3.14</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">6379</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">16379</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">gossip</span></span><br><span class="line">        <span class="attr">command:</span> [<span class="string">&quot;/etc/redis/update.sh&quot;</span>, <span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;/etc/redis/redis.conf&quot;</span>]</span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/redis/</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/data</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">redis-cluster</span></span><br><span class="line">          <span class="attr">defaultMode:</span> <span class="number">0755</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">8Gi</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">redis-nfs-storage</span></span><br></pre></td></tr></table></figure><p>3）创建并查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po,svc,sc,pvc,pv -n redis-cluster</span><br><span class="line">NAME                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/redis-cluster-0   1/1     Running   0          45m</span><br><span class="line">pod/redis-cluster-1   1/1     Running   0          44m</span><br><span class="line">pod/redis-cluster-2   1/1     Running   0          44m</span><br><span class="line">pod/redis-cluster-3   1/1     Running   0          44m</span><br><span class="line">pod/redis-cluster-4   1/1     Running   0          43m</span><br><span class="line">pod/redis-cluster-5   1/1     Running   0          31m</span><br><span class="line"></span><br><span class="line">NAME                    TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)              AGE</span><br><span class="line">service/redis-cluster   ClusterIP   120.109.209.176   &lt;none&gt;        6379/TCP,16379/TCP   45m</span><br><span class="line"></span><br><span class="line">NAME                                            PROVISIONER   RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE</span><br><span class="line">storageclass.storage.k8s.io/redis-nfs-storage   nfs-client    Retain          Immediate           <span class="literal">false</span>                  46m</span><br><span class="line"></span><br><span class="line">NAME                                         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS        AGE</span><br><span class="line">persistentvolumeclaim/data-redis-cluster-0   Bound    pvc-7ca1baac-ea01-4da5-9bb5-5f50b0497b54   8Gi        RWX            redis-nfs-storage   45m</span><br><span class="line">persistentvolumeclaim/data-redis-cluster-1   Bound    pvc-893d10db-75e6-4b36-affd-0f438751de41   8Gi        RWX            redis-nfs-storage   44m</span><br><span class="line">persistentvolumeclaim/data-redis-cluster-2   Bound    pvc-a9b6f5bc-b68c-45e4-b64b-4710ca6a4e62   8Gi        RWX            redis-nfs-storage   44m</span><br><span class="line">persistentvolumeclaim/data-redis-cluster-3   Bound    pvc-6a8d3b95-e33d-4d1e-b44a-373938771ac1   8Gi        RWX            redis-nfs-storage   44m</span><br><span class="line">persistentvolumeclaim/data-redis-cluster-4   Bound    pvc-edd84a25-b6f8-4e8a-a4e2-94775b6ee66e   8Gi        RWX            redis-nfs-storage   43m</span><br><span class="line">persistentvolumeclaim/data-redis-cluster-5   Bound    pvc-acf43cb7-dd87-4fbb-ab68-ee3f93462beb   8Gi        RWX            redis-nfs-storage   43m</span><br><span class="line"></span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                STORAGECLASS        REASON   AGE</span><br><span class="line">persistentvolume/pvc-6a8d3b95-e33d-4d1e-b44a-373938771ac1   8Gi        RWX            Retain           Bound    redis-cluster/data-redis-cluster-3   redis-nfs-storage            44m</span><br><span class="line">persistentvolume/pvc-7ca1baac-ea01-4da5-9bb5-5f50b0497b54   8Gi        RWX            Retain           Bound    redis-cluster/data-redis-cluster-0   redis-nfs-storage            45m</span><br><span class="line">persistentvolume/pvc-893d10db-75e6-4b36-affd-0f438751de41   8Gi        RWX            Retain           Bound    redis-cluster/data-redis-cluster-1   redis-nfs-storage            44m</span><br><span class="line">persistentvolume/pvc-a9b6f5bc-b68c-45e4-b64b-4710ca6a4e62   8Gi        RWX            Retain           Bound    redis-cluster/data-redis-cluster-2   redis-nfs-storage            44m</span><br><span class="line">persistentvolume/pvc-acf43cb7-dd87-4fbb-ab68-ee3f93462beb   8Gi        RWX            Retain           Bound    redis-cluster/data-redis-cluster-5   redis-nfs-storage            43m</span><br><span class="line">persistentvolume/pvc-edd84a25-b6f8-4e8a-a4e2-94775b6ee66e   8Gi        RWX            Retain           Bound    redis-cluster/data-redis-cluster-4   redis-nfs-storage            43m</span><br></pre></td></tr></table></figure><h3 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h3><p>1）执行如下命令，获取到 pod IP，然后使用 redis-cli –cluster 创建集群</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取pod ip命令</span></span><br><span class="line">$ kubectl -n redis-cluster get pods -l app=redis-cluster -o jsonpath=<span class="string">&#x27;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:6379 &#123;end&#125;&#x27;</span></span><br><span class="line">172.25.214.245:6379 172.25.92.119:6379 172.25.92.120:6379 172.27.14.233:6379 172.25.214.246:6379 172.18.195.46:6379</span><br><span class="line"></span><br><span class="line">$ kubectl -n redis-cluster <span class="built_in">exec</span> -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl -n redis-cluster get pods -l app=redis-cluster -o jsonpath=<span class="string">&#x27;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:6379 &#123;end&#125;&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; Performing <span class="built_in">hash</span> slots allocation on 6 nodes...</span><br><span class="line">Master[0] -&gt; Slots 0 - 5460</span><br><span class="line">Master[1] -&gt; Slots 5461 - 10922</span><br><span class="line">Master[2] -&gt; Slots 10923 - 16383</span><br><span class="line">Adding replica 172.25.214.246:6379 to 172.25.214.245:6379</span><br><span class="line">Adding replica 172.18.195.46:6379 to 172.25.92.119:6379</span><br><span class="line">Adding replica 172.27.14.233:6379 to 172.25.92.120:6379</span><br><span class="line">M: f7532dbe87fd89593d43802206a00d9abd74a2c1 172.25.214.245:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">M: 742ff63ec22afa750c4b3a46026d97e128ef371c 172.25.92.119:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">M: 4fbfe384eaba478a7b03c3033f6be6e1e399f351 172.25.92.120:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">S: 7c3f118dd70e0eb867f1620a69627c9f16113a26 172.27.14.233:6379</span><br><span class="line">   replicates 4fbfe384eaba478a7b03c3033f6be6e1e399f351</span><br><span class="line">S: 68356e7a3844798d4001f0bd414dc4543e4996c2 172.25.214.246:6379</span><br><span class="line">   replicates f7532dbe87fd89593d43802206a00d9abd74a2c1</span><br><span class="line">S: 98ae235b78b164ad04ab99866d56f047154f2dc6 172.18.195.46:6379</span><br><span class="line">   replicates 742ff63ec22afa750c4b3a46026d97e128ef371c</span><br><span class="line">Can I <span class="built_in">set</span> the above configuration? (<span class="built_in">type</span> <span class="string">&#x27;yes&#x27;</span> to accept): <span class="built_in">yes</span></span><br><span class="line">&gt;&gt;&gt; Nodes configuration updated</span><br><span class="line">&gt;&gt;&gt; Assign a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; Sending CLUSTER MEET messages to <span class="built_in">join</span> the cluster</span><br><span class="line">Waiting <span class="keyword">for</span> the cluster to <span class="built_in">join</span></span><br><span class="line">.</span><br><span class="line">&gt;&gt;&gt; Performing Cluster Check (using node 172.25.214.245:6379)</span><br><span class="line">M: f7532dbe87fd89593d43802206a00d9abd74a2c1 172.25.214.245:6379</span><br><span class="line">   slots:[0-5460] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">M: 742ff63ec22afa750c4b3a46026d97e128ef371c 172.25.92.119:6379</span><br><span class="line">   slots:[5461-10922] (5462 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 98ae235b78b164ad04ab99866d56f047154f2dc6 172.18.195.46:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 742ff63ec22afa750c4b3a46026d97e128ef371c</span><br><span class="line">M: 4fbfe384eaba478a7b03c3033f6be6e1e399f351 172.25.92.120:6379</span><br><span class="line">   slots:[10923-16383] (5461 slots) master</span><br><span class="line">   1 additional replica(s)</span><br><span class="line">S: 68356e7a3844798d4001f0bd414dc4543e4996c2 172.25.214.246:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates f7532dbe87fd89593d43802206a00d9abd74a2c1</span><br><span class="line">S: 7c3f118dd70e0eb867f1620a69627c9f16113a26 172.27.14.233:6379</span><br><span class="line">   slots: (0 slots) slave</span><br><span class="line">   replicates 4fbfe384eaba478a7b03c3033f6be6e1e399f351</span><br><span class="line">[OK] All nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; Check <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; Check slots coverage...</span><br><span class="line">[OK] All 16384 slots covered.</span><br></pre></td></tr></table></figure><h3 id="验证集群"><a href="#验证集群" class="headerlink" title="验证集群"></a>验证集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl -n redis-cluster  <span class="built_in">exec</span> -it redis-cluster-0 -- redis-cli cluster info</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:6</span><br><span class="line">cluster_size:3</span><br><span class="line">cluster_current_epoch:6</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_ping_sent:195</span><br><span class="line">cluster_stats_messages_pong_sent:224</span><br><span class="line">cluster_stats_messages_sent:419</span><br><span class="line">cluster_stats_messages_ping_received:219</span><br><span class="line">cluster_stats_messages_pong_received:195</span><br><span class="line">cluster_stats_messages_meet_received:5</span><br><span class="line">cluster_stats_messages_received:419</span><br><span class="line"></span><br><span class="line">$ kubectl -n redis-cluster  <span class="built_in">exec</span> -it redis-cluster-0 -- redis-cli cluster nodes</span><br><span class="line">742ff63ec22afa750c4b3a46026d97e128ef371c 172.25.92.119:6379@16379 master - 0 1630569595583 2 connected 5461-10922</span><br><span class="line">98ae235b78b164ad04ab99866d56f047154f2dc6 172.18.195.46:6379@16379 slave 742ff63ec22afa750c4b3a46026d97e128ef371c 0 1630569593000 2 connected</span><br><span class="line">f7532dbe87fd89593d43802206a00d9abd74a2c1 172.25.214.245:6379@16379 myself,master - 0 1630569595000 1 connected 0-5460</span><br><span class="line">4fbfe384eaba478a7b03c3033f6be6e1e399f351 172.25.92.120:6379@16379 master - 0 1630569594000 3 connected 10923-16383</span><br><span class="line">68356e7a3844798d4001f0bd414dc4543e4996c2 172.25.214.246:6379@16379 slave f7532dbe87fd89593d43802206a00d9abd74a2c1 0 1630569594557 1 connected</span><br><span class="line">7c3f118dd70e0eb867f1620a69627c9f16113a26 172.27.14.233:6379@16379 slave 4fbfe384eaba478a7b03c3033f6be6e1e399f351 0 1630569594000 3 connected</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po -n redis-cluster -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE   IP               NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">redis-cluster-0   1/1     Running   0          12m   172.25.214.245   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-1   1/1     Running   0          12m   172.25.92.119    k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-2   1/1     Running   0          12m   172.25.92.120    k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-3   1/1     Running   0          12m   172.27.14.233    k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-4   1/1     Running   0          11m   172.25.214.246   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-5   1/1     Running   0          11m   172.18.195.46    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">$ kubectl delete po redis-cluster-5 -n redis-cluster</span><br><span class="line">pod <span class="string">&quot;redis-cluster-5&quot;</span> deleted</span><br><span class="line">$ kubectl get po -n redis-cluster -owide</span><br><span class="line">NAME              READY   STATUS              RESTARTS   AGE   IP               NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">redis-cluster-0   1/1     Running             0          13m   172.25.214.245   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-1   1/1     Running             0          13m   172.25.92.119    k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-2   1/1     Running             0          13m   172.25.92.120    k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-3   1/1     Running             0          12m   172.27.14.233    k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-4   1/1     Running             0          12m   172.25.214.246   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-5   0/1     ContainerCreating   0          4s    &lt;none&gt;           k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">$ kubectl get po -n redis-cluster -owide</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE   IP               NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">redis-cluster-0   1/1     Running   0          14m   172.25.214.245   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-1   1/1     Running   0          13m   172.25.92.119    k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-2   1/1     Running   0          13m   172.25.92.120    k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-3   1/1     Running   0          13m   172.27.14.233    k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-4   1/1     Running   0          12m   172.25.214.246   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-5   1/1     Running   0          33s   172.18.195.47    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>查看pod对应的DNS域名</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> x <span class="keyword">in</span> $(<span class="built_in">seq</span> 0 5); <span class="keyword">do</span> kubectl <span class="built_in">exec</span> redis-cluster-<span class="variable">$x</span> -n redis-cluster -- hostname -f; <span class="keyword">done</span></span><br><span class="line">redis-cluster-0.redis-cluster.redis-cluster.svc.cluster.local</span><br><span class="line">redis-cluster-1.redis-cluster.redis-cluster.svc.cluster.local</span><br><span class="line">redis-cluster-2.redis-cluster.redis-cluster.svc.cluster.local</span><br><span class="line">redis-cluster-3.redis-cluster.redis-cluster.svc.cluster.local</span><br><span class="line">redis-cluster-4.redis-cluster.redis-cluster.svc.cluster.local</span><br><span class="line">redis-cluster-5.redis-cluster.redis-cluster.svc.cluster.local</span><br><span class="line"></span><br><span class="line">$ <span class="keyword">for</span> x <span class="keyword">in</span> $(<span class="built_in">seq</span> 0 5); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">&quot;redis-cluster-<span class="variable">$x</span>&quot;</span>; kubectl <span class="built_in">exec</span> redis-cluster-<span class="variable">$x</span> -n redis-cluster -- redis-cli role; <span class="built_in">echo</span>; <span class="keyword">done</span></span><br><span class="line">redis-cluster-0</span><br><span class="line">master</span><br><span class="line">742</span><br><span class="line">172.25.214.246</span><br><span class="line">6379</span><br><span class="line">742</span><br><span class="line"></span><br><span class="line">redis-cluster-1</span><br><span class="line">master</span><br><span class="line">686</span><br><span class="line">172.18.195.47</span><br><span class="line">6379</span><br><span class="line">686</span><br><span class="line"></span><br><span class="line">redis-cluster-2</span><br><span class="line">master</span><br><span class="line">742</span><br><span class="line">172.27.14.233</span><br><span class="line">6379</span><br><span class="line">742</span><br><span class="line"></span><br><span class="line">redis-cluster-3</span><br><span class="line">slave</span><br><span class="line">172.25.92.120</span><br><span class="line">6379</span><br><span class="line">connected</span><br><span class="line">742</span><br><span class="line"></span><br><span class="line">redis-cluster-4</span><br><span class="line">slave</span><br><span class="line">172.25.214.245</span><br><span class="line">6379</span><br><span class="line">connected</span><br><span class="line">756</span><br><span class="line"></span><br><span class="line">redis-cluster-5</span><br><span class="line">slave</span><br><span class="line">172.25.92.119</span><br><span class="line">6379</span><br><span class="line">connected</span><br><span class="line">700</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_Redis Cluster集群(三主三从模式)-转载</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_Redis%20Cluster%E9%9B%86%E7%BE%A4(%E4%B8%89%E4%B8%BB%E4%B8%89%E4%BB%8E%E6%A8%A1%E5%BC%8F)-%E8%BD%AC%E8%BD%BD/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_Redis%20Cluster%E9%9B%86%E7%BE%A4(%E4%B8%89%E4%B8%BB%E4%B8%89%E4%BB%8E%E6%A8%A1%E5%BC%8F)-%E8%BD%AC%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p><strong>一、</strong><a href="https://cloud.tencent.com/product/crs?from=10680"><strong>Redis</strong></a> <strong>介绍</strong></p><ul><li>Redis代表REmote DIctionary Server是一种开源的内存中数据存储，通常用作<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>，缓存或消息代理。它可以存储和操作高级数据类型，例如列表，地图，集合和排序集合。</li><li>由于Redis接受多种格式的密钥，因此可以在服务器上执行操作，从而减少了客户端的工作量。</li><li>它仅将磁盘用于持久性，而将数据完全保存在内存中。</li><li>Redis是一种流行的数据存储解决方案，并被GitHub，Pinterest，Snapchat，Twitter，StackOverflow，Flickr等技术巨头所使用。</li></ul><p><strong>二、为什么要用Redis</strong></p><ul><li>它的速度非常快。它是用ANSI C编写的，并且可以在POSIX系统上运行，例如Linux，Mac OS X和Solaris。</li><li>Redis通常被排名为最流行的键&#x2F;值数据库和最流行的与容器一起使用的NoSQL数据库。</li><li>其缓存解决方案减少了对云数据库后端的调用次数。</li><li>应用程序可以通过其客户端API库对其进行访问。</li><li>所有流行的编程语言都支持Redis。</li><li>它是开源且稳定的。</li></ul><p><strong>三、什么是Redis Cluster集群</strong></p><ul><li>Redis Cluster是一组Redis实例，旨在通过对数据库进行分区来扩展数据库，从而使其更具弹性。</li><li>群集中的每个成员（无论是主副本还是辅助副本）都管理哈希槽的子集。如果主机无法访问，则其从机将升级为主机。在由三个主节点组成的最小Redis群集中，每个主节点都有一个从节点（以实现最小的故障转移），每个主节点都分配有一个介于0到16,383之间的哈希槽范围。节点A包含从0到5000的哈希槽，节点B从5001到10000，节点C从10001到16383。</li><li>群集内部的通信是通过内部总线进行的，使用协议传播有关群集的信息或发现新节点。</li></ul><p><strong>四、在Kubernetes中部署Redis Cluster集群过程记录</strong></p><p>在Kubernetes中部署Redis集群面临挑战，因为每个Redis实例都依赖于一个配置文件，该文件可以跟踪其他集群实例及其角色。为此，我们需要结合使用StatefulSets控制器和PersistentVolumes持久化存储。</p><p><strong>StatefulSet的设计原理模型:</strong></p><ul><li>拓扑状态：</li></ul><p>应用的多个实例之间不是完全对等的关系,这个应用实例的启动必须按照某些顺序启动,比如应用的主节点 A 要先于从节点 B 启动。而如果你把 A 和 B 两个Pod删除掉,他们再次被创建出来是也必须严格按照这个顺序才行,并且,新创建出来的Pod,必须和原来的Pod的网络标识一样,这样原先的访问者才能使用同样的方法,访问到这个新的Pod</p><ul><li>存储状态：</li></ul><p>应用的多个实例分别绑定了不同的存储数据.对于这些应用实例来说,Pod A第一次读取到的数据,和隔了十分钟之后再次读取到的数据,应该是同一份,哪怕在此期间Pod A被重新创建过.一个数据库应用的多个存储实例。</p><p>存储卷</p><p>了解statefulset状态后，应该知道要为数据准备一个存储卷了，创建方式有静态方式和动态方式，静态方式就是手动创建PV、PVC，然后POD进行进行调用即可。这里使用动态NFS作为挂载卷，需要部署NFS动态StorageClass</p><p><strong>1、使用NFS配置StatefulSet的动态持久化存储</strong></p><p>1）在NFS服务器端（172.16.60.238）通过nfs创建Redis Cluster集群的共享目录</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-harbor01 ~]# mkdir -p /data/storage/k8s/redis</span><br></pre></td></tr></table></figure><p>2）创建nfs的rbac</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 ~]# mkdir -p /opt/k8s/k8s_project/redis</span><br><span class="line">[root@k8s-master01 ~]# cd /opt/k8s/k8s_project/redis</span><br><span class="line">[root@k8s-master01 redis]# vim nfs-rbac.<span class="property">yaml</span></span><br><span class="line">---</span><br><span class="line"><span class="attr">apiVersion</span>: v1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">name</span>: nfs-provisioner</span><br><span class="line">  <span class="attr">namespace</span>: wiseco</span><br><span class="line">---</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion</span>: rbac.<span class="property">authorization</span>.<span class="property">k8s</span>.<span class="property">io</span>/v1</span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">   <span class="attr">name</span>: nfs-provisioner-runner</span><br><span class="line">   <span class="attr">namespace</span>: wiseco</span><br><span class="line"><span class="attr">rules</span>:</span><br><span class="line">   -  <span class="attr">apiGroups</span>: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">      <span class="attr">resources</span>: [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">      <span class="attr">verbs</span>: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">   -  <span class="attr">apiGroups</span>: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">      <span class="attr">resources</span>: [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">      <span class="attr">verbs</span>: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">   -  <span class="attr">apiGroups</span>: [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">      <span class="attr">resources</span>: [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">      <span class="attr">verbs</span>: [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">   -  <span class="attr">apiGroups</span>: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">      <span class="attr">resources</span>: [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">      <span class="attr">verbs</span>: [<span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">   -  <span class="attr">apiGroups</span>: [<span class="string">&quot;&quot;</span>]</span><br><span class="line">      <span class="attr">resources</span>: [<span class="string">&quot;services&quot;</span>, <span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">      <span class="attr">verbs</span>: [<span class="string">&quot;get&quot;</span>,<span class="string">&quot;create&quot;</span>,<span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>,<span class="string">&quot;update&quot;</span>]</span><br><span class="line">   -  <span class="attr">apiGroups</span>: [<span class="string">&quot;extensions&quot;</span>]</span><br><span class="line">      <span class="attr">resources</span>: [<span class="string">&quot;podsecuritypolicies&quot;</span>]</span><br><span class="line">      <span class="attr">resourceNames</span>: [<span class="string">&quot;nfs-provisioner&quot;</span>]</span><br><span class="line">      <span class="attr">verbs</span>: [<span class="string">&quot;use&quot;</span>]</span><br><span class="line">---</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion</span>: rbac.<span class="property">authorization</span>.<span class="property">k8s</span>.<span class="property">io</span>/v1</span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">name</span>: run-nfs-provisioner</span><br><span class="line"><span class="attr">subjects</span>:</span><br><span class="line">  - <span class="attr">kind</span>: <span class="title class_">ServiceAccount</span></span><br><span class="line">    <span class="attr">name</span>: nfs-provisioner</span><br><span class="line">    <span class="attr">namespace</span>: wiseco</span><br><span class="line"><span class="attr">roleRef</span>:</span><br><span class="line">  <span class="attr">kind</span>: <span class="title class_">ClusterRole</span></span><br><span class="line">  <span class="attr">name</span>: nfs-provisioner-runner</span><br><span class="line">  <span class="attr">apiGroup</span>: rbac.<span class="property">authorization</span>.<span class="property">k8s</span>.<span class="property">io</span></span><br></pre></td></tr></table></figure><p>创建并查看</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 redis]# kubectl apply -f nfs-rbac.<span class="property">yaml</span></span><br><span class="line">serviceaccount/nfs-provisioner created</span><br><span class="line">clusterrole.<span class="property">rbac</span>.<span class="property">authorization</span>.<span class="property">k8s</span>.<span class="property">io</span>/nfs-provisioner-runner created</span><br><span class="line">clusterrolebinding.<span class="property">rbac</span>.<span class="property">authorization</span>.<span class="property">k8s</span>.<span class="property">io</span>/run-nfs-provisioner created</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# kubectl get sa -n wiseco|grep nfs</span><br><span class="line">nfs-provisioner                <span class="number">1</span>         24s</span><br><span class="line">[root@k8s-master01 redis]# kubectl get clusterrole -n wiseco|grep nfs</span><br><span class="line">nfs-provisioner-runner                                                 <span class="number">2021</span>-<span class="number">02</span>-04<span class="attr">T02</span>:<span class="number">21</span>:11Z</span><br><span class="line">[root@k8s-master01 redis]# kubectl get clusterrolebinding -n wiseco|grep nfs</span><br><span class="line">run-nfs-provisioner                                    <span class="title class_">ClusterRole</span>/nfs-provisioner-runner                                                 34s</span><br></pre></td></tr></table></figure><p>3）创建redis cluster集群的storageclass</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 redis]# ll</span><br><span class="line">total <span class="number">4</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1216</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">10</span>:<span class="number">20</span> nfs-rbac.<span class="property">yaml</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# vim redis-nfs-<span class="keyword">class</span>.<span class="property">yaml</span></span><br><span class="line"><span class="attr">apiVersion</span>: storage.<span class="property">k8s</span>.<span class="property">io</span>/v1beta1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">StorageClass</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">name</span>: redis-nfs-storage</span><br><span class="line">  <span class="attr">namespace</span>: wiseco</span><br><span class="line"><span class="attr">provisioner</span>: redis/nfs</span><br><span class="line"><span class="attr">reclaimPolicy</span>: <span class="title class_">Retain</span></span><br></pre></td></tr></table></figure><p>创建并查看</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 redis]# kubectl apply -f redis-nfs-<span class="keyword">class</span>.<span class="property">yaml</span></span><br><span class="line">storageclass.<span class="property">storage</span>.<span class="property">k8s</span>.<span class="property">io</span>/redis-nfs-storage created</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# kubectl get sc -n wiseco</span><br><span class="line"><span class="variable constant_">NAME</span>                <span class="variable constant_">PROVISIONER</span>   <span class="variable constant_">RECLAIMPOLICY</span>   <span class="variable constant_">VOLUMEBINDINGMODE</span>   <span class="variable constant_">ALLOWVOLUMEEXPANSION</span>   <span class="variable constant_">AGE</span></span><br><span class="line">redis-nfs-storage   redis/nfs     <span class="title class_">Retain</span>          <span class="title class_">Immediate</span>           <span class="literal">false</span>  </span><br></pre></td></tr></table></figure><p>4）创建redis cluster集群的nfs-client-provisioner</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 redis]# ll</span><br><span class="line">total <span class="number">8</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1216</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">10</span>:<span class="number">20</span> nfs-rbac.<span class="property">yaml</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">155</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">10</span>:<span class="number">24</span> redis-nfs-<span class="keyword">class</span>.<span class="property">yaml</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# vim redis-nfs.<span class="property">yml</span></span><br><span class="line"><span class="attr">apiVersion</span>: apps/v1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">Deployment</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">name</span>: redis-nfs-client-provisioner</span><br><span class="line">  <span class="attr">namespace</span>: wiseco</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">replicas</span>: <span class="number">1</span></span><br><span class="line">  <span class="attr">selector</span>:</span><br><span class="line">    <span class="attr">matchLabels</span>:</span><br><span class="line">      <span class="attr">app</span>: redis-nfs-client-provisioner</span><br><span class="line">  <span class="attr">strategy</span>:</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Recreate</span></span><br><span class="line">  <span class="attr">template</span>:</span><br><span class="line">    <span class="attr">metadata</span>:</span><br><span class="line">      <span class="attr">labels</span>:</span><br><span class="line">        <span class="attr">app</span>: redis-nfs-client-provisioner</span><br><span class="line">    <span class="attr">spec</span>:</span><br><span class="line">      <span class="attr">serviceAccount</span>: nfs-provisioner</span><br><span class="line">      <span class="attr">containers</span>:</span><br><span class="line">        - <span class="attr">name</span>: redis-nfs-client-provisioner</span><br><span class="line">          <span class="attr">image</span>: registry.<span class="property">cn</span>-hangzhou.<span class="property">aliyuncs</span>.<span class="property">com</span>/open-ali/nfs-client-provisioner</span><br><span class="line">          <span class="attr">imagePullPolicy</span>: <span class="title class_">IfNotPresent</span></span><br><span class="line">          <span class="attr">volumeMounts</span>:</span><br><span class="line">            - <span class="attr">name</span>: nfs-client-root</span><br><span class="line">              <span class="attr">mountPath</span>:  /persistentvolumes</span><br><span class="line">          <span class="attr">env</span>:</span><br><span class="line">            - <span class="attr">name</span>: <span class="variable constant_">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value</span>: redis/nfs</span><br><span class="line">            - <span class="attr">name</span>: <span class="variable constant_">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value</span>: <span class="number">172.16</span><span class="number">.60</span><span class="number">.238</span></span><br><span class="line">            - <span class="attr">name</span>: <span class="variable constant_">NFS_PATH</span></span><br><span class="line">              <span class="attr">value</span>: <span class="regexp">/data/</span>storage/k8s/redis</span><br><span class="line">      <span class="attr">volumes</span>:</span><br><span class="line">        - <span class="attr">name</span>: nfs-client-root</span><br><span class="line">          <span class="attr">nfs</span>:</span><br><span class="line">            <span class="attr">server</span>: <span class="number">172.16</span><span class="number">.60</span><span class="number">.238</span></span><br><span class="line">            <span class="attr">path</span>: <span class="regexp">/data/</span>storage/k8s/redis　</span><br></pre></td></tr></table></figure><p>创建并查看</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 redis]# kubectl apply -f redis-nfs.<span class="property">yml</span></span><br><span class="line">deployment.<span class="property">apps</span>/redis-nfs-client-provisioner created</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# kubectl get pods -n wiseco|grep nfs</span><br><span class="line">redis-nfs-client-provisioner-58b46549dd-h87gg   <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          40s</span><br></pre></td></tr></table></figure><p><strong>2、部署Redis Cluster集群</strong> 本案例部署采用的namespace命名空间是wiseco</p><p>1）准备image镜像 redis-trib.rb工具可以去redis源码中拷贝一个到当前目录,然后构建镜像。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 redis]# pwd</span><br><span class="line">/opt/k8s/k8s_project/redis</span><br><span class="line">[root@k8s-master01 redis]# ll</span><br><span class="line">total <span class="number">12</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1216</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">31</span> nfs-rbac.<span class="property">yaml</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">155</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">32</span> redis-nfs-<span class="keyword">class</span>.<span class="property">yaml</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1006</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">32</span> redis-nfs.<span class="property">yml</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# mkdir image</span><br><span class="line">[root@k8s-master01 redis]# cd image</span><br><span class="line">[root@k8s-master01 image]# ll</span><br><span class="line">total <span class="number">64</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root   <span class="number">191</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">18</span>:<span class="number">14</span> <span class="title class_">Dockerfile</span></span><br><span class="line">-rwxr-xr-x <span class="number">1</span> root root <span class="number">60578</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">49</span> redis-trib.<span class="property">rb</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 image]# cat <span class="title class_">Dockerfile</span></span><br><span class="line"><span class="variable constant_">FROM</span> <span class="attr">redis</span>:<span class="number">4.0</span><span class="number">.11</span></span><br><span class="line"><span class="variable constant_">RUN</span> apt-get update -y</span><br><span class="line"><span class="variable constant_">RUN</span> apt-get install -y  ruby \</span><br><span class="line">rubygems</span><br><span class="line"><span class="variable constant_">RUN</span> apt-get clean all</span><br><span class="line"><span class="variable constant_">RUN</span> gem install redis</span><br><span class="line"><span class="variable constant_">RUN</span> apt-get install dnsutils -y</span><br><span class="line"><span class="variable constant_">COPY</span> redis-trib.<span class="property">rb</span> /usr/local/bin/</span><br></pre></td></tr></table></figure><p>创建镜像并上传到Harbor仓库</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 image]# docker build -t <span class="number">172.16</span><span class="number">.60</span><span class="number">.238</span>/wiseco/<span class="attr">redis</span>:<span class="number">4.0</span><span class="number">.11</span> .</span><br><span class="line">[root@k8s-master01 image]# docker push <span class="number">172.16</span><span class="number">.60</span><span class="number">.238</span>/wiseco/<span class="attr">redis</span>:<span class="number">4.0</span><span class="number">.11</span></span><br></pre></td></tr></table></figure><p>2）创建configmap</p><p>redis配置文件使用configmap方式进行挂载，如果将配置封装到docker image中的话，俺么每次修改配置就需要重新docker build。个人觉得比较麻烦，所以使用configmap方式挂载配置。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 redis]# pwd</span><br><span class="line">/opt/k8s/k8s_project/redis</span><br><span class="line">[root@k8s-master01 redis]# ll</span><br><span class="line">total <span class="number">12</span></span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root   <span class="number">45</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">18</span>:<span class="number">14</span> image</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1216</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">31</span> nfs-rbac.<span class="property">yaml</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">155</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">32</span> redis-nfs-<span class="keyword">class</span>.<span class="property">yaml</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1006</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">32</span> redis-nfs.<span class="property">yml</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# mkdir conf</span><br><span class="line">[root@k8s-master01 redis]# cd conf/</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 conf]# vim redis-configmap.<span class="property">yaml</span></span><br><span class="line"><span class="attr">apiVersion</span>: v1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">ConfigMap</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">name</span>: redis-cluster</span><br><span class="line">  <span class="attr">namespace</span>: wiseco</span><br><span class="line"><span class="attr">data</span>:</span><br><span class="line">  fix-ip.<span class="property">sh</span>: |</span><br><span class="line">    #!<span class="regexp">/bin/</span>sh</span><br><span class="line">    <span class="variable constant_">CLUSTER_CONFIG</span>=<span class="string">&quot;/data/nodes.conf&quot;</span></span><br><span class="line">    <span class="keyword">if</span> [ -f $&#123;<span class="variable constant_">CLUSTER_CONFIG</span>&#125; ]; then</span><br><span class="line">      <span class="keyword">if</span> [ -z <span class="string">&quot;$&#123;POD_IP&#125;&quot;</span> ]; then</span><br><span class="line">        echo <span class="string">&quot;Unable to determine Pod IP address!&quot;</span></span><br><span class="line">        exit <span class="number">1</span></span><br><span class="line">      fi</span><br><span class="line">      echo <span class="string">&quot;Updating my IP to $&#123;POD_IP&#125; in $&#123;CLUSTER_CONFIG&#125;&quot;</span></span><br><span class="line">      sed -i.<span class="property">bak</span> -e <span class="string">&#x27;/myself/ s/[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;\.[0-9]\&#123;1,3\&#125;/&#x27;</span>$&#123;<span class="variable constant_">POD_IP</span>&#125;<span class="string">&#x27;/&#x27;</span> $&#123;<span class="variable constant_">CLUSTER_CONFIG</span>&#125;</span><br><span class="line">    fi</span><br><span class="line">    exec <span class="string">&quot;$@&quot;</span></span><br><span class="line">  redis.<span class="property">conf</span>: |</span><br><span class="line">    cluster-enabled yes</span><br><span class="line">    cluster-config-file /data/nodes.<span class="property">conf</span></span><br><span class="line">    cluster-node-timeout <span class="number">10000</span></span><br><span class="line">    protected-mode no</span><br><span class="line">    daemonize no</span><br><span class="line">    pidfile /<span class="keyword">var</span>/run/redis.<span class="property">pid</span></span><br><span class="line">    port <span class="number">6379</span></span><br><span class="line">    tcp-backlog <span class="number">511</span></span><br><span class="line">    bind <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">    timeout <span class="number">3600</span></span><br><span class="line">    tcp-keepalive <span class="number">1</span></span><br><span class="line">    loglevel verbose</span><br><span class="line">    logfile /data/redis.<span class="property">log</span></span><br><span class="line">    databases <span class="number">16</span></span><br><span class="line">    save <span class="number">900</span> <span class="number">1</span></span><br><span class="line">    save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">    save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line">    stop-writes-on-bgsave-error yes</span><br><span class="line">    rdbcompression yes</span><br><span class="line">    rdbchecksum yes</span><br><span class="line">    dbfilename dump.<span class="property">rdb</span></span><br><span class="line">    dir /data</span><br><span class="line">    #requirepass yl123456</span><br><span class="line">    appendonly yes</span><br><span class="line">    appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line">    appendfsync everysec</span><br><span class="line">    no-appendfsync-on-rewrite no</span><br><span class="line">    auto-aof-rewrite-percentage <span class="number">100</span></span><br><span class="line">    auto-aof-rewrite-min-size 64mb</span><br><span class="line">    lua-time-limit <span class="number">20000</span></span><br><span class="line">    slowlog-log-slower-than <span class="number">10000</span></span><br><span class="line">    slowlog-max-len <span class="number">128</span></span><br><span class="line">    #rename-command <span class="variable constant_">FLUSHALL</span>  <span class="string">&quot;&quot;</span></span><br><span class="line">    latency-monitor-threshold <span class="number">0</span></span><br><span class="line">    notify-keyspace-events <span class="string">&quot;&quot;</span></span><br><span class="line">    hash-max-ziplist-entries <span class="number">512</span></span><br><span class="line">    hash-max-ziplist-value <span class="number">64</span></span><br><span class="line">    list-max-ziplist-entries <span class="number">512</span></span><br><span class="line">    list-max-ziplist-value <span class="number">64</span></span><br><span class="line">    set-max-intset-entries <span class="number">512</span></span><br><span class="line">    zset-max-ziplist-entries <span class="number">128</span></span><br><span class="line">    zset-max-ziplist-value <span class="number">64</span></span><br><span class="line">    hll-sparse-max-bytes <span class="number">3000</span></span><br><span class="line">    activerehashing yes</span><br><span class="line">    client-output-buffer-limit normal <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">    client-output-buffer-limit slave 256mb 64mb <span class="number">60</span></span><br><span class="line">    client-output-buffer-limit pubsub 32mb 8mb <span class="number">60</span></span><br><span class="line">    hz <span class="number">10</span></span><br><span class="line">    aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure><p><strong>需要注意：</strong>fix-ip.sh 脚本的作用用于当redis集群某pod重建后Pod IP发生变化，在&#x2F;data&#x2F;nodes.conf中将新的Pod IP替换原Pod IP。不然集群会出问题。</p><p>创建和查看</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 conf]# kubectl apply -f redis-configmap.<span class="property">yaml</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 conf]# kubectl get cm -n wiseco|grep redis</span><br><span class="line">redis-cluster                     <span class="number">2</span>      8m55s</span><br></pre></td></tr></table></figure><p>2）准备StatefulSet</p><p>volumeClaimTemplates 用于StatefulSet控制器场景：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 redis]# pwd</span><br><span class="line">/opt/k8s/k8s_project/redis</span><br><span class="line">[root@k8s-master01 redis]# ll</span><br><span class="line">total <span class="number">12</span></span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root   <span class="number">34</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">18</span>:<span class="number">52</span> conf</span><br><span class="line">drwxr-xr-x <span class="number">2</span> root root   <span class="number">45</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">18</span>:<span class="number">14</span> image</span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1216</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">31</span> nfs-rbac.<span class="property">yaml</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root  <span class="number">155</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">32</span> redis-nfs-<span class="keyword">class</span>.<span class="property">yaml</span></span><br><span class="line">-rw-r--r-- <span class="number">1</span> root root <span class="number">1006</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">15</span>:<span class="number">32</span> redis-nfs.<span class="property">yml</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# mkdir deploy</span><br><span class="line">[root@k8s-master01 redis]# cd deploy/</span><br><span class="line">[root@k8s-master01 deploy]# cat redis-cluster.<span class="property">yml</span></span><br><span class="line">---</span><br><span class="line"><span class="attr">apiVersion</span>: v1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">Service</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">namespace</span>: wiseco</span><br><span class="line">  <span class="attr">name</span>: redis-cluster</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">clusterIP</span>: <span class="title class_">None</span></span><br><span class="line">  <span class="attr">ports</span>:</span><br><span class="line">  - <span class="attr">port</span>: <span class="number">6379</span></span><br><span class="line">    <span class="attr">targetPort</span>: <span class="number">6379</span></span><br><span class="line">    <span class="attr">name</span>: client</span><br><span class="line">  - <span class="attr">port</span>: <span class="number">16379</span></span><br><span class="line">    <span class="attr">targetPort</span>: <span class="number">16379</span></span><br><span class="line">    <span class="attr">name</span>: gossip</span><br><span class="line">  <span class="attr">selector</span>:</span><br><span class="line">    <span class="attr">app</span>: redis-cluster</span><br><span class="line">---</span><br><span class="line"><span class="attr">apiVersion</span>: apps/v1</span><br><span class="line"><span class="attr">kind</span>: <span class="title class_">StatefulSet</span></span><br><span class="line"><span class="attr">metadata</span>:</span><br><span class="line">  <span class="attr">namespace</span>: wiseco</span><br><span class="line">  <span class="attr">name</span>: redis-cluster</span><br><span class="line"><span class="attr">spec</span>:</span><br><span class="line">  <span class="attr">serviceName</span>: redis-cluster</span><br><span class="line">  <span class="attr">replicas</span>: <span class="number">6</span></span><br><span class="line">  <span class="attr">selector</span>:</span><br><span class="line">    <span class="attr">matchLabels</span>:</span><br><span class="line">      <span class="attr">app</span>: redis-cluster</span><br><span class="line">  <span class="attr">template</span>:</span><br><span class="line">    <span class="attr">metadata</span>:</span><br><span class="line">      <span class="attr">labels</span>:</span><br><span class="line">        <span class="attr">app</span>: redis-cluster</span><br><span class="line">    <span class="attr">spec</span>:</span><br><span class="line">      <span class="attr">containers</span>:</span><br><span class="line">      - <span class="attr">name</span>: redis</span><br><span class="line">        <span class="attr">image</span>: <span class="number">172.16</span><span class="number">.60</span><span class="number">.238</span>/wiseco/<span class="attr">redis</span>:<span class="number">4.0</span><span class="number">.11</span></span><br><span class="line">        <span class="attr">ports</span>:</span><br><span class="line">        - <span class="attr">containerPort</span>: <span class="number">6379</span></span><br><span class="line">          <span class="attr">name</span>: client</span><br><span class="line">        - <span class="attr">containerPort</span>: <span class="number">16379</span></span><br><span class="line">          <span class="attr">name</span>: gossip</span><br><span class="line">        <span class="attr">command</span>: [<span class="string">&quot;/etc/redis/fix-ip.sh&quot;</span>, <span class="string">&quot;redis-server&quot;</span>, <span class="string">&quot;/etc/redis/redis.conf&quot;</span>]</span><br><span class="line">        <span class="attr">env</span>:</span><br><span class="line">        - <span class="attr">name</span>: <span class="variable constant_">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom</span>:</span><br><span class="line">            <span class="attr">fieldRef</span>:</span><br><span class="line">              <span class="attr">fieldPath</span>: status.<span class="property">podIP</span></span><br><span class="line">        <span class="attr">volumeMounts</span>:</span><br><span class="line">        - <span class="attr">name</span>: conf</span><br><span class="line">          <span class="attr">mountPath</span>: <span class="regexp">/etc/</span>redis/</span><br><span class="line">          <span class="attr">readOnly</span>: <span class="literal">false</span></span><br><span class="line">        - <span class="attr">name</span>: data</span><br><span class="line">          <span class="attr">mountPath</span>: /data</span><br><span class="line">          <span class="attr">readOnly</span>: <span class="literal">false</span></span><br><span class="line">      <span class="attr">volumes</span>:</span><br><span class="line">      - <span class="attr">name</span>: conf</span><br><span class="line">        <span class="attr">configMap</span>:</span><br><span class="line">          <span class="attr">name</span>: redis-cluster</span><br><span class="line">          <span class="attr">defaultMode</span>: <span class="number">0755</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates</span>:</span><br><span class="line">  - <span class="attr">metadata</span>:</span><br><span class="line">      <span class="attr">name</span>: data</span><br><span class="line">      <span class="attr">annotations</span>:</span><br><span class="line">        volume.<span class="property">beta</span>.<span class="property">kubernetes</span>.<span class="property">io</span>/storage-<span class="attr">class</span>: <span class="string">&quot;redis-nfs-storage&quot;</span></span><br><span class="line">    <span class="attr">spec</span>:</span><br><span class="line">      <span class="attr">accessModes</span>:</span><br><span class="line">        - <span class="title class_">ReadWriteMany</span></span><br><span class="line">      <span class="attr">resources</span>:</span><br><span class="line">        <span class="attr">requests</span>:</span><br><span class="line">          <span class="attr">storage</span>: 10Gi</span><br></pre></td></tr></table></figure><p>创建并查看</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 deploy]# kubectl apply -f redis-cluster.<span class="property">yml</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 deploy]# kubectl get pods -n wiseco|grep redis-cluster</span><br><span class="line">redis-cluster-<span class="number">0</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          10m</span><br><span class="line">redis-cluster-<span class="number">1</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          10m</span><br><span class="line">redis-cluster-<span class="number">2</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          10m</span><br><span class="line">redis-cluster-<span class="number">3</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          10m</span><br><span class="line">redis-cluster-<span class="number">4</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          9m35s</span><br><span class="line">redis-cluster-<span class="number">5</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          9m25s</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 deploy]# kubectl get svc -n wiseco|grep redis-cluster</span><br><span class="line">redis-cluster    <span class="title class_">ClusterIP</span>   <span class="title class_">None</span>             &lt;none&gt;        <span class="number">6379</span>/<span class="variable constant_">TCP</span>,<span class="number">16379</span>/<span class="variable constant_">TCP</span>           10m</span><br></pre></td></tr></table></figure><p>查看PV、PVC</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 deploy]# kubectl get pv</span><br><span class="line"><span class="variable constant_">NAME</span>                                       <span class="variable constant_">CAPACITY</span>   <span class="variable constant_">ACCESS</span> <span class="variable constant_">MODES</span>   <span class="variable constant_">RECLAIM</span> <span class="variable constant_">POLICY</span>   <span class="variable constant_">STATUS</span>        <span class="variable constant_">CLAIM</span>                         <span class="variable constant_">STORAGECLASS</span>        <span class="variable constant_">REASON</span>   <span class="variable constant_">AGE</span></span><br><span class="line">pvc-20bcb3be-<span class="number">90e1</span>-<span class="number">4354</span>-bd11-4f442a3bd562   10Gi       <span class="variable constant_">RWX</span>            <span class="title class_">Delete</span>           <span class="title class_">Bound</span>         wiseco/data-redis-cluster-<span class="number">0</span>   redis-nfs-storage            19m</span><br><span class="line">pvc-3b53a31b-9a53-4bd4-93ff-2cf9fed551de   10Gi       <span class="variable constant_">RWX</span>            <span class="title class_">Delete</span>           <span class="title class_">Bound</span>         wiseco/data-redis-cluster-<span class="number">2</span>   redis-nfs-storage            12m</span><br><span class="line">pvc-43c0cba2-54a9-<span class="number">4416</span>-afb6-8b7730a199dc   10Gi       <span class="variable constant_">RWX</span>            <span class="title class_">Delete</span>           <span class="title class_">Bound</span>         wiseco/data-redis-cluster-<span class="number">1</span>   redis-nfs-storage            12m</span><br><span class="line">pvc-66daade5-1b97-41ce-a9e0-4cf88d63894d   10Gi       <span class="variable constant_">RWX</span>            <span class="title class_">Delete</span>           <span class="title class_">Terminating</span>   wiseco/data-redis-cluster-<span class="number">5</span>   redis-nfs-storage            11m</span><br><span class="line">pvc-dd62a086-<span class="number">1802</span>-446a-9f9d-35620f7f0b4a   10Gi       <span class="variable constant_">RWX</span>            <span class="title class_">Delete</span>           <span class="title class_">Bound</span>         wiseco/data-redis-cluster-<span class="number">4</span>   redis-nfs-storage            11m</span><br><span class="line">pvc-e5aa9802-b983-471c-a7da-32eebc497610   10Gi       <span class="variable constant_">RWX</span>            <span class="title class_">Delete</span>           <span class="title class_">Bound</span>         wiseco/data-redis-cluster-<span class="number">3</span>   redis-nfs-storage            12m</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 deploy]# kubectl get pvc -n wiseco</span><br><span class="line"><span class="variable constant_">NAME</span>                   <span class="variable constant_">STATUS</span>   <span class="variable constant_">VOLUME</span>                                     <span class="variable constant_">CAPACITY</span>   <span class="variable constant_">ACCESS</span> <span class="variable constant_">MODES</span>   <span class="variable constant_">STORAGECLASS</span>        <span class="variable constant_">AGE</span></span><br><span class="line">data-redis-cluster-<span class="number">0</span>   <span class="title class_">Bound</span>    pvc-20bcb3be-<span class="number">90e1</span>-<span class="number">4354</span>-bd11-4f442a3bd562   10Gi       <span class="variable constant_">RWX</span>            redis-nfs-storage   19m</span><br><span class="line">data-redis-cluster-<span class="number">1</span>   <span class="title class_">Bound</span>    pvc-43c0cba2-54a9-<span class="number">4416</span>-afb6-8b7730a199dc   10Gi       <span class="variable constant_">RWX</span>            redis-nfs-storage   12m</span><br><span class="line">data-redis-cluster-<span class="number">2</span>   <span class="title class_">Bound</span>    pvc-3b53a31b-9a53-4bd4-93ff-2cf9fed551de   10Gi       <span class="variable constant_">RWX</span>            redis-nfs-storage   12m</span><br><span class="line">data-redis-cluster-<span class="number">3</span>   <span class="title class_">Bound</span>    pvc-e5aa9802-b983-471c-a7da-32eebc497610   10Gi       <span class="variable constant_">RWX</span>            redis-nfs-storage   12m</span><br><span class="line">data-redis-cluster-<span class="number">4</span>   <span class="title class_">Bound</span>    pvc-dd62a086-<span class="number">1802</span>-446a-9f9d-35620f7f0b4a   10Gi       <span class="variable constant_">RWX</span>            redis-nfs-storage   11m</span><br><span class="line">data-redis-cluster-<span class="number">5</span>   <span class="title class_">Bound</span>    pvc-66daade5-1b97-41ce-a9e0-4cf88d63894d   10Gi       <span class="variable constant_">RWX</span>            redis-nfs-storage   11m</span><br></pre></td></tr></table></figure><p>3）查看NFS共享存储</p><p>NFS服务器（172.16.60.238），查看共享目录&#x2F;data&#x2F;storage&#x2F;k8s&#x2F;redis</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-harbor01 redis]# pwd</span><br><span class="line">/data/storage/k8s/redis</span><br><span class="line">[root@k8s-harbor01 redis]# ll</span><br><span class="line">total <span class="number">0</span></span><br><span class="line">drwxrwxrwx <span class="number">2</span> root root <span class="number">63</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">18</span>:<span class="number">59</span> wiseco-data-redis-cluster-<span class="number">0</span>-pvc-20bcb3be-<span class="number">90e1</span>-<span class="number">4354</span>-bd11-4f442a3bd562</span><br><span class="line">drwxrwxrwx <span class="number">2</span> root root <span class="number">63</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">18</span>:<span class="number">59</span> wiseco-data-redis-cluster-<span class="number">1</span>-pvc-43c0cba2-54a9-<span class="number">4416</span>-afb6-8b7730a199dc</span><br><span class="line">drwxrwxrwx <span class="number">2</span> root root <span class="number">63</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">18</span>:<span class="number">59</span> wiseco-data-redis-cluster-<span class="number">2</span>-pvc-3b53a31b-9a53-4bd4-93ff-2cf9fed551de</span><br><span class="line">drwxrwxrwx <span class="number">2</span> root root <span class="number">63</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">19</span>:<span class="number">00</span> wiseco-data-redis-cluster-<span class="number">3</span>-pvc-e5aa9802-b983-471c-a7da-32eebc497610</span><br><span class="line">drwxrwxrwx <span class="number">2</span> root root <span class="number">63</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">19</span>:<span class="number">00</span> wiseco-data-redis-cluster-<span class="number">4</span>-pvc-dd62a086-<span class="number">1802</span>-446a-9f9d-35620f7f0b4a</span><br><span class="line">drwxrwxrwx <span class="number">2</span> root root <span class="number">63</span> <span class="title class_">Feb</span>  <span class="number">4</span> <span class="number">19</span>:<span class="number">00</span> wiseco-data-redis-cluster-<span class="number">5</span>-pvc-66daade5-1b97-41ce-a9e0-4cf88d63894d</span><br><span class="line">[root@k8s-harbor01 redis]# ls .<span class="comment">/*</span></span><br><span class="line"><span class="comment">./wiseco-data-redis-cluster-0-pvc-20bcb3be-90e1-4354-bd11-4f442a3bd562:</span></span><br><span class="line"><span class="comment">appendonly.aof  nodes.conf  redis.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">./wiseco-data-redis-cluster-1-pvc-43c0cba2-54a9-4416-afb6-8b7730a199dc:</span></span><br><span class="line"><span class="comment">appendonly.aof  nodes.conf  redis.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">./wiseco-data-redis-cluster-2-pvc-3b53a31b-9a53-4bd4-93ff-2cf9fed551de:</span></span><br><span class="line"><span class="comment">appendonly.aof  nodes.conf  redis.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">./wiseco-data-redis-cluster-3-pvc-e5aa9802-b983-471c-a7da-32eebc497610:</span></span><br><span class="line"><span class="comment">appendonly.aof  nodes.conf  redis.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">./wiseco-data-redis-cluster-4-pvc-dd62a086-1802-446a-9f9d-35620f7f0b4a:</span></span><br><span class="line"><span class="comment">appendonly.aof  nodes.conf  redis.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">./wiseco-data-redis-cluster-5-pvc-66daade5-1b97-41ce-a9e0-4cf88d63894d:</span></span><br><span class="line"><span class="comment">appendonly.aof  nodes.conf  redis.log</span></span><br></pre></td></tr></table></figure><p><strong>3、初始化Redis Cluster集群</strong> 接下来是形成Redis Cluster集群，运行以下命令并键入yes以接受配置。 集群形式：前三个节点成为主节点，后三个节点成为从节点。</p><p><strong>需要注意：</strong> redis-trib.rb必须使用ip进行初始化redis集群，使用域名会报如下错误：*******&#x2F;redis&#x2F;client.rb:126:in &#96;call’: ERR Invalid node address specified: redis-cluster-0.redis-headless.sts-app.svc.cluster.local:6379 (Redis::CommandError)</p><p><strong>这里进行Redis Cluster集群初始化的命令：</strong> 以下命令并键入yes以接受配置。前三个节点成为主节点，后三个节点成为从节点。 kubectl exec -it redis-cluster-0 -n wiseco – redis-trib.rb create –replicas 1 $(kubectl get pods -l app&#x3D;redis-cluster -n wiseco -o jsonpath&#x3D;’{range.items[*]}{.status.podIP}:6379 ‘)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">先获取<span class="title class_">Redis</span> <span class="title class_">Cluster</span>集群的<span class="number">6</span>个节点<span class="title class_">Pod</span>的ip地址</span><br><span class="line">[root@k8s-master01 redis]# kubectl get pods -n wiseco -o wide|grep redis-cluster </span><br><span class="line">redis-cluster-<span class="number">0</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          4h34m   <span class="number">172.30</span><span class="number">.217</span><span class="number">.83</span>    k8s-node04   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-<span class="number">1</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          4h34m   <span class="number">172.30</span><span class="number">.85</span><span class="number">.217</span>    k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-<span class="number">2</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          4h34m   <span class="number">172.30</span><span class="number">.135</span><span class="number">.181</span>   k8s-node03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-<span class="number">3</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          4h34m   <span class="number">172.30</span><span class="number">.58</span><span class="number">.251</span>    k8s-node02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-<span class="number">4</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          4h33m   <span class="number">172.30</span><span class="number">.85</span><span class="number">.216</span>    k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">redis-cluster-<span class="number">5</span>                                 <span class="number">1</span>/<span class="number">1</span>     <span class="title class_">Running</span>   <span class="number">0</span>          4h33m   <span class="number">172.30</span><span class="number">.217</span><span class="number">.82</span>    k8s-node04   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# kubectl get pods -l app=redis-cluster -n wiseco -o jsonpath=<span class="string">&#x27;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:6379 &#x27;</span></span><br><span class="line"><span class="number">172.30</span><span class="number">.217</span><span class="number">.83</span>:<span class="number">6379</span> <span class="number">172.30</span><span class="number">.85</span><span class="number">.217</span>:<span class="number">6379</span> <span class="number">172.30</span><span class="number">.135</span><span class="number">.181</span>:<span class="number">6379</span> <span class="number">172.30</span><span class="number">.58</span><span class="number">.251</span>:<span class="number">6379</span> <span class="number">172.30</span><span class="number">.85</span><span class="number">.216</span>:<span class="number">6379</span> <span class="number">172.30</span><span class="number">.217</span><span class="number">.82</span>:<span class="number">6379</span> </span><br><span class="line"></span><br><span class="line">这里特别注意一下：</span><br><span class="line">上面命令最后一个单引号前面一定要有空格！！</span><br><span class="line">因为接下来进行<span class="title class_">Redis</span> <span class="title class_">Cluster</span>集群初始化的时候，集群节点间的ip+port之间要通过空格隔开。</span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# kubectl exec -it redis-cluster-<span class="number">0</span> -n wiseco -- redis-trib.<span class="property">rb</span> create --replicas <span class="number">1</span> $(kubectl get pods -l app=redis-cluster -n wiseco -o jsonpath=<span class="string">&#x27;&#123;range.items[*]&#125;&#123;.status.podIP&#125;:6379 &#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="title class_">Creating</span> cluster</span><br><span class="line">&gt;&gt;&gt; <span class="title class_">Performing</span> hash slots allocation on <span class="number">6</span> nodes...</span><br><span class="line"><span class="title class_">Using</span> <span class="number">3</span> <span class="attr">masters</span>:</span><br><span class="line"><span class="number">172.30</span><span class="number">.217</span><span class="number">.83</span>:<span class="number">6379</span></span><br><span class="line"><span class="number">172.30</span><span class="number">.85</span><span class="number">.217</span>:<span class="number">6379</span></span><br><span class="line"><span class="number">172.30</span><span class="number">.135</span><span class="number">.181</span>:<span class="number">6379</span></span><br><span class="line"><span class="title class_">Adding</span> replica <span class="number">172.30</span><span class="number">.58</span><span class="number">.251</span>:<span class="number">6379</span> to <span class="number">172.30</span><span class="number">.217</span><span class="number">.83</span>:<span class="number">6379</span></span><br><span class="line"><span class="title class_">Adding</span> replica <span class="number">172.30</span><span class="number">.85</span><span class="number">.216</span>:<span class="number">6379</span> to <span class="number">172.30</span><span class="number">.85</span><span class="number">.217</span>:<span class="number">6379</span></span><br><span class="line"><span class="title class_">Adding</span> replica <span class="number">172.30</span><span class="number">.217</span><span class="number">.82</span>:<span class="number">6379</span> to <span class="number">172.30</span><span class="number">.135</span><span class="number">.181</span>:<span class="number">6379</span></span><br><span class="line"><span class="attr">M</span>: e5a3154a17131075f35fb32953b8cf8d6cfc7df0 <span class="number">172.30</span><span class="number">.217</span><span class="number">.83</span>:<span class="number">6379</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="attr">M</span>: 961398483262f505a115957e7e4eda7ff3e64900 <span class="number">172.30</span><span class="number">.85</span><span class="number">.217</span>:<span class="number">6379</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line"><span class="attr">M</span>: 2d1440e37ea4f4e9f6d39d240367deaa609d324d <span class="number">172.30</span><span class="number">.135</span><span class="number">.181</span>:<span class="number">6379</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="attr">S</span>: 0d7bf40bf18d474509116437959b65551cd68b03 <span class="number">172.30</span><span class="number">.58</span><span class="number">.251</span>:<span class="number">6379</span></span><br><span class="line">   replicates e5a3154a17131075f35fb32953b8cf8d6cfc7df0</span><br><span class="line"><span class="attr">S</span>: 8cbf699a850c0dafe51524127a594fdbf0a27784 <span class="number">172.30</span><span class="number">.85</span><span class="number">.216</span>:<span class="number">6379</span></span><br><span class="line">   replicates 961398483262f505a115957e7e4eda7ff3e64900</span><br><span class="line"><span class="attr">S</span>: 2987a33f4ce2e412dcc11c1c1daa2538591cd930 <span class="number">172.30</span><span class="number">.217</span><span class="number">.82</span>:<span class="number">6379</span></span><br><span class="line">   replicates 2d1440e37ea4f4e9f6d39d240367deaa609d324d</span><br><span class="line"><span class="title class_">Can</span> I set the above configuration? (type <span class="string">&#x27;yes&#x27;</span> to accept): yes</span><br><span class="line">&gt;&gt;&gt; <span class="title class_">Nodes</span> configuration updated</span><br><span class="line">&gt;&gt;&gt; <span class="title class_">Assign</span> a different config epoch to each node</span><br><span class="line">&gt;&gt;&gt; <span class="title class_">Sending</span> <span class="variable constant_">CLUSTER</span> <span class="variable constant_">MEET</span> messages to join the cluster</span><br><span class="line"><span class="title class_">Waiting</span> <span class="keyword">for</span> the cluster to join......</span><br><span class="line">&gt;&gt;&gt; <span class="title class_">Performing</span> <span class="title class_">Cluster</span> <span class="title class_">Check</span> (using node <span class="number">172.30</span><span class="number">.217</span><span class="number">.83</span>:<span class="number">6379</span>)</span><br><span class="line"><span class="attr">M</span>: e5a3154a17131075f35fb32953b8cf8d6cfc7df0 <span class="number">172.30</span><span class="number">.217</span><span class="number">.83</span>:<span class="number">6379</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="number">0</span>-<span class="number">5460</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="attr">M</span>: 961398483262f505a115957e7e4eda7ff3e64900 <span class="number">172.30</span><span class="number">.85</span><span class="number">.217</span>:<span class="number">6379</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="number">5461</span>-<span class="number">10922</span> (<span class="number">5462</span> slots) master</span><br><span class="line"><span class="attr">M</span>: 2d1440e37ea4f4e9f6d39d240367deaa609d324d <span class="number">172.30</span><span class="number">.135</span><span class="number">.181</span>:<span class="number">6379</span></span><br><span class="line">   <span class="attr">slots</span>:<span class="number">10923</span>-<span class="number">16383</span> (<span class="number">5461</span> slots) master</span><br><span class="line"><span class="attr">M</span>: 0d7bf40bf18d474509116437959b65551cd68b03 <span class="number">172.30</span><span class="number">.58</span><span class="number">.251</span>:<span class="number">6379</span></span><br><span class="line">   <span class="attr">slots</span>: (<span class="number">0</span> slots) master</span><br><span class="line">   replicates e5a3154a17131075f35fb32953b8cf8d6cfc7df0</span><br><span class="line"><span class="attr">M</span>: 8cbf699a850c0dafe51524127a594fdbf0a27784 <span class="number">172.30</span><span class="number">.85</span><span class="number">.216</span>:<span class="number">6379</span></span><br><span class="line">   <span class="attr">slots</span>: (<span class="number">0</span> slots) master</span><br><span class="line">   replicates 961398483262f505a115957e7e4eda7ff3e64900</span><br><span class="line"><span class="attr">M</span>: 2987a33f4ce2e412dcc11c1c1daa2538591cd930 <span class="number">172.30</span><span class="number">.217</span><span class="number">.82</span>:<span class="number">6379</span></span><br><span class="line">   <span class="attr">slots</span>: (<span class="number">0</span> slots) master</span><br><span class="line">   replicates 2d1440e37ea4f4e9f6d39d240367deaa609d324d</span><br><span class="line">[<span class="variable constant_">OK</span>] <span class="title class_">All</span> nodes agree about slots configuration.</span><br><span class="line">&gt;&gt;&gt; <span class="title class_">Check</span> <span class="keyword">for</span> open slots...</span><br><span class="line">&gt;&gt;&gt; <span class="title class_">Check</span> slots coverage...</span><br><span class="line">[<span class="variable constant_">OK</span>] <span class="title class_">All</span> <span class="number">16384</span> slots covered.　</span><br></pre></td></tr></table></figure><p>通过上面初始化信息，可以看出集群关系：</p><p>redis-cluster-0是master节点，redis-cluster-3是它的从节点。</p><p>redis-cluster-1是master节点，redis-cluster-4是它的从节点。</p><p>redis-cluster-2是master节点，redis-cluster-5是它的从节点。</p><p><strong>4、验证Redis Cluster集群部署</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[root@k8s-master01 redis]# kubectl exec -it redis-cluster-<span class="number">0</span> -n wiseco -- redis-cli cluster info                                        </span><br><span class="line"><span class="attr">cluster_state</span>:ok</span><br><span class="line"><span class="attr">cluster_slots_assigned</span>:<span class="number">16384</span></span><br><span class="line"><span class="attr">cluster_slots_ok</span>:<span class="number">16384</span></span><br><span class="line"><span class="attr">cluster_slots_pfail</span>:<span class="number">0</span></span><br><span class="line"><span class="attr">cluster_slots_fail</span>:<span class="number">0</span></span><br><span class="line"><span class="attr">cluster_known_nodes</span>:<span class="number">6</span></span><br><span class="line"><span class="attr">cluster_size</span>:<span class="number">3</span></span><br><span class="line"><span class="attr">cluster_current_epoch</span>:<span class="number">6</span></span><br><span class="line"><span class="attr">cluster_my_epoch</span>:<span class="number">1</span></span><br><span class="line"><span class="attr">cluster_stats_messages_ping_sent</span>:<span class="number">130</span></span><br><span class="line"><span class="attr">cluster_stats_messages_pong_sent</span>:<span class="number">137</span></span><br><span class="line"><span class="attr">cluster_stats_messages_sent</span>:<span class="number">267</span></span><br><span class="line"><span class="attr">cluster_stats_messages_ping_received</span>:<span class="number">132</span></span><br><span class="line"><span class="attr">cluster_stats_messages_pong_received</span>:<span class="number">130</span></span><br><span class="line"><span class="attr">cluster_stats_messages_meet_received</span>:<span class="number">5</span></span><br><span class="line"><span class="attr">cluster_stats_messages_received</span>:<span class="number">267</span></span><br><span class="line"></span><br><span class="line">[root@k8s-master01 redis]# <span class="keyword">for</span> x <span class="keyword">in</span> $(seq <span class="number">0</span> <span class="number">5</span>); <span class="keyword">do</span> echo <span class="string">&quot;redis-cluster-$x&quot;</span>; kubectl exec redis-cluster-$x -n wiseco -- redis-cli role; echo; done </span><br><span class="line">redis-cluster-<span class="number">0</span></span><br><span class="line">master</span><br><span class="line"><span class="number">168</span></span><br><span class="line"><span class="number">172.30</span><span class="number">.58</span><span class="number">.251</span></span><br><span class="line"><span class="number">6379</span></span><br><span class="line"><span class="number">168</span></span><br><span class="line"></span><br><span class="line">redis-cluster-<span class="number">1</span></span><br><span class="line">master</span><br><span class="line"><span class="number">168</span></span><br><span class="line"><span class="number">172.30</span><span class="number">.85</span><span class="number">.216</span></span><br><span class="line"><span class="number">6379</span></span><br><span class="line"><span class="number">168</span></span><br><span class="line"></span><br><span class="line">redis-cluster-<span class="number">2</span></span><br><span class="line">master</span><br><span class="line"><span class="number">182</span></span><br><span class="line"><span class="number">172.30</span><span class="number">.217</span><span class="number">.82</span></span><br><span class="line"><span class="number">6379</span></span><br><span class="line"><span class="number">168</span></span><br><span class="line"></span><br><span class="line">redis-cluster-<span class="number">3</span></span><br><span class="line">slave</span><br><span class="line"><span class="number">172.30</span><span class="number">.217</span><span class="number">.83</span></span><br><span class="line"><span class="number">6379</span></span><br><span class="line">connected</span><br><span class="line"><span class="number">182</span></span><br><span class="line"></span><br><span class="line">redis-cluster-<span class="number">4</span></span><br><span class="line">slave</span><br><span class="line"><span class="number">172.30</span><span class="number">.85</span><span class="number">.217</span></span><br><span class="line"><span class="number">6379</span></span><br><span class="line">connected</span><br><span class="line"><span class="number">168</span></span><br><span class="line"></span><br><span class="line">redis-cluster-<span class="number">5</span></span><br><span class="line">slave</span><br><span class="line"><span class="number">172.30</span><span class="number">.135</span><span class="number">.181</span></span><br><span class="line"><span class="number">6379</span></span><br><span class="line">connected</span><br><span class="line"><span class="number">182</span></span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://cloud.tencent.com/developer/article/1796311?from=article.detail.1796318">转载-K8S部署Redis Cluster集群（三主三从模式） - 部署笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_RabbitMQ(镜像模式)-转载</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_RabbitMQ(%E9%95%9C%E5%83%8F%E6%A8%A1%E5%BC%8F)-%E8%BD%AC%E8%BD%BD/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_RabbitMQ(%E9%95%9C%E5%83%8F%E6%A8%A1%E5%BC%8F)-%E8%BD%AC%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p><strong>RabbitMQ 简介</strong></p><p>以熟悉的电商场景为例，如果商品服务和订单服务是两个不同的微服务，在下单的过程中订单服务需要调用商品服务进行扣库存操作。按照传统的方式，下单过程要等到调用完毕之后才能返回下单成功，如果网络产生波动等原因使得商品服务扣库存延迟或者失败，会带来较差的用户体验，如果在高并发的场景下，这样的处理显然是不合适的，那怎么进行优化呢？这就需要<a href="https://cloud.tencent.com/product/cmq?from=10680">消息队列</a>登场了。</p><p>消息队列提供一个异步通信机制，消息的发送者不必一直等待到消息被成功处理才返回，而是立即返回。消息中间件负责处理网络通信，如果网络连接不可用，消息被暂存于队列当中，当网络畅通的时候在将消息转发给相应的应用程序或者服务，当然前提是这些服务订阅了该队列。如果在商品服务和订单服务之间使用消息中间件，既可以提高并发量，又降低服务之间的耦合度。</p><p>RabbitMQ就是这样一款我们苦苦追寻的消息队列。RabbitMQ是一个开源的消息代理的队列服务器，用来通过普通协议在完全不同的应用之间共享数据。</p><p><strong>RabbitMQ 的特点</strong></p><p>开源、性能优秀，速度快，稳定性保障提供可靠性消息投递模式、返回模式与Spring AMQP完美整合，API丰富集群模式丰富，表达式配置，HA模式，镜像队列模型保证数据不丢失的前提做到高可靠性、可用性</p><p><strong>RabbitMQ 典型应用场景</strong></p><ul><li>异步处理：把消息放入消息中间件中，等到需要的时候再去处理。</li><li>流量削峰：例如秒杀活动，在短时间内访问量急剧增加，使用消息队列，当消息队列满了就拒绝响应，跳转到错误页面，这样就可以使得系统不会因为超负载而崩溃。</li><li>日志处理；（不过一般日志处理都使用Kafka这种消息队列）</li><li>应用解耦：假设某个服务A需要给许多个服务(B、C、D)发送消息，当某个服务(例如B)不需要发送消息了，服务A需要改代码再次部署；当新加入一个服务(服务E)需要服务A的消息的时候，也需要改代码重新部署；另外服务A也要考虑其他服务挂掉，没有收到消息怎么办？要不要重新发送呢？是不是很麻烦，使用MQ发布订阅模式，服务A只生产消息发送到MQ，B、C、D从MQ中读取消息，需要A的消息就订阅，不需要了就取消订阅，服务A不再操心其他的事情，使用这种方式可以降低服务或者系统之间的耦合。</li></ul><p><strong>RabbitMQ集群节点之间是如何相互认证的：</strong></p><ul><li>通过Erlang Cookie，相当于共享秘钥的概念，长度任意，只要所有节点都一致即可。</li><li>rabbitmq server在启动的时候，erlang VM会自动创建一个随机的cookie文件。cookie文件的位置是&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie 或者 &#x2F;root&#x2F;.erlang.cookie，为保证cookie的完全一致，采用从一个节点copy的方式。</li></ul><p>Erlang Cookie是保证不同节点可以相互通信的密钥，要保证集群中的不同节点相互通信必须共享相同的Erlang Cookie。具体的目录存放在&#x2F;var&#x2F;lib&#x2F;rabbitmq&#x2F;.erlang.cookie。</p><p>说明：这就要从rabbitmqctl命令的工作原理说起，RabbitMQ底层是通过Erlang架构来实现的，所以rabbitmqctl会启动Erlang节点，并基于Erlang节点来使用Erlang系统连接RabbitMQ节点，在连接过程中需要正确的Erlang Cookie和节点名称，Erlang节点通过交换Erlang Cookie以获得认证。</p><p><strong>RabbitMQ集群模式</strong></p><ul><li>单机模式</li><li>普通集群模式（无高可用性）</li><li>镜像集群模式（高可用性），最常用的集群模式。</li></ul><p><strong>RabbitMQ集群故障处理机制：</strong></p><ul><li>rabbitmq broker集群允许个体节点down机，</li><li>对应集群的的网络分区问题（ network partitions）</li></ul><p>RabbitMQ集群推荐用于LAN环境，不适用WAN环境；</p><p>要通过WAN连接broker，Shovel or Federation插件是最佳的解决方案；Shovel or Federation不同于集群。</p><p><strong>RabbitMQ节点类型</strong></p><ul><li>RAM node：只保存状态到内存。内存节点将所有的队列、交换机、绑定、用户、权限和vhost的元数据定义存储在内存中，好处是可以使得像交换机和队列声明等操作更加的快速。</li><li>Disk node：将元数据存储在磁盘中。单节点系统只允许磁盘类型的节点，防止重启RabbitMQ的时候，丢失系统的配置信息。</li></ul><p>内存节点虽然不写入磁盘，但是它执行比磁盘节点要好。RabbitMQ集群中，只需要一个磁盘节点来保存状态就足够了；如果集群中只有内存节点，那么不能停止它们，否则所有的状态，消息等都会丢失。</p><p>问题说明：</p><ul><li>RabbitMQ要求在集群中至少有一个磁盘节点，所有其他节点可以是内存节点，当节点加入或者离开集群时，必须要将该变更通知到至少一个磁盘节点。</li><li>如果集群中唯一的一个磁盘节点崩溃的话，集群仍然可以保持运行，但是无法进行其他操作（增删改查），直到节点恢复。</li></ul><p>解决方案：设置两个磁盘节点，至少有一个是可用的，可以保存元数据的更改。</p><p><strong>RabbitMQ集群的节点运行模式：</strong></p><ul><li>为保证数据持久性，当前所有node节点跑在disk模式。</li><li>如果今后压力大，需要提高性能，考虑采用ram模式。</li></ul><p><strong>RabbitMQ集群记录</strong></p><p>本案例采用 “镜像模式”，即队列为镜像队列，队列消息存在集群的每个节点上。</p><p><strong>1、版本说明</strong></p><p>因为考虑到较早版本rabbitmq在k8s上的集群部署是使用autocluster插件去调用kubernetes apiserver来获取rabbitmq服务的endpoints，进而获取node节点信息，并自动加入集群，但是现在autocluster已不再更新了，并且只支持3.6.x版本，故而放弃这种方式。</p><p>对于3.7.x或更新的版本，现在市场主流是使用 peer discovery subsystem来构建rabbitmq-cluster，<a href="https://blog.csdn.net/coco3848/article/details/107708713">参考这里</a>。</p><p><strong>2、部署方式</strong></p><p>在Kubernetes上搭建RabbitMQ有4种部署方法（IP模式、Pod与Server的DNS模式、Statefulset 与Headless Service模式、hostname模式），这里选择StatefulSet与Headless Service模式部署有状态的RabbitMQ集群。</p><p><strong>3、使用NFS配置StatefulSet的动态持久化存储</strong></p><p>1）在NFS服务器端（188.188.3.110）通过nfs创建RabbitMQ集群的共享目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /nfs/rabbitmq</span><br></pre></td></tr></table></figure><p>2）创建nfs的rbac</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wiseco</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">nfs-provisioner-runner</span></span><br><span class="line">   <span class="attr">namespace:</span> <span class="string">wiseco</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">      <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">      <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">      <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">      <span class="attr">verbs:</span> [<span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;services&quot;</span>, <span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">      <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>,<span class="string">&quot;create&quot;</span>,<span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>,<span class="string">&quot;update&quot;</span>]</span><br><span class="line">   <span class="bullet">-</span>  <span class="attr">apiGroups:</span> [<span class="string">&quot;extensions&quot;</span>]</span><br><span class="line">      <span class="attr">resources:</span> [<span class="string">&quot;podsecuritypolicies&quot;</span>]</span><br><span class="line">      <span class="attr">resourceNames:</span> [<span class="string">&quot;nfs-provisioner&quot;</span>]</span><br><span class="line">      <span class="attr">verbs:</span> [<span class="string">&quot;use&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-provisioner</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">wiseco</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f nfs-rbac.yaml</span><br><span class="line">$ kubectl get sa,clusterrole,clusterrolebinding -n wiseco|grep nfs</span><br></pre></td></tr></table></figure><p>3）创建 RabbitMQ 集群的 storageclass</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-nfs-storage</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wiseco</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">rabbitmq/nfs</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Retain</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f rabbitmq-nfs-class.yaml</span><br><span class="line">$ kubectl get sc</span><br></pre></td></tr></table></figure><p>4）创建集群的 nfs-client-provisioner</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wiseco</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">rabbitmq-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">rabbitmq-nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">nfs-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rabbitmq-nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/open-ali/nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span>  <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">rabbitmq/nfs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">188.188</span><span class="number">.3</span><span class="number">.110</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/nfs/rabbitmq</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">188.188</span><span class="number">.3</span><span class="number">.110</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfs/rabbitmq</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f rabbitmq-nfs.yml</span><br><span class="line">$ kubectl get pods -n wiseco|grep rabbitmq</span><br></pre></td></tr></table></figure><p><strong>4、部署RabbitMQ基于镜像模式的集群</strong></p><p>采用StatefulSet与Headless Service模式部署有状态的RabbitMQ集群。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-management</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wiseco</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">15672</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wiseco</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">amqp</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">4369</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">epmd</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">25672</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-dist</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">wiseco</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">&quot;rabbitmq&quot;</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">                <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;app&quot;</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">rabbitmq</span></span><br><span class="line">              <span class="attr">topologyKey:</span> <span class="string">&quot;kubernetes.io/hostname&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rabbitmq</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">rabbitmq:3.8.3-management</span></span><br><span class="line">        <span class="attr">lifecycle:</span></span><br><span class="line">          <span class="attr">postStart:</span></span><br><span class="line">            <span class="attr">exec:</span></span><br><span class="line">              <span class="attr">command:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">                if [ -z &quot;$(grep rabbitmq /etc/resolv.conf)&quot; ]; then</span></span><br><span class="line"><span class="string">                  sed &quot;s/^search \([^ ]\+\)/search rabbitmq.\1 \1/&quot; /etc/resolv.conf &gt; /etc/resolv.conf.new;</span></span><br><span class="line"><span class="string">                  cat /etc/resolv.conf.new &gt; /etc/resolv.conf;</span></span><br><span class="line"><span class="string">                  rm /etc/resolv.conf.new;</span></span><br><span class="line"><span class="string">                fi;</span></span><br><span class="line"><span class="string">                until rabbitmqctl node_health_check; do sleep 1; done;</span></span><br><span class="line"><span class="string">                if [ -z &quot;$(rabbitmqctl cluster_status | grep rabbitmq-0)&quot; ]; then</span></span><br><span class="line"><span class="string">                  touch /gotit</span></span><br><span class="line"><span class="string">                  rabbitmqctl stop_app;</span></span><br><span class="line"><span class="string">                  rabbitmqctl reset;</span></span><br><span class="line"><span class="string">                  rabbitmqctl join_cluster rabbit@rabbitmq-0;</span></span><br><span class="line"><span class="string">                  rabbitmqctl start_app;</span></span><br><span class="line"><span class="string">                else</span></span><br><span class="line"><span class="string">                  touch /notget</span></span><br><span class="line"><span class="string">                fi;</span></span><br><span class="line"><span class="string"></span>        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MY_POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_ERLANG_COOKIE</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;YZSDHWMFSMKEMBDHSGGZ&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_NODENAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;rabbit@$(MY_POD_NAME)&quot;</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">15672</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">amqp</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">containerPort:</span> <span class="number">5672</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">tcpSocket:</span></span><br><span class="line">            <span class="attr">port:</span> <span class="string">amqp</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">tcpSocket:</span></span><br><span class="line">            <span class="attr">port:</span> <span class="string">amqp</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">15</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">20</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rabbitmq-data</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/var/lib/rabbitmq</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">rabbitmq-data</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">volume.beta.kubernetes.io/storage-class:</span> <span class="string">&quot;rabbitmq-nfs-storage&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">10Gi</span></span><br></pre></td></tr></table></figure><p>查看并创建</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f rabbitmq.yml</span><br><span class="line">$ kubectl get pods -n wiseco -o wide|grep rabbitmq</span><br><span class="line">$ kubectl get svc -n wiseco|grep rabbitmq</span><br></pre></td></tr></table></figure><p>查看PV、PVC</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pv,pvc -n wiseco</span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS     CLAIM                             STORAGECLASS           REASON   AGE</span><br><span class="line">persistentvolume/pvc-1d33d0d9-75de-493c-adc5-4e2f481b9de4   10Gi       RWX            Retain           Released   wiseco/rabbitmq-data-rabbitmq-1   rabbitmq-nfs-storage            123m</span><br><span class="line">persistentvolume/pvc-2027b878-cb39-45af-818e-b09a1d5fda8d   10Gi       RWX            Retain           Bound      wiseco/rabbitmq-data-rabbitmq-1   rabbitmq-nfs-storage            102m</span><br><span class="line">persistentvolume/pvc-aeae1401-69a9-48d1-98fb-cb0476c4a6a8   10Gi       RWX            Retain           Released   wiseco/rabbitmq-data-rabbitmq-2   rabbitmq-nfs-storage            121m</span><br><span class="line">persistentvolume/pvc-c3fdfdb4-6dd2-4399-9753-8ad5f54950c9   10Gi       RWX            Retain           Bound      wiseco/rabbitmq-data-rabbitmq-2   rabbitmq-nfs-storage            100m</span><br><span class="line">persistentvolume/pvc-d820aa31-057b-407a-83da-1ead043e9816   10Gi       RWX            Retain           Released   wiseco/rabbitmq-data-rabbitmq-0   rabbitmq-nfs-storage            124m</span><br><span class="line">persistentvolume/pvc-ead18ace-7c44-46a1-80e7-4203549dc624   10Gi       RWX            Retain           Bound      wiseco/rabbitmq-data-rabbitmq-0   rabbitmq-nfs-storage            103m</span><br><span class="line"></span><br><span class="line">NAME                                             STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS           AGE</span><br><span class="line">persistentvolumeclaim/rabbitmq-data-rabbitmq-0   Bound    pvc-ead18ace-7c44-46a1-80e7-4203549dc624   10Gi       RWX            rabbitmq-nfs-storage   103m</span><br><span class="line">persistentvolumeclaim/rabbitmq-data-rabbitmq-1   Bound    pvc-2027b878-cb39-45af-818e-b09a1d5fda8d   10Gi       RWX            rabbitmq-nfs-storage   102m</span><br><span class="line">persistentvolumeclaim/rabbitmq-data-rabbitmq-2   Bound    pvc-c3fdfdb4-6dd2-4399-9753-8ad5f54950c9   10Gi       RWX            rabbitmq-nfs-storage   100m</span><br></pre></td></tr></table></figure><p>查看NFS共享存储 NFS服务器（188.188.3.110），查看共享目录&#x2F;nfs&#x2F;rabbitmq</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /nfs/rabbitmq/ &amp;&amp; ll</span><br><span class="line">total 0</span><br><span class="line">drwxrwxrwx 5 polkitd root 70 Aug 25 14:43 wiseco-rabbitmq-data-rabbitmq-0-pvc-ead18ace-7c44-46a1-80e7-4203549dc624</span><br><span class="line">drwxrwxrwx 5 polkitd root 70 Aug 25 14:45 wiseco-rabbitmq-data-rabbitmq-1-pvc-2027b878-cb39-45af-818e-b09a1d5fda8d</span><br><span class="line">drwxrwxrwx 5 polkitd root 70 Aug 25 14:47 wiseco-rabbitmq-data-rabbitmq-2-pvc-c3fdfdb4-6dd2-4399-9753-8ad5f54950c9</span><br><span class="line"></span><br><span class="line">$ ll ./*/.erlang.cookie</span><br><span class="line">-rw------- 1 polkitd input 21 Aug 25 14:43 ./wiseco-rabbitmq-data-rabbitmq-0-pvc-ead18ace-7c44-46a1-80e7-4203549dc624/.erlang.cookie</span><br><span class="line">-rw------- 1 polkitd input 21 Aug 25 14:44 ./wiseco-rabbitmq-data-rabbitmq-1-pvc-2027b878-cb39-45af-818e-b09a1d5fda8d/.erlang.cookie</span><br><span class="line">-rw------- 1 polkitd input 21 Aug 25 14:47 ./wiseco-rabbitmq-data-rabbitmq-2-pvc-c3fdfdb4-6dd2-4399-9753-8ad5f54950c9/.erlang.cookie</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> ./*/.erlang.cookie</span><br><span class="line">YZSDHWMFSMKEMBDHSGGZ</span><br><span class="line">YZSDHWMFSMKEMBDHSGGZ</span><br><span class="line">YZSDHWMFSMKEMBDHSGGZ</span><br></pre></td></tr></table></figure><p><strong>5、验证RabbitMQ集群</strong></p><p>进入RabbitMQ集群节点Pod容器，查看RabbitMQ集群状态（三个Pod查看的集群状态是一样的）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -ti rabbitmq-0 -n wiseco -- rabbitmqctl cluster_status</span><br><span class="line">Cluster status of node rabbit@rabbitmq-0 ...</span><br><span class="line">Basics</span><br><span class="line"></span><br><span class="line">Cluster name: rabbit@rabbitmq-0.rabbitmq.wiseco.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Disk Nodes</span><br><span class="line"></span><br><span class="line">rabbit@rabbitmq-0</span><br><span class="line">rabbit@rabbitmq-1</span><br><span class="line">rabbit@rabbitmq-2</span><br><span class="line"></span><br><span class="line">Running Nodes</span><br><span class="line"></span><br><span class="line">rabbit@rabbitmq-0</span><br><span class="line">rabbit@rabbitmq-1</span><br><span class="line">rabbit@rabbitmq-2</span><br><span class="line"></span><br><span class="line">Versions</span><br><span class="line"></span><br><span class="line">rabbit@rabbitmq-0: RabbitMQ 3.8.3 on Erlang 22.3.4.1</span><br><span class="line">rabbit@rabbitmq-1: RabbitMQ 3.8.3 on Erlang 22.3.4.1</span><br><span class="line">rabbit@rabbitmq-2: RabbitMQ 3.8.3 on Erlang 22.3.4.1</span><br><span class="line"></span><br><span class="line">Alarms</span><br><span class="line"></span><br><span class="line">(none)</span><br><span class="line"></span><br><span class="line">Network Partitions</span><br><span class="line"></span><br><span class="line">(none)</span><br><span class="line"></span><br><span class="line">Listeners</span><br><span class="line"></span><br><span class="line">Node: rabbit@rabbitmq-0, interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication</span><br><span class="line">Node: rabbit@rabbitmq-0, interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0</span><br><span class="line">Node: rabbit@rabbitmq-0, interface: [::], port: 15672, protocol: http, purpose: HTTP API</span><br><span class="line">Node: rabbit@rabbitmq-1, interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication</span><br><span class="line">Node: rabbit@rabbitmq-1, interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0</span><br><span class="line">Node: rabbit@rabbitmq-1, interface: [::], port: 15672, protocol: http, purpose: HTTP API</span><br><span class="line">Node: rabbit@rabbitmq-2, interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication</span><br><span class="line">Node: rabbit@rabbitmq-2, interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0</span><br><span class="line">Node: rabbit@rabbitmq-2, interface: [::], port: 15672, protocol: http, purpose: HTTP API</span><br><span class="line"></span><br><span class="line">Feature flags</span><br><span class="line"></span><br><span class="line">Flag: drop_unroutable_metric, state: enabled</span><br><span class="line">Flag: empty_basic_get_metric, state: enabled</span><br><span class="line">Flag: implicit_default_bindings, state: enabled</span><br><span class="line">Flag: quorum_queue, state: enabled</span><br><span class="line">Flag: virtual_host_metadata, state: enabled</span><br></pre></td></tr></table></figure><p><strong>6、访问RabbitMQ的Web界面，查看集群状态</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc -n wiseco|grep rabbitmq</span><br><span class="line">rabbitmq              ClusterIP   None             &lt;none&gt;        5672/TCP,4369/TCP,25672/TCP   109m</span><br><span class="line">rabbitmq-management   NodePort    120.100.203.20   &lt;none&gt;        15672:30324/TCP               109m</span><br></pre></td></tr></table></figure><p>通过K8S的node节点的30324访问web页面，用户名和密码都是guest</p><p><strong>7、RabbitMQ的日常操作命令</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1）用户管理</span><br><span class="line">=====================================================================================================</span><br><span class="line">新增一个用户</span><br><span class="line"><span class="comment"># rabbitmqctl add_user Username Password</span></span><br><span class="line"></span><br><span class="line">删除一个用户</span><br><span class="line"><span class="comment"># rabbitmqctl delete_user Username</span></span><br><span class="line"></span><br><span class="line">修改用户的密码</span><br><span class="line"><span class="comment"># rabbitmqctl change_password Username Newpassword</span></span><br><span class="line"></span><br><span class="line">查看当前用户列表</span><br><span class="line"><span class="comment"># rabbitmqctl list_users</span></span><br><span class="line"></span><br><span class="line">比如：修改guest用户密码、新增或删除一个用户</span><br><span class="line">查看当前用户列表</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl list_users</span></span><br><span class="line">Listing <span class="built_in">users</span> ...</span><br><span class="line">user    tags</span><br><span class="line">guest   [administrator]</span><br><span class="line"></span><br><span class="line">修改guest用户密码为 guest@123</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl change_password guest guest@123</span></span><br><span class="line">Changing password <span class="keyword">for</span> user <span class="string">&quot;guest&quot;</span> ..</span><br><span class="line"></span><br><span class="line">新增一个用户，用户名为kevin，密码为 kevin@123</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl add_user kevin kevin@123</span></span><br><span class="line">Adding user <span class="string">&quot;kevin&quot;</span> ...</span><br><span class="line"></span><br><span class="line">查看当前用户列表</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl list_users</span></span><br><span class="line">Listing <span class="built_in">users</span> ...</span><br><span class="line">user    tags</span><br><span class="line">guest   [administrator]</span><br><span class="line">kevin   []</span><br><span class="line"></span><br><span class="line">设置kevin用户角色为administrator</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl set_user_tags kevin administrator</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">&quot;kevin&quot;</span> to [administrator] ...</span><br><span class="line"></span><br><span class="line">查看当前用户列表</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl list_users</span></span><br><span class="line">Listing <span class="built_in">users</span> ...</span><br><span class="line">user    tags</span><br><span class="line">guest   [administrator]</span><br><span class="line">kevin   [administrator]</span><br><span class="line"></span><br><span class="line">修改kevin用户角色为monitoring、policymaker</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl set_user_tags kevin monitoring policymaker</span></span><br><span class="line">Setting tags <span class="keyword">for</span> user <span class="string">&quot;kevin&quot;</span> to [monitoring, policymaker] ...</span><br><span class="line"></span><br><span class="line">查看当前用户列表</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl list_users</span></span><br><span class="line">Listing <span class="built_in">users</span> ...</span><br><span class="line">user    tags</span><br><span class="line">guest   [administrator]</span><br><span class="line">kevin   [monitoring, policymaker]</span><br><span class="line"></span><br><span class="line">删除kevin用户</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl delete_user kevin</span></span><br><span class="line">Deleting user <span class="string">&quot;kevin&quot;</span> ...</span><br><span class="line"></span><br><span class="line">查看当前用户列表</span><br><span class="line">[root@k8s-master01 deployment]<span class="comment"># kubectl exec -ti rabbitmq-0 -n wiseco -- rabbitmqctl list_users</span></span><br><span class="line">Listing <span class="built_in">users</span> ...</span><br><span class="line">user    tags</span><br><span class="line">guest   [administrator]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2）用户角色</span><br><span class="line">=====================================================================================================</span><br><span class="line">用户角色分类</span><br><span class="line">用户角色可分为五类：超级管理员、监控者、策略制定者、普通管理者以及其他。</span><br><span class="line">超级管理员 (administrator)</span><br><span class="line">可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</span><br><span class="line">监控者 (monitoring)</span><br><span class="line">可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</span><br><span class="line">策略制定者 (policymaker)</span><br><span class="line">可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。但无法查看节点的相关信息</span><br><span class="line">普通管理者 (management)</span><br><span class="line">仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</span><br><span class="line">其他</span><br><span class="line">无法登陆管理控制台，通常就是普通的生产者和消费者。</span><br><span class="line"></span><br><span class="line">相关操作命令：</span><br><span class="line">设置用户角色的命令为：</span><br><span class="line"><span class="comment"># rabbitmqctl set_user_tags User Tag</span></span><br><span class="line"></span><br><span class="line">其中：</span><br><span class="line">User为用户名</span><br><span class="line">Tag为角色名 (对应于上面的administrator，monitoring，policymaker，management，或其他自定义名称)。</span><br><span class="line"></span><br><span class="line">也可以给同一用户设置多个角色，例如：</span><br><span class="line"><span class="comment"># rabbitmqctl set_user_tags kevin monitoring policymaker</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3）用户权限</span><br><span class="line">=====================================================================================================</span><br><span class="line">用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。</span><br><span class="line">配置权限会影响到exchange，queue的声明和删除。</span><br><span class="line">读写权限影响到从queue里取消息，向exchange发送消息以及queue和exchange的绑定(<span class="built_in">bind</span>)操作。</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"> 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；</span><br><span class="line">向exchange发送消息需要具有exchange的可写权限；</span><br><span class="line">从queue里取数据需要具有queue的可读权限。</span><br><span class="line"></span><br><span class="line">相关操作命令：</span><br><span class="line">设置用户权限</span><br><span class="line"><span class="comment"># rabbitmqctl set_permissions -p VHostPath User ConfP WriteP ReadP</span></span><br><span class="line"></span><br><span class="line">查看(指定hostpath)所有用户的权限信息</span><br><span class="line"><span class="comment"># rabbitmqctl list_permissions [-p VHostPath]</span></span><br><span class="line"></span><br><span class="line">查看指定用户的权限信息</span><br><span class="line"><span class="comment"># rabbitmqctl list_user_permissions User</span></span><br><span class="line"></span><br><span class="line">清除用户的权限信息</span><br><span class="line"><span class="comment"># rabbitmqctl clear_permissions [-p VHostPath] User</span></span><br><span class="line"></span><br><span class="line">设置节点类型</span><br><span class="line">RabbitMQ节点类型分为内存节点和硬盘节点。</span><br><span class="line">如果你想更换节点类型可以通过命令修改：</span><br><span class="line"><span class="comment"># rabbitmqctl stop_app</span></span><br><span class="line"><span class="comment"># rabbitmqctl change_cluster_node_type dist</span></span><br><span class="line"><span class="comment"># rabbitmqctl change_cluster_node_type ram</span></span><br><span class="line"><span class="comment"># rabbitmqctl start_app</span></span><br></pre></td></tr></table></figure><p><strong>8、模拟RabbitMQ节点故障</strong></p><p>模拟故障，重启其中的一个node节点，比如rabbitmq-0，然后观察集群状态：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -n wiseco -o wide|grep rabbitmq</span><br><span class="line">rabbitmq-0                                         1/1     Running   0          111m   172.25.214.239   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rabbitmq-1                                         1/1     Running   0          110m   172.18.195.35    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rabbitmq-2                                         1/1     Running   0          108m   172.17.125.23    k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rabbitmq-nfs-client-provisioner-74b977d746-xqh6t   1/1     Running   2          111m   172.25.214.238   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除rabbitmq-0节点</span></span><br><span class="line">$ kubectl delete pods rabbitmq-0 -n wiseco</span><br><span class="line">pod <span class="string">&quot;rabbitmq-0&quot;</span> deleted</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看pod，发现rabbitmq-0节点删除后，重启需要耗费一段时间</span></span><br><span class="line">$ kubectl get pods -n wiseco -o wide|grep rabbitmq</span><br><span class="line">rabbitmq-0                                         0/1     ContainerCreating   0          5s     &lt;none&gt;           k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rabbitmq-1                                         1/1     Running             0          110m   172.18.195.35    k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rabbitmq-2                                         1/1     Running             0          108m   172.17.125.23    k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">rabbitmq-nfs-client-provisioner-74b977d746-xqh6t   1/1     Running             2          111m   172.25.214.238   k8s-node03     &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时，查看RabbitMQ集群状态</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -ti rabbitmq-1 -n wiseco -- rabbitmqctl cluster_status</span><br><span class="line">Cluster status of node rabbit@rabbitmq-1 ...</span><br><span class="line">Basics</span><br><span class="line"></span><br><span class="line">Cluster name: rabbit@rabbitmq-0.rabbitmq.wiseco.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Disk Nodes</span><br><span class="line"></span><br><span class="line">rabbit@rabbitmq-0</span><br><span class="line">rabbit@rabbitmq-1</span><br><span class="line">rabbit@rabbitmq-2</span><br><span class="line"></span><br><span class="line">Running Nodes</span><br><span class="line"></span><br><span class="line">rabbit@rabbitmq-0</span><br><span class="line">rabbit@rabbitmq-1</span><br><span class="line">rabbit@rabbitmq-2</span><br><span class="line"></span><br><span class="line">Versions</span><br><span class="line"></span><br><span class="line">rabbit@rabbitmq-0: RabbitMQ  on Erlang </span><br><span class="line">rabbit@rabbitmq-1: RabbitMQ 3.8.3 on Erlang 22.3.4.1</span><br><span class="line">rabbit@rabbitmq-2: RabbitMQ 3.8.3 on Erlang 22.3.4.1</span><br><span class="line"></span><br><span class="line">Alarms</span><br><span class="line"></span><br><span class="line">(none)</span><br><span class="line"></span><br><span class="line">Network Partitions</span><br><span class="line"></span><br><span class="line">(none)</span><br><span class="line"></span><br><span class="line">Listeners</span><br><span class="line"></span><br><span class="line">Node: rabbit@rabbitmq-1, interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication</span><br><span class="line">Node: rabbit@rabbitmq-1, interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0</span><br><span class="line">Node: rabbit@rabbitmq-1, interface: [::], port: 15672, protocol: http, purpose: HTTP API</span><br><span class="line">Node: rabbit@rabbitmq-2, interface: [::], port: 25672, protocol: clustering, purpose: inter-node and CLI tool communication</span><br><span class="line">Node: rabbit@rabbitmq-2, interface: [::], port: 5672, protocol: amqp, purpose: AMQP 0-9-1 and AMQP 1.0</span><br><span class="line">Node: rabbit@rabbitmq-2, interface: [::], port: 15672, protocol: http, purpose: HTTP API</span><br><span class="line"></span><br><span class="line">Feature flags</span><br><span class="line"></span><br><span class="line">Flag: drop_unroutable_metric, state: enabled</span><br><span class="line">Flag: empty_basic_get_metric, state: enabled</span><br><span class="line">Flag: implicit_default_bindings, state: enabled</span><br><span class="line">Flag: quorum_queue, state: enabled</span><br><span class="line">Flag: virtual_host_metadata, state: enabled</span><br></pre></td></tr></table></figure><p>此时，查看web界面的集群状态，先后经历了下面三个状态：</p><ul><li>红色表示 节点故障。</li><li>黄色表示 节点恢复中，暂不可用。</li><li>绿色表示 点运行正常。</li></ul><p><strong>9、客户端访问RabbitMQ集群地址</strong></p><p>客户端连接RabbitMQ集群地址：rabbitmq-0.rabbitmq.wiseco.svc.cluster.local:5672、rabbitmq-0.rabbitmq.wiseco.svc.cluster.local:5672、rabbitmq-0.rabbitmq.wiseco.svc.cluster.local:5672</p><p>连接方式：</p><ul><li>客户端可以连接RabbitMQ集群中的任意一个节点。如果一个节点故障，客户端自行重新连接到其他的可用节点；</li><li>也就是说，RabbitMQ集群有”重连”机制，但是这种集群连接方式对客户端不透明，不太建议这种连接方式。</li></ul><p>推荐方式：给客户端提供一个统一的透明的集群连接地址</p><p>做法：在前面部署LVS或Haproxy，通过四层<a href="https://cloud.tencent.com/product/clb?from=10680">负载均衡</a>代理后RabbitMQ的三个node节点的5672端口。</p><p><strong>参考文献</strong></p><p><a href="https://cloud.tencent.com/developer/article/1796318?from=article.detail.1796311">转载-K8S部署RabbitMQ集群 （镜像模式） - 部署笔记</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_RabbitMQ(官方示例)</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_RabbitMQ(%E5%AE%98%E6%96%B9%E7%A4%BA%E4%BE%8B)/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_RabbitMQ(%E5%AE%98%E6%96%B9%E7%A4%BA%E4%BE%8B)/</url>
      
        <content type="html"><![CDATA[<h3 id="概述说明"><a href="#概述说明" class="headerlink" title="概述说明"></a>概述说明</h3><p><strong>RabbitMQ介绍</strong></p><p><code>RabbitMQ</code>是实现了高级<a href="https://cloud.tencent.com/product/cmq?from=10680">消息队列</a>协议<code>AMQP</code>的开源消息代理软件（亦称面向消息的<a href="https://cloud.tencent.com/product/tdmq?from=10680">中间件</a>）。</p><p><code>RabbitMQ</code>服务器是用<code>Erlang</code>语言编写的，而集群和故障转移是构建在开放电信平台框架上的。<code>AMQP</code>：<code>Advanced Message Queue</code>，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言灯条件的限制</p><p><code>AMQP</code>具有如下的特性：</p><ul><li>可靠性<code>Reliablity</code>：使用了一些机制来保证可靠性，比如持久化、传输确认、发布确认</li><li>灵活的路由<code>Flexible Routing</code>：在消息进入队列之前，通过<code>Exchange</code>来路由消息。对于典型的路由功能，<code>Rabbit</code>已经提供了一些内置的<code>Exchange</code>来实现。针对更复杂的路由功能，可以将多个<code>Exchange</code>绑定在一起，也通过插件机制实现自己的<code>Exchange</code></li><li>消息集群<code>Clustering</code>：多个<code>RabbitMQ</code>服务器可以组成一个集群，形成一个逻辑<code>Broker</code></li><li>高可用<code>Highly Avaliable Queues</code>：队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用</li><li>多种协议<code>Multi-protocol</code>：支持多种消息队列协议，如<code>STOMP</code>、<code>MQTT</code>等</li><li>多种语言客户端<code>Many Clients</code>：几乎支持所有常用语言，比如<code>Java</code>、<code>.NET</code>、<code>Ruby</code>等</li><li>管理界面<code>Management UI</code>：提供了易用的用户界面，使得用户可以监控和管理消息<code>Broker</code>的许多方面</li><li>跟踪机制<code>Tracing</code>：如果消息异常，<code>RabbitMQ</code>提供了消息的跟踪机制，使用者可以找出发生了什么</li><li>插件机制<code>Plugin System</code>：提供了许多插件，来从多方面进行扩展，也可以编辑自己的插件</li></ul><p><strong>持久化和镜像队列</strong></p><p><code>RabbitMQ</code> 持久化分为 <code>Exchange</code>、<code>Queue</code>、<code>Message</code></p><ul><li><code>Exchange</code>和<code>Queue</code>持久化：指持久化<code>Exchange</code>、<code>Queue</code>元数据，持久化的是自身，服务宕机<code>Exchange</code>和<code>Queue</code>自身就没有了</li><li><code>Message</code>持久化：顾名思义就是把每一条消息体持久化，服务宕机，消息不丢失</li></ul><p><code>RabbitMQ</code>的队列<code>Queue</code>镜像，指<code>master node</code>在接受到请求后，会同步到其他节点上，以此来保证高可用。在<code>confirm</code>模式下，具体过程如下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">clientpublisher 发送消息 –&gt; master node 接到消息 –&gt; master node 将消息持久化到磁盘 –&gt; 将消息异步发送给其他节点 –&gt; master 将 ack 返回给 client publisher</span><br></pre></td></tr></table></figure><p><strong>RabbitMQ 集群在 k8s 中的部署</strong></p><p>将<code>RabbitMQ</code>以集群的方式部署在<code>k8s</code>中，前提是<code>RabbitMQ</code>的每个节点都能像传统方式一样进行相互的服务发现。因此<code>RabbitMQ</code>在<code>k8s</code>集群中通过<code>rabbitmq_peer_discovery_k8s plugin</code>与<code>k8s apiserver</code>进行交互，获取各个服务的<code>URL</code>，且<code>RabbitMQ</code>在<code>k8s</code>集群中必须用<code>statefulset</code>和<code>headless service</code>进行匹配</p><blockquote><p><strong>需要注意的是</strong>，<code>rabbitmq_peer_discovery_k8s</code>是<code>RabbitMQ</code>官方基于第三方开源项目<code>rabbitmq-autocluster</code>开发，对<code>3.7.X</code>及以上版本提供的<code>Kubernetes</code>下的对等发现插件，可实现<code>rabbitmq</code>集群在<code>k8s</code>中的自动化部署，因此低于3.7.X版本请使用<code>rabbitmq-autocluster</code></p></blockquote><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><ul><li><p>部署的版本是<code>3.8.3</code></p></li><li><p>默认部署在<code>default</code>命名空间下，</p></li><li><p>持久化存储为<code>storageclass</code>动态存储，底层为<code>nfs</code>提供，参考：<code>Kubernetes 部署-NFS-Subdir-External-Provisioner</code></p></li><li><p>镜像地址<code>rabbitmq:3.8.3-management</code></p></li></ul><p>以下<code>yaml</code>参考自  </p><h3 id="服务编排"><a href="#服务编排" class="headerlink" title="服务编排"></a>服务编排</h3><p>1）创建 configmap</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-cluster-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">    <span class="attr">enabled_plugins:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      [rabbitmq_management,rabbitmq_peer_discovery_k8s].</span></span><br><span class="line"><span class="string"></span>    <span class="attr">rabbitmq.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      default_user = admin</span></span><br><span class="line"><span class="string">      default_pass = admin</span></span><br><span class="line"><span class="string">      ## Cluster formation. See https://www.rabbitmq.com/cluster-formation.html to learn more.</span></span><br><span class="line"><span class="string">      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s</span></span><br><span class="line"><span class="string">      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local</span></span><br><span class="line"><span class="string">      ## Should RabbitMQ node name be computed from the pod&#x27;s hostname or IP address?</span></span><br><span class="line"><span class="string">      ## IP addresses are not stable, so using [stable] hostnames is recommended when possible.</span></span><br><span class="line"><span class="string">      ## Set to &quot;hostname&quot; to use pod hostnames.</span></span><br><span class="line"><span class="string">      ## When this value is changed, so should the variable used to set the RABBITMQ_NODENAME</span></span><br><span class="line"><span class="string">      ## environment variable.</span></span><br><span class="line"><span class="string">      cluster_formation.k8s.address_type = hostname</span></span><br><span class="line"><span class="string">      ## How often should node cleanup checks run?</span></span><br><span class="line"><span class="string">      cluster_formation.node_cleanup.interval = 30</span></span><br><span class="line"><span class="string">      ## Set to false if automatic removal of unknown/absent nodes</span></span><br><span class="line"><span class="string">      ## is desired. This can be dangerous, see</span></span><br><span class="line"><span class="string">      ##  * https://www.rabbitmq.com/cluster-formation.html#node-health-checks-and-cleanup</span></span><br><span class="line"><span class="string">      ##  * https://groups.google.com/forum/#!msg/rabbitmq-users/wuOfzEywHXo/k8z_HWIkBgAJ</span></span><br><span class="line"><span class="string">      cluster_formation.node_cleanup.only_log_warning = true</span></span><br><span class="line"><span class="string">      cluster_partition_handling = autoheal</span></span><br><span class="line"><span class="string">      ## See https://www.rabbitmq.com/ha.html#master-migration-data-locality</span></span><br><span class="line"><span class="string">      queue_master_locator=min-masters</span></span><br><span class="line"><span class="string">      ## See https://www.rabbitmq.com/access-control.html#loopback-users</span></span><br><span class="line"><span class="string">      loopback_users.guest = false</span></span><br><span class="line"><span class="string">      cluster_formation.randomized_startup_delay_range.min = 0</span></span><br><span class="line"><span class="string">      cluster_formation.randomized_startup_delay_range.max = 2</span></span><br><span class="line"><span class="string">      # default is rabbitmq-cluster&#x27;s namespace</span></span><br><span class="line"><span class="string">      # hostname_suffix</span></span><br><span class="line"><span class="string">      cluster_formation.k8s.hostname_suffix = .rabbitmq-cluster.default.svc.cluster.local</span></span><br><span class="line"><span class="string">      # memory</span></span><br><span class="line"><span class="string">      vm_memory_high_watermark.absolute = 1GB</span></span><br><span class="line"><span class="string">      # disk</span></span><br><span class="line"><span class="string">      disk_free_limit.absolute = 2GB</span></span><br></pre></td></tr></table></figure><p>部分参数说明：</p><ul><li>enabled_plugins：声明开启的插件名</li><li>default_pass&#x2F;default_pass：声明用户名和密码（虽然有部分文章记录可以通过环境变量的方式声明，但是经测试，针对此版本如果指定了<code>configmap</code>即<code>rabbitmq</code>的配置文件，声明的环境变量是没有用的，都需要在配置文件中指定）</li><li>cluster_formation.k8s.address_type：从<code>k8s</code>返回的<code>Pod</code>容器列表中计算对等节点列表，这里只能使用主机名，官方示例中是<code>ip</code>，但是默认情况下在<code>k8s</code>中<code>pod</code>的<code>ip</code>都是不固定的，因此可能导致节点的配置和数据丢失，后面的<code>yaml</code>中会通过引用元数据的方式固定<code>pod</code>的主机名。</li></ul><p>2）创建 service</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">rmqport</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">5672</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-cluster-manage</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">15672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">15672</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>上面定义了两个<code>Service</code>，一个是<code>rabbitmq</code>的服务端口，一个是管理界面的端口，用户外部访问，这里通过<code>NodePort</code>方式进行暴露</p><p>3）创建 rbac 授权</p><p>前面的介绍中提到了<code>RabbitMQ</code>通过插件与k8s apiserver交互获得集群中节点相关信息，因此需要对其进行<code>RBAC</code>授权</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">  <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">  <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><p>4）创建 statefulset</p><p><code>RabbitMQ</code>在<code>k8s</code>中作为一个有状态应用进行部署，因此控制器类型为<code>StatefulSet</code>，<code>yaml</code>中还定义了<code>pvc</code>相关内容</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-v</span> <span class="string">/etc/rabbitmq/rabbitmq.conf</span> <span class="string">$&#123;RABBITMQ_CONFIG_FILE&#125;;</span> <span class="string">exec</span> <span class="string">docker-entrypoint.sh</span></span><br><span class="line">          <span class="string">rabbitmq-server</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TZ</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_ERLANG_COOKIE</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;SWvCP0Hrqv43NG7GybHC95ntCJKoW8UyNFWnBEWG8TY=&#x27;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">K8S_SERVICE_NAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_USE_LONGNAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_NODENAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">rabbit@$(POD_NAME).$(K8S_SERVICE_NAME).$(POD_NAMESPACE).svc.cluster.local</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_CONFIG_FILE</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">/var/lib/rabbitmq/rabbitmq.conf</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">rabbitmq:3.8.3-management</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">rabbitmq-diagnostics</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">status</span></span><br><span class="line">          <span class="comment"># See https://www.rabbitmq.com/monitoring.html for monitoring frequency recommendations.</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">15</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rabbitmq</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">15672</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5672</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">amqp</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">rabbitmq-diagnostics</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">status</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">20</span></span><br><span class="line">          <span class="attr">periodSeconds:</span> <span class="number">60</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/rabbitmq</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/lib/rabbitmq</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">rabbitmq-storage</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">timezone</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/localtime</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">rabbitmq.conf</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">rabbitmq.conf</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">enabled_plugins</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">enabled_plugins</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">rabbitmq-cluster-config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">timezone</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/usr/share/zoneinfo/Asia/Shanghai</span></span><br><span class="line">  <span class="attr">volumeClaimTemplates:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">rabbitmq-storage</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">accessModes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">      <span class="attr">storageClassName:</span> <span class="string">&quot;managed-nfs-storage&quot;</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">requests:</span></span><br><span class="line">          <span class="attr">storage:</span> <span class="string">2Gi</span></span><br></pre></td></tr></table></figure><h3 id="部署检查"><a href="#部署检查" class="headerlink" title="部署检查"></a>部署检查</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f .</span><br><span class="line">configmap/rabbitmq-cluster-config created</span><br><span class="line">service/rabbitmq-cluster created</span><br><span class="line">service/rabbitmq-cluster-manage created</span><br><span class="line">serviceaccount/rabbitmq-cluster created</span><br><span class="line">role.rbac.authorization.k8s.io/rabbitmq-cluster created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rabbitmq-cluster created</span><br><span class="line">statefulset.apps/rabbitmq-cluster created</span><br><span class="line"></span><br><span class="line">$ kubectl get po,sts -l app=rabbitmq-cluster</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/rabbitmq-cluster-0   1/1     Running   0          38m</span><br><span class="line">pod/rabbitmq-cluster-1   1/1     Running   0          37m</span><br><span class="line">pod/rabbitmq-cluster-2   1/1     Running   0          36m</span><br><span class="line"></span><br><span class="line">NAME                                READY   AGE</span><br><span class="line">statefulset.apps/rabbitmq-cluster   3/3     38m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ kubectl logs -f rabbitmq-cluster-0</span><br><span class="line"><span class="string">&#x27;/etc/rabbitmq/rabbitmq.conf&#x27;</span> -&gt; <span class="string">&#x27;/var/lib/rabbitmq/rabbitmq.conf&#x27;</span></span><br><span class="line">2021-08-24 09:07:01.687 [info] &lt;0.9.0&gt; Feature flags: list of feature flags found:</span><br><span class="line">2021-08-24 09:07:01.687 [info] &lt;0.9.0&gt; Feature flags:   [ ] drop_unroutable_metric</span><br><span class="line">2021-08-24 09:07:01.687 [info] &lt;0.9.0&gt; Feature flags:   [ ] empty_basic_get_metric</span><br><span class="line">2021-08-24 09:07:01.687 [info] &lt;0.9.0&gt; Feature flags:   [ ] implicit_default_bindings</span><br><span class="line">2021-08-24 09:07:01.687 [info] &lt;0.9.0&gt; Feature flags:   [ ] quorum_queue</span><br><span class="line">2021-08-24 09:07:01.688 [info] &lt;0.9.0&gt; Feature flags:   [ ] virtual_host_metadata</span><br><span class="line">2021-08-24 09:07:01.688 [info] &lt;0.9.0&gt; Feature flags: feature flag states written to disk: <span class="built_in">yes</span></span><br><span class="line">2021-08-24 09:07:01.722 [info] &lt;0.269.0&gt; ra: meta data store initialised. 0 record(s) recovered</span><br><span class="line">2021-08-24 09:07:01.724 [info] &lt;0.274.0&gt; WAL: recovering []</span><br><span class="line">2021-08-24 09:07:28.887 [info] &lt;0.309.0&gt; </span><br><span class="line"> Starting RabbitMQ 3.8.3 on Erlang 22.3.4.1</span><br><span class="line"> Copyright (c) 2007-2020 Pivotal Software, Inc.</span><br><span class="line"> Licensed under the MPL 1.1. Website: https://rabbitmq.com</span><br><span class="line"></span><br><span class="line">  <span class="comment">##  ##      RabbitMQ 3.8.3</span></span><br><span class="line">  <span class="comment">##  ##</span></span><br><span class="line">  <span class="comment">##########  Copyright (c) 2007-2020 Pivotal Software, Inc.</span></span><br><span class="line">  <span class="comment">######  ##</span></span><br><span class="line">  <span class="comment">##########  Licensed under the MPL 1.1. Website: https://rabbitmq.com</span></span><br><span class="line"></span><br><span class="line">  Doc guides: https://rabbitmq.com/documentation.html</span><br><span class="line">  Support:    https://rabbitmq.com/contact.html</span><br><span class="line">  Tutorials:  https://rabbitmq.com/getstarted.html</span><br><span class="line">  Monitoring: https://rabbitmq.com/monitoring.html</span><br><span class="line"></span><br><span class="line">  Logs: &lt;stdout&gt;</span><br><span class="line"></span><br><span class="line">  Config file(s): /var/lib/rabbitmq/rabbitmq.conf</span><br><span class="line"></span><br><span class="line">  Starting broker...2021-08-24 09:07:28.889 [info] &lt;0.309.0&gt; </span><br><span class="line"> node           : rabbit@rabbitmq-cluster-0.rabbitmq-cluster.default.svc.cluster.local</span><br><span class="line"> home <span class="built_in">dir</span>       : /var/lib/rabbitmq</span><br><span class="line"> config file(s) : /var/lib/rabbitmq/rabbitmq.conf</span><br><span class="line"> cookie <span class="built_in">hash</span>    : H+IQL2spD4MDV4jPi7mMAg==</span><br><span class="line"> <span class="built_in">log</span>(s)         : &lt;stdout&gt;</span><br><span class="line"> database <span class="built_in">dir</span>   : /var/lib/rabbitmq/mnesia/rabbit@rabbitmq-cluster-0.rabbitmq-cluster.default.svc.cluster.local</span><br><span class="line">...中间省略</span><br><span class="line"> completed with 5 plugins.</span><br><span class="line">2021-08-24 09:08:53.301 [info] &lt;0.561.0&gt; node <span class="string">&#x27;rabbit@rabbitmq-cluster-1.rabbitmq-cluster.default.svc.cluster.local&#x27;</span> up</span><br><span class="line">2021-08-24 09:08:53.863 [info] &lt;0.561.0&gt; rabbit on node <span class="string">&#x27;rabbit@rabbitmq-cluster-1.rabbitmq-cluster.default.svc.cluster.local&#x27;</span> up</span><br><span class="line">2021-08-24 09:09:54.886 [info] &lt;0.561.0&gt; node <span class="string">&#x27;rabbit@rabbitmq-cluster-2.rabbitmq-cluster.default.svc.cluster.local&#x27;</span> up</span><br><span class="line">2021-08-24 09:09:55.495 [info] &lt;0.561.0&gt; rabbit on node <span class="string">&#x27;rabbit@rabbitmq-cluster-2.rabbitmq-cluster.default.svc.cluster.local&#x27;</span> up</span><br></pre></td></tr></table></figure><p>进入到<code>pod</code>中通过客户端查看集群状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it rabbitmq-cluster-0 bash</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line">root@rabbitmq-cluster-0:/<span class="comment"># rabbitmqctl cluster_status</span></span><br><span class="line">Cluster status of node rabbit@rabbitmq-cluster-0.rabbitmq-cluster.default.svc.cluster.local ...</span><br><span class="line">Basics</span><br><span class="line"></span><br><span class="line">Cluster name: rabbit@rabbitmq-cluster-0.rabbitmq-cluster.default.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Disk Nodes</span><br><span class="line"></span><br><span class="line">rabbit@rabbitmq-cluster-0.rabbitmq-cluster.default.svc.cluster.local</span><br><span class="line">rabbit@rabbitmq-cluster-1.rabbitmq-cluster.default.svc.cluster.local</span><br><span class="line">rabbit@rabbitmq-cluster-2.rabbitmq-cluster.default.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Running Nodes</span><br><span class="line"></span><br><span class="line">rabbit@rabbitmq-cluster-0.rabbitmq-cluster.default.svc.cluster.local</span><br><span class="line">rabbit@rabbitmq-cluster-1.rabbitmq-cluster.default.svc.cluster.local</span><br><span class="line">rabbit@rabbitmq-cluster-2.rabbitmq-cluster.default.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Versions</span><br><span class="line"></span><br><span class="line">rabbit@rabbitmq-cluster-0.rabbitmq-cluster.default.svc.cluster.local: RabbitMQ 3.8.3 on Erlang 22.3.4.1</span><br><span class="line">rabbit@rabbitmq-cluster-1.rabbitmq-cluster.default.svc.cluster.local: RabbitMQ 3.8.3 on Erlang 22.3.4.1</span><br><span class="line">rabbit@rabbitmq-cluster-2.rabbitmq-cluster.default.svc.cluster.local: RabbitMQ 3.8.3 on Erlang 22.3.4.1</span><br></pre></td></tr></table></figure><p>通过<code>NodePort</code>访问管理界面</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc -l app=rabbitmq-cluster</span><br><span class="line">NAME                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)           AGE</span><br><span class="line">rabbitmq-cluster          ClusterIP   None             &lt;none&gt;        5672/TCP          45m</span><br><span class="line">rabbitmq-cluster-manage   NodePort    120.100.38.129   &lt;none&gt;        15672:31585/TCP   45m</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/yuikuen_yuen/blog-picgo/raw/master/images/image-20210824175312642.png" alt="image-20210824175312642"></p><blockquote><p> 参考：</p><p><a href="https://www.rabbitmq.com/cluster-formation.html">https://www.rabbitmq.com/cluster-formation.html</a> </p><p><a href="https://github.com/rabbitmq/diy-kubernetes-examples">https://github.com/rabbitmq/diy-kubernetes-examples</a></p><p><a href="https://cloud.tencent.com/developer/article/1793774?from=article.detail.1782766">https://cloud.tencent.com/developer/article/1793774?from=article.detail.1782766</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_RabbitMQ Cluster(转载)</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_RabbitMQ%20Cluster(%E8%BD%AC%E8%BD%BD)/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_RabbitMQ%20Cluster(%E8%BD%AC%E8%BD%BD)/</url>
      
        <content type="html"><![CDATA[<p><strong>RabbitMQ</strong> 是实现了高级消息队列协议（AMQP）的开源消息代理软件（亦称面向消息的中间件）</p><ul><li>可伸缩性：集群服务</li><li>消息持久化：从内存持久化消息到硬盘，再从硬盘加载到内存</li></ul><p>下述教程就是采用 Kubernetes 来安装 RabbitMQ，并且通过 <code>rabbitmq_management,rabbitmq_peer_discovery_k8s</code> 来自动发现并注册集群，而 RabbitMQ 使用 StatefulSet 来部署，通过域名来访问，方便后面统一管理</p><p><strong>教程概述</strong></p><ul><li>Kubernetes 集群</li><li>持久化数据</li></ul><p>1）创建 namespace</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create namespace public-service</span><br><span class="line"><span class="comment"># 如果不使用public-service，需要更改所有yaml文件的public-service为你namespace</span></span><br><span class="line">$ sed -i <span class="string">&quot;s#public-service#YOUR_NAMESPACE#g&quot;</span> *.yaml</span><br></pre></td></tr></table></figure><p>2）创建 rbac</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">public-service</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">public-service</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">public-service</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">public-service</span></span><br></pre></td></tr></table></figure><p>3）创建 secret</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster-secret</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">public-service</span></span><br><span class="line"><span class="attr">stringData:</span></span><br><span class="line">  <span class="attr">cookie:</span> <span class="string">ERLANG_COOKIE</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">RABBITMQ_PASS</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">amqp://RABBITMQ_USER:RABBITMQ_PASS@rmq-cluster-balancer</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">RABBITMQ_USER</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">Opaque</span></span><br></pre></td></tr></table></figure><p>4）创建 configmap</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">public-service</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">addonmanager.kubernetes.io/mode:</span> <span class="string">Reconcile</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">    <span class="attr">enabled_plugins:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      [rabbitmq_management,rabbitmq_peer_discovery_k8s].</span></span><br><span class="line"><span class="string"></span>    <span class="attr">rabbitmq.conf:</span> <span class="string">|</span></span><br><span class="line"><span class="string">      loopback_users.guest = false</span></span><br><span class="line"><span class="string">      # 因采用secret加密方式，需要添加账密字段</span></span><br><span class="line"><span class="string">      default_user = RABBITMQ_USER</span></span><br><span class="line"><span class="string">      default_pass = RABBITMQ_PASS</span></span><br><span class="line"><span class="string">      ## Clustering</span></span><br><span class="line"><span class="string">      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s</span></span><br><span class="line"><span class="string">      cluster_formation.k8s.host = kubernetes.default.svc.cluster.local</span></span><br><span class="line"><span class="string">      cluster_formation.k8s.address_type = hostname</span></span><br><span class="line"><span class="string">      #################################################</span></span><br><span class="line"><span class="string">      # public-service is rabbitmq-cluster&#x27;s namespace#</span></span><br><span class="line"><span class="string">      #################################################</span></span><br><span class="line"><span class="string">      cluster_formation.k8s.hostname_suffix = .rmq-cluster.public-service.svc.cluster.local</span></span><br><span class="line"><span class="string">      cluster_formation.node_cleanup.interval = 10</span></span><br><span class="line"><span class="string">      cluster_formation.node_cleanup.only_log_warning = true</span></span><br><span class="line"><span class="string">      cluster_partition_handling = autoheal</span></span><br><span class="line"><span class="string">      ## queue master locator</span></span><br><span class="line"><span class="string">      queue_master_locator=min-masters</span></span><br></pre></td></tr></table></figure><p>5）部署应用及服务(此处未作持久化，如需可删除 pv 注释)</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此处采用的是静态PV方式，后端使用的是NFS，为了方便扩展可以使用动态PV较好</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">public-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">rmq-cluster</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-v</span> <span class="string">/etc/rabbitmq/rabbitmq.conf</span> <span class="string">$&#123;RABBITMQ_CONFIG_FILE&#125;;</span> <span class="string">exec</span> <span class="string">docker-entrypoint.sh</span></span><br><span class="line">          <span class="string">rabbitmq-server</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">sh</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_DEFAULT_USER</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">username</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">rmq-cluster-secret</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_DEFAULT_PASS</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">password</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">rmq-cluster-secret</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_ERLANG_COOKIE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">secretKeyRef:</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">cookie</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">rmq-cluster-secret</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">K8S_SERVICE_NAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">rmq-cluster</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">              <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_USE_LONGNAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_NODENAME</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">rabbit@$(POD_NAME).rmq-cluster.$(POD_NAMESPACE).svc.cluster.local</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">RABBITMQ_CONFIG_FILE</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">/var/lib/rabbitmq/rabbitmq.conf</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">rabbitmq:3.9.5-management</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">livenessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">rabbitmqctl</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">status</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">30</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">rabbitmq</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">15672</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">5672</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">amqp</span></span><br><span class="line">          <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">        <span class="attr">readinessProbe:</span></span><br><span class="line">          <span class="attr">exec:</span></span><br><span class="line">            <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">rabbitmqctl</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">status</span></span><br><span class="line">          <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">timeoutSeconds:</span> <span class="number">10</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/rabbitmq</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">          <span class="attr">readOnly:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#        - mountPath: /var/lib/rabbitmq</span></span><br><span class="line"><span class="comment">#          name: rabbitmq-storage</span></span><br><span class="line"><span class="comment">#          readOnly: false</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">rmq-cluster</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">configMap:</span></span><br><span class="line">          <span class="attr">items:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">rabbitmq.conf</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">rabbitmq.conf</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">enabled_plugins</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">enabled_plugins</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">rmq-cluster-config</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line"><span class="comment">#  volumeClaimTemplates:</span></span><br><span class="line"><span class="comment">#  - metadata:</span></span><br><span class="line"><span class="comment">#      name: rabbitmq-storage</span></span><br><span class="line"><span class="comment">#    spec:</span></span><br><span class="line"><span class="comment">#      accessModes:</span></span><br><span class="line"><span class="comment">#      - ReadWriteMany</span></span><br><span class="line"><span class="comment">#      storageClassName: &quot;rmq-storage-class&quot;</span></span><br><span class="line"><span class="comment">#      resources:</span></span><br><span class="line"><span class="comment">#        requests:</span></span><br><span class="line"><span class="comment">#          storage: 4Gi</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rabbitmq svc服务</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">public-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">amqp</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">5672</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rmq-cluster</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rabbitmq lb，用于代理svc</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rmq-cluster</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rmq-cluster-balancer</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">public-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">15672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">15672</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">amqp</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">5672</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rmq-cluster</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>6）创建 PV (参考项：如作持久化可作参考)</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">rabbitmq-pv.yaml</span> </span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv-rmq-1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">&quot;rmq-storage-class&quot;</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="comment"># real share directory</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/ifs/kubernetts/rabbitmq-cluster-0</span></span><br><span class="line">    <span class="comment"># nfs real ip</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">188.188</span><span class="number">.3</span><span class="number">.110</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv-rmq-2</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">&quot;rmq-storage-class&quot;</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="comment"># real share directory</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/ifs/kubernetts/rabbitmq-cluster-1</span></span><br><span class="line">    <span class="comment"># nfs real ip</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">188.188</span><span class="number">.3</span><span class="number">.110</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolume</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pv-rmq-3</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">capacity:</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="string">1Gi</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">volumeMode:</span> <span class="string">Filesystem</span></span><br><span class="line">  <span class="attr">persistentVolumeReclaimPolicy:</span> <span class="string">Recycle</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">&quot;rmq-storage-class&quot;</span></span><br><span class="line">  <span class="attr">nfs:</span></span><br><span class="line">    <span class="comment"># real share directory</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/ifs/kubernetts/rabbitmq-cluster-2</span></span><br><span class="line">    <span class="comment"># nfs real ip</span></span><br><span class="line">    <span class="attr">server:</span> <span class="number">188.188</span><span class="number">.3</span><span class="number">.110</span></span><br></pre></td></tr></table></figure><p>7）创建集群</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f .</span><br><span class="line">statefulset.apps/rmq-cluster created</span><br><span class="line">configmap/rmq-cluster-config created</span><br><span class="line">persistentvolume/pv-rmq-1 created</span><br><span class="line">persistentvolume/pv-rmq-2 created</span><br><span class="line">persistentvolume/pv-rmq-3 created</span><br><span class="line">serviceaccount/rmq-cluster created</span><br><span class="line">role.rbac.authorization.k8s.io/rmq-cluster created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/rmq-cluster created</span><br><span class="line">secret/rmq-cluster-secret created</span><br><span class="line">service/rmq-cluster created</span><br><span class="line">service/rmq-cluster-balancer created</span><br></pre></td></tr></table></figure><p>8）查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pod,sts,svc,ep,pv,pvc -n public-service </span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/rmq-cluster-0   1/1     Running   0          8m10s</span><br><span class="line">pod/rmq-cluster-1   1/1     Running   0          7m34s</span><br><span class="line">pod/rmq-cluster-2   1/1     Running   0          7m18s</span><br><span class="line"></span><br><span class="line">NAME                           READY   AGE</span><br><span class="line">statefulset.apps/rmq-cluster   3/3     8m11s</span><br><span class="line"></span><br><span class="line">NAME                           TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)                          AGE</span><br><span class="line">service/rmq-cluster            ClusterIP   None           &lt;none&gt;        5672/TCP                         8m11s</span><br><span class="line">service/rmq-cluster-balancer   NodePort    10.96.58.102   &lt;none&gt;        15672:31824/TCP,5672:31993/TCP   8m11s</span><br><span class="line"></span><br><span class="line">NAME                             ENDPOINTS                                                              AGE</span><br><span class="line">endpoints/rmq-cluster            10.244.32.129:5672,10.244.58.225:5672,10.244.85.246:5672               8m11s</span><br><span class="line">endpoints/rmq-cluster-balancer   10.244.32.129:5672,10.244.58.225:5672,10.244.85.246:5672 + 3 more...   8m11s</span><br><span class="line"></span><br><span class="line">NAME                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                           STORAGECLASS        REASON   AGE</span><br><span class="line">persistentvolume/pv-rmq-1   1Gi        RWX            Recycle          Bound    public-service/rabbitmq-storage-rmq-cluster-2   rmq-storage-class            8m11s</span><br><span class="line">persistentvolume/pv-rmq-2   1Gi        RWX            Recycle          Bound    public-service/rabbitmq-storage-rmq-cluster-1   rmq-storage-class            8m11s</span><br><span class="line">persistentvolume/pv-rmq-3   1Gi        RWX            Recycle          Bound    public-service/rabbitmq-storage-rmq-cluster-0   rmq-storage-class            8m11s</span><br><span class="line">persistentvolume/pv0001     2Gi        RWO            Recycle          Bound    default/test-pvc2                               slow                         9d</span><br><span class="line"></span><br><span class="line">NAME                                                   STATUS   VOLUME     CAPACITY   ACCESS MODES   STORAGECLASS        AGE</span><br><span class="line">persistentvolumeclaim/rabbitmq-storage-rmq-cluster-0   Bound    pv-rmq-3   1Gi        RWX            rmq-storage-class   8m11s</span><br><span class="line">persistentvolumeclaim/rabbitmq-storage-rmq-cluster-1   Bound    pv-rmq-2   1Gi        RWX            rmq-storage-class   7m34s</span><br><span class="line">persistentvolumeclaim/rabbitmq-storage-rmq-cluster-2   Bound    pv-rmq-1   1Gi        RWX            rmq-storage-class   7m18s</span><br></pre></td></tr></table></figure><p>可以通过 svc 的 nodeport 端口暴露，或者 ingress 来访问 rabbitmq 可视化界面</p><p>9）集群扩缩容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl scale statefulset -n public-service --replicas=4 rmq-cluster</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://ke.qq.com/course/2738602">更多学习内容请参考-K8s全栈架构师(基于世界五百强生产经验研发)</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_NFS-Subdir-External-Provisioner</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_NFS-Subdir-External-Provisioner/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_NFS-Subdir-External-Provisioner/</url>
      
        <content type="html"><![CDATA[<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><ul><li>硬件系统：ESXI 6.7.0 Update 1</li><li>操作系统：CentOS 7.9</li><li>Docker 版本：20.10.6</li><li>Kubernetes 版本：1.21.x+HA高可用</li><li>NFS Subdir External Provisioner 版本：v4.0.10</li></ul><p><strong>NFS-Subdir-External-Provisioner 简介</strong></p><p>存储组件 <code>NFS subdir external provisioner</code> 是一个存储资源自动调配器，它可用将现有的 NFS 服务器通过持久卷声明来支持 Kubernetes 持久卷的动态分配。自动新建的文件夹将被命名为 <code>$&#123;namespace&#125;-$&#123;pvcName&#125;-$&#123;pvName&#125;</code> ，由三个资源名称拼合而成</p><blockquote><p>此组件是对 nfs-client-provisioner 的扩展，nfs-client-provisioner 已经不提供更新，且 nfs-client-provisioner 的 Github 仓库已经迁移到 <a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner">NFS-Subdir-External-Provisioner</a> 的仓库</p></blockquote><h3 id="创建-NFS-Server"><a href="#创建-NFS-Server" class="headerlink" title="创建 NFS Server"></a>创建 NFS Server</h3><p>先创建 NFS Server 端才能够正常使用 NFS 文件系统，参考文档：CentOS7部署_NFS服务器</p><p><strong>配置环境</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止并禁用防火墙</span></span><br><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭并禁用 SELinux</span></span><br><span class="line">$ setenforce 0</span><br><span class="line">$ sed -i <span class="string">&#x27;s/^SELINUX=enforcing$/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><p><strong>安装配置</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install rpcbind nfs-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录并更改权限</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /nfs</span><br><span class="line">$ <span class="built_in">chown</span> -R nfsnobody:nfsnobody /nfs</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑exports</span></span><br><span class="line">$ vim /etc/exports</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入以下内容(格式：FS共享的目录 NFS客户端地址1(参数1,参数2,...) 客户端地址2(参数1,参数2,...))</span></span><br><span class="line">/nfs 188.188.4.0/24(rw,async,no_root_squash)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 NFS Server 并设置开机就启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now nfs &amp;&amp; systemctl restart nfs rpcbind</span><br></pre></td></tr></table></figure><p>如果设置为 <code>/nfs *(rw,async,no_root_squash)</code> 则对所以的 <code>IP</code> 都有效</p><ul><li><p>常用选项：</p><ul><li>ro：客户端挂载后，其权限为只读，默认选项；</li><li>rw:读写权限；</li><li>sync：同时将数据写入到内存与硬盘中；</li><li>async：异步，优先将数据保存到内存，然后再写入硬盘；</li><li>Secure：要求请求源的端口小于1024</li></ul></li><li><p>用户映射：</p><ul><li>root_squash:当NFS客户端使用root用户访问时，映射到NFS服务器的匿名用户；</li><li>no_root_squash:当NFS客户端使用root用户访问时，映射到NFS服务器的root用户；</li><li>all_squash:全部用户都映射为服务器端的匿名用户；</li><li>anonuid&#x3D;UID：将客户端登录用户映射为此处指定的用户uid；</li><li>anongid&#x3D;GID：将客户端登录用户映射为此处指定的用户gid</li></ul></li></ul><h3 id="挂载-NFS-Client"><a href="#挂载-NFS-Client" class="headerlink" title="挂载 NFS Client"></a>挂载 NFS Client</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install rpcbind nfs-utils</span><br><span class="line"><span class="comment"># 创建挂载的文件夹，并挂载 nfs</span></span><br><span class="line">$ <span class="built_in">mkdir</span> -p /nfs/storage</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要把挂载项写到/etc/fstab文件中，因为开机时先挂载本机磁盘再启动网络，而NFS是需要网络启动后才能挂载的，所以我们把挂载命令写入到/etc/rc.d/rc.local文件中即可</span></span><br><span class="line"><span class="comment"># 因为在centos7中/etc/rc.d/rc.local的权限被降低了，所以需要赋予其可执行权</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x /etc/rc.d/rc.local</span><br><span class="line"><span class="comment"># 编写自动启动脚本</span></span><br><span class="line">$ vim /usr/local/sbin/nfsboot.sh</span><br><span class="line"><span class="comment">#! /bin/bash</span></span><br><span class="line"><span class="comment">## This is nfs自启动 shell script.</span></span><br><span class="line"><span class="built_in">date</span></span><br><span class="line">mount -t nfs 188.188.3.110:/nfs/storage /nfs/storage</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot; nfs自启动 success！！&quot;</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x /usr/local/sbin/nfsboot.sh</span><br><span class="line"><span class="comment"># 打开/etc/rc.d/rc.local文件，在末尾增加如下内容</span></span><br><span class="line">$ vim /etc/rc.d/rc.local</span><br><span class="line">/usr/local/sbin/nfsboot.sh</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now nfs rpcbind</span><br></pre></td></tr></table></figure><p><strong>下载示例文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner.git</span><br><span class="line">$ <span class="built_in">cd</span> nfs-subdir-external-provisioner/deploy</span><br></pre></td></tr></table></figure><h3 id="创建-ServiceAccount"><a href="#创建-ServiceAccount" class="headerlink" title="创建 ServiceAccount"></a>创建 ServiceAccount</h3><p>创建一个拥有一定权限的 ServiceAccount 与后面要部署的 NFS Subdir Externa Provisioner 组件绑定</p><blockquote><p>默认 Namespace 为 default，根据实际进行修改自身的 Namespace </p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f rbac.yaml</span><br></pre></td></tr></table></figure><h3 id="创建-NFS-Subdir-External-Provisioner"><a href="#创建-NFS-Subdir-External-Provisioner" class="headerlink" title="创建 NFS-Subdir-External-Provisioner"></a>创建 NFS-Subdir-External-Provisioner</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span>                <span class="comment"># 设置升级策略为删除再创建(默认为滚动更新)</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">        <span class="comment"># image: k8s.gcr.io/sig-storage/nfs-subdir-external-provisioner:v4.0.2</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yk-k8s/nfs-subdir-external-provisioner:v4.0.2</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span>     <span class="comment"># Provisioner的名称,以后设置的storageclass要和这个保持一致</span></span><br><span class="line">            <span class="comment"># value: k8s-sigs.io/nfs-subdir-external-provisioner</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">nfs-client</span>              </span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span>           <span class="comment"># NFS服务器地址,需和valumes参数中配置的保持一致</span></span><br><span class="line">            <span class="comment"># value: 10.3.243.101</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">188.188</span><span class="number">.4</span><span class="number">.161</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span>             <span class="comment"># NFS服务器数据存储目录,需和valumes参数中配置的保持一致</span></span><br><span class="line">            <span class="comment"># value: /ifs/kubernetes</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/nfs</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">          <span class="comment"># server: 10.3.243.101</span></span><br><span class="line">          <span class="comment"># path: /ifs/kubernetes</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">188.188</span><span class="number">.4</span><span class="number">.161</span>         <span class="comment"># NFS服务器地址</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfs</span>                    <span class="comment"># NFS服务器数据存储目录</span></span><br></pre></td></tr></table></figure><blockquote><p>由于官方镜像存储在 gcr.io 仓库中，国内无法拉取，请自行将其拉下并存储在阿里云仓库中。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f deployment.yaml</span><br></pre></td></tr></table></figure><h3 id="创建-StorageClass"><a href="#创建-StorageClass" class="headerlink" title="创建 StorageClass"></a>创建 StorageClass</h3><p>创建 PVC 时经常需要指定 storageClassName 名称，这个参数配置的就是一个 StorageClass 资源名称，PVC 通过指定该参数来选择使用哪个 StorageClass，并与其关联的 Provisioner 组件来动态创建 PV 资源。所以，这里我们需要提前创建一个 Storagelcass 资源</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">managed-nfs-storage</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">storageclass.kubernetes.io/is-default-class:</span> <span class="string">&quot;false&quot;</span>   <span class="comment"># 是否设置为默认的storageclass</span></span><br><span class="line"><span class="comment"># provisioner: k8s-sigs.io/nfs-subdir-external-provisioner # or choose another name, must match deployment&#x27;s env PROVISIONER_NAME&#x27;</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">nfs-client</span>                                    <span class="comment"># 动态卷分配者名称，必须和上面创建的&quot;provisioner&quot;变量中设置的Name一致</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="comment"># archiveOnDelete: &quot;false&quot;</span></span><br><span class="line">  <span class="attr">archiveOnDelete:</span> <span class="string">&quot;true&quot;</span>                                  <span class="comment"># 设置为&quot;false&quot;时删除PVC不会保留数据,&quot;true&quot;则保留数据</span></span><br><span class="line"><span class="attr">mountOptions:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">hard</span>                                                   <span class="comment"># 指定为硬挂载方式</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">nfsvers=4</span>                                              <span class="comment"># 指定NFS版本,这个需要根据NFS Server版本号设置</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f class.yaml</span><br></pre></td></tr></table></figure><h3 id="创建-PVC-测试"><a href="#创建-PVC-测试" class="headerlink" title="创建 PVC 测试"></a>创建 PVC 测试</h3><p>创建一个用于测试的 PVC 资源部署到 Kubernetes 中，这样可以测试 NFS-Subdir-External-Provisioner 是否能够自动创建 PV 与该 PVC 进行绑定</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-claim</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">managed-nfs-storage</span>  <span class="comment"># 需要与上面创建的storageclass的名称一致</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Mi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f test-claim.yaml</span><br></pre></td></tr></table></figure><p><strong>观察是否自动创建 PV 并与 PVC 绑定</strong></p><p>等待创建完成后观察 NFS-Subdir-External-Provisioner  是否会自动创建 PV 与该 PVC 进行绑定，可以执行下面命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pvc test-claim -o yaml | grep phase</span><br><span class="line">  phase: Bound</span><br></pre></td></tr></table></figure><p>如果显示 <code>phase</code> 为 <code>Bound</code>，则说明已经创建 PV 且与 PVC 进行了绑定</p><p>如创建后，状态一直为<code>Pending</code>，可参考<code>Kubernetes-部署 NFS Provisioner 存储卷报错.md</code>进行处理，主要原因为：</p><ul><li><code>chmod 755 -R /nfs/data</code>，按实际分配目录权限；</li><li>通过修改 kube-apiserver 的配置文件，增加参数 <code>--feature-gates=RemoveSelfLink=false</code>，开启默认禁用的参数 selfLink</li></ul><h3 id="创建-Pod-测试"><a href="#创建-Pod-测试" class="headerlink" title="创建 Pod 测试"></a>创建 Pod 测试</h3><p>创建一个测试的 Pod 资源部署到 Kubernetes 中，这样就可以测试上面创建的 PVC 是否能够正常使用</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-pod</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gcr.io/google_containers/busybox:1.24</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1&quot;</span>    <span class="comment"># 创建一个名称为&quot;SUCCESS&quot;的文件</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-pvc</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">&quot;/mnt&quot;</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">&quot;Never&quot;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-pvc</span></span><br><span class="line">      <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">        <span class="attr">claimName:</span> <span class="string">test-claim</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f test-pod.yaml</span><br></pre></td></tr></table></figure><p><strong>进入 NFS Server 服务器验证是否存在测试文件</strong></p><p>进入 NFS Server 服务器的 NFS 挂载目录，检查在 Pod 中创建的文件 SUCCESS 是否存在：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /nfs &amp;&amp; <span class="built_in">ls</span> -l | grep test-claim</span><br><span class="line">drwxrwxrwx. 2 root root 21 May 31 14:04 default-test-claim-pvc-4e1cc487-aa6e-460b-9c96-0e3c834fee67</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> default-test-claim-pvc-4e1cc487-aa6e-460b-9c96-0e3c834fee67 &amp;&amp; <span class="built_in">ls</span> -l</span><br><span class="line">total 0</span><br><span class="line">-rw-r--r--. 1 root root 0 May 31 14:04 SUCCESS</span><br></pre></td></tr></table></figure><p>可以看到已经生成 <code>SUCCESS</code> 该文件，并且可知通过 NFS-Subdir-External-Provisioner 创建的目录命名方式为 <code>namespace名称-pvc名称-pv名称</code>，PV 名称是随机字符串，所以每次只要不删除 PVC，那么 Kubernetes 中的与存储绑定将不会丢失，要是删除 PVC 也就意味着删除了绑定的文件夹，下次就算重新创建相同名称的 PVC，生成的文件夹名称也不会一致，因为 PV 名是随机生成的字符串，而文件夹命名又跟 PV 有关,所以删除 PVC 需谨慎</p><h3 id="删除资源测试"><a href="#删除资源测试" class="headerlink" title="删除资源测试"></a>删除资源测试</h3><p>在测试组件是否能正常使用后，我们需要将上面的测试资源文件进行清理，可以执行下面命令:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除测试的 Pod 资源文件</span></span><br><span class="line">$ kubectl delete -f test-pod.yaml </span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除测试的 PVC 资源文件</span></span><br><span class="line">$ kubectl delete -f test-claim.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除后确认文件是否还存在</span></span><br><span class="line">$ <span class="built_in">cd</span> /nfs &amp;&amp; <span class="built_in">ls</span> -l</span><br><span class="line">total 0</span><br><span class="line">drwxrwxrwx. 2 root root 21 May 31 14:04 archived-default-test-claim-pvc-4e1cc487-aa6e-460b-9c96-0e3c834fee67</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_NFS-Provisioner动态分配卷</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_NFS-Provisioner%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E5%8D%B7/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_NFS-Provisioner%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D%E5%8D%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><ul><li>硬件系统：ESXI 6.7.0 Update 1</li><li>操作系统：CentOS 7.9</li><li>Docker 版本：20.10.6</li><li>Kubernetes 版本：1.21.x+HA高可用</li><li>NFS Provisioner 版本：latest</li></ul><p><strong>NFS Provisioner 简介</strong></p><p>NFS Provisioner 是一个自动配置卷程序，它使用现有的和已配置的 NFS 服务器来支持通过持久卷声明动态配置 Kubernetes 持久卷<br>持久卷被配置为：<code>namespace-&#123;namespace&#125;-namespace−&#123;pvcName&#125;-$&#123;pvName&#125;</code></p><h3 id="创建-NFS-Server"><a href="#创建-NFS-Server" class="headerlink" title="创建 NFS Server"></a>创建 NFS Server</h3><p>参考文档：CentOS7部署_NFS服务器</p><p>1）下载示例文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/kubernetes-retired/external-storage.git</span><br><span class="line">$ <span class="built_in">cd</span> external-storage/nfs-client/deploy/ </span><br></pre></td></tr></table></figure><p>2）创建 ServiceAccount</p><p>创建一个一定权限的 ServiceAccount 与后面要创建的 “NFS Provisioner” 绑定，赋予一定的权限</p><ul><li>默认为 Namespace 为 default，根据实际情况进行修改；</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-nfs-client-provisioner</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f rbac.yaml</span><br></pre></td></tr></table></figure><p>3）部署 NFS Provisioner</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span>          <span class="comment"># 设置升级策略为删除再创建(默认为滚动更新)</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">        <span class="comment"># image: quay.io/external_storage/nfs-client-provisioner:latest</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yuikuen/nfs-client-provisioner::latest</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">fuseim.pri/ifs</span>    <span class="comment"># 名称需要跟之后的storageclass保持一致</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">            <span class="comment"># value: 10.10.10.60       </span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">188.188</span><span class="number">.4</span><span class="number">.161</span>     <span class="comment"># NFS服务器地址，与volumes保持一致           </span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">            <span class="comment"># value: /ifs/kubernetes   </span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/nfs/data</span>         <span class="comment"># NFS服务器目录，与volumes保持一致</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">          <span class="comment"># server: 10.10.10.60       </span></span><br><span class="line">          <span class="comment"># path: /ifs/kubernetes</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">188.188</span><span class="number">.4</span><span class="number">.161</span>      <span class="comment"># NFS服务器地址</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfs/data</span>            <span class="comment"># NFS服务器目录</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f deployment.yaml</span><br></pre></td></tr></table></figure><p>4）创建 NFS StorageClass</p><p>创建一个 StoageClass，声明 NFS 动态卷提供者名称为 “nfs-storage”</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">managed-nfs-storage</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">fuseim.pri/ifs</span> <span class="comment"># 动态卷分配者名称，必须和上面创建的&quot;provisioner&quot;变量中设置的Name一致</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="comment"># archiveOnDelete: &quot;false&quot;</span></span><br><span class="line">  <span class="attr">archiveOnDelete:</span> <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f class.yaml</span><br></pre></td></tr></table></figure><h3 id="验证测试"><a href="#验证测试" class="headerlink" title="验证测试"></a>验证测试</h3><p>1）创建一个测试用的 PVC 并观察是否自动创建是 PV 与其绑定</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-claim</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">volume.beta.kubernetes.io/storage-class:</span> <span class="string">&quot;managed-nfs-storage&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">managed-nfs-storage</span>   <span class="comment"># 需要与上面创建的storageclass的名称一致</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">1Mi</span></span><br></pre></td></tr></table></figure><p><strong>查看 PVC 状态是否与 PV 绑定</strong></p><p>利用 Kubectl 命令获取 pvc 资源，查看 STATUS 状态是否为 “Bound”</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pvc</span><br><span class="line">NAME       STATUS   VOLUME                 CAPACITY   ACCESS MODES   STORAGECLASS</span><br><span class="line">test-pvc   Bound    pvc-be0808c2-9957-11e9 1Mi        RWO            nfs-storage</span><br></pre></td></tr></table></figure><p>如创建后，状态一直为<code>Pending</code>，可参考<code>Kubernetes-部署 NFS Provisioner 存储卷报错.md</code>进行处理，主要原因为：</p><ul><li><code>chmod 755 -R /nfs/data</code>，按实际分配目录权限；</li><li>通过修改 kube-apiserver 的配置文件，增加参数 <code>--feature-gates=RemoveSelfLink=false</code>，开启默认禁用的参数 selfLink</li></ul><p>2）创建一个测试用的 Pod，指定存储为上面创建的 PVC，然后创建一个文件在挂载的 PVC 目录中，然后进入 NFS 服务器下查看该文件是否存入其中</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test-pod</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gcr.io/google_containers/busybox:1.24</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/bin/sh&quot;</span></span><br><span class="line">    <span class="attr">args:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;-c&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;touch /mnt/SUCCESS &amp;&amp; exit 0 || exit 1&quot;</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-pvc</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">&quot;/mnt&quot;</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">&quot;Never&quot;</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-pvc</span></span><br><span class="line">      <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">        <span class="attr">claimName:</span> <span class="string">test-claim</span></span><br></pre></td></tr></table></figure><p>进入 NFS Server 服务器的 NFS 挂载目录，查看是否存在 Pod 中创建的文件：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /nfs/data</span><br><span class="line">$ <span class="built_in">ls</span> -l</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root 0 Jun 28 12:44 SUCCESS</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_Nacos</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_Nacos/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_Nacos/</url>
      
        <content type="html"><![CDATA[<blockquote><p>教程为快速部署方式，参照官网直接部署，未作持久化，仅供参考！</p></blockquote><p>1）下载源代码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/alibaba/nacos.git</span><br></pre></td></tr></table></figure><p>2）创建 MySQL</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ./nacos-k8s/deploy/mysql</span><br><span class="line">$ <span class="built_in">cat</span> mysql-local.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql</span><br><span class="line">  labels:</span><br><span class="line">    name: mysql</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    name: mysql</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: mysql</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: mysql</span><br><span class="line">        image: nacos/nacos-mysql:5.7</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 3306</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: mysql-data</span><br><span class="line">          mountPath: /var/lib/mysql</span><br><span class="line">        <span class="built_in">env</span>:</span><br><span class="line">        - name: MYSQL_ROOT_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;root&quot;</span></span><br><span class="line">        - name: MYSQL_DATABASE</span><br><span class="line">          value: <span class="string">&quot;nacos_devtest&quot;</span></span><br><span class="line">        - name: MYSQL_USER</span><br><span class="line">          value: <span class="string">&quot;nacos&quot;</span></span><br><span class="line">        - name: MYSQL_PASSWORD</span><br><span class="line">          value: <span class="string">&quot;nacos&quot;</span></span><br><span class="line">      volumes:</span><br><span class="line">      - name: mysql-data</span><br><span class="line">        hostPath:</span><br><span class="line">          path: /var/lib/mysql</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: mysql</span><br><span class="line">  labels:</span><br><span class="line">    name: mysql</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 3306</span><br><span class="line">    targetPort: 3306</span><br><span class="line">  selector:</span><br><span class="line">    name: mysql</span><br></pre></td></tr></table></figure><p>3）数据库在 Github 里面，可以导入使用（此处 edit 修改 mysql-svc 为 NodePort，暴露端口后，使用 Navicat 进行导入操作）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_info   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(255) DEFAULT NULL,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,</span><br><span class="line">  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `src_user` text COMMENT &#x27;source user&#x27;,</span><br><span class="line">  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  `c_desc` varchar(256) DEFAULT NULL,</span><br><span class="line">  `c_use` varchar(64) DEFAULT NULL,</span><br><span class="line">  `effect` varchar(64) DEFAULT NULL,</span><br><span class="line">  `type` varchar(64) DEFAULT NULL,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_info_aggr   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_info_aggr` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(255) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `datum_id` varchar(255) NOT NULL COMMENT &#x27;datum_id&#x27;,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;内容&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;增加租户字段&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_info_beta   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_info_beta` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,</span><br><span class="line">  `beta_ips` varchar(1024) DEFAULT NULL COMMENT &#x27;betaIps&#x27;,</span><br><span class="line">  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `src_user` text COMMENT &#x27;source user&#x27;,</span><br><span class="line">  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_beta&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_info_tag   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_info_tag` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,</span><br><span class="line">  `tag_id` varchar(128) NOT NULL COMMENT &#x27;tag_id&#x27;,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,</span><br><span class="line">  `content` longtext NOT NULL COMMENT &#x27;content&#x27;,</span><br><span class="line">  `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  `src_user` text COMMENT &#x27;source user&#x27;,</span><br><span class="line">  `src_ip` varchar(50) DEFAULT NULL COMMENT &#x27;source ip&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_tag&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = config_tags_relation   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `config_tags_relation` (</span><br><span class="line">  `id` bigint(20) NOT NULL COMMENT &#x27;id&#x27;,</span><br><span class="line">  `tag_name` varchar(128) NOT NULL COMMENT &#x27;tag_name&#x27;,</span><br><span class="line">  `tag_type` varchar(64) DEFAULT NULL COMMENT &#x27;tag_type&#x27;,</span><br><span class="line">  `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;,</span><br><span class="line">  `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,</span><br><span class="line">  `nid` bigint(20) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  PRIMARY KEY (`nid`),</span><br><span class="line">  UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_tag_relation&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = group_capacity   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `group_capacity` (</span><br><span class="line">  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">  `group_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Group ID，空字符表示整个集群&#x27;,</span><br><span class="line">  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,</span><br><span class="line">  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,</span><br><span class="line">  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,</span><br><span class="line">  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数，，0表示使用默认值&#x27;,</span><br><span class="line">  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,</span><br><span class="line">  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;集群、各Group容量信息表&#x27;;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = his_config_info   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `his_config_info` (</span><br><span class="line">  `id` bigint(64) unsigned NOT NULL,</span><br><span class="line">  `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `data_id` varchar(255) NOT NULL,</span><br><span class="line">  `group_id` varchar(128) NOT NULL,</span><br><span class="line">  `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;,</span><br><span class="line">  `content` longtext NOT NULL,</span><br><span class="line">  `md5` varchar(32) DEFAULT NULL,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` varchar(50) DEFAULT NULL,</span><br><span class="line">  `op_type` char(10) DEFAULT NULL,</span><br><span class="line">  `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;,</span><br><span class="line">  PRIMARY KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;多租户改造&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">/*   数据库全名 = nacos_config   */</span><br><span class="line">/*   表名称 = tenant_capacity   */</span><br><span class="line">/******************************************/</span><br><span class="line">CREATE TABLE `tenant_capacity` (</span><br><span class="line">  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Tenant ID&#x27;,</span><br><span class="line">  `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额，0表示使用默认值&#x27;,</span><br><span class="line">  `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;,</span><br><span class="line">  `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;,</span><br><span class="line">  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数&#x27;,</span><br><span class="line">  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;,</span><br><span class="line">  `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;,</span><br><span class="line">  `gmt_create` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;租户容量信息表&#x27;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE `tenant_info` (</span><br><span class="line">  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;,</span><br><span class="line">  `kp` varchar(128) NOT NULL COMMENT &#x27;kp&#x27;,</span><br><span class="line">  `tenant_id` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;,</span><br><span class="line">  `tenant_name` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_name&#x27;,</span><br><span class="line">  `tenant_desc` varchar(256) DEFAULT NULL COMMENT &#x27;tenant_desc&#x27;,</span><br><span class="line">  `create_source` varchar(32) DEFAULT NULL COMMENT &#x27;create_source&#x27;,</span><br><span class="line">  `gmt_create` bigint(20) NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` bigint(20) NOT NULL COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;tenant_info&#x27;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE `users` (</span><br><span class="line">`username` varchar(50) NOT NULL PRIMARY KEY,</span><br><span class="line">`password` varchar(500) NOT NULL,</span><br><span class="line">`enabled` boolean NOT NULL</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE `roles` (</span><br><span class="line">`username` varchar(50) NOT NULL,</span><br><span class="line">`role` varchar(50) NOT NULL,</span><br><span class="line">UNIQUE INDEX `idx_user_role` (`username` ASC, `role` ASC) USING BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">CREATE TABLE `permissions` (</span><br><span class="line">    `role` varchar(50) NOT NULL,</span><br><span class="line">    `resource` varchar(255) NOT NULL,</span><br><span class="line">    `action` varchar(8) NOT NULL,</span><br><span class="line">    UNIQUE INDEX `uk_role_permission` (`role`,`resource`,`action`) USING BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO users (username, password, enabled) VALUES (&#x27;nacos&#x27;, &#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;, TRUE);</span><br><span class="line"></span><br><span class="line">INSERT INTO roles (username, role) VALUES (&#x27;nacos&#x27;, &#x27;ROLE_ADMIN&#x27;);</span><br></pre></td></tr></table></figure><p>4）创建 Nacos</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">nacos-no-pvc-ingress.yaml</span> </span><br><span class="line"><span class="comment">###使用自建数据库；使用Ingress发布配置后台###</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nacos-headless</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nacos-headless</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8848</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">server</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8848</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9848</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">client-rpc</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9848</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">9849</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">raft-rpc</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9849</span></span><br><span class="line">      <span class="comment">## 兼容1.4.x版本的选举端口</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">7848</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">old-raft-rpc</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">7848</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nacos</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nacos-cm</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="comment"># 修改成刚创建的mysql信息</span></span><br><span class="line">  <span class="attr">mysql.host:</span> <span class="string">&quot;mysql&quot;</span></span><br><span class="line">  <span class="attr">mysql.db.name:</span> <span class="string">&quot;nacos_devtest&quot;</span></span><br><span class="line">  <span class="attr">mysql.port:</span> <span class="string">&quot;3306&quot;</span></span><br><span class="line">  <span class="attr">mysql.user:</span> <span class="string">&quot;nacos&quot;</span></span><br><span class="line">  <span class="attr">mysql.password:</span> <span class="string">&quot;nacos&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StatefulSet</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nacos</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">serviceName:</span> <span class="string">nacos-headless</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nacos</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">pod.alpha.kubernetes.io/initialized:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">                <span class="attr">matchExpressions:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="attr">key:</span> <span class="string">&quot;app&quot;</span></span><br><span class="line">                    <span class="attr">operator:</span> <span class="string">In</span></span><br><span class="line">                    <span class="attr">values:</span></span><br><span class="line">                      <span class="bullet">-</span> <span class="string">nacos</span></span><br><span class="line">              <span class="attr">topologyKey:</span> <span class="string">&quot;kubernetes.io/hostname&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">k8snacos</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nacos/nacos-server:latest</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">&quot;2Gi&quot;</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">&quot;500m&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8848</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9848</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">client-rpc</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">9849</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">raft-rpc</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">7848</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">old-raft-rpc</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NACOS_REPLICAS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_HOST</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.host</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_DB_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.db.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_PORT</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.port</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_USER</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.user</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MYSQL_SERVICE_PASSWORD</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">configMapKeyRef:</span></span><br><span class="line">                  <span class="attr">name:</span> <span class="string">nacos-cm</span></span><br><span class="line">                  <span class="attr">key:</span> <span class="string">mysql.password</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">MODE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;cluster&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NACOS_SERVER_PORT</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;8848&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PREFER_HOST_MODE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;hostname&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NACOS_SERVERS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">&quot;nacos-0.nacos-headless.default.svc.cluster.local:8848 nacos-1.nacos-headless.default.svc.cluster.local:8848 nacos-2.nacos-headless.default.svc.cluster.local:8848&quot;</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nacos</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># ------------------- App Ingress ------------------- #</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nacos-headless</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">hello.nacos-demo.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">nacos-headless</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="string">server</span></span><br></pre></td></tr></table></figure><p>5）查看相关状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po,svc,ingress</span><br><span class="line">NAME              READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/mysql-dqkrt   1/1     Running   0          23h</span><br><span class="line">pod/nacos-0       1/1     Running   0          59m</span><br><span class="line">pod/nacos-1       1/1     Running   0          58m</span><br><span class="line">pod/nacos-2       1/1     Running   0          58m</span><br><span class="line"></span><br><span class="line">NAME                     TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                               AGE</span><br><span class="line">service/kubernetes       ClusterIP   120.168.0.1      &lt;none&gt;        443/TCP                               36d</span><br><span class="line">service/mysql            NodePort    120.168.127.20   &lt;none&gt;        3306:31472/TCP                        23h</span><br><span class="line">service/nacos-headless   ClusterIP   None             &lt;none&gt;        8848/TCP,9848/TCP,9849/TCP,7848/TCP   59m</span><br><span class="line">service/nginx            ClusterIP   120.168.73.170   &lt;none&gt;        80/TCP                                35d</span><br><span class="line"></span><br><span class="line">NAME                                       CLASS    HOSTS                  ADDRESS          PORTS   AGE</span><br><span class="line">ingress.networking.k8s.io/nacos-headless   &lt;none&gt;   hello.nacos-demo.com   120.168.228.66   80      59m</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211021105404654.png" alt="image-20211021105404654"></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_Ingress-Nginx</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_Ingress-Nginx/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_Ingress-Nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><ul><li><p><strong>版本信息</strong></p><ul><li>Kubernetes：v1.20.9</li><li>Ingress-Nginx：v0.48.1</li></ul></li></ul><ul><li><p><strong>镜像下载</strong></p><p> 采用 GitHub &amp; Aliyun 进行同步镜像，提前下载镜像到本地</p><ul><li><p><code>registry.cn-hongkong.aliyuncs.com/y-k8s/ingress-nginx_controller:v0.48.1</code></p></li><li><p><code>registry.cn-hongkong.aliyuncs.com/y-k8s/ingress-nginx_kube-webhook-certgen:v1.5.1</code></p></li><li><p><code>registry.cn-hongkong.aliyuncs.com/y-k8s/ingress-nginx_defaultbackend:1.5</code></p></li></ul></li></ul><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ul><li>部署环境为私有环境没有 lb 所有把 Deployment 改成 DaemonSet</li><li>需要增加 ipFamilyPolicy: PreferDualStack</li><li>修改镜像，使用本地的镜像</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-serviceaccount.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">automountServiceAccountToken:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-configmap.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/clusterrole.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">nodes</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressclasses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/clusterrolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-role.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">namespaces</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">endpoints</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">services</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">extensions</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingresses/status</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">networking.k8s.io</span>   <span class="comment"># k8s 1.14+</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingressclasses</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">resourceNames:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ingress-controller-leader-nginx</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">configmaps</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">events</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-rolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-service-webhook.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https-webhook</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">webhook</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-service.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="comment"># 增加ipFamilyPolicy</span></span><br><span class="line">  <span class="attr">ipFamilyPolicy:</span> <span class="string">PreferDualStack</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">http</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">https</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/controller-deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-controller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">minReadySeconds:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">controller</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">controller</span></span><br><span class="line">          <span class="comment"># image: k8s.gcr.io/ingress-nginx/controller:v0.48.1@sha256:e9fb216ace49dfa4a5983b183067e97496e7a8b307d2093f4278cd550c303899</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/y-k8s/ingress-nginx_controller:v0.48.1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">lifecycle:</span></span><br><span class="line">            <span class="attr">preStop:</span></span><br><span class="line">              <span class="attr">exec:</span></span><br><span class="line">                <span class="attr">command:</span></span><br><span class="line">                  <span class="bullet">-</span> <span class="string">/wait-shutdown</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">/nginx-ingress-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--election-id=ingress-controller-leader</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--ingress-class=nginx</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--configmap=$(POD_NAMESPACE)/ingress-nginx-controller</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--validating-webhook=:8443</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--validating-webhook-certificate=/usr/local/certificates/cert</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--validating-webhook-key=/usr/local/certificates/key</span></span><br><span class="line">          <span class="attr">securityContext:</span></span><br><span class="line">            <span class="attr">capabilities:</span></span><br><span class="line">              <span class="attr">drop:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">ALL</span></span><br><span class="line">              <span class="attr">add:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="string">NET_BIND_SERVICE</span></span><br><span class="line">            <span class="attr">runAsUser:</span> <span class="number">101</span></span><br><span class="line">            <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LD_PRELOAD</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/usr/local/lib/libmimalloc.so</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">3</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/healthz</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">10254</span></span><br><span class="line">              <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">periodSeconds:</span> <span class="number">10</span></span><br><span class="line">            <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">https</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8443</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-cert</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/usr/local/certificates/</span></span><br><span class="line">              <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">90Mi</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">300</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">webhook-cert</span></span><br><span class="line">          <span class="attr">secret:</span></span><br><span class="line">            <span class="attr">secretName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/validating-webhook.yaml</span></span><br><span class="line"><span class="comment"># before changing this value, check the required kubernetes version</span></span><br><span class="line"><span class="comment"># https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#prerequisites</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">admissionregistration.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ValidatingWebhookConfiguration</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">webhooks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">validate.nginx.ingress.kubernetes.io</span></span><br><span class="line">    <span class="attr">matchPolicy:</span> <span class="string">Equivalent</span></span><br><span class="line">    <span class="attr">rules:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">networking.k8s.io</span></span><br><span class="line">        <span class="attr">apiVersions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">v1beta1</span></span><br><span class="line">        <span class="attr">operations:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">CREATE</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">UPDATE</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">ingresses</span></span><br><span class="line">    <span class="attr">failurePolicy:</span> <span class="string">Fail</span></span><br><span class="line">    <span class="attr">sideEffects:</span> <span class="string">None</span></span><br><span class="line">    <span class="attr">admissionReviewVersions:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v1beta1</span></span><br><span class="line">    <span class="attr">clientConfig:</span></span><br><span class="line">      <span class="attr">service:</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">ingress-nginx-controller-admission</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/networking/v1beta1/ingresses</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">admissionregistration.k8s.io</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">validatingwebhookconfigurations</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/role.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">resources:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">secrets</span></span><br><span class="line">    <span class="attr">verbs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade,post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission-create</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">pre-install,pre-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ingress-nginx-admission-create</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">docker.io/jettech/kube-webhook-certgen:v1.5.1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=$(POD_NAMESPACE)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--secret-name=ingress-nginx-admission</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">runAsUser:</span> <span class="number">2000</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">batch/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Job</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">ingress-nginx-admission-patch</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-nginx</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">helm.sh/hook:</span> <span class="string">post-install,post-upgrade</span></span><br><span class="line">    <span class="attr">helm.sh/hook-delete-policy:</span> <span class="string">before-hook-creation,hook-succeeded</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ingress-nginx-admission-patch</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">helm.sh/chart:</span> <span class="string">ingress-nginx-3.35.0</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">ingress-nginx</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/version:</span> <span class="number">0.48</span><span class="number">.1</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/component:</span> <span class="string">admission-webhook</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">patch</span></span><br><span class="line">          <span class="comment"># image: docker.io/jettech/kube-webhook-certgen:v1.5.1</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/y-k8s/ingress-nginx_kube-webhook-certgen:v1.5.1</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--webhook-name=ingress-nginx-admission</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--namespace=$(POD_NAMESPACE)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--patch-mutating=false</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--secret-name=ingress-nginx-admission</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">--patch-failure-policy=Fail</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAMESPACE</span></span><br><span class="line">              <span class="attr">valueFrom:</span></span><br><span class="line">                <span class="attr">fieldRef:</span></span><br><span class="line">                  <span class="attr">fieldPath:</span> <span class="string">metadata.namespace</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">OnFailure</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">ingress-nginx-admission</span></span><br><span class="line">      <span class="attr">securityContext:</span></span><br><span class="line">        <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">runAsUser:</span> <span class="number">2000</span></span><br></pre></td></tr></table></figure><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f deploy.yaml</span><br><span class="line">$ kubectl get pods -o wide -n ingress-nginx</span><br><span class="line">$ kubectl get svc -n ingress-nginx</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ingress-nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8s部署_Kubeadm高可用1.20.x</title>
      <link href="/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_kubeadm%E9%AB%98%E5%8F%AF%E7%94%A81.20.x/"/>
      <url>/2022/04/07/kubernetes/k8s%E9%83%A8%E7%BD%B2_kubeadm%E9%AB%98%E5%8F%AF%E7%94%A81.20.x/</url>
      
        <content type="html"><![CDATA[<h3 id="前期规划"><a href="#前期规划" class="headerlink" title="前期规划"></a>前期规划</h3><p><strong>安装规划</strong></p><ul><li>配置环境：ESXI 6.7.0<ul><li>系统版本：CentOS-7.9-Minimal</li><li>Docker 版本：19.03.x</li><li>Pod 网段：172.168.0.0&#x2F;12</li><li>Service 网段：10.96.0.0&#x2F;12</li></ul></li></ul><p>注：宿主机网段、K8s Server 网段、Pod 网段不能重复</p><p><strong>集群网络规划</strong></p><table><thead><tr><th>主机名</th><th>IP 地址</th><th>功能</th></tr></thead><tbody><tr><td>k8s-master-lb</td><td>188.188.4.120</td><td>VIP</td></tr><tr><td>k8s-master01</td><td>188.188.4.121</td><td>Master01</td></tr><tr><td>k8s-master02</td><td>188.188.4.122</td><td>Master02</td></tr><tr><td>k8s-master03</td><td>188.188.4.123</td><td>Master03</td></tr><tr><td>k8s-node01</td><td>188.188.4.124</td><td>Node01</td></tr><tr><td>k8s-node02</td><td>188.188.4.125</td><td>Node02</td></tr></tbody></table><p><strong>常用工具安装</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install wget jq psmisc lrzsz vim net-tools telnet yum-utils device-mapper-persistent-data lvm2 git expect -y</span><br></pre></td></tr></table></figure><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><strong>所有节点配置 hosts 文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">188.188.4.120 k8s-master-lb</span></span><br><span class="line"><span class="string">188.188.4.121 k8s-master01</span></span><br><span class="line"><span class="string">188.188.4.122 k8s-master02</span></span><br><span class="line"><span class="string">188.188.4.123 k8s-master03</span></span><br><span class="line"><span class="string">188.188.4.124 k8s-node01</span></span><br><span class="line"><span class="string">188.188.4.125 k8s-node02</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p><strong>所有节点配置公共源</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">$ yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=1</span></span><br><span class="line"><span class="string">repo_gpgcheck=1</span></span><br><span class="line"><span class="string">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ sed -i -e <span class="string">&#x27;/mirrors.cloud.aliyuncs.com/d&#x27;</span> -e <span class="string">&#x27;/mirrors.aliyuncs.com/d&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br></pre></td></tr></table></figure><p><strong>所有节点关闭防火墙、selinux、dnsmasq、swap</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld </span><br><span class="line">$ systemctl <span class="built_in">disable</span> --now dnsmasq</span><br><span class="line">$ systemctl <span class="built_in">disable</span> --now NetworkManager</span><br><span class="line"></span><br><span class="line">$ setenforce 0</span><br><span class="line">$ sed -i <span class="string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/sysconfig/selinux</span><br><span class="line">$ sed -i <span class="string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/selinux/config</span><br><span class="line"></span><br><span class="line">$ swapoff -a &amp;&amp; sysctl -w vm.swappiness=0</span><br><span class="line">$ sed -ri <span class="string">&#x27;/^[^#]*swap/s@^@#@&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><p><strong>所有节点安装 ntpdate 进行同步时间</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -ivh http://mirrors.wlnmp.com/centos/wlnmp-release-centos.noarch.rpm</span><br><span class="line">$ yum install ntpdate -y</span><br><span class="line">$ <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span><br><span class="line">$ ntpdate time2.aliyun.com</span><br><span class="line">$ crontab -e</span><br><span class="line">*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com</span><br></pre></td></tr></table></figure><p><strong>配置免密钥登录</strong></p><p>master01 节点生成证书，并发放到其他节点作免密登录，集群管理也在 master01 上操作；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -P <span class="string">&quot;&quot;</span> -f /root/.ssh/id_rsa</span><br><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> k8s-master01 k8s-master02 k8s-master03 k8s-node01 k8s-node02;<span class="keyword">do</span></span><br><span class="line">expect -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">spawn ssh-copy-id -i /root/.ssh/id_rsa.pub root@<span class="variable">$i</span></span></span><br><span class="line"><span class="string">        expect &#123;</span></span><br><span class="line"><span class="string">                \&quot;*yes/no*\&quot; &#123;send \&quot;yes\r\&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">                \&quot;*password*\&quot; &#123;send \&quot;Password\r\&quot;; exp_continue&#125;</span></span><br><span class="line"><span class="string">                \&quot;*Password*\&quot; &#123;send \&quot;Password\r\&quot;;&#125;</span></span><br><span class="line"><span class="string">        &#125; &quot;</span></span><br><span class="line"><span class="keyword">done</span> </span><br></pre></td></tr></table></figure><h3 id="内核配置"><a href="#内核配置" class="headerlink" title="内核配置"></a>内核配置</h3><p><strong>所有节点配置 Limit</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 末尾添加如下内容</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft <span class="built_in">nproc</span> 65535</span><br><span class="line">* hard <span class="built_in">nproc</span> 655350</span><br><span class="line">* soft memlock unlimited</span><br><span class="line">* hard memlock unlimited</span><br></pre></td></tr></table></figure><p><strong>所有节点升级系统并重启</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum update -y --exclude=kernel* &amp;&amp; reboot</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过下载 kernel image 的 rpm 包进行安装</span></span><br><span class="line">$ rpm -import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">$ rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-4.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># ELRepo中有两个内核选项，kernel-lt(长期支持版本)，kernel-ml(主线最新版本)，采用长期支持版本(kernel-lt)，更稳定一些</span></span><br><span class="line">$ yum -y install kernel-lt --enablerepo=elrepo-kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内核顺序</span></span><br><span class="line">$ grub2-set-default 0 &amp;&amp; grub2-mkconfig -o /etc/grub2.cfg</span><br><span class="line">$ grubby --args=<span class="string">&quot;user_namespace.enable=1&quot;</span> --update-kernel=<span class="string">&quot;<span class="subst">$(grubby --default-kernel)</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用下面命令看看确认下是否启动默认内核指向上面安装的内核</span></span><br><span class="line">$ grubby --default-kernel &amp;&amp; reboot now</span><br></pre></td></tr></table></figure><p><strong>所有节点安装 ipvsadm</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install ipvsadm ipset sysstat conntrack libseccomp -y</span><br><span class="line">$ vim /etc/modules-load.d/ipvs.conf</span><br><span class="line"><span class="comment"># 加入以下内容</span></span><br><span class="line">ip_vs</span><br><span class="line">ip_vs_lc</span><br><span class="line">ip_vs_wlc</span><br><span class="line">ip_vs_rr</span><br><span class="line">ip_vs_wrr</span><br><span class="line">ip_vs_lblc</span><br><span class="line">ip_vs_lblcr</span><br><span class="line">ip_vs_dh</span><br><span class="line">ip_vs_sh</span><br><span class="line">ip_vs_fo</span><br><span class="line">ip_vs_nq</span><br><span class="line">ip_vs_sed</span><br><span class="line">ip_vs_ftp</span><br><span class="line">ip_vs_sh</span><br><span class="line">nf_conntrack</span><br><span class="line">ip_tables</span><br><span class="line">ip_set</span><br><span class="line">xt_set</span><br><span class="line">ipt_set</span><br><span class="line">ipt_rpfilter</span><br><span class="line">ipt_REJECT</span><br><span class="line">ipip</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now systemd-modules-load.service</span><br></pre></td></tr></table></figure><p><strong>所有节点开启 k8s 集群必须的内核参数</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/sysctl.d/k8s.conf</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class="line"><span class="string">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class="line"><span class="string">fs.may_detach_mounts = 1</span></span><br><span class="line"><span class="string">vm.overcommit_memory=1</span></span><br><span class="line"><span class="string">vm.panic_on_oom=0</span></span><br><span class="line"><span class="string">fs.inotify.max_user_watches=89100</span></span><br><span class="line"><span class="string">fs.file-max=52706963</span></span><br><span class="line"><span class="string">fs.nr_open=52706963</span></span><br><span class="line"><span class="string">net.netfilter.nf_conntrack_max=2310720</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_time = 600</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_probes = 3</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_intvl =15</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_tw_buckets = 36000</span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_reuse = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_orphans = 327680</span></span><br><span class="line"><span class="string">net.ipv4.tcp_orphan_retries = 3</span></span><br><span class="line"><span class="string">net.ipv4.tcp_syncookies = 1</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="line"><span class="string">net.ipv4.ip_conntrack_max = 65536</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 16384</span></span><br><span class="line"><span class="string">net.ipv4.tcp_timestamps = 0</span></span><br><span class="line"><span class="string">net.core.somaxconn = 16384</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有节点配置完内核后，重启服务器，保证重启后内核依旧加载</span></span><br><span class="line">$ sysctl --system &amp;&amp; init 6</span><br><span class="line">$ lsmod | grep --color=auto -e ip_vs -e nf_conntrack</span><br></pre></td></tr></table></figure><h3 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h3><p><strong>主要安装的是集群中用到的各种组件，比如 Docker-ce、Kubernetes 各组件等</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有节点安装</span></span><br><span class="line">$ yum install docker-ce-19.03.* docker-cli-19.03.* -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于新版kubelet建议使用systemd，所以可以把docker的CgroupDriver改成systemd</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /etc/docker</span><br><span class="line">$ <span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure><p><strong>所有节点安装最新版本 kubeadm</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看k8s版本组件</span></span><br><span class="line">$ yum list kubeadm.x86_64 --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line">$ yum install kubeadm-1.20* kubelet-1.20* kubectl-1.20* -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认配置的pause镜像使用gcr.io仓库，国内可能无法访问，所以这里配置Kubelet使用阿里云的pause镜像</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt;/etc/sysconfig/kubelet&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">KUBELET_EXTRA_ARGS=&quot;--cgroup-driver=systemd --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.2&quot;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure><h3 id="高可用组件"><a href="#高可用组件" class="headerlink" title="高可用组件"></a>高可用组件</h3><p><strong>所有 Master 节点通过 yum 安装 HAProxy 和 KeepAlived</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install keepalived haproxy -y</span><br></pre></td></tr></table></figure><ul><li>所有 Master 节点配置 HAProxy</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/haproxy/haproxy.cfg </span><br><span class="line">global</span><br><span class="line">  maxconn  2000</span><br><span class="line">  ulimit-n  16384</span><br><span class="line">  <span class="built_in">log</span>  127.0.0.1 local0 err</span><br><span class="line">  stats <span class="built_in">timeout</span> 30s</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  mode  http</span><br><span class="line">  option  httplog</span><br><span class="line">  <span class="built_in">timeout</span> connect 5000</span><br><span class="line">  <span class="built_in">timeout</span> client  50000</span><br><span class="line">  <span class="built_in">timeout</span> server  50000</span><br><span class="line">  <span class="built_in">timeout</span> http-request 15s</span><br><span class="line">  <span class="built_in">timeout</span> http-keep-alive 15s</span><br><span class="line"></span><br><span class="line">frontend monitor-in</span><br><span class="line">  <span class="built_in">bind</span> *:33305</span><br><span class="line">  mode http</span><br><span class="line">  option httplog</span><br><span class="line">  monitor-uri /monitor</span><br><span class="line"></span><br><span class="line">frontend 4dev-m</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:16443</span><br><span class="line">  <span class="built_in">bind</span> 127.0.0.1:16443</span><br><span class="line">  mode tcp</span><br><span class="line">  option tcplog</span><br><span class="line">  tcp-request inspect-delay 5s</span><br><span class="line">  default_backend 4dev-m</span><br><span class="line"></span><br><span class="line">backend 4dev-m</span><br><span class="line">  mode tcp</span><br><span class="line">  option tcplog</span><br><span class="line">  option tcp-check</span><br><span class="line">  balance roundrobin</span><br><span class="line">  default-server inter 10s downinter 5s rise 2 fall 2 slowstart 60s maxconn 250 maxqueue 256 weight 100</span><br><span class="line">  server k8s-master01188.188.4.121:6443  check</span><br><span class="line">  server k8s-master02188.188.4.122:6443  check</span><br><span class="line">  server k8s-master03188.188.4.123:6443  check</span><br></pre></td></tr></table></figure><ul><li>所有 Master 节点配置 KeepAlived (注意每个注意每个节点的 IP 和网卡 interface 参数)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master01</span></span><br><span class="line">$ vim /etc/keepalived/keepalived.conf </span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span></span><br><span class="line">    interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    fall 2  </span><br><span class="line">rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens192</span><br><span class="line">    mcast_src_ip 188.188.4.121</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 101</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.4.120</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_apiserver</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master02</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span></span><br><span class="line">   interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    fall 2  </span><br><span class="line">rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens192</span><br><span class="line">    mcast_src_ip 188.188.4.122</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.4.120</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_apiserver</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master03</span></span><br><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_DEVEL</span><br><span class="line">script_user root</span><br><span class="line">    enable_script_security</span><br><span class="line">&#125;</span><br><span class="line">vrrp_script chk_apiserver &#123;</span><br><span class="line">    script <span class="string">&quot;/etc/keepalived/check_apiserver.sh&quot;</span></span><br><span class="line"> interval 5</span><br><span class="line">    weight -5</span><br><span class="line">    fall 2  </span><br><span class="line">rise 1</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    interface ens192</span><br><span class="line">    mcast_src_ip 188.188.4.123</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 2</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass K8SHA_KA_AUTH</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        188.188.4.120</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;</span><br><span class="line">       chk_apiserver</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>所有 master 节点配置 KeepAlived 健康检查文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/keepalived/check_apiserver.sh </span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">err=0</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> $(<span class="built_in">seq</span> 1 3)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    check_code=$(pgrep haproxy)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="variable">$check_code</span> == <span class="string">&quot;&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        err=$(<span class="built_in">expr</span> <span class="variable">$err</span> + 1)</span><br><span class="line">        <span class="built_in">sleep</span> 1</span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        err=0</span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$err</span> != <span class="string">&quot;0&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;systemctl stop keepalived&quot;</span></span><br><span class="line">    /usr/bin/systemctl stop keepalived</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chmod</span> +x /etc/keepalived/check_apiserver.sh</span><br></pre></td></tr></table></figure><p><strong>启动 haproxy 和 keepalived</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now haproxy keepalived</span><br></pre></td></tr></table></figure><h3 id="集群初始化"><a href="#集群初始化" class="headerlink" title="集群初始化"></a>集群初始化</h3><p><strong>Master01 节点创建 kubeadm-config.yaml</strong></p><p><font color=red>注：如不是高可用集群，无需配置 <code>高可用组件</code>，并且需要将下列的 vip-ip:16443 改为master01 的地址，而 16443 改为 apiserver 的默认端口 6443</font></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">7t2weq.bjbawausm0jaxury</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="string">24h0m0s</span></span><br><span class="line">  <span class="attr">usages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">signing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">188.188</span><span class="number">.4</span><span class="number">.121</span></span><br><span class="line">  <span class="attr">bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line">  <span class="attr">criSocket:</span> <span class="string">/var/run/dockershim.sock</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-master01</span></span><br><span class="line">  <span class="attr">taints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">certSANs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">188.188</span><span class="number">.4</span><span class="number">.120</span></span><br><span class="line">  <span class="attr">timeoutForControlPlane:</span> <span class="string">4m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controlPlaneEndpoint:</span> <span class="number">188.188</span><span class="number">.4</span><span class="number">.120</span><span class="string">:16443</span></span><br><span class="line"><span class="attr">controllerManager:</span> &#123;&#125;</span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">CoreDNS</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.20.13</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="number">172.168</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">scheduler:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>更新 kubeadm 文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubeadm config migrate --old-config kubeadm-config.yaml --new-config new.yaml</span><br><span class="line">$ kubeadm config images pull --config /root/new.yaml</span><br><span class="line"><span class="comment"># 所有节点设置开机自启动（如失败无法理会，初始化成功后即可启动）</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure><p><em>注</em>：将更新后的文件 <code>new.yaml</code> 文件复制到其他 Master 节点，便于所有 Master 节点提前下载镜像</p><p><strong>Master01 节点初始化</strong></p><p>初始化后会有 <code>/etc/kubernetes</code> 目录下生成对应的证书和配置文件，之后其他 Master 节点加入 Master01 即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubeadm init --config /root/new.yaml --upload-certs</span><br></pre></td></tr></table></figure><ul><li>初始化失败：需要重置再次初始化</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubeadm reset -f ; ipvsadm --clear  ; <span class="built_in">rm</span> -rf ~/.kube</span><br></pre></td></tr></table></figure><ul><li>初始化成功：会产生 Token 值，用于其他节点加入时使用</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">  sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">  sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line"></span><br><span class="line">Alternatively, <span class="keyword">if</span> you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run <span class="string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">You can now <span class="built_in">join</span> any number of the control-plane node running the following <span class="built_in">command</span> on each as root:</span><br><span class="line"></span><br><span class="line">  kubeadm <span class="built_in">join</span> 188.188.4.120:16443 --token 7t2weq.bjbawausm0jaxury \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:ef7f6e2707c4f3eed43252ebe58d2e13020412f6f436e497a62e476efb721fca \</span><br><span class="line">    --control-plane --certificate-key 5068c01712f2da51285969a5f1b90383433e637ed5606a93be94065a2d09b7bd</span><br><span class="line"></span><br><span class="line">Please note that the certificate-key gives access to cluster sensitive data, keep it secret!</span><br><span class="line">As a safeguard, uploaded-certs will be deleted <span class="keyword">in</span> two hours; If necessary, you can use</span><br><span class="line"><span class="string">&quot;kubeadm init phase upload-certs --upload-certs&quot;</span> to reload certs afterward.</span><br><span class="line"></span><br><span class="line">Then you can <span class="built_in">join</span> any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm <span class="built_in">join</span> 188.188.4.120:16443 --token 7t2weq.bjbawausm0jaxury \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:ef7f6e2707c4f3eed43252ebe58d2e13020412f6f436e497a62e476efb721fca</span><br></pre></td></tr></table></figure><p><strong>Master01 节点配置环境变量，用于访问集群</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">$ sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) <span class="variable">$HOME</span>/.kube/config</span><br><span class="line">$ <span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt;&gt; /root/.bashrc</span></span><br><span class="line"><span class="string">export KUBECONFIG=/etc/kubernetes/admin.conf</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">$ <span class="built_in">source</span> /root/.bashrc</span><br></pre></td></tr></table></figure><p>采用初始化安装方式的，所有系统组件均以容器方式运行，并且在 kube-system 命令空间内</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get node</span><br><span class="line">NAME           STATUS     ROLES                  AGE     VERSION</span><br><span class="line">k8s-master01   NotReady   control-plane,master   6m6s    v1.20.13</span><br><span class="line">k8s-master02   NotReady   control-plane,master   3m13s   v1.20.13</span><br><span class="line">k8s-master03   NotReady   control-plane,master   2m19s   v1.20.13</span><br><span class="line">k8s-node01     NotReady   &lt;none&gt;                 51s     v1.20.13</span><br><span class="line">k8s-node02     NotReady   &lt;none&gt;                 47s     v1.20.13</span><br><span class="line"></span><br><span class="line">$ kubectl get po -A -owide</span><br><span class="line">NAMESPACE     NAME                                   READY   STATUS    RESTARTS   AGE     IP              NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">kube-system   coredns-54d67798b7-4f85f               0/1     Pending   0          6m12s   &lt;none&gt;          &lt;none&gt;         &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   coredns-54d67798b7-m94vj               0/1     Pending   0          6m12s   &lt;none&gt;          &lt;none&gt;         &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   etcd-k8s-master01                      1/1     Running   0          6m12s   188.188.4.121   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   etcd-k8s-master02                      1/1     Running   0          3m25s   188.188.4.122   k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   etcd-k8s-master03                      1/1     Running   0          2m31s   188.188.4.123   k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-apiserver-k8s-master01            1/1     Running   0          6m12s   188.188.4.121   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-apiserver-k8s-master02            1/1     Running   0          3m26s   188.188.4.122   k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-apiserver-k8s-master03            1/1     Running   0          77s     188.188.4.123   k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-controller-manager-k8s-master01   1/1     Running   1          6m11s   188.188.4.121   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-controller-manager-k8s-master02   1/1     Running   0          3m25s   188.188.4.122   k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-controller-manager-k8s-master03   1/1     Running   0          99s     188.188.4.123   k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-5gp6j                       1/1     Running   0          64s     188.188.4.124   k8s-node01     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-bq8gg                       1/1     Running   0          6m13s   188.188.4.121   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-mprpf                       1/1     Running   0          2m32s   188.188.4.123   k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-qkz6z                       1/1     Running   0          3m26s   188.188.4.122   k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-proxy-tsvk9                       1/1     Running   0          60s     188.188.4.125   k8s-node02     &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-scheduler-k8s-master01            1/1     Running   1          6m12s   188.188.4.121   k8s-master01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-scheduler-k8s-master02            1/1     Running   0          3m25s   188.188.4.122   k8s-master02   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">kube-system   kube-scheduler-k8s-master03            1/1     Running   0          90s     188.188.4.123   k8s-master03   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h3 id="Calico-安装"><a href="#Calico-安装" class="headerlink" title="Calico 安装"></a>Calico 安装</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211124111602256.png" alt="image-20211124111602256"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211124112502719.png" alt="image-20211124112502719"></p><p>Master01 节点执行即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 最新版本</span></span><br><span class="line">$ curl https://docs.projectcalico.org/manifests/calico-etcd.yaml -o calico-etcd.yaml</span><br><span class="line"><span class="comment"># 可选择性版本下载</span></span><br><span class="line">$ curl https://docs.projectcalico.org/archive/v3.20/manifests/calico-etcd.yaml -o calico-etcd.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改calico-etcd.yaml配置文件</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s#etcd_endpoints: &quot;http://&lt;ETCD_IP&gt;:&lt;ETCD_PORT&gt;&quot;#etcd_endpoints: &quot;https://188.188.4.121:2379,https://188.188.4.122:2379,https://188.188.4.123:2379&quot;#g&#x27;</span> calico-etcd.yaml</span><br><span class="line">$ ETCD_CA=`<span class="built_in">cat</span> /etc/kubernetes/pki/etcd/ca.crt | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">$ ETCD_CERT=`<span class="built_in">cat</span> /etc/kubernetes/pki/etcd/server.crt | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">$ ETCD_KEY=`<span class="built_in">cat</span> /etc/kubernetes/pki/etcd/server.key | <span class="built_in">base64</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;\n&#x27;</span>`</span><br><span class="line">$ sed -i <span class="string">&quot;s@# etcd-key: null@etcd-key: <span class="variable">$&#123;ETCD_KEY&#125;</span>@g; s@# etcd-cert: null@etcd-cert: <span class="variable">$&#123;ETCD_CERT&#125;</span>@g; s@# etcd-ca: null@etcd-ca: <span class="variable">$&#123;ETCD_CA&#125;</span>@g&quot;</span> calico-etcd.yaml</span><br><span class="line">$ sed -i <span class="string">&#x27;s#etcd_ca: &quot;&quot;#etcd_ca: &quot;/calico-secrets/etcd-ca&quot;#g; s#etcd_cert: &quot;&quot;#etcd_cert: &quot;/calico-secrets/etcd-cert&quot;#g; s#etcd_key: &quot;&quot; #etcd_key: &quot;/calico-secrets/etcd-key&quot; #g&#x27;</span> calico-etcd.yaml</span><br><span class="line">$ POD_SUBNET=`<span class="built_in">cat</span> /etc/kubernetes/manifests/kube-controller-manager.yaml | grep cluster-cidr= | awk -F= <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>`</span><br><span class="line"><span class="comment"># 修改默认配置的网段信息并去除注释（如替换过请自行改回）</span></span><br><span class="line">$ sed -i <span class="string">&#x27;s@# - name: CALICO_IPV4POOL_CIDR@- name: CALICO_IPV4POOL_CIDR@g; s@#   value: &quot;192.168.0.0/16&quot;@  value: &#x27;</span><span class="string">&quot;<span class="variable">$&#123;POD_SUBNET&#125;</span>&quot;</span><span class="string">&#x27;@g&#x27;</span> calico-etcd.yaml</span><br><span class="line">$ kubectl apply -f calico-etcd.yaml</span><br></pre></td></tr></table></figure><p>安装后，重新获取查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get node</span><br><span class="line">NAME           STATUS   ROLES                  AGE    VERSION</span><br><span class="line">k8s-master01   Ready    control-plane,master   2d3h   v1.20.13</span><br><span class="line">k8s-node01     Ready    &lt;none&gt;                 2d3h   v1.20.13</span><br><span class="line">k8s-node02     Ready    &lt;none&gt;                 2d3h   v1.20.13</span><br><span class="line"></span><br><span class="line">$ kubectl get po -A</span><br><span class="line">NAMESPACE     NAME                                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   calico-kube-controllers-6d57448946-47795   1/1     Running   1          27h</span><br><span class="line">kube-system   calico-node-bdhxc                          1/1     Running   1          27h</span><br><span class="line">kube-system   calico-node-rdxpb                          1/1     Running   1          27h</span><br><span class="line">kube-system   calico-node-s5qjc                          1/1     Running   2          27h</span><br><span class="line">kube-system   coredns-54d67798b7-7kz57                   1/1     Running   0          28s</span><br><span class="line">kube-system   coredns-54d67798b7-fwsrp                   1/1     Running   0          28s</span><br><span class="line">kube-system   etcd-k8s-master01                          1/1     Running   2          2d3h</span><br><span class="line">kube-system   kube-apiserver-k8s-master01                1/1     Running   2          44h</span><br><span class="line">kube-system   kube-controller-manager-k8s-master01       1/1     Running   2          2d3h</span><br><span class="line">kube-system   kube-proxy-8dvz2                           1/1     Running   2          2d3h</span><br><span class="line">kube-system   kube-proxy-bq7tl                           1/1     Running   2          2d3h</span><br><span class="line">kube-system   kube-proxy-r4rbb                           1/1     Running   2          2d3h</span><br><span class="line">kube-system   kube-scheduler-k8s-master01                1/1     Running   2          2d3h</span><br></pre></td></tr></table></figure><h3 id="Metrics-安装"><a href="#Metrics-安装" class="headerlink" title="Metrics 安装"></a>Metrics 安装</h3><p>在新版的 Kubernetes 中，系统资源的采集均使用 Metrics-server，可通过 Metrics 采集节点和 Pod 的内存、磁盘、CPU 和网络的使用率。</p><p>将 Master01 节点的 <code>front-proxy-ca.crt</code> 复制到其它 Node 节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">for</span> node <span class="keyword">in</span> k8s-master02 k8s-master03 k8s-node01 k8s-node02; <span class="keyword">do</span></span><br><span class="line">     scp /etc/kubernetes/pki/front-proxy-ca.crt <span class="variable">$node</span>:/etc/kubernetes/pki/front-proxy-ca.crt</span><br><span class="line">  <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>查看版本兼容是否合适</strong></p><table><thead><tr><th>Metrics Server</th><th>Metrics API group&#x2F;version</th><th>Supported Kubernetes version</th></tr></thead><tbody><tr><td>0.6.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>*1.19+</td></tr><tr><td>0.5.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>*1.8+</td></tr><tr><td>0.4.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>*1.8+</td></tr><tr><td>0.3.x</td><td><code>metrics.k8s.io/v1beta1</code></td><td>1.8-1.21</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.5.2/components.yaml</span><br></pre></td></tr></table></figure><p>提前下载镜像并修改镜像地址信息和添加证书认证，否则无法下载到镜像</p><p><a href="https://kubernetes.io/docs/tasks/extend-kubernetes/configure-aggregation-layer/">配置聚合层</a>，支持代理服务器和扩展 apiserver 之间的相互 TLS 身份验证</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># nu:129~137</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--cert-dir=/tmp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--secure-port=4443</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-use-node-status-port</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--metric-resolution=15s</span></span><br><span class="line">        <span class="comment"># 添加证书认证内容，参考&#x27;配置聚合层&#x27;,并修改镜像地址</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--kubelet-insecure-tls</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--requestheader-client-ca-file=/etc/kubernetes/pki/front-proxy-ca.crt</span> <span class="comment"># change to front-proxy-ca.crt for kubeadm</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--requestheader-username-headers=X-Remote-User</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--requestheader-group-headers=X-Remote-Group</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">--requestheader-extra-headers-prefix=X-Remote-Extra-</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yk-k8s/metrics-server:v0.5.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nu:167~176</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line">        <span class="comment"># 添加证书路径，进行hostPath挂载</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ca-ssl</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line">      <span class="attr">nodeSelector:</span></span><br><span class="line">        <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">priorityClassName:</span> <span class="string">system-cluster-critical</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">metrics-server</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">name:</span> <span class="string">tmp-dir</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ca-ssl</span></span><br><span class="line">        <span class="attr">hostPath:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/etc/kubernetes/pki</span></span><br></pre></td></tr></table></figure><p>安装后查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po -n kube-system | grep metrics</span><br><span class="line">metrics-server-86bf587fcd-sfn5r            1/1     Running   0          2m57s</span><br><span class="line"></span><br><span class="line">$ kubectl top node</span><br><span class="line">NAME           CPU(cores)   CPU%   MEMORY(bytes)   MEMORY%   </span><br><span class="line">k8s-master01   228m         3%     937Mi           7%        </span><br><span class="line">k8s-master02   229m         3%     861Mi           7%        </span><br><span class="line">k8s-master03   246m         4%     968Mi           8%        </span><br><span class="line">k8s-node01     121m         3%     592Mi           4%        </span><br><span class="line">k8s-node02     131m         3%     593Mi           4% </span><br></pre></td></tr></table></figure><h3 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h3><p>Dashboard 用于展示集群中的各类资源，同时也可以通过 Dashboard 实时查看 Pod 的日志和在容器中执行一些命令等</p><p>**首先创建管理员 **</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> admin.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding </span><br><span class="line">metadata: </span><br><span class="line">  name: admin-user</span><br><span class="line">  annotations:</span><br><span class="line">    rbac.authorization.kubernetes.io/autoupdate: <span class="string">&quot;true&quot;</span></span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载最新版本的Dashboard</span></span><br><span class="line">$ wget https://raw.githubusercontent.com/kubernetes/dashboard/v2.4.0/aio/deploy/recommended.yaml</span><br><span class="line">$ kubectl apply -f .</span><br></pre></td></tr></table></figure><p>注意：使用 google-chrome 浏览器启动前，修改启动参数，解决无法访问 Dashboard  的问题</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--test-type --ignore-certificate-errors</span><br></pre></td></tr></table></figure><p>更改 Dashboard 的 svc 为 NodePort</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">edit</span> <span class="string">svc</span> <span class="string">kubernetes-dashboard</span> <span class="string">-n</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">  <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line"><span class="attr">selector:</span></span><br><span class="line">  <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><p>将 ClusterIP 更改为 NodePort</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">  <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">  <span class="attr">nodePort:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">selector:</span></span><br><span class="line">  <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line"><span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p>查看更新后的服务端口情况</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get svc kubernetes-dashborad -n kubernetes-dashboard</span><br></pre></td></tr></table></figure><p>根据显示的实例端口，通过任意已安装了 kube-proxy 的宿主机或 VIP 的 IP+端口即可访问</p><p><strong>查看 token 值</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep admin-user | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">Name:         admin-user-token-fbjpl</span><br><span class="line">Namespace:    kube-system</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: 77249734-ca1f-49aa-b29e-beaa5c90ae33</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1066 bytes</span><br><span class="line">namespace:  11 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IkVXQTRNTjN4LUZQVVBmXzJ2UU5jNE5oeVc1LURkVGw1eGRvVTJIQ19jeGsifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLWZianBsIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI3NzI0OTczNC1jYTFmLTQ5YWEtYjI5ZS1iZWFhNWM5MGFlMzMiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZS1zeXN0ZW06YWRtaW4tdXNlciJ9.jBbVbgZXFjr2KRy_8_83ht6N4b2jZMgFpCFByhzxtJOJPA35BKJsAuKhgV-TZ0Uk2_jpE2RDNt4PCoOOCKFcuPGnsEumbNcmjwh0q2w-OTzcuohhkJRhi34haa4MafcbqUtsrHszPPw1o71TZ_Ex_ydQr7OSmljfxtkdYvtAT4RJ7g7ygNpPnMuPB7cpIjTHCwrwFcM9HAnJLkJqjlSehPZeg5R8Shs4lU2TTTLn4LfbVKuS6qCG8PHNW9iJ1IDQfjguIEd3WXiMUoO5DpjY_v6M-nZnRi-1cLGkMkWVvjSqqsnVZH-zdoMj6mp1G1pA9HdXIMsMSzGbMsMpTeiRnA</span><br></pre></td></tr></table></figure><p>将 token 值输入到令牌后，单击登录即可访问 Dashboard</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207100817690.png" alt="image-20211207100817690"></p><h3 id="缺失部分"><a href="#缺失部分" class="headerlink" title="缺失部分"></a>缺失部分</h3><p><strong>Kube-proxy 改为 ipvs 模式</strong></p><p>因在初始化集群时注释了 ipvs 配置，所以需要自行修改一下；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># master01节点操作</span></span><br><span class="line">$ kubectl edit cm kube-proxy -n kube-system</span><br><span class="line"><span class="comment"># nu:44</span></span><br><span class="line">mode: <span class="string">&quot;ipvs&quot;</span></span><br></pre></td></tr></table></figure><p>更新 kube-proxy 的 Pod</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl patch daemonset kube-proxy -p <span class="string">&quot;&#123;\&quot;spec\&quot;:&#123;\&quot;template\&quot;:&#123;\&quot;metadata\&quot;:&#123;\&quot;annotations\&quot;:&#123;\&quot;date\&quot;:\&quot;`date +&#x27;%s&#x27;`\&quot;&#125;&#125;&#125;&#125;&#125;&quot;</span> -n kube-system</span><br></pre></td></tr></table></figure><p>验证 kube-proxy 模式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl 127.0.0.1:10249/proxyMode</span><br><span class="line"><span class="comment"># 初始化后默认为iptables</span></span><br><span class="line">ipvs</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>Token 过期</strong></p><p>注：kubeadm 安装的集群，证书有效期默认为一年。以下步骤是上述 init 命令产生的 Token 过期了才需要执行以下步骤，如未过期无需执行</p><blockquote><p>通过kubeadm初始化之后，都会提供node加入的token，默认的token的有效期是24小时，一般操作是重新生成新token，再获取ca证书sha256编码hash值，最后把节点加入到集群中。</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看token时效</span></span><br><span class="line">$ kubeadm token list</span><br></pre></td></tr></table></figure><ul><li>Token 过期后生成新的 Token</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure><p><em>注意：这样生成的 Token 有效期为24小时，如不想过期，可加上 <code>--ttl=0</code> 参数</em></p><ul><li>Master 需要生成 <code>--certificate-key</code></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubeadm init phase upload-certs --upload-certs</span><br></pre></td></tr></table></figure><ul><li>Token 未过期就直接执行 join 就行了</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 188.188.4.120:16443 --token 7t2weq.bjbawausm0jaxury \</span><br><span class="line">  --discovery-token-ca-cert-hash sha256:ef7f6e2707c4f3eed43252ebe58d2e13020412f6f436e497a62e476efb721fca \</span><br><span class="line">  --control-plane --certificate-key 5068c01712f2da51285969a5f1b90383433e637ed5606a93be94065a2d09b7bd</span><br><span class="line">  </span><br><span class="line">kubeadm <span class="built_in">join</span> 188.188.4.120:16443 --token 7t2weq.bjbawausm0jaxury \</span><br><span class="line">  --discovery-token-ca-cert-hash sha256:ef7f6e2707c4f3eed43252ebe58d2e13020412f6f436e497a62e476efb721fca</span><br></pre></td></tr></table></figure><p><strong>节点组件</strong></p><p>Kubeadm 与二进制的区别，Kubeadm 的 master 节点中的 kube-apiserver、kube-scheduler、kube-controller-manager、etcd 都是以容器方式运行的，可以通过 <code>kubectl get po -n kube-system</code> 查看。</p><ul><li>kubelet 的配置文件在 <code>/etc/sysconfig/kubelet</code> 和 <code>/var/lib/kubelet/config.yaml</code>，修改后需要重启 kubelet 进程；</li><li>其它组件的配置文件在 <code>/etc/kubernetes/manifests</code> 目录下，比如 kube-apiserver.yaml，该 yaml 文件更改后，kubelet 会自动刷新配置，也就会重启 pod。(不能再次创建文件)</li><li>kube-proxy 的配置在 kube-system 命名空间下的 configmap 中，可以通过 <code>kubectl edit cm kube-proxy -n kube-system</code> 进行更改，更改完成后，需要通过 patch 重启 kube-proxy</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl patch daemonset kube-proxy -p <span class="string">&quot;&#123;\&quot;spec\&quot;:&#123;\&quot;template\&quot;:&#123;\&quot;metadata\&quot;:&#123;\&quot;annotations\&quot;:&#123;\&quot;date\&quot;:\&quot;`date +&#x27;%s&#x27;`\&quot;&#125;&#125;&#125;&#125;&#125;&quot;</span> -n kube-system</span><br></pre></td></tr></table></figure><p><strong>资源利用</strong></p><p>Node 节点上主要部署公司的一些业务应用，生产环境中不建议 Master 节点部署系统组件之外的其他 Pod，测试环境可以允许 Master 节点部署 Pod 以节省系统资源，可以通过以下方式打开：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看污点并将Master节点污点去除</span></span><br><span class="line">$ kubectl  describe node -l node-role.kubernetes.io/master=  | grep Taints</span><br><span class="line">Taints:             node-role.kubernetes.io/master:NoSchedule</span><br><span class="line">Taints:             node-role.kubernetes.io/master:NoSchedule</span><br><span class="line">Taints:             node-role.kubernetes.io/master:NoSchedule</span><br><span class="line"></span><br><span class="line">$ kubectl  taint node  -l node-role.kubernetes.io/master node-role.kubernetes.io/master:NoSchedule-</span><br><span class="line">node/k8s-master01 untainted</span><br><span class="line">node/k8s-master02 untainted</span><br><span class="line">node/k8s-master03 untainted</span><br><span class="line"></span><br><span class="line">$ kubectl  describe node -l node-role.kubernetes.io/master=  | grep Taints</span><br><span class="line">Taints:             &lt;none&gt;</span><br><span class="line">Taints:             &lt;none&gt;</span><br><span class="line">Taints:             &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>参考文献</strong></p><p><a href="https://ke.qq.com/course/2738602">更多学习内容请参考-K8s全栈架构师(基于世界五百强生产经验研发)</a></p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubeadm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Jenkins(war)</title>
      <link href="/2022/04/07/jenkins/centos7%E9%83%A8%E7%BD%B2_Jenkins(war)/"/>
      <url>/2022/04/07/jenkins/centos7%E9%83%A8%E7%BD%B2_Jenkins(war)/</url>
      
        <content type="html"><![CDATA[<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：jdk-8u291-linux-x64 + apache-maven-3.8.1 + Jenkins-2.289.2</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112111938963.png" alt="image-20220112111938963"></p><ul><li>Java</li></ul><p>安装 Jenkins 前确保已配置好 JDK</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.oracle.com/otn/java/jdk/8u291-b10/d7fc238d0cbf4b0dac67be84580cfb4b/jdk-8u291-linux-x64.tar.gz</span><br><span class="line">$ tar -xf jdk-8u291-linux-x64.tar.gz -C /usr/local/ &amp;&amp; <span class="built_in">mv</span> /usr/local/jdk1.8.0_291 /usr/local/java</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">JRE_HOME=/usr/local/java/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><ul><li>Maven</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.bfsu.edu.cn/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz</span><br><span class="line">$ tar -xf apache-maven-3.8.1-bin.tar.gz -C /usr/local/ &amp;&amp; <span class="built_in">mv</span> /usr/local/apache-maven-3.8.1 /usr/local/maven</span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># maven</span></span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;JAVA_HOME&#125;</span>/bin:/usr/local/mysql/bin:<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="Jenkins-启动"><a href="#Jenkins-启动" class="headerlink" title="Jenkins 启动"></a>Jenkins 启动</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220112111125054.png" alt="image-20220112111125054"></p><ul><li>启动方式一：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://get.jenkins.io/war-stable/2.289.2/jenkins.war</span><br><span class="line">$ <span class="built_in">nohup</span> java -jar jenkins.war --httpPort=8080 &amp;</span><br></pre></td></tr></table></figure><ul><li>启动方式二：</li></ul><p>参考 Tomcat 部署方式，确认 Tomcat 服务正常运行；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/tomcat/webapps/ROOT</span><br><span class="line">$ <span class="built_in">rm</span> -rf *</span><br><span class="line">$ jar –xvf jenkins.war &amp;&amp; <span class="built_in">rm</span> -rf jenkins.war</span><br><span class="line">$ systemctl restart tomcat</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220311172651984.png" alt="image-20220311172651984"></p><p>根据提示获取密码，安装插件可选择跳过</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /root/.jenkins/secrets/initialAdminPassword</span><br><span class="line">cdd114654bf548f5a32df2bb79b5401b</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220311172820791.png" alt="image-20220311172820791"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220311172914502.png" alt="image-20220311172914502"></p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装_OpenJDK11</title>
      <link href="/2022/04/07/java/centos7%E5%AE%89%E8%A3%85_OpenJDK11/"/>
      <url>/2022/04/07/java/centos7%E5%AE%89%E8%A3%85_OpenJDK11/</url>
      
        <content type="html"><![CDATA[<p><strong>下载地址</strong></p><h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><blockquote><p>查看系统是否已安装 OpenJDK。一般的 linux 都默认使用了开源的 OpenJDK</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">rpm -qa | grep java</span><br><span class="line">rpm -qa | grep jdk</span><br><span class="line"><span class="comment"># 批量卸载</span></span><br><span class="line">rpm -qa | grep jdk | xargs rpm -e --nodeps</span><br><span class="line">rpm -qa | grep java | xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><p>查看相关安装包并进行 yum 下载安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum search java-11-openjdk</span><br><span class="line">$ yum install -y java-11-openjdk java-11-openjdk-devel</span><br></pre></td></tr></table></figure><p>查找 JAVA 安装目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查找安装目录</span><br><span class="line">$ <span class="built_in">which</span> java 或 <span class="built_in">ls</span> -l $(<span class="built_in">which</span> java)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果显示的是/usr/bin/java请执行下面命令</span></span><br><span class="line"><span class="built_in">ls</span> -lr /usr/bin/java</span><br><span class="line"><span class="built_in">ls</span> -lrt /etc/alternatives/java</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：/etc/alternatives/java -&gt; /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64/bin/java</span></span><br><span class="line"><span class="comment"># 上面的/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64就是JAVA的安装路径</span></span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过yum方式安装默认安装在/usr/lib/jvm文件下</span></span><br><span class="line"><span class="comment"># 修改JAVA_HOME为/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64</span></span><br><span class="line"><span class="comment"># 编辑/etc/profile文件</span></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># Java Environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/jre/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.java.net/openjdk/jdk11/ri/openjdk-11+28_linux-x64_bin.tar.gz</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/java</span><br><span class="line">$ tar -zxvf openjdk-11+28_linux-x64_bin.tar.gz -C /usr/local/java/</span><br></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># Java Environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/local/java/jdk-11</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使环境变量生效</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;11&quot;</span> 2018-09-25</span><br><span class="line">OpenJDK Runtime Environment 18.9 (build 11+28)</span><br><span class="line">OpenJDK 64-Bit Server VM 18.9 (build 11+28, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装_JDK1.8(编译&amp;Yum)</title>
      <link href="/2022/04/07/java/centos7%E5%AE%89%E8%A3%85_JDK1.8(%E7%BC%96%E8%AF%91&amp;Yum)/"/>
      <url>/2022/04/07/java/centos7%E5%AE%89%E8%A3%85_JDK1.8(%E7%BC%96%E8%AF%91&amp;Yum)/</url>
      
        <content type="html"><![CDATA[<h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><blockquote><p>查看系统是否已安装 Java。一般的 linux 都默认使用了开源的 OpenJDK</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看</span></span><br><span class="line">rpm -qa | grep java</span><br><span class="line">rpm -qa | grep jdk</span><br><span class="line"><span class="comment"># 批量卸载</span></span><br><span class="line">rpm -qa | grep jdk | xargs rpm -e --nodeps</span><br><span class="line">rpm -qa | grep java | xargs rpm -e --nodeps</span><br></pre></td></tr></table></figure><h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://download.oracle.com/otn/java/jdk/8u291-b10/d7fc238d0cbf4b0dac67be84580cfb4b/jdk-8u291-linux-x64.tar.gz</span><br><span class="line">$ tar -xf jdk-8u291-linux-x64.tar.gz -C /usr/local/ </span><br><span class="line">$ <span class="built_in">mv</span> /usr/local/jdk1.8.0_291 /usr/local/java</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">JRE_HOME=/usr/local/java/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h3 id="Yum-安装"><a href="#Yum-安装" class="headerlink" title="Yum 安装"></a>Yum 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install java-1.8.0-openjdk -y</span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">&quot;1.8.0_242&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_242-b08)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.242-b08, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes安装_Helm</title>
      <link href="/2022/04/07/helm/kubernetes%E5%AE%89%E8%A3%85_Helm/"/>
      <url>/2022/04/07/helm/kubernetes%E5%AE%89%E8%A3%85_Helm/</url>
      
        <content type="html"><![CDATA[<p><strong>版本环境：</strong></p><ul><li>硬件系统：ESXI 6.7.0 Update 1</li><li>操作系统：CentOS 7.9</li><li>Docker 版本：20.10.6</li><li>Kubernetes 版本：1.21.x+HA高可用</li><li>Helm 版本：v3.5.4</li></ul><p><strong>参考地址：</strong></p><h3 id="Helm-介绍"><a href="#Helm-介绍" class="headerlink" title="Helm 介绍"></a>Helm 介绍</h3><p>Helm 是一款能够帮助你管理 Kubernetes 应用的程序，它可以让你创建自己的应用模板（chart），然后模板来创建配置很多可自定义参数，每次我们只需要设定很少或者不设置参数（使用默认参数）就可以将应用部署到 Kubernetes 中，后期就可以通过 Helm 来进行升级、回滚、删除等等操作的管理。</p><p>Helm 的 Charts 类似于应用商店，里面存有很多公司提供不同应用的模板，例如常部署的 Redis、Mysql、Nginx 等等，可以让我们很方便的采用别人的模板，然后进行一定的配置，就能在我们的 Kubernetes 集群中创建对应的应用。</p><p>Helm 还经常与 CI\CD 配置使用，在这个过程中用于维护应用程序的安装、升级、回滚等操作</p><h3 id="Helm-安装"><a href="#Helm-安装" class="headerlink" title="Helm 安装"></a>Helm 安装</h3><p>1）访问 <a href="https://github.com/helm/helm/releases">Helm Github 下载页面</a> 找到最新的客户端，里面有不同系统下的包，这里我们选择 Linux amd64，然后在 Linux 系统中使用 Wget 命令进行下载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载Helm客户端</span></span><br><span class="line">$ wget https://get.helm.sh/helm-v3.5.4-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><p>2）接下来解压下载的包，然后将客户端放置到 &#x2F;usr&#x2F;local&#x2F;bin&#x2F; 目录下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压 Helm</span></span><br><span class="line">$ tar -zxvf helm-v3.5.4-linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 复制客户端执行文件到 bin 目录下，方便在系统下能执行 helm 命令</span></span><br><span class="line">$ <span class="built_in">cp</span> linux-amd64/helm /usr/local/bin/</span><br></pre></td></tr></table></figure><blockquote><p>注意：helm 客户端需要下载到安装了 kubectl 并且能执行能正常通过 kubectl 操作 kubernetes 的服务器上，否则 helm 将不可用</p></blockquote><p>3）添加 Chart Repo，在 Helm 中默认是不会添加 Chart 仓库，所以这里我们需要手动添加，下面是添加一些常用的 Charts 库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm repo add  elastic    https://helm.elastic.co</span><br><span class="line">$ helm repo add  gitlab     https://charts.gitlab.io</span><br><span class="line">$ helm repo add  harbor     https://helm.goharbor.io</span><br><span class="line">$ helm repo add  bitnami    https://charts.bitnami.com/bitnami</span><br><span class="line">$ helm repo add  incubator  https://charts.helm.sh/incubator</span><br><span class="line">$ helm repo add  stable     https://charts.helm.sh/stable</span><br></pre></td></tr></table></figure><p>增加完仓库后，需要执行更新命令，将仓库中的信息进行同步：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm repo update</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果有的仓库不能正常解析，请更换 DNS 地址，在测试过程中，发现有的能正常解析，有的不能。如果还不行，就直接将域名和对应的地址写死在 Host 文件中</p></blockquote><h3 id="Helm-命令"><a href="#Helm-命令" class="headerlink" title="Helm 命令"></a>Helm 命令</h3><p>1）通过 Helm 在 Repo 中查询可安装的 Nginx 包：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm search repo nginx</span><br><span class="line">NAME                            CHART VERSIONAPP VERSIONDESCRIPTION                                       </span><br><span class="line">bitnami/nginx                   8.9.1        1.19.10    Chart <span class="keyword">for</span> the nginx server                        </span><br><span class="line">bitnami/nginx-ingress-controller7.6.9        0.46.0     Chart <span class="keyword">for</span> the nginx Ingress controller            </span><br><span class="line">bitnami/kong                    3.7.4        2.4.1      Kong is a scalable, open <span class="built_in">source</span> API layer (aka ...</span><br></pre></td></tr></table></figure><p><strong>安装测试：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装并查看应用状态</span></span><br><span class="line">$ helm install nginx bitnami/nginx -n ns-test</span><br><span class="line">$ helm status nginx -n ns-test</span><br></pre></td></tr></table></figure><h3 id="Helm-参数"><a href="#Helm-参数" class="headerlink" title="Helm 参数"></a>Helm 参数</h3><p>Helm 中支持使用自定义 <code>yaml</code> 文件和 <code>--set</code> 命令参数对要安装的应用进行参数配置，使用如下：</p><p><strong>查看应用 chart 可配置参数</strong></p><p>首先使用 helm show values {仓库名称}&#x2F;{应用名称} 来查看对应应用的可配置参数：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">helm</span> <span class="string">show</span> <span class="string">values</span> <span class="string">bitnami/nginx</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="string">docker.io</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">bitnami/nginx</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="number">1.17</span><span class="number">.10</span><span class="string">-debian-10-r33</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">limits:</span> </span><br><span class="line">     <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">     <span class="attr">memory:</span> <span class="string">128Mi</span></span><br><span class="line">  <span class="attr">requests:</span> </span><br><span class="line">     <span class="attr">cpu:</span> <span class="string">100m</span></span><br><span class="line">     <span class="attr">memory:</span> <span class="string">128Mi</span></span><br><span class="line">  <span class="string">......(太长,略)</span></span><br></pre></td></tr></table></figure><ul><li>方法一：使用自定义 values.yaml 配置文件安装应用，指定参数：</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">cat</span> <span class="string">&gt;</span> <span class="string">values.yaml</span> <span class="string">&lt;&lt;</span> <span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="string">docker.io</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">bitnami/nginx</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="attr">limits:</span> </span><br><span class="line">     <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">     <span class="attr">memory:</span> <span class="string">1024Mi</span></span><br><span class="line">  <span class="attr">requests:</span> </span><br><span class="line">     <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">     <span class="attr">memory:</span> <span class="string">1024Mi</span></span><br><span class="line"></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用自定义配置文件运行应用</span></span><br><span class="line"><span class="string">$</span> <span class="string">helm</span> <span class="string">install</span> <span class="string">-f</span> <span class="string">values.yaml</span> <span class="string">bitnami/nginx</span> <span class="string">--generate-name</span></span><br></pre></td></tr></table></figure><ul><li>方法二：使用 –set 配置参数进行安装，–set 参数是在使用 helm 命令时候添加的参数，可以在执行 helm 安装与更新应用时使用，多个参数间用”,”隔开，使用如下：</li></ul><blockquote><p>如果配置文件和 –set 同时使用，则 –set 设置的参数会覆盖配置文件中的参数配置</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm install --<span class="built_in">set</span> <span class="string">&#x27;registry.registry=docker.io,registry.repository=bitnami/nginx&#x27;</span> bitnami/nginx</span><br></pre></td></tr></table></figure><p><strong>参考解义</strong>：对于 –set 写配置参数，<strong>Helm 官方对于不同的配置类型给出了不同的写法</strong>，如下：</p><table><thead><tr><th>yaml 文件写法</th><th>set 的写法</th></tr></thead><tbody><tr><td>name: value</td><td>–set name&#x3D;value</td></tr><tr><td>a: b c: d</td><td>–set a&#x3D;b,c&#x3D;d</td></tr><tr><td>outer:  inner: value</td><td>–set outer.inner&#x3D;value</td></tr><tr><td>name:  - a  - b  - c</td><td>–set name&#x3D;{a, b, c}</td></tr><tr><td>servers:  - port: 80</td><td>–set servers[0].port&#x3D;80</td></tr><tr><td>servers:  - port: 80   host: example</td><td>–set servers[0].port&#x3D;80,servers[0].host&#x3D;example</td></tr><tr><td>name: “value1,value2”</td><td>–set name&#x3D;value1,value2</td></tr><tr><td>nodeSelector:  kubernetes.io&#x2F;role: master</td><td>–set nodeSelector.”kubernetes.io&#x2F;role”&#x3D;master</td></tr></tbody></table><h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><p>1）卸载应用，并保留安装记录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm uninstall nginx -n ns-test --keep-history</span><br></pre></td></tr></table></figure><p>2）查看全部应用（包含安装和卸载的应用）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm list -n ns-test --all</span><br></pre></td></tr></table></figure><p>3）卸载应用，不保留安装记录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm delete nginx -n ns-test</span><br></pre></td></tr></table></figure><h3 id="升级应用"><a href="#升级应用" class="headerlink" title="升级应用"></a>升级应用</h3><p>1）创建新的配置参数文件 values.yaml：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt; values.yaml &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">service.type: NodePort</span></span><br><span class="line"><span class="string">service.nodePorts.http: 30002</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用更新</span></span><br><span class="line">$ helm upgrade -f values.yaml nginx bitnami/nginx -n ns-test</span><br></pre></td></tr></table></figure><p>2）查看新配置是否生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm get values nginx -n ns-test</span><br><span class="line"></span><br><span class="line">USER-SUPPLIED VALUES:</span><br><span class="line">service.nodePorts.http: 30002</span><br><span class="line">service.type: NodePort</span><br></pre></td></tr></table></figure><h3 id="应用回滚"><a href="#应用回滚" class="headerlink" title="应用回滚"></a>应用回滚</h3><p>1）如果升级过程发生错误，进行回滚，首先查看应用的历史版本：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm <span class="built_in">history</span> nginx -n ns-test</span><br><span class="line">REVISION        UPDATED                         STATUS          CHART           APP VERSION     DESCRIPTION     </span><br><span class="line">1               Fri May  8 06:46:56 2020        superseded      nginx-5.3.1     1.17.3          Install complete</span><br><span class="line">2               Fri May  8 06:46:56 2020        deployed        nginx-5.3.1     1.17.3          Upgrade complete</span><br></pre></td></tr></table></figure><p>2）知道 REVISION 号后就可以进行回滚操作：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm rollback nginx 1 -n ns-test</span><br><span class="line">Rollback was a success! Happy Helming!</span><br></pre></td></tr></table></figure><h3 id="渲染模板"><a href="#渲染模板" class="headerlink" title="渲染模板"></a>渲染模板</h3><p>如果想查看通过指定的参数渲染的 Kubernetes 部署资源模板，可以通过下面命令：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">helm</span> <span class="string">template</span> <span class="string">bitnami/nginx</span> <span class="string">-n</span> <span class="string">ns-test</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: nginx/templates/svc.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">RELEASE-NAME-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">nginx-5.3.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">RELEASE-NAME</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">externalTrafficPolicy:</span> <span class="string">&quot;Cluster&quot;</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">RELEASE-NAME</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Source: nginx/templates/deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">RELEASE-NAME-nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">helm.sh/chart:</span> <span class="string">nginx-5.3.1</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">RELEASE-NAME</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">app.kubernetes.io/instance:</span> <span class="string">RELEASE-NAME</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">helm.sh/chart:</span> <span class="string">nginx-5.3.1</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/instance:</span> <span class="string">RELEASE-NAME</span></span><br><span class="line">        <span class="attr">app.kubernetes.io/managed-by:</span> <span class="string">Helm</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">docker.io/bitnami/nginx:1.17.3-debian-10-r63</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">&quot;IfNotPresent&quot;</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">              <span class="attr">containerPort:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> helm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> helm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helm部署_RabbitMQ-MA</title>
      <link href="/2022/04/07/helm/helm%E9%83%A8%E7%BD%B2_RabbitMQ-HA/"/>
      <url>/2022/04/07/helm/helm%E9%83%A8%E7%BD%B2_RabbitMQ-HA/</url>
      
        <content type="html"><![CDATA[<h3 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h3><p>教程为 aliyuncs RabbitMQ-HA 部署方案，具体流程如下：</p><ul><li>通过 Helm 搜索并下载相关 RabbitMQ-HA 版本</li><li>拉取指定版本文件，解压并进行配置定制</li><li>创建 Namespace 和以 Helm Charts 方式创建构建</li><li>集群登录、测试功能等操作</li></ul><h3 id="下载程序"><a href="#下载程序" class="headerlink" title="下载程序"></a>下载程序</h3><p>1）添加仓库并下载源文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仓库可以选用 bitnami 或 aliyuncs 代码可能有个别差异，但配置方法同理；</span></span><br><span class="line"></span><br><span class="line">$ helm repo add aliyun https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts </span><br><span class="line">$ helm repo add aliyuncs https://apphub.aliyuncs.com</span><br><span class="line">$ helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line"></span><br><span class="line">$ helm search repo rabbitmq-ha</span><br><span class="line">NAME                CHART VERSIONAPP VERSIONDESCRIPTION                                       </span><br><span class="line">aliyuncs/rabbitmq-ha1.39.0       3.8.0      Highly available RabbitMQ cluster, the open sou...</span><br><span class="line"><span class="comment"># 可以加上版本号进行搜索并指定版本号下载</span></span><br><span class="line">$ helm search repo rabbitmq-ha --versions</span><br><span class="line">NAME                CHART VERSIONAPP VERSIONDESCRIPTION                                       </span><br><span class="line">aliyuncs/rabbitmq-ha1.39.0       3.8.0      Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.38.2       3.8.0      Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.38.1       3.8.0      Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.36.4       3.8.0      Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.36.3       3.8.0      Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.36.0       3.8.0      Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.34.1       3.7.19     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.34.0       3.7.19     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.33.0       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.32.4       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.32.3       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.32.2       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.32.0       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.31.0       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.30.0       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.29.1       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.29.0       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.28.0       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.27.2       3.7.15     Highly available RabbitMQ cluster, the open sou...</span><br><span class="line">aliyuncs/rabbitmq-ha1.27.1       3.7.12     Highly available RabbitMQ cluster, the open sou...</span><br></pre></td></tr></table></figure><p>2）下载源码包并进行修改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm pull aliyuncs/rabbitmq-ha --version=1.39.0</span><br><span class="line">$ tar -xf rabbitmq-ha-1.39.0.tgz</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><ul><li>进入工作目录，配置持久化存储、副本数等</li><li>建议首次部署时直接修改 values 中的配置，而不是用 <code>–set</code> 的方式，这样后期 upgrade 不必重复设置</li></ul><p>1）设置管理员密码</p><ul><li>方式一，配置中指定</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bitnami</span></span><br><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">./values.yaml</span></span><br><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">admin</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;admin@mq&quot;</span></span><br><span class="line">  <span class="attr">existingPasswordSecret:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">erlangCookie:</span> <span class="string">secretcookie</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># aliyuncs</span></span><br><span class="line"><span class="attr">rabbitmqUsername:</span> <span class="string">admin</span></span><br><span class="line"><span class="attr">rabbitmqPassword:</span> <span class="string">admin@mq</span></span><br><span class="line"><span class="attr">managementUsername:</span> <span class="string">management</span></span><br><span class="line"><span class="attr">managementPassword:</span> <span class="string">management@mq</span></span><br><span class="line"><span class="attr">existingSecret:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">rabbitmqErlangCookie:</span> <span class="string">secretcookie</span></span><br></pre></td></tr></table></figure><p>后期 <code>upgrade</code> 时亦可指定上述参数</p><ul><li>方式二，在安装时通过 set 命令指定（避免密码泄露）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm install rabbitmq --namespace rabbitmq-cluster --<span class="built_in">set</span> ingress.enabled=<span class="literal">true</span>,ingress.hostName=yk-rabbitmq.net --<span class="built_in">set</span> rabbitmqUsername=admin,rabbitmqPassword=admin@mq,managementPassword=management@mq,rabbitmqErlangCookie=secretcookie .</span><br></pre></td></tr></table></figure><p>2）集群意外宕机强制启动</p><ul><li>当 rabbitmq 启用持久化存储时，若 rabbitmq 所有 pod 同时宕机，将无法重新启动，因此有必要提前开启<code>forceBoot</code></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">forceBoot:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3）指定副本数</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">replicaCount:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>4）域名访问</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ingress:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">hostName:</span> <span class="string">yk-rabbitmq.net</span></span><br><span class="line">  <span class="attr">tls:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tlsSecret:</span> <span class="string">myTlsSecret</span></span><br><span class="line">  <span class="attr">annotations:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>5）存储配置</p><p><strong>此为参考项，因测试环境一般不作存储处理，个别生产环境需要存储可部署使用；</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">persistentVolume:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">storageClass:</span> <span class="string">&quot;rabbitmq-nfs-storage&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">data</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteOnce</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">8Gi</span></span><br><span class="line">  <span class="attr">annotations:</span> &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>创建 rbac</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-nfs</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-nfs-runner</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;nodes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumes&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;delete&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;persistentvolumeclaims&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;storage.k8s.io&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;storageclasses&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;events&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;watch&quot;</span>,<span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;services&quot;</span>, <span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>,<span class="string">&quot;create&quot;</span>,<span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>,<span class="string">&quot;update&quot;</span>]</span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;extensions&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;podsecuritypolicies&quot;</span>]</span><br><span class="line">    <span class="attr">resourceNames:</span> [<span class="string">&quot;nfs-provisioner&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;use&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">run-rabbitmq-nfs</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-nfs</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-nfs-runner</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-rabbitmq-nfs</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;endpoints&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>, <span class="string">&quot;list&quot;</span>, <span class="string">&quot;watch&quot;</span>, <span class="string">&quot;create&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;patch&quot;</span>]</span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-rabbitmq-nfs</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">rabbitmq-nfs</span></span><br><span class="line">    <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">leader-locking-rabbitmq-nfs</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">rbac.yaml</span></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">sa,clusterrole,clusterrolebinding</span> <span class="string">-n</span> <span class="string">rabbitmq-cluster</span> <span class="string">|</span> <span class="string">grep</span> <span class="string">nfs</span></span><br><span class="line"><span class="string">serviceaccount/rabbitmq-nfs</span>     <span class="number">1</span>         <span class="string">3m18s</span></span><br><span class="line"><span class="string">clusterrole.rbac.authorization.k8s.io/rabbitmq-nfs-runner</span>                                                    <span class="number">2021-08-26T08:19:18Z</span></span><br><span class="line"><span class="string">clusterrolebinding.rbac.authorization.k8s.io/run-rabbitmq-nfs</span>                                       <span class="string">ClusterRole/rabbitmq-nfs-runner</span>                                                    <span class="string">3m18s</span></span><br></pre></td></tr></table></figure><ul><li>创建 nfs-client-provisioner</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-nfs</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq-nfs</span></span><br><span class="line">  <span class="comment"># replace with namespace where provisioner is deployed</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Recreate</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">rabbitmq-nfs</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">rabbitmq-nfs</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">serviceAccountName:</span> <span class="string">rabbitmq-nfs</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-provisioner</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yuikuen/nfs-subdir-external-provisioner:v4.0.2</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/persistentvolumes</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PROVISIONER_NAME</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">rabbitmq-nfs</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_SERVER</span></span><br><span class="line">              <span class="attr">value:</span> <span class="number">188.188</span><span class="number">.3</span><span class="number">.110</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NFS_PATH</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/nfs/rabbitmq</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nfs-client-root</span></span><br><span class="line">          <span class="attr">nfs:</span></span><br><span class="line">            <span class="attr">server:</span> <span class="number">188.188</span><span class="number">.3</span><span class="number">.110</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/nfs/rabbitmq</span></span><br><span class="line">            </span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">deployment.yaml</span></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">po</span> <span class="string">-n</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"><span class="string">NAME</span>                            <span class="string">READY</span>   <span class="string">STATUS</span>    <span class="string">RESTARTS</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">mq-rabbitmq-ha-0</span>                <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">63m</span></span><br><span class="line"><span class="string">mq-rabbitmq-ha-1</span>                <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">62m</span></span><br><span class="line"><span class="string">mq-rabbitmq-ha-2</span>                <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">62m</span></span><br><span class="line"><span class="string">rabbitmq-nfs-5659546d5d-btrp6</span>   <span class="number">1</span><span class="string">/1</span>     <span class="string">Running</span>   <span class="number">0</span>          <span class="string">13s</span></span><br></pre></td></tr></table></figure><ul><li>创建 storageclass</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">storage.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">StorageClass</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-nfs-storage</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">rabbitmq-cluster</span></span><br><span class="line"><span class="attr">provisioner:</span> <span class="string">rabbitmq-nfs</span>     <span class="comment"># 需要对应 PROVISIONER_NAME</span></span><br><span class="line"><span class="attr">reclaimPolicy:</span> <span class="string">Retain</span></span><br><span class="line"></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">-f</span> <span class="string">storageclass.yaml</span></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">sc</span></span><br><span class="line"><span class="string">NAME</span>                   <span class="string">PROVISIONER</span>    <span class="string">RECLAIMPOLICY</span>   <span class="string">VOLUMEBINDINGMODE</span>   <span class="string">ALLOWVOLUMEEXPANSION</span>   <span class="string">AGE</span></span><br><span class="line"><span class="string">rabbitmq-nfs-storage</span>   <span class="string">rabbitmq-nfs</span>   <span class="string">Retain</span>          <span class="string">Immediate</span>           <span class="literal">false</span>                  <span class="string">3s</span></span><br></pre></td></tr></table></figure><p>6）开启持久化数据，重新部署 rabbitmq，验证状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po,pvc,pv -n rabbitmq-cluster &amp;&amp; ll /nfs/rabbitmq/</span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/mq-rabbitmq-ha-0                1/1     Running   0          81s</span><br><span class="line">pod/mq-rabbitmq-ha-1                1/1     Running   0          54s</span><br><span class="line">pod/mq-rabbitmq-ha-2                1/1     Running   0          32s</span><br><span class="line">pod/rabbitmq-nfs-5659546d5d-btrp6   1/1     Running   0          16m</span><br><span class="line"></span><br><span class="line">NAME                                          STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS           AGE</span><br><span class="line">persistentvolumeclaim/data-mq-rabbitmq-ha-0   Bound    pvc-e083fdfa-e101-44c8-b993-413c0068e961   8Gi        RWO            rabbitmq-nfs-storage   81s</span><br><span class="line">persistentvolumeclaim/data-mq-rabbitmq-ha-1   Bound    pvc-820896a6-f609-4da8-9be9-df6102cdd616   8Gi        RWO            rabbitmq-nfs-storage   54s</span><br><span class="line">persistentvolumeclaim/data-mq-rabbitmq-ha-2   Bound    pvc-901d6c8c-12e1-4fc1-ba89-8b456d598ee8   8Gi        RWO            rabbitmq-nfs-storage   32s</span><br><span class="line"></span><br><span class="line">NAME                                                        CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS   CLAIM                                    STORAGECLASS           REASON   AGE</span><br><span class="line">persistentvolume/pvc-820896a6-f609-4da8-9be9-df6102cdd616   8Gi        RWO            Retain           Bound    rabbitmq-cluster/data-mq-rabbitmq-ha-1   rabbitmq-nfs-storage            54s</span><br><span class="line">persistentvolume/pvc-901d6c8c-12e1-4fc1-ba89-8b456d598ee8   8Gi        RWO            Retain           Bound    rabbitmq-cluster/data-mq-rabbitmq-ha-2   rabbitmq-nfs-storage            32s</span><br><span class="line">persistentvolume/pvc-e083fdfa-e101-44c8-b993-413c0068e961   8Gi        RWO            Retain           Bound    rabbitmq-cluster/data-mq-rabbitmq-ha-0   rabbitmq-nfs-storage            80s</span><br><span class="line">total 0</span><br><span class="line">drwxrwxrwx 3 root root 42 Aug 26 16:58 rabbitmq-cluster-data-mq-rabbitmq-ha-0-pvc-e083fdfa-e101-44c8-b993-413c0068e961</span><br><span class="line">drwxrwxrwx 3 root root 42 Aug 26 16:58 rabbitmq-cluster-data-mq-rabbitmq-ha-1-pvc-820896a6-f609-4da8-9be9-df6102cdd616</span><br><span class="line">drwxrwxrwx 3 root root 42 Aug 26 16:58 rabbitmq-cluster-data-mq-rabbitmq-ha-2-pvc-901d6c8c-12e1-4fc1-ba89-8b456d598ee8</span><br><span class="line"></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -it mq-rabbitmq-ha-0 -n rabbitmq-cluster -- bash</span><br><span class="line">bash-5.1$ rabbitmqctl cluster_status</span><br><span class="line">RABBITMQ_ERLANG_COOKIE <span class="built_in">env</span> variable support is deprecated and will be REMOVED <span class="keyword">in</span> a future version. Use the <span class="variable">$HOME</span>/.erlang.cookie file or the --erlang-cookie switch instead.</span><br><span class="line">Cluster status of node rabbit@mq-rabbitmq-ha-0.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local ...</span><br><span class="line">Basics</span><br><span class="line"></span><br><span class="line">Cluster name: rabbit@mq-rabbitmq-ha-0.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Disk Nodes</span><br><span class="line"></span><br><span class="line">rabbit@mq-rabbitmq-ha-0.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local</span><br><span class="line">rabbit@mq-rabbitmq-ha-1.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local</span><br><span class="line">rabbit@mq-rabbitmq-ha-2.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Running Nodes</span><br><span class="line"></span><br><span class="line">rabbit@mq-rabbitmq-ha-0.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local</span><br><span class="line">rabbit@mq-rabbitmq-ha-1.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local</span><br><span class="line">rabbit@mq-rabbitmq-ha-2.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local</span><br><span class="line"></span><br><span class="line">Versions</span><br><span class="line"></span><br><span class="line">rabbit@mq-rabbitmq-ha-0.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local: RabbitMQ 3.8.14 on Erlang 23.3.2</span><br><span class="line">rabbit@mq-rabbitmq-ha-1.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local: RabbitMQ 3.8.14 on Erlang 23.3.2</span><br><span class="line">rabbit@mq-rabbitmq-ha-2.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local: RabbitMQ 3.8.14 on Erlang 23.3.2</span><br><span class="line"></span><br><span class="line">Maintenance status</span><br><span class="line"></span><br><span class="line">Node: rabbit@mq-rabbitmq-ha-0.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local, status: not under maintenance</span><br><span class="line">Node: rabbit@mq-rabbitmq-ha-1.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local, status: not under maintenance</span><br><span class="line">Node: rabbit@mq-rabbitmq-ha-2.mq-rabbitmq-ha-discovery.rabbitmq-cluster.svc.cluster.local, status: not under maintenance</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210826170121427.png" alt="image-20210826170121427"></p><h3 id="外部访问-参考"><a href="#外部访问-参考" class="headerlink" title="外部访问(参考)"></a>外部访问(参考)</h3><p>资源有限，未采用云平台作测试，详细可参考下述链接</p><p><strong>方式一：Service-Nodeport（5672，15672）</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">svc</span> <span class="string">-n</span> <span class="string">rabbitmq-cluster</span> <span class="string">mq-rabbitmq-ha</span> <span class="string">-o</span> <span class="string">yaml</span> <span class="string">&gt;</span> <span class="string">service-clusterip.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-nodeport</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">amqp</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">amqp</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">32672</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-stats</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">15672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">stats</span></span><br><span class="line">    <span class="attr">nodePort:</span> <span class="number">32673</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure><p><strong>方式二：Service-公网 LoadBalancer（5672，15672）</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">service-loadbalancer.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-loadbalance</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">service.beta.kubernetes.io/aws-load-balancer-type:</span> <span class="string">external</span></span><br><span class="line">    <span class="attr">service.beta.kubernetes.io/aws-load-balancer-nlb-target-type:</span> <span class="string">ip</span></span><br><span class="line">    <span class="attr">service.beta.kubernetes.io/aws-load-balancer-scheme:</span> <span class="string">internet-facing</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">amqp</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">amqp</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http-stats</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">15672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">stats</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br></pre></td></tr></table></figure><p><strong>方式三：Service-私网 LoadBalancer（5672）+Ingress-公网 ALB（15672）</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">service-lb-internal.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq-lb-internal</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">service.beta.kubernetes.io/aws-load-balancer-type:</span> <span class="string">external</span></span><br><span class="line">    <span class="attr">service.beta.kubernetes.io/aws-load-balancer-nlb-target-type:</span> <span class="string">ip</span></span><br><span class="line">    <span class="comment"># service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing #注释后即为私网</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">amqp</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="string">amqp</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/instance:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">app.kubernetes.io/name:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">ingress-alb.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">alb</span></span><br><span class="line">    <span class="attr">alb.ingress.kubernetes.io/scheme:</span> <span class="string">internet-facing</span></span><br><span class="line">    <span class="attr">alb.ingress.kubernetes.io/target-type:</span> <span class="string">ip</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/*</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">&quot;rabbitmq&quot;</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">15672</span></span><br></pre></td></tr></table></figure><h3 id="镜像模式"><a href="#镜像模式" class="headerlink" title="镜像模式"></a>镜像模式</h3><p>镜像模式：将需要消费的队列变为镜像队列，存在于多个节点，这样就可以实现 RabbitMQ 的 HA 高可用性。作用就是消息实体会主动在镜像节点之间实现同步，而不是像普通模式那样，在 consumer 消费数据时临时读取。缺点就是，集群内部的同步通讯会占用大量的网络带宽</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it -n rabbitmq-cluster mq-rabbitmq-ha-0 -- bash</span><br><span class="line">bash-5.1$ rabbitmqctl list_policies</span><br><span class="line">Listing policies <span class="keyword">for</span> vhost <span class="string">&quot;/&quot;</span> ...</span><br><span class="line"></span><br><span class="line">bash-5.1$ rabbitmqctl set_policy ha-all <span class="string">&quot;^&quot;</span> <span class="string">&#x27;&#123;&quot;ha-mode&quot;:&quot;all&quot; , &quot;ha-sync-mode&quot;:&quot;automatic&quot;&#125;&#x27;</span></span><br><span class="line">Setting policy <span class="string">&quot;ha-all&quot;</span> <span class="keyword">for</span> pattern <span class="string">&quot;^&quot;</span> to <span class="string">&quot;&#123;&quot;</span>ha-mode<span class="string">&quot;:&quot;</span>all<span class="string">&quot; , &quot;</span>ha-sync-mode<span class="string">&quot;:&quot;</span>automatic<span class="string">&quot;&#125;&quot;</span> with priority <span class="string">&quot;0&quot;</span> <span class="keyword">for</span> vhost <span class="string">&quot;/&quot;</span> ...</span><br><span class="line"></span><br><span class="line">bash-5.1$ rabbitmqctl list_policies</span><br><span class="line">Listing policies <span class="keyword">for</span> vhost <span class="string">&quot;/&quot;</span> ...</span><br><span class="line">vhostnamepatternapply-todefinitionpriority</span><br><span class="line">/ha-all^all&#123;<span class="string">&quot;ha-mode&quot;</span>:<span class="string">&quot;all&quot;</span>,<span class="string">&quot;ha-sync-mode&quot;</span>:<span class="string">&quot;automatic&quot;</span>&#125;0</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210826174019745.png" alt="image-20210826174019745"></p><h3 id="清理集群"><a href="#清理集群" class="headerlink" title="清理集群"></a>清理集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm uninstall mq -n rabbitmq-cluster</span><br><span class="line"></span><br><span class="line">$ kubectl delete pvc -n rabbitmq-cluster data-mq-rabbitmq-ha-0 data-mq-rabbitmq-ha-1 data-mq-rabbitmq-ha-2</span><br><span class="line"><span class="comment"># 如有存储，需要手动删除</span></span><br></pre></td></tr></table></figure><h3 id="补充内容"><a href="#补充内容" class="headerlink" title="补充内容"></a>补充内容</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模拟运行</span></span><br><span class="line">$ helm install helm-test2 --<span class="built_in">set</span> fullnameOverride=aaaaaaa --dry-run .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除并保留历史记录</span></span><br><span class="line">$ helm  uninstall rabbitmq -n rabbitmq-cluster --keep-history</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改并更新集群</span></span><br><span class="line">$ helm upgrade rabbitmq-cluster -n public-service .</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> helm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helm部署_Ingress-Nginx(v0.49.0)</title>
      <link href="/2022/04/07/helm/helm%E9%83%A8%E7%BD%B2_Ingress-Nginx(v0.49.0)/"/>
      <url>/2022/04/07/helm/helm%E9%83%A8%E7%BD%B2_Ingress-Nginx(v0.49.0)/</url>
      
        <content type="html"><![CDATA[<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p><strong>版本信息</strong></p><ul><li>Kubernetes：v1.20.9</li><li>Helm：v3.5.4</li><li>Ingress-Nginx：v3.36.0 &amp; 0.49.0</li></ul><blockquote><p>Ingress-Nginx 官方推荐使用 Helm 进行安装，Helm 安装请自行参考 Kubernetes 部署-Helm</p><p>镜像文件：操作过程中，需要提前使用 Github &amp; 阿里云 进行同步镜像</p></blockquote><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><p>1）按照官方说明：添加 ingress-nginx repo 源仓库，再进行 install 就可以使用了，但下述为私有部署环境，需要根据实际进行定制，因此需要下载配置文件进行修改；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加官方源仓库并进行更新</span></span><br><span class="line">$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx</span><br><span class="line">$ helm repo update</span><br></pre></td></tr></table></figure><p>2）<strong>查看现在版本并进行下载</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm repo list</span><br><span class="line">NAME         URL                                       </span><br><span class="line">ingress-nginxhttps://kubernetes.github.io/ingress-nginx</span><br><span class="line"></span><br><span class="line">$ helm search repo ingress-nginx -l</span><br><span class="line">NAME                       CHART VERSIONAPP VERSIONDESCRIPTION                                       </span><br><span class="line">ingress-nginx/ingress-nginx4.0.1        1.0.0      Ingress controller <span class="keyword">for</span> Kubernetes using NGINX a...</span><br><span class="line">ingress-nginx/ingress-nginx3.36.0       0.49.0     Ingress controller <span class="keyword">for</span> Kubernetes using NGINX a...</span><br><span class="line">ingress-nginx/ingress-nginx3.35.0       0.48.1     Ingress controller <span class="keyword">for</span> Kubernetes using NGINX a...</span><br><span class="line"></span><br><span class="line">$ helm pull ingress-nginx/ingress-nginx --version=3.36.0</span><br></pre></td></tr></table></figure><p>3）解压并进行修改，修改的地方主要 <strong>镜像地址</strong> (在国内可能无法访问国外服务 <code>k8s.gcr.io</code>) 和 更改网络及部署方式为 <code>hostNetwork</code> &amp; <code>DaemonSet</code></p><ul><li>修改 <code>controller &amp; kube-webhook-certgen </code> 镜像地址并关闭 <code>digest</code> 验证</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">controller:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="comment"># 修改镜像地址</span></span><br><span class="line">    <span class="attr">registry:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yk-k8s</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ingress-nginx_controller</span></span><br><span class="line">    <span class="comment"># repository:</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="string">&quot;v0.49.0&quot;</span></span><br><span class="line">    <span class="comment"># digest: sha256:e9fb216ace49dfa4a5983b183067e97496e7a8b307d2093f4278cd550c303899</span></span><br><span class="line">    <span class="attr">pullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="comment"># www-data -&gt; uid 101</span></span><br><span class="line">    <span class="attr">runAsUser:</span> <span class="number">101</span></span><br><span class="line">    <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">------------------------------------------------------------------------------------------------</span></span><br><span class="line">    <span class="attr">patch:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">image:</span></span><br><span class="line">        <span class="attr">registry:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yk-k8s</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ingress-nginx_kube-webhook-certgen</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">v1.5.1</span></span><br><span class="line">        <span class="attr">pullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line"><span class="string">------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">## Default 404 backend</span></span><br><span class="line"><span class="attr">defaultBackend:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">defaultbackend</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">registry:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yk-k8s</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ingress-nginx_defaultbackend</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="string">&quot;1.5&quot;</span></span><br><span class="line">    <span class="attr">pullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="comment"># nobody user -&gt; uid 65534</span></span><br><span class="line">    <span class="attr">runAsUser:</span> <span class="number">65534</span></span><br><span class="line">    <span class="attr">runAsNonRoot:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>使用宿主机的 80&#x2F;443 端口，并且使用 <code>Daemonset</code> 固定指定的 Node 作为前端，因使用 deployment 创建 Pod 会偏移</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">  <span class="comment"># 将策略改成ClusterFirstWithHostNet，优先使用HostNet方式并开启服务</span></span><br><span class="line">  <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirstWithHostNet</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">  <span class="comment"># 将部署模式改成 DaemonSet</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br></pre></td></tr></table></figure><ul><li>为指定节点添加标签，拥有标签才会部署上去</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nodeSelector:</span></span><br><span class="line">  <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line"><span class="comment"># 添加标签为ingress,节点上为true时即部署</span></span><br><span class="line">  <span class="attr">ingress:</span> <span class="string">&quot;true&quot;</span>  </span><br></pre></td></tr></table></figure><ul><li>如使用公有云，有自带的 LoadBalancer 并有分配公有 IP，而私有部署的就采用 CluterIP 就可以</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="attr">http:</span> <span class="number">80</span></span><br><span class="line">  <span class="attr">https:</span> <span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="attr">targetPorts:</span></span><br><span class="line">  <span class="attr">http:</span> <span class="string">http</span></span><br><span class="line">  <span class="attr">https:</span> <span class="string">https</span></span><br><span class="line"></span><br><span class="line"><span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">注意事项，在1.19.x版本之前，enabled不能为true,开启会提示证书错误</span></span><br><span class="line"><span class="attr">admissionWebhooks:</span></span><br><span class="line">    <span class="attr">annotations:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">failurePolicy:</span> <span class="string">Fail</span></span><br></pre></td></tr></table></figure><h3 id="安装程序"><a href="#安装程序" class="headerlink" title="安装程序"></a>安装程序</h3><p>1）<strong>创建并设定指定部署标签</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create ns ingress-nginx</span><br><span class="line">$ kubectl label node k8s-node01 ingress=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">$ helm install ingress-nginx -n ingress-nginx .</span><br><span class="line">$ kubectl get po -n ingress-nginx</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">ingress-nginx-controller-sqkrk   1/1     Running   0          4m5s</span><br><span class="line"><span class="comment"># 扩容方式同理,直接为新的 node 增加 label,并且在集群外的 SLB 增加上域名解析</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除扩容,去除标签即可(先去除SLB的IP/端口)</span></span><br><span class="line">$ kubectl label node k8s-node04 ingress-</span><br></pre></td></tr></table></figure><h3 id="验证状态"><a href="#验证状态" class="headerlink" title="验证状态"></a>验证状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get pods -o wide -n ingress-nginx</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE     IP              NODE         NOMINATED NODE   READINESS GATES</span><br><span class="line">ingress-nginx-controller-j7fdk   1/1     Running   0          3h14m   188.188.3.131   k8s-node01   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">$ kubectl get svc -n ingress-nginx</span><br><span class="line">NAME                                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE</span><br><span class="line">ingress-nginx-controller             ClusterIP   120.107.140.83   &lt;none&gt;        80/TCP,443/TCP   3h15m</span><br><span class="line">ingress-nginx-controller-admission   ClusterIP   120.98.152.226   &lt;none&gt;        443/TCP          3h15m</span><br><span class="line"></span><br><span class="line">$ curl 188.188.3.131</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><ul><li>版本问题：<code>Warning: extensions/v1beta1 Ingress is deprecated in v1.14+, unavailable in v1.22+; use networking.k8s.io/v1 Ingress</code></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">报错信息</span> <span class="attr">error:</span> <span class="string">error</span> <span class="string">validating</span> <span class="attr">&quot;nginx-ingress.yaml&quot;:</span> <span class="attr">error validating data:</span> [<span class="string">ValidationError(Ingress.spec.rules</span>[<span class="number">0</span>]<span class="string">.http.paths</span>[<span class="number">0</span>]<span class="string">.backend):</span> <span class="string">unknown</span> <span class="string">field</span> <span class="string">&quot;serviceName&quot;</span> <span class="string">in</span> <span class="string">io.k8s.api.networking.v1.IngressBackend</span>, <span class="string">ValidationError(Ingress.spec.rules</span>[<span class="number">0</span>]<span class="string">.http.paths</span>[<span class="number">0</span>]<span class="string">.backend):</span> <span class="string">unknown</span> <span class="string">field</span> <span class="string">&quot;servicePort&quot;</span> <span class="string">in</span> <span class="string">io.k8s.api.networking.v1.IngressBackend</span>]<span class="string">;</span> <span class="string">if</span> <span class="string">you</span> <span class="string">choose</span> <span class="string">to</span> <span class="string">ignore</span> <span class="string">these</span> <span class="string">errors,</span> <span class="string">turn</span> <span class="string">validation</span> <span class="string">off</span> <span class="string">with</span> <span class="string">--validate=false</span></span><br><span class="line"><span class="comment"># 新版本已取消extensions/v1beta1,根据官网进行进行修改，例子如下：</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">name-virtual-host-ingress-no-third-host</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">first.bar.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">service1</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><ul><li><strong>准入控制问题</strong>，删除许可即可</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">报错信息 Internal error occurred: failed calling webhook <span class="string">&quot;validate.nginx.ingress.kubernetes.io&quot;</span>: Post <span class="string">&quot;https://ingress-nginx-controller-admission.ingress-nginx.svc:443/extensions/v1beta1/ingresses?timeout=30s&quot;</span>: x509: certificate is valid <span class="keyword">for</span> k8s-master02, kubernetes, kubernetes.default, kubernetes.default.svc, kubernetes.default.svc.cluster.local, not ingress-nginx-controller-admission.ingress-nginx.svc</span><br><span class="line"></span><br><span class="line">$ kubectl delete -A ValidatingWebhookConfiguration ingress-nginx-admission</span><br><span class="line">validatingwebhookconfiguration.admissionregistration.k8s.io <span class="string">&quot;ingress-nginx-admission&quot;</span> deleted</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> helm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ingress-nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helm部署_Ingress-Nginx(v0.49.0)</title>
      <link href="/2022/04/07/helm/helm%E9%83%A8%E7%BD%B2_Ingress-Nginx(v0.45.0)/"/>
      <url>/2022/04/07/helm/helm%E9%83%A8%E7%BD%B2_Ingress-Nginx(v0.45.0)/</url>
      
        <content type="html"><![CDATA[<h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a>环境说明</h3><p><strong>版本信息</strong></p><ul><li>Kubernetes：v1.20.9</li><li>Helm：v3.5.4</li><li>Ingress-Nginx：v3.29.0 &amp; 0.45.0</li></ul><blockquote><p>Ingress-Nginx 官方推荐使用 Helm 进行安装，Helm 安装请自行参考 Kubernetes 部署-Helm</p><p>镜像文件：操作过程中，需要提前使用 Github &amp; 阿里云 进行同步镜像</p></blockquote><h3 id="部署安装"><a href="#部署安装" class="headerlink" title="部署安装"></a>部署安装</h3><p>1）添加 ingress-nginx 源仓库，并下载配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加官方源仓库</span></span><br><span class="line">$ helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx</span><br><span class="line">$ helm repo update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看现有版本并下载指定版本</span></span><br><span class="line">$ helm search repo ingress-nginx -l</span><br><span class="line">$ helm pull ingress-nginx/ingress-nginx --version=3.29.0</span><br></pre></td></tr></table></figure><p>2）修改 image 地址、部署模式、添加标签等操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar -xf ingress-nginx-3.29.0.tgz</span><br><span class="line">$ vim ./ingress-nginx/values.yaml</span><br></pre></td></tr></table></figure><p>3）修改 image，因国外镜像，国内无法下载，直接执行 <code>helm install</code> 是无法成功的，需要提前做好镜像；</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 国外镜像下载不了，需要修改image地址</span></span><br><span class="line"><span class="attr">controller:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">controller</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yk-k8s/ingress-nginx_controller</span></span><br><span class="line">    <span class="attr">repository:</span> </span><br><span class="line">    <span class="attr">tag:</span> <span class="string">&quot;v0.45.0&quot;</span></span><br><span class="line">    <span class="comment"># 注释镜像签名信任</span></span><br><span class="line">    <span class="comment"># digest: sha256:c4390c53f348c3bd4e60a5dd6a11c35799ae78c49388090140b9d72ccede1755</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># kube-webhook-certgen证书镜像</span></span><br><span class="line">    <span class="attr">patch:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">image:</span></span><br><span class="line">        <span class="attr">repository:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yk-k8s/ingress-nginx_kube-webhook-certgen</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">v1.5.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (可选)配置后端异常提示镜像       </span></span><br><span class="line"><span class="attr">defaultBackend:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">defaultbackend</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">registry.cn-hongkong.aliyuncs.com/yk-k8s/ingress-nginx_defaultbackend</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="string">&quot;1.5&quot;</span></span><br></pre></td></tr></table></figure><p>4）采用宿主机的网络，开启 <code>hostnetwork</code> 模式，并使用 Daemonset 指定 Node 作前端(因使用 deployment 创建 PO 会偏移)</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用宿主机的 80/443</span></span><br><span class="line">  <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirstWithHostNet</span></span><br><span class="line">  <span class="attr">hostNetwork:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">kind:</span> <span class="string">DaemonSet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为Node添加标签，部署指定标签的Node上</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">kubernetes.io/os:</span> <span class="string">linux</span></span><br><span class="line">    <span class="attr">ingress:</span> <span class="string">&quot;true&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如使用公有云，有自带的 LoadBalancer 并有分配公有 IP，而私有部署的就采用 CluterIP 就可以</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><p>5）为 Node 添加标签并开始安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create ns ingress-nginx</span><br><span class="line">$ kubectl label node k8s-node01 ingress=<span class="literal">true</span></span><br><span class="line">$ helm install ingress-nginx -n ingress-nginx .</span><br><span class="line">NAME: ingress-nginx</span><br><span class="line">LAST DEPLOYED: Wed Sep 15 14:29:24 2021</span><br><span class="line">NAMESPACE: ingress-nginx</span><br><span class="line">STATUS: deployed</span><br><span class="line">REVISION: 1</span><br><span class="line">TEST SUITE: None</span><br><span class="line">NOTES:</span><br><span class="line">The ingress-nginx controller has been installed.</span><br><span class="line">Get the application URL by running these commands:</span><br><span class="line">  <span class="built_in">export</span> POD_NAME=$(kubectl --namespace ingress-nginx get pods -o jsonpath=<span class="string">&quot;&#123;.items[0].metadata.name&#125;&quot;</span> -l <span class="string">&quot;app=ingress-nginx,component=controller,release=ingress-nginx&quot;</span>)</span><br><span class="line">  kubectl --namespace ingress-nginx port-forward <span class="variable">$POD_NAME</span> 8080:80</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Visit http://127.0.0.1:8080 to access your application.&quot;</span></span><br><span class="line"></span><br><span class="line">An example Ingress that makes use of the controller:</span><br><span class="line"></span><br><span class="line">  apiVersion: networking.k8s.io/v1beta1</span><br><span class="line">  kind: Ingress</span><br><span class="line">  metadata:</span><br><span class="line">    annotations:</span><br><span class="line">      kubernetes.io/ingress.class: nginx</span><br><span class="line">    name: example</span><br><span class="line">    namespace: foo</span><br><span class="line">  spec:</span><br><span class="line">    rules:</span><br><span class="line">      - host: www.example.com</span><br><span class="line">        http:</span><br><span class="line">          paths:</span><br><span class="line">            - backend:</span><br><span class="line">                serviceName: exampleService</span><br><span class="line">                servicePort: 80</span><br><span class="line">              path: /</span><br><span class="line">    <span class="comment"># This section is only required if TLS is to be enabled for the Ingress</span></span><br><span class="line">    tls:</span><br><span class="line">        - hosts:</span><br><span class="line">            - www.example.com</span><br><span class="line">          secretName: example-tls</span><br><span class="line"></span><br><span class="line">If TLS is enabled <span class="keyword">for</span> the Ingress, a Secret containing the certificate and key must also be provided:</span><br><span class="line"></span><br><span class="line">  apiVersion: v1</span><br><span class="line">  kind: Secret</span><br><span class="line">  metadata:</span><br><span class="line">    name: example-tls</span><br><span class="line">    namespace: foo</span><br><span class="line">  data:</span><br><span class="line">    tls.crt: &lt;<span class="built_in">base64</span> encoded cert&gt;</span><br><span class="line">    tls.key: &lt;<span class="built_in">base64</span> encoded key&gt;</span><br><span class="line">  <span class="built_in">type</span>: kubernetes.io/tls</span><br></pre></td></tr></table></figure><h3 id="验证功能"><a href="#验证功能" class="headerlink" title="验证功能"></a>验证功能</h3><p>创建简单的 Nginx &amp; svc 进行测试</p><ul><li>方法一</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl run nginx-deploy --image=nginx:alpine --port=80 --dry-run=client</span><br><span class="line">$ <span class="built_in">cat</span> ingress.yaml </span><br><span class="line">apiVersion: networking.k8s.io/v1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: ingress-nginx-t</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">  - host: ingress-nginx.test.net </span><br><span class="line">    http:</span><br><span class="line">      paths:</span><br><span class="line">      - pathType: Prefix</span><br><span class="line">        path: /</span><br><span class="line">        backend:</span><br><span class="line">          service:</span><br><span class="line">            name: nginx</span><br><span class="line">            port:</span><br><span class="line">              number: 80</span><br><span class="line"></span><br><span class="line">$ kubectl get po,svc,ingress</span><br><span class="line">NAME        READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/nginx   1/1     Running   0          6m3s</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/kubernetes   ClusterIP   120.168.0.1      &lt;none&gt;        443/TCP   24h</span><br><span class="line">service/nginx        ClusterIP   120.168.73.170   &lt;none&gt;        80/TCP    6m3s</span><br><span class="line"></span><br><span class="line">NAME                                        CLASS    HOSTS                    ADDRESS          PORTS   AGE</span><br><span class="line">ingress.networking.k8s.io/ingress-nginx-t   &lt;none&gt;   ingress-nginx.test.net   120.168.228.66   80      46s</span><br></pre></td></tr></table></figure><ul><li>方法二</li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:alpine</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-svc</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span> </span><br><span class="line"><span class="attr">metadata:</span>   </span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-test</span> </span><br><span class="line"><span class="attr">spec:</span>   </span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">ingress-nginx.test.net</span>  </span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">nginx-svc</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get po,svc,ingress</span><br><span class="line">NAME                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/nginx-web-865cb67cc4-25pb8   1/1     Running   0          19s</span><br><span class="line">pod/nginx-web-865cb67cc4-npqsz   1/1     Running   0          19s</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/kubernetes   ClusterIP   120.168.0.1       &lt;none&gt;        443/TCP   24h</span><br><span class="line">service/nginx-svc    ClusterIP   120.168.237.121   &lt;none&gt;        80/TCP    19s</span><br><span class="line"></span><br><span class="line">NAME                                   CLASS    HOSTS                    ADDRESS   PORTS   AGE</span><br><span class="line">ingress.networking.k8s.io/nginx-test   &lt;none&gt;   ingress-nginx.test.net             80      19s</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210915150451099.png" alt="image-20210915150451099"></p><h3 id="扩缩方式"><a href="#扩缩方式" class="headerlink" title="扩缩方式"></a>扩缩方式</h3><p>因为采用的是 DaemonSet 的方式部署，扩缩方式同理，直接为 Node 新增&amp;删除 label 并且修改 hosts 文件或域名解析即可；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl label node k8s-node04 ingress=<span class="literal">true</span></span><br><span class="line">$ kubectl label node k8s-node04 ingress-</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> helm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ingress-nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Helm部署_Bitnami RabbitMQ-Cluster</title>
      <link href="/2022/04/07/helm/helm%E9%83%A8%E7%BD%B2_Bitnami%20RabbitMQ-Cluster/"/>
      <url>/2022/04/07/helm/helm%E9%83%A8%E7%BD%B2_Bitnami%20RabbitMQ-Cluster/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用 k8s 搭建微服务时，发现需要手动修改 yaml 文件里面的 <code>pod name、pod image、svc name、ingress tls</code> 等等，非常麻烦，但是有了 helm 之后情况就不一样了，helm 是 k8s 的包管理器，类似 ubuntu 的 apt-get，centos 的 yum 一样，有了 helm 安装包就非常方便了，下面就讲解通过 helm 来安装 rabbitmq.</p></blockquote><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>1）提前安装 helm 并添加源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm repo add bitnami https://charts.bitnami.com/bitnami</span><br><span class="line">$ helm repo list</span><br><span class="line">NAME         URL                                       </span><br><span class="line">elastic      https://helm.elastic.co                   </span><br><span class="line">gitlab       https://charts.gitlab.io                  </span><br><span class="line">bitnami      https://charts.bitnami.com/bitnami        </span><br><span class="line">incubator    https://charts.helm.sh/incubator          </span><br><span class="line">stable       https://charts.helm.sh/stable             </span><br><span class="line">ingress-nginxhttps://kubernetes.github.io/ingress-nginx</span><br></pre></td></tr></table></figure><p>2）安装 rabbitmq 方法有很多下面列举几个常规安装方法：</p><ul><li>centos 7&#x2F;8 安装 rabbitmq  <a href="https://link.segmentfault.com/?url=https://help.aliyun.com/document_detail/53100.html?spm=5176.smartservice_service_chat.0.0.ad23709a1rsjyv">阿里云ECS CentOS提供安装</a></li><li>k8s 安装 rabbitmq  <a href="https://link.segmentfault.com/?url=https://www.rabbitmq.com/kubernetes/operator/install-operator.html">官方文档提供安装</a></li><li>helm 安装 rabbitmq  <a href="https://link.segmentfault.com/?url=https://phoenixnap.com/kb/install-and-configure-rabbitmq-on-kubernetes">社区大佬提供安装</a></li></ul><p><strong>不同环境下安装方法</strong></p><ul><li><strong>安装开发和测试环境(dev、test)</strong><ul><li><strong>k8s Service：type: NodePort | LoadBalance</strong></li><li><strong>RMQ管理界面：使用ip:port方式来访问，如：192.168.0.1:15672</strong></li><li><strong>AMQP 5672端口：我们也是使用ip:port来访问，如：192.168.0.1:5672</strong></li></ul></li><li><strong>安装预生产和生产环境(uat、prod)</strong><ul><li><strong>k8s Service：type: ClusterIP，Ingress</strong></li><li><strong>RMQ管理界面：使用ingress里面配置的域名来访问，如：rabbitmq.demo.com</strong></li><li><strong>AMQP 5672端口：使用k8s internet dns解析出来的name来访问，如：<code>test-rabbitmq-headless.rabbit.svc.cluster.local:5672</code></strong></li></ul></li></ul><h3 id="前置配置"><a href="#前置配置" class="headerlink" title="前置配置"></a>前置配置</h3><p>1）查看 helm 可用的 chart 版本，可用<code>-l</code>查看所有版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm search repo rabbitmq</span><br><span class="line">NAME                               CHART VERSIONAPP VERSIONDESCRIPTION                                       </span><br><span class="line">bitnami/rabbitmq                   8.22.0       3.9.5      Open <span class="built_in">source</span> message broker software that implem...</span><br><span class="line">bitnami/rabbitmq-cluster-operator  0.1.3        1.8.3      The RabbitMQ Cluster Kubernetes Operator automa...</span><br><span class="line">stable/prometheus-rabbitmq-exporter0.5.6        v0.29.0    DEPRECATED Rabbitmq metrics exporter <span class="keyword">for</span> promet...</span><br><span class="line">stable/rabbitmq                    6.18.2       3.8.2      DEPRECATED Open <span class="built_in">source</span> message broker software ...</span><br><span class="line">stable/rabbitmq-ha                 1.47.1       3.8.7      DEPRECATED - Highly available RabbitMQ cluster,...</span><br></pre></td></tr></table></figure><p>2）因为私有部署，需要修改个别配置文件，先行下载文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm pull bitnami/rabbitmq --version=8.22.0</span><br><span class="line">$ tar -xf rabbitmq-8.22.0.tgz</span><br><span class="line">$ <span class="built_in">ls</span> -l rabbitmq</span><br><span class="line">total 120</span><br><span class="line">-rw-r--r-- 1 root root   218 Sep  8 19:08 Chart.lock</span><br><span class="line">drwxr-xr-x 3 root root    20 Sep 10 15:54 charts</span><br><span class="line">-rw-r--r-- 1 root root   681 Sep  8 19:08 Chart.yaml</span><br><span class="line">drwxr-xr-x 2 root root    64 Sep 10 15:54 ci</span><br><span class="line">-rw-r--r-- 1 root root 57466 Sep  8 19:08 README.md</span><br><span class="line">drwxr-xr-x 2 root root  4096 Sep 10 15:54 templates</span><br><span class="line">-rw-r--r-- 1 root root  2815 Sep  8 19:08 values.schema.json</span><br><span class="line">-rw-r--r-- 1 root root 42990 Sep  8 19:08 values.yaml</span><br></pre></td></tr></table></figure><p>3）查看一下 values.yaml 对外提供的可用参数，也可以通过命令查看：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm show values bitnami/rabbitmq</span><br></pre></td></tr></table></figure><p><strong>主要配置信息</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (可选)修改image</span></span><br><span class="line"><span class="attr">image:</span></span><br><span class="line">  <span class="attr">registry:</span> <span class="string">docker.io</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">rabbitmq</span></span><br><span class="line">  <span class="attr">tag:</span> <span class="number">3.9</span><span class="number">.5</span><span class="string">-management-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 账密及cookie定义</span></span><br><span class="line"><span class="attr">auth:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">intell</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">&quot;intell&quot;</span></span><br><span class="line">  <span class="attr">existingPasswordSecret:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">erlangCookie:</span> <span class="string">secretcookie</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化存储，定义 storageClass 绑定 pvc、pv</span></span><br><span class="line"><span class="attr">persistence:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">storageClass:</span> <span class="string">&quot;rabbitmq-storage&quot;</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">8Gi</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 启用持久化存储时，若rabbitmq所有pod同时宕机，将无法重新启动，因此有必要提前开启clustering.forceBoot</span></span><br><span class="line"><span class="attr">clustering:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">addressType:</span> <span class="string">hostname</span></span><br><span class="line">  <span class="attr">rebalance:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">forceBoot:</span> <span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 指定时区</span></span><br><span class="line"><span class="attr">extraEnvVars:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TZ</span></span><br><span class="line">    <span class="attr">value:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 指定副本数</span></span><br><span class="line"><span class="attr">replicaCount:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>除修改配置文件外，也可在安装时使用<code>set</code>方式指定相关参数</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm install mq -n rabbitmq-cluster . \</span><br><span class="line">  --<span class="built_in">set</span> auth.username=intell,auth.password=intell,auth.erlangCookie=secretcookie</span><br></pre></td></tr></table></figure><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><p>1）开发环境采用 <code>ip:port</code>来访问，需要配置 service，具体配置如下</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">service:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span> <span class="comment"># 将ClusterIP改为NodePort</span></span><br><span class="line"><span class="attr">persistence:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">storageClass:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">8Gi</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm install mq -n rabbitmq-cluster .</span><br></pre></td></tr></table></figure><p>2）查看 <code>rabbitmq-cluster</code> 命名空间下所有的 rabbitmq 资源，是否创建成功！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl get all -n rabbitmq-cluster</span><br><span class="line">NAME                READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/mq-rabbitmq-0   1/1     Running   0          7m56s</span><br><span class="line"></span><br><span class="line">NAME                           TYPE        CLUSTER-IP        EXTERNAL-IP   PORT(S)                                 AGE</span><br><span class="line">service/mq-rabbitmq            ClusterIP   120.103.236.124   &lt;none&gt;        5672/TCP,4369/TCP,25672/TCP,15672/TCP   7m56s</span><br><span class="line">service/mq-rabbitmq-headless   ClusterIP   None              &lt;none&gt;        4369/TCP,5672/TCP,25672/TCP,15672/TCP   7m56s</span><br><span class="line"></span><br><span class="line">NAME                           READY   AGE</span><br><span class="line">statefulset.apps/mq-rabbitmq   1/1     7m56s</span><br></pre></td></tr></table></figure><p>等待一段时间会发现pod、svc、pvc、pv、statefulset全部创建完成，输出内容可发现对应的访问方式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Obtain the NodePort IP and ports:</span><br><span class="line">NODE_IP：</span><br><span class="line">kubectl get nodes --namespace rabbitmq-cluster -o jsonpath=<span class="string">&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">NODE_PORT_AMQP</span><br><span class="line">kubectl get --namespace rabbitmq-cluster -o jsonpath=<span class="string">&quot;&#123;.spec.ports[1].nodePort&#125;&quot;</span> services mq-rabbitmq</span><br><span class="line"></span><br><span class="line">NODE_PORT_STATS</span><br><span class="line">kubectl get --namespace rabbitmq-cluster -o jsonpath=<span class="string">&quot;&#123;.spec.ports[3].nodePort&#125;&quot;</span> services mq-rabbitmq</span><br></pre></td></tr></table></figure><ul><li><p>Node_ip 查看 k8s 节点真实 IP，如 188.188.3.121</p></li><li><p>Node_port_amqp 是集群 5672 对应的 NodePort 端口，如 30736</p></li><li><p>Node_port_stats 是集群 15672 对应的 NodePort 端口，如 30353</p></li></ul><p>3）访问Rabbitmq管理界面在浏览器中输入：<code>http://188.188.3.121:30353</code>即可访问：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认账号密码</span></span><br><span class="line">Credentials:</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Username      : user&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Password      : <span class="subst">$(kubectl get secret --namespace rabbitmq-cluster mq-rabbitmq -o jsonpath=<span class="string">&quot;&#123;.data.rabbitmq-password&#125;&quot;</span> | base64 --decode)</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;ErLang Cookie : <span class="subst">$(kubectl get secret --namespace rabbitmq-cluster mq-rabbitmq -o jsonpath=<span class="string">&quot;&#123;.data.rabbitmq-erlang-cookie&#125;&quot;</span> | base64 --decode)</span>&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210910162839071.png" alt="image-20210910162839071"></p><p><strong>springboot 就可以通过 ip 地址来访问 Rabbitmq</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">188.188</span><span class="number">.3</span><span class="number">.120</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">password:</span></span><br></pre></td></tr></table></figure><h3 id="生产环境"><a href="#生产环境" class="headerlink" title="生产环境"></a>生产环境</h3><p>1）如开发需要通过域名访问，可以启用 ingress 及域名配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ingress:</span><br><span class="line">  enabled: <span class="literal">true</span></span><br><span class="line">  annotations:</span><br><span class="line">    kubernetes.io/ingress.class: nginx</span><br><span class="line">  hostName: rabbitmq.demo.net</span><br></pre></td></tr></table></figure><p>2）最后就是要通过https访问，我们要启用tls：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tls:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">tlsSecret:</span> <span class="string">tls-secret-name</span></span><br></pre></td></tr></table></figure><p>3）在此使用的是 <code>cert-manager.io/cluster-issuer</code> ，直接生成 tls 证书，<a href="https://help.aliyun.com/document_detail/86533.html?spm=5176.2020520152.0.0.46e316ddfGLDXs#title-v89-nee-iuh">使用cert-manager申请免费的HTTPS证书</a></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">your-cert-manager-name</span></span><br></pre></td></tr></table></figure><p>最终完整的 values.yaml 文件如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ingress:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hostname:</span> <span class="string">yk-rabbitmq.net</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">letsencrypt-prod-http01</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/force-ssl-redirect:</span> <span class="string">&#x27;true&#x27;</span> </span><br><span class="line">  <span class="attr">tls:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tlsSecret:</span> <span class="string">letsencrypt-prod-http01</span></span><br><span class="line">  <span class="attr">certManager:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">selfSigned:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">persistence:</span></span><br><span class="line">  <span class="attr">storageClass:</span> <span class="string">&quot;rabbitmq-nfs-storage&quot;</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">8Gi</span> </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ helm install rmq -n rabbit .</span><br><span class="line">$ kubectl get all -n rabbit</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/cm-acme-http-solver-fczkr   1/1     Running   0          15h</span><br><span class="line">pod/rmq-rabbitmq-0              1/1     Running   0          15h</span><br><span class="line">pod/rmq-rabbitmq-1              1/1     Running   0          15h</span><br><span class="line">pod/rmq-rabbitmq-2              1/1     Running   0          15h</span><br><span class="line"></span><br><span class="line">NAME                                TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                                 AGE</span><br><span class="line">service/cm-acme-http-solver-rwc98   NodePort    120.168.190.30   &lt;none&gt;        8089:30610/TCP                          15h</span><br><span class="line">service/rmq-rabbitmq                ClusterIP   120.168.97.24    &lt;none&gt;        5672/TCP,4369/TCP,25672/TCP,15672/TCP   15h</span><br><span class="line">service/rmq-rabbitmq-headless       ClusterIP   None             &lt;none&gt;        4369/TCP,5672/TCP,25672/TCP,15672/TCP   15h</span><br><span class="line"></span><br><span class="line">NAME                            READY   AGE</span><br><span class="line">statefulset.apps/rmq-rabbitmq   3/3     15h</span><br><span class="line"></span><br><span class="line">$ kubectl get ingress -n rabbit</span><br><span class="line">NAME                        CLASS    HOSTS             ADDRESS           PORTS     AGE</span><br><span class="line">cm-acme-http-solver-ktctn   &lt;none&gt;   yk-rabbitmq.net   120.168.152.110   80        15h</span><br><span class="line">rmq-rabbitmq                &lt;none&gt;   yk-rabbitmq.net   120.168.152.110   80, 443   15h</span><br></pre></td></tr></table></figure><p>4）访问 Rabbitmq 管理界面在浏览器中输入：<code>http://yk-rabbitmq.net/</code>即可完成访问：</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210915101326422.png" alt="image-20210915101326422"></p><p>springboot 就可以通过 k8s intranet dns 解析的 name 来访问 Rabbitmq</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">rmq-rabbitmq-headless.public-service.svc.cluster.local</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">password:</span></span><br></pre></td></tr></table></figure><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><p><strong>1、访问rabbitmq报：503</strong><br>如果你配置的域名路径如：<code>demo.com/rabbitmq</code>，这样的域名，那么你要配置成下面这样，才能正确访问，另外：<strong>推荐使用一级或者二级、三级域名做为hostName不要使用path:&#x2F;rabbitmq这种形式</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">extraConfiguration:</span> <span class="string">|-</span></span><br><span class="line"><span class="string">    management.path_prefix = /rabbitmq/</span></span><br><span class="line"><span class="string"></span><span class="attr">ingress:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">  <span class="attr">hostName:</span> <span class="string">demo.com</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/rabbitmq/</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p><strong>2、springcloud 微服务访问 5672 端口连接报：time out</strong><br>原因：spring.rabbitmq.host 地址不应该是你的 ingress 外网域名:rabbitmq.demo.com，而应该是你内网<a href="https://link.segmentfault.com/?url=https://kubernetes.io/zh/docs/tasks/administer-cluster/dns-debugging-resolution/%23is-dns-service-up">集群dns解析的地址</a><br>解决：使用下面命令获取 test-rabbitmq 的内网解析地址，然后赋值到 spring.rabbitmq.host 重新连接即可</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果 pod 和服务的命名空间不相同，则 DNS 查询必须指定服务所在的命名空间。</span></span><br><span class="line"><span class="comment"># test-rabbitmq-headless.rabbit命名空间是rabbit</span></span><br><span class="line"><span class="comment"># 如果没有指定命名空间，可以使用kubectl exec -i -t dnsutils -- nslookup rmq-rabbitmq-headless 即可</span></span><br><span class="line">$ kubectl <span class="built_in">exec</span> -i -t dnsutils -- nslookup rmq-rabbitmq-headless.rabbit</span><br><span class="line">Server:120.168.0.10</span><br><span class="line">Address:120.168.0.10<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Name:rmq-rabbitmq-headless.rabbit.svc.cluster.local</span><br><span class="line">Address: 172.25.92.127</span><br><span class="line">Name:rmq-rabbitmq-headless.rabbit.svc.cluster.local</span><br><span class="line">Address: 172.25.244.247</span><br><span class="line">Name:rmq-rabbitmq-headless.rabbit.svc.cluster.local</span><br><span class="line">Address: 172.18.195.16</span><br><span class="line"></span><br><span class="line"><span class="comment"># application.yml配置</span></span><br><span class="line">spring.rabbitmq.host=rmq-rabbitmq-headless.rabbit.svc.cluster.local</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">dnsutils</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">dnsutils</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">gcr.io/kubernetes-e2e-test-images/dnsutils:1.3</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">sleep</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3600&quot;</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p><strong>3、rabbitmq 5672 端口只支持 amqp:协议，也就是说不能用 ingress 暴露，而ingress只能暴露 http 和 https，所以开发测试环境我们设置 service 的 type: NodePort 也就是这个原因</strong></p><p><font color=red>4、如 ingress 未成功生效，可以重启服务器后再试</font></p>]]></content>
      
      
      <categories>
          
          <category> helm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Offline-Harbor</title>
      <link href="/2022/04/07/harbor/centos7%E9%83%A8%E7%BD%B2_offline-harbor/"/>
      <url>/2022/04/07/harbor/centos7%E9%83%A8%E7%BD%B2_offline-harbor/</url>
      
        <content type="html"><![CDATA[<blockquote><p>基本镜像一般都从 docker hub、阿里云等官方仓库进行下载，但下载速度相对较慢。对于公司企业，自主开发的代码或打包好的镜像，都会存放到自己的私有仓库。本文主要是参照官方操作指引来讲解离线安装基于 Registry 的 Harbor 私有仓库搭建；</p></blockquote><p>项目需求：配置 harbor 支持域名以 https 方式对外提供服务</p><p>(将服务器证书、密钥和 CA 文件复制到其它主机上即可实现 https 访问)</p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>安装 Docker &amp; Docker-compose</li><li>创建自签 HTTPS 证书 (测试环境)</li></ul><p>一般公司企业都会有所属的证书，而这里只是测试环境，所以按官方操作指引，使用自签证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/goharbor/harbor/releases/download/v2.4.1/harbor-offline-installer-v2.4.1.tgz</span><br><span class="line">$ tar -xf harbor-offline-installer-v2.4.1.tgz -C /opt</span><br><span class="line">$ <span class="built_in">mkdir</span> -p /opt/harbor/cert &amp;&amp; <span class="built_in">cd</span> /opt/harbor/cert</span><br></pre></td></tr></table></figure><h3 id="HTTPS-证书"><a href="#HTTPS-证书" class="headerlink" title="HTTPS 证书"></a>HTTPS 证书</h3><blockquote><p>默认情况下，Harbor 不附带证书，一般非生产环境下，可以在此没安全性情况下部署，以便可以通过 HTTP 连接它。但如在生产环境下，建议采用 HTTPS，要配置 HTTPS，必须创建 SSL 证书。</p></blockquote><ul><li><strong>生成-证书颁发机构的证书</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成CA证书私钥</span></span><br><span class="line">$ openssl genrsa -out ca.key 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成CA证书</span></span><br><span class="line">$ openssl req -x509 -new -nodes -sha512 -days 3650 \</span><br><span class="line"> -subj <span class="string">&quot;/C=CN/ST=DongGuan/L=DongGuan/O=example/OU=Personal/CN=harbor.yuikuen.top&quot;</span> \</span><br><span class="line"> -key ca.key \</span><br><span class="line"> -out ca.crt</span><br><span class="line"> //调整`-subj`选项中的值以反映您的组织。如果使用FQDN连接Harbor主机，则必须将其指定为公用名 ( `CN`) 属性.</span><br></pre></td></tr></table></figure><ul><li><strong>生成-服务器证书</strong><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">$ openssl genrsa -out harbor.yuikuen.top.key 4096</span><br><span class="line"><span class="comment"># 生成证书签名请求(CSR)</span></span><br><span class="line">$ openssl req -sha512 -new \</span><br><span class="line">    -subj <span class="string">&quot;/C=CN/ST=DongGuan/L=DongGuan/O=example/OU=Personal/CN=harbor.yuikuen.top&quot;</span> \</span><br><span class="line">    -key harbor.yuikuen.top.key \</span><br><span class="line">    -out harbor.yuikuen.top.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成x509 v3扩展文件</span></span><br><span class="line">$ <span class="built_in">cat</span> &gt; v3.ext &lt;&lt;-<span class="string">EOF</span></span><br><span class="line"><span class="string">authorityKeyIdentifier=keyid,issuer</span></span><br><span class="line"><span class="string">basicConstraints=CA:FALSE</span></span><br><span class="line"><span class="string">keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span><br><span class="line"><span class="string">extendedKeyUsage = serverAuth</span></span><br><span class="line"><span class="string">subjectAltName = @alt_names</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[alt_names]</span></span><br><span class="line"><span class="string">DNS.1=harbor.yuikuen.top</span></span><br><span class="line"><span class="string">DNS.2=harbor.yuikuen</span></span><br><span class="line"><span class="string">DNS.3=harbor.yuikuen.top</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">//无论是使用 FQDN 还是 IP 地址连接到 Harbor 主机，都必须创建此文件，以便为 Harbor 主机生成符合主题备用名称 (SAN) 和 x509 v3 的证书扩展要求</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用v3.ext文件为Harbor主机生成证书，将CRS和CRT文件名替换为Harbor主机名</span></span><br><span class="line">$ openssl x509 -req -sha512 -days 3650 \</span><br><span class="line">    -extfile v3.ext \</span><br><span class="line">    -CA ca.crt -CAkey ca.key -CAcreateserial \</span><br><span class="line">    -<span class="keyword">in</span> harbor.yuikuen.top.csr \</span><br><span class="line">    -out harbor.yuikuen.top.crt</span><br></pre></td></tr></table></figure></li></ul><h3 id="提供证书"><a href="#提供证书" class="headerlink" title="提供证书"></a>提供证书</h3><blockquote><p>生成后 <code>ca.crt</code>，<code>yourdomain.com.crt</code> 和 <code>yourdomain.com.key</code> 文件，必须将它们提供给 Harbor 和 Docker，才能正常使用；</p></blockquote><p>Docker 需要将 CRT 文件作为 CA 证书，CERT 文件作为客户端证书</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl x509 -inform PEM -<span class="keyword">in</span> harbor.yuikuen.top.crt -out harbor.yuikuen.top.cert</span><br></pre></td></tr></table></figure><p>将服务器证书、密钥和 CA 文件复制到 Harbor 主机上的 Docker 证书文件夹中</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /etc/docker/certs.d/harbor.yuikuen.top</span><br><span class="line">$ <span class="built_in">cp</span> ca.crt *.top.cert *.top.key /etc/docker/certs.d/harbor.yuikuen.top/</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;<strong>如果您将默认 <code>nginx</code> 端口 443映射到其他端口，请创建文件夹</strong>&#x3D;&#x3D;</p><blockquote><p><code>/etc/docker/certs.d/yourdomain.com:port</code> 或 <code>/etc/docker/certs.d/harbor_IP:port</code></p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><p>证书配置说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ tree /etc/docker/certs.d/</span><br><span class="line">/etc/docker/certs.d/</span><br><span class="line">└── harbor.yuikuen.top</span><br><span class="line">    ├── ca.crt                   &lt;-- 签署注册表证书的证书颁发机构</span><br><span class="line">    ├── harbor.yuikuen.top.cert  &lt;-- 由CA签名的服务器证书</span><br><span class="line">    └── harbor.yuikuen.top.key   &lt;-- 由CA签名的服务器密钥</span><br><span class="line"></span><br><span class="line">1 directory, 3 files</span><br></pre></td></tr></table></figure><h3 id="Harbor-部署"><a href="#Harbor-部署" class="headerlink" title="Harbor 部署"></a>Harbor 部署</h3><p>修改配置文件，若是采用 http 方式搭建，可忽视 https 的配置部分，将其注释掉</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> harbor.yml.tmpl harbor.yml &amp;&amp; vim harbor.yml</span><br><span class="line">$ vim harbor.yml</span><br><span class="line"><span class="comment"># Configuration file of Harbor &lt;--修改域名地址</span></span><br><span class="line">hostname: harbor.yuikuen.top</span><br><span class="line"></span><br><span class="line"><span class="comment"># http related config</span></span><br><span class="line">http:</span><br><span class="line">  port: 80</span><br><span class="line">  </span><br><span class="line"><span class="comment"># https related config &lt;--添加证书</span></span><br><span class="line">https:</span><br><span class="line">  port: 443</span><br><span class="line">  certificate: /opt/harbor/cert/harbor.yuikuen.top.cert</span><br><span class="line">  private_key: /opt/harbor/cert/harbor.yuikuen.top.key</span><br><span class="line"></span><br><span class="line">harbor_admin_password: Harbor12345</span><br><span class="line"></span><br><span class="line"><span class="comment"># Harbor DB configuration</span></span><br><span class="line">database:</span><br><span class="line">  password: root123</span><br><span class="line">  max_idle_conns: 100</span><br><span class="line">  max_open_conns: 900</span><br><span class="line"></span><br><span class="line"><span class="comment"># The default data volume</span></span><br><span class="line">data_volume: /data</span><br></pre></td></tr></table></figure><p>执行预备脚本<code>./prepare</code> ，待测试完出现 <code>Successfully called func: create_root_cert</code>表示可正常部署</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./install.sh --with-chartmuseum --with-notary --with-trivy</span><br><span class="line">`--with-chartmuseum` 是安装chart仓库，不使用helm可不添加该参数</span><br><span class="line">`--with-notary` 含义是启用镜像签名，必须是 https 才可以，否则会报错`ERROR:root:Error: the protocol must be https when Harbor is deployed with Notary`</span><br></pre></td></tr></table></figure><p><strong>设置开机自启动</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /usr/lib/systemd/system/harbor.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=Harbor</span><br><span class="line">After=docker.service systemd-networkd.service systemd-resolved.service</span><br><span class="line">Requires=docker.service</span><br><span class="line">Documentation=http://github.com/vmware/harbor</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=5</span><br><span class="line">ExecStart=/usr/local/bin/docker-compose -f  /opt/harbor/docker-compose.yml up</span><br><span class="line">ExecStop=/usr/local/bin/docker-compose -f /opt/harbor/docker-compose.yml down</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="验证功能"><a href="#验证功能" class="headerlink" title="验证功能"></a>验证功能</h3><p>为 Harbor 设置 HTTPS 后，可以通过执行以下步骤来验证 HTTPS 连接</p><ul><li><p>打开浏览器并输入<a href="https://yourdomain.com/">https://yourdomain.com</a>。它应该显示 Harbor 界面。</p><p>某些浏览器可能会显示一条警告，指出证书颁发机构 (CA) 未知。使用不是来自受信任的第三方 CA 的自签名 CA 时会发生这种情况。您可以将 CA 导入浏览器以消除警告。</p></li><li><p>在运行 docker 守护进程的计算机上，检查<code>/etc/docker/daemon.json</code>文件，确保没有为<a href="https://yourdomain.com.设置`-insecure-registry`选项./">https://yourdomain.com.设置`-insecure-Registry`选项。</a></p></li><li><p>从 Docker 客户端登录 Harbor <code>docker login yourdomain.com</code></p></li></ul><p>​       如果已将<code>nginx</code>443 端口映射到其他端口，请在<code>login</code>命令中添加该端口 <code>docker login yourdomain.com:port</code></p><ul><li>如果安装失败，请参阅 <a href="https://goharbor.io/docs/2.0.0/install-config/troubleshoot-installation/">Harbor 安装故障排除</a></li></ul><p><strong>疑难解答</strong></p><p>如果使用来自证书颁发者的中间证书，请将中间证书与您自己的证书合并以创建证书包。运行以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> intermediate-certificate.pem &gt;&gt; yourdomain.com.crt</span><br></pre></td></tr></table></figure><p>当 Docker 守护程序在某些操作系统上运行时，可能需要在操作系统级别信任证书。例如，运行以下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">$ <span class="built_in">cp</span> yourdomain.com.crt /usr/local/share/ca-certificates/yourdomain.com.crt </span><br><span class="line">$ update-ca-certificates</span><br><span class="line"></span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">$ <span class="built_in">cp</span> yourdomain.com.crt /etc/pki/ca-trust/source/anchors/yourdomain.com.crt</span><br><span class="line">$ update-ca-trust</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> harbor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab配置_跨版本升级</title>
      <link href="/2022/04/07/gitlab/gitlab%E9%85%8D%E7%BD%AE_%E8%B7%A8%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/"/>
      <url>/2022/04/07/gitlab/gitlab%E9%85%8D%E7%BD%AE_%E8%B7%A8%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在开始升级之前，一定要做好备份工作，并记录好版本号。</p></blockquote><p>1）查看 Gitlab 版本号，以现 11.1.4 版本为例；</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION</span></span><br><span class="line">11.1.4</span><br></pre></td></tr></table></figure><p>2）备份当前的 Gitlab</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gitlab-rake gitlab:backup:create</span></span><br></pre></td></tr></table></figure><p><strong>注意：除了在 <code>/var/opt/gitlab/backups</code> 下生成一个备份文件外，还需备份 <code>/etc/gitlab/gitlab-secrets.json</code></strong></p><p>3）升级版本</p><p><strong>Gitlab 的升级不能跨越大版本号，需要升级到当前大版本号的最高版本，方可升级到下一个大版本号，如：11.1.4–&gt;11.11.8–&gt;12.7.5，先准备好相关的 rpm 包(在此选用清华源演示)</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-11.11.8-ce.0.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.7.5-ce.0.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.9.2-ce.0.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure><p>依次执行下面指令逐步升级，在每一步安装成功后如果发现界面 500，这是因为 redis 等程序还没完成启动，需要等会再访问即可，或清理 Redis 缓存：<code>gitlab-rake cache:clear</code></p><p>&#x3D;&#x3D;（一定要保证数据可以正常访问方可执行下一步升级指令）&#x3D;&#x3D;</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum localinstall -y gitlab-ce-11.11.8-ce.0.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum localinstall -y gitlab-ce-12.7.5-ce.0.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure><p>完成之后再查看当前版本：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION</span> </span><br><span class="line">12.7.5</span><br></pre></td></tr></table></figure><p>还原 <code>/etc/gitlab/gitlab-secrets.json</code>，如有配置请注意备份 gitlab.rb 文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> -rf gitlab-secrets.json /etc/gitlab/gitlab-secrets.json</span><br></pre></td></tr></table></figure><p>至此，Gitlab 的升级就完成了</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab配置_备份&amp;还原</title>
      <link href="/2022/04/07/gitlab/gitlab%E9%85%8D%E7%BD%AE_%E5%A4%87%E4%BB%BD&amp;%E8%BF%98%E5%8E%9F/"/>
      <url>/2022/04/07/gitlab/gitlab%E9%85%8D%E7%BD%AE_%E5%A4%87%E4%BB%BD&amp;%E8%BF%98%E5%8E%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>修改配置都需要 <code>gitlab-ctl reconfigure</code> 和 <code>gitlab-ctl restart</code></p></blockquote><h3 id="手动备份"><a href="#手动备份" class="headerlink" title="手动备份"></a>手动备份</h3><p>gitlab 默认备份路径为 <code>/var/opt/gitlab/backups</code>，而修改 <code>gitlab.rb</code> 配置文件，可自定义本地备份存放路径(非必须)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### Backup Settings</span></span><br><span class="line"><span class="comment">###! Docs: https://docs.gitlab.com/omnibus/settings/backups.html</span></span><br><span class="line"><span class="comment"># 常用备份配置如下</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;manage_backup_path&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&quot;/var/opt/gitlab/backups&quot;</span>  <span class="comment"># gitlab 备份目录</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_archive_permissions&#x27;</span>] = 0644        <span class="comment"># 生成的备份文件权限</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = 604800                <span class="comment"># 备份保留天数7天（604800秒）</span></span><br></pre></td></tr></table></figure><p>执行如下命令生成 gitlab 备份</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitlab-rake gitlab:backup:create</span><br><span class="line">-rw------- 1 chrony polkitd 1327226880 Aug  3 01:24 1627925062_2021_08_03_13.3.5_gitlab_backup.tar</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cp</span> /etc/gitlab/gitlab-secrets.json gitlab-secrets.json.$(<span class="built_in">date</span> +%F_%T)</span><br></pre></td></tr></table></figure><h3 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h3><p>结合 crontab 实施自动定时备份，比如每天0点、6点、12点、18点各备份一次</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/opt/gitlab/backups</span><br><span class="line">$ vim gitlab_backup.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/usr/bin/gitlab-rake gitlab:backup:create CRON=1</span><br><span class="line"><span class="comment"># 环境变量 CRON=1 的作用是如果没有任何错误发生时，抑制备份脚本的所有进度输出</span></span><br><span class="line">$ crontab -e</span><br><span class="line">0 0,6,12,18 * * * /bin/bash -x /var/opt/gitlab/backups/gitlab_backup.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#定时任务在crontab</span></span><br><span class="line"></span><br><span class="line">dateTime=`<span class="built_in">date</span> +%Y-%m-%d`                  <span class="comment">#当前系统时间</span></span><br><span class="line">bakdata=<span class="variable">$dateTime</span>.tar.gz                   <span class="comment">#打包文件名</span></span><br><span class="line">bakname=/home/gitlab/data/backups/*.tar    <span class="comment">#备份的内容</span></span><br><span class="line">SOURCE_PATH=/home/gitlab/data/backups      <span class="comment">#本地备份目录</span></span><br><span class="line">DEST_PATH=/home/backup/ZS-Backup/gitlab    <span class="comment">#远程服务器备份目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------进入备份目录...&quot;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SOURCE_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------删除本机过期数据...&quot;</span></span><br><span class="line">find <span class="variable">$SOURCE_PATH</span> -name <span class="string">&quot;*.tar&quot;</span> -ctime +1 -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line">find <span class="variable">$SOURCE_PATH</span> -name <span class="string">&quot;*.tar.gz&quot;</span> -ctime +1 -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------备份Gitlab数据...&quot;</span></span><br><span class="line">docker <span class="built_in">exec</span> -t gitlab gitlab-rake gitlab:backup:create CRON=1;</span><br><span class="line">tar -zcvf <span class="variable">$bakdata</span> <span class="variable">$bakname</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------备份数据至远程目录&quot;</span></span><br><span class="line"><span class="built_in">cp</span> -R <span class="variable">$SOURCE_PATH</span>/*.tar.gz <span class="variable">$DEST_PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------删除远程目录过期数据...&quot;</span></span><br><span class="line">find <span class="variable">$DEST_PATH</span> -name <span class="string">&quot;*.tar.gz&quot;</span> -ctime +7 -<span class="built_in">type</span> f -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;-------备份结束\n&quot;</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /etc/gitlab/gitlab-secrets.json gitlab-secrets.json.$(<span class="built_in">date</span> +%F_%T)</span><br></pre></td></tr></table></figure><h3 id="备份还原"><a href="#备份还原" class="headerlink" title="备份还原"></a>备份还原</h3><p>通过备份，可实现代码数据迁移和数据还原等操作，将 backups 中最近的一次备份，复制到另一台 Gitlab 服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制到同样的路径</span></span><br><span class="line">$ <span class="built_in">cd</span> /var/opt/gitlab/backups</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给予备份权限，并停止连接数据库的进程，unicorn是rubby相关的webserver，sidekiq是rubby相关的消息队列</span></span><br><span class="line">$ <span class="built_in">chmod</span> 777 1580716769_2020_02_03_12.7.5_gitlab_backup.tar</span><br><span class="line">$ gitlab-ctl stop unicorn</span><br><span class="line">$ gitlab-ctl stop sidekiq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用命令还原数据，中途按提示输入Yes即可</span></span><br><span class="line">$ gitlab-rake gitlab:backup:restore BACKUP=1627925062_2021_08_03_13.3.5</span><br><span class="line">$ <span class="built_in">cp</span> -rf gitlab-secrets.json /etc/gitlab/gitlab-secrets.json </span><br><span class="line">$ gitlab-ctl reconfigure</span><br><span class="line">$ gitlab-ctl restart</span><br><span class="line">$ gitlab-ctl status</span><br></pre></td></tr></table></figure><p>在使用 <code>gitlab-ctl reconfigure</code> 前，需要复制备份好的 <code>gitlab-secrets.json</code> 文件到<code>/etc/gitlab/</code>目录进行覆盖，因为 Gitlab 密钥文件-此密钥包含了数据库加密密钥和密钥变量。</p><p>如不能恢复此文件，那么用户的密码就无法访问 gitlab 服务器，或者打开 gitlab 项目会报 500 错误。</p><p><strong>注：如需作服务器迁移还原，注意将 <code>gitlab.rb</code> 文件同步复制到新服务器，因为内有 gitlab 域名信息，也就是服务器地址，版本一致的情况下，可覆盖并还原原服务器配置；</strong></p><p>另需要注意的是：新服务器上的 Gitlab 的版本必须与创建备份时的 Gitlab 版本号相同，比如新服务器安装的是最新的 14 版本的 Gitlab, 那么迁移之前, 最好将老服务器的 Gitlab 升级为 14 再进行备份</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab配置_SSH免密登录</title>
      <link href="/2022/04/07/gitlab/gitlab%E9%85%8D%E7%BD%AE_SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2022/04/07/gitlab/gitlab%E9%85%8D%E7%BD%AE_SSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="概要说明"><a href="#概要说明" class="headerlink" title="概要说明"></a>概要说明</h3><blockquote><p>一般在管理远程主机时，都会使用 SSH 登录，如 <code>ssh user@host</code> ，但每次都需要使用密码；为了方便工作，使用 <code>ssh-keygen</code> 生成的密钥对，然后将公钥添加到目标主机的 <code>~/.ssh/authorized_keys</code> 文件中，将当前主机纳到可信任主机中，下次就不用输入密码了；</p></blockquote><p>[Gitlab &amp; Github 同理，都支持此种方式的连接]</p><ul><li>本机生成密钥对</li><li>拷贝公钥到目标主机</li><li>测试目标服务是否可用</li></ul><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;[your_mail]&quot;</span> -f ~/.ssh/[custom_name]</span><br><span class="line">// your_mail 表示你的邮箱地址。</span><br><span class="line">// custom_name 表示公钥私钥的名称。[-f ~/.ssh/xxx]可选，默认名称为id_rsa</span><br><span class="line"></span><br><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;xxx@qq.com&quot;</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/root/.ssh/id_rsa): </span><br><span class="line">Created directory <span class="string">&#x27;/root/.ssh&#x27;</span>.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:kiXxRVwwk1L3hacTf8rum5krzWx9Ty88MzPo+vA3UWA xxx@qq.com</span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|      .  +B+o  ..|</span></span><br><span class="line"><span class="string">|       o..o+ .E..|</span></span><br><span class="line"><span class="string">|      . o.   ..* |</span></span><br><span class="line"><span class="string">|       +      o +|</span></span><br><span class="line"><span class="string">|      o S    . +.|</span></span><br><span class="line"><span class="string">|       .      +  |</span></span><br><span class="line"><span class="string">|          .  B o.|</span></span><br><span class="line"><span class="string">|           oo ^=+|</span></span><br><span class="line"><span class="string">|          .++=B@=|</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>在<code>~/.ssh</code>下，找到名为<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件。其中<code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥</p><h3 id="添加公钥"><a href="#添加公钥" class="headerlink" title="添加公钥"></a>添加公钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0DmRJCfxw9728O41uNaH+xu04x17kmS3cfH2gw8fRM+6adKKSAGtaa3dorYKi3I62DqR3xVhqQSaKbjFR2Ms5+nosiv/gJR8kI5gCO4LU/qeHeVbfvo5DZiam/CujpszNqWVq91F+f2+xY6MEwVAx93ca7WTQo7PV6ToQ00e0DNHZAXpABIZpKpKbseTeV2tAN0qjaFbWiIXVJsYR3y/sOJZ5VwCThFp+ZCMZYXOlJrPTnVT/qaEg4efVJlzMrjmvIfxzcVqtpjbVqWxnzucFJSP9AzZb/UtDtei+KNX6V16m+qt1LennKc08f5z1BdRnSzi2No55f0jt2D1G3v/X xxx@qq.com</span><br></pre></td></tr></table></figure><p>以 gitlab 为例，找到 <code>头像 -&gt; settings -&gt; SSH Keys</code>，然后将 <code>id_rsa.pub</code> 的内容复制到 <code>key</code> 字段中</p><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T [gitlab地址]</span><br><span class="line"><span class="comment"># 比如访问github的地址 ssh -T git@github.com</span></span><br><span class="line"><span class="comment"># 如果需要将详细信息打印出来，可以使用指令 ssh -T -v git@github.com</span></span><br><span class="line"><span class="comment"># Welcome to GitLab, xxx!</span></span><br><span class="line"></span><br><span class="line">$ ssh -T git@yk-gitlab.net</span><br><span class="line">Welcome to GitLab, @root!</span><br></pre></td></tr></table></figure><p><strong>如果还提示需要输入密码</strong></p><p>可能是因为没有将私钥添加到 ssh-agent 中，可以使用指令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 id_rsa 添加进 ssh-agent 管理器中</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa // 会将私钥保存到ssh-agent指定的session中，重启会导致ssh-agent服务重置</span><br><span class="line">或者</span><br><span class="line">ssh-add -K ~/.ssh/id_rsa // 如果是Mac用户，保存到keychain，达到永久保存的目的</span><br></pre></td></tr></table></figure><h3 id="多Key配置"><a href="#多Key配置" class="headerlink" title="多Key配置"></a>多Key配置</h3><blockquote><p>大多数时候，机器上会有很多的 git host，比如公司的 Gitlab、私人的 GitHub、OsChina、Gitee 等，那就需要配置多个 ssh key，使不同的 host 能使用不同的 ssh key，具体操作如下：</p></blockquote><ul><li>Gitlab</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&#x27;yourEmail@xx.com&#x27;</span> -f ~/.ssh/gitlab-rsa</span><br></pre></td></tr></table></figure><ul><li>GitHub</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&#x27;yourEmail2@xx.com&#x27;</span> -f ~/.ssh/github-rsa</span><br></pre></td></tr></table></figure><ul><li>在 <code>~/.ssh</code> 目录下新建名称为 <code>config</code> 的文件（无后缀名）。用于配置多个不同的 host 使用不同的 ssh key，内容如下：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab</span></span><br><span class="line">Host gitlab.com</span><br><span class="line">    HostName gitlab.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/gitlab_id-rsa</span><br><span class="line"><span class="comment"># github</span></span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/github_id-rsa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置文件参数</span></span><br><span class="line"><span class="comment"># Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件</span></span><br><span class="line"><span class="comment"># HostName : 要登录主机的主机名</span></span><br><span class="line"><span class="comment"># User : 登录名</span></span><br><span class="line"><span class="comment"># IdentityFile : 指明上面User对应的identityFile路径</span></span><br></pre></td></tr></table></figure><p>按照上面的步骤分别往 gitlab 和 github 上添加生成的公钥 <code>gitlab_id-rsa.pub</code> 和 <code>github_id-rsa.pub</code></p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitlab部署_初始化配置</title>
      <link href="/2022/04/07/gitlab/gitlab%E9%83%A8%E7%BD%B2_%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/04/07/gitlab/gitlab%E9%83%A8%E7%BD%B2_%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>rpm &amp; yum 安装的 Gitlab 的默认目录在 <code>/var/opt/gitlab</code> 和 <code>/opt/gitlab/</code> , 日志目录在 <code>/var/log/gitlab/</code>，不利于日常维护，为了方便管理，可创建独立目录，再分别 <code>ln -s</code> 映射到相关目录；</p></blockquote><h3 id="服务构成"><a href="#服务构成" class="headerlink" title="服务构成"></a>服务构成</h3><p>GitLab 由主要由以下服务构成，他们共同承担了 Gitlab 的运作需要</p><table><thead><tr><th>nginx</th><th>静态 web 服务器</th></tr></thead><tbody><tr><td>gitlab-shell</td><td>用于处理 Git 命令和修改 authorized keys 列表</td></tr><tr><td>gitlab-workhorse</td><td>轻量级的反向代理服务器</td></tr><tr><td>logrotate</td><td>日志文件管理工具</td></tr><tr><td>postgresql</td><td>数据库</td></tr><tr><td>redis</td><td>缓存数据库</td></tr><tr><td>sidekiq</td><td>用于在后台执行队列任务（异步执行）</td></tr><tr><td>unicorn</td><td>HTTP 服务，GitLab Rails 应用是托管在这个服务器上面的</td></tr></tbody></table><p><strong>主要配置文件目录</strong></p><table><thead><tr><th>主配置文件</th><th>&#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</th></tr></thead><tbody><tr><td>文档根目录</td><td>&#x2F;opt&#x2F;gitlab</td></tr><tr><td>默认存储库位置</td><td>&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;git-data&#x2F;repositories</td></tr><tr><td>Nginx 配置文件</td><td>&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx&#x2F;conf&#x2F;gitlab-http.conf</td></tr><tr><td>Postgresql 数据目录</td><td>&#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;postgresql&#x2F;data</td></tr></tbody></table><h3 id="域名证书"><a href="#域名证书" class="headerlink" title="域名证书"></a>域名证书</h3><p>在此采用 Https 方式访问，首先<strong>生成秘钥</strong>到指定目录；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> ssl</span><br><span class="line">$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/gitlab/ssl/server.key -out /etc/gitlab/ssl/server.crt</span><br><span class="line">Generating a 2048 bit RSA private key</span><br><span class="line">.+++</span><br><span class="line">...................................................................+++</span><br><span class="line">writing new private key to <span class="string">&#x27;/etc/gitlab/ssl/server.key&#x27;</span></span><br><span class="line">-----</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter <span class="string">&#x27;.&#x27;</span>, the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:GD</span><br><span class="line">Locality Name (eg, city) [Default City]:DG</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:IT</span><br><span class="line">Organizational Unit Name (eg, section) []:DevOps</span><br><span class="line">Common Name (eg, your name or your server<span class="string">&#x27;s hostname) []:yk-gitlab.net</span></span><br><span class="line"><span class="string">Email Address []:228003666@qq.com</span></span><br></pre></td></tr></table></figure><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/gitlab/gitlab.rb</span><br><span class="line"><span class="comment">## GitLab URL</span></span><br><span class="line">external_url <span class="string">&#x27;https://yk-gitlab.net&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### LDAP Settings</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;ldap_enabled&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;ldap_servers&#x27;</span>] = YAML.load &lt;&lt;-<span class="string">&#x27;EOS&#x27;</span></span><br><span class="line">main:</span><br><span class="line">  label: <span class="string">&#x27;LDAP登录&#x27;</span></span><br><span class="line">  host: <span class="string">&#x27;xxx.xxx.com&#x27;</span>               // ldap地址</span><br><span class="line">  port: 389                         // ldap端口</span><br><span class="line">  uid: <span class="string">&#x27;uid&#x27;</span> </span><br><span class="line">  method: <span class="string">&#x27;plain&#x27;</span></span><br><span class="line">  bind_dn: <span class="string">&#x27;uid=ygeg,cn=users,dc=enn,dc=com&#x27;</span>    // ldap管理账号</span><br><span class="line">  password: <span class="string">&#x27;Passw0rd&#x27;</span>                          // ldap管理账号密码</span><br><span class="line">  verify_certificates: <span class="literal">true</span> </span><br><span class="line">  active_directory: <span class="literal">false</span> </span><br><span class="line">  allow_username_or_email_login: <span class="literal">true</span></span><br><span class="line">  lowercase_usernames: <span class="literal">false</span> </span><br><span class="line">  block_auto_created_users: <span class="literal">false</span> </span><br><span class="line">  base: <span class="string">&#x27;cn=users,dc=enn,dc=com&#x27;</span></span><br><span class="line">  user_filter: <span class="string">&#x27;&#x27;</span></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line"><span class="comment">### Backup Settings</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;manage_backup_path&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_path&#x27;</span>] = <span class="string">&quot;/var/opt/gitlab/backups&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_archive_permissions&#x27;</span>] = 0644</span><br><span class="line">gitlab_rails[<span class="string">&#x27;backup_keep_time&#x27;</span>] = 604800</span><br><span class="line"></span><br><span class="line"><span class="comment">### HTTPS Setting</span></span><br><span class="line">nginx[<span class="string">&#x27;redirect_http_to_https&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/server.crt&quot;</span></span><br><span class="line">nginx[<span class="string">&#x27;ssl_certificate_key&#x27;</span>] = <span class="string">&quot;/etc/gitlab/ssl/server.key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Gitlab mail</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.yourdomain.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 25</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;smtp.yourdomain.com&quot;</span> </span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&#x27;plain&#x27;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>运维管理</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看版本</span></span><br><span class="line">$ <span class="built_in">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时查看日志</span></span><br><span class="line">$ gitlab-ctl <span class="built_in">tail</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 数据库关系升级</span></span><br><span class="line">$ gitlab-rake db:migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理redis缓存</span></span><br><span class="line">$ gitlab-rake cache:clear</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级GitLab-ce 版本,需要更新数据库，因新版本要求</span></span><br><span class="line">$ gitlab-ctl pg_upgrade</span><br><span class="line">$ yum update gitlab-ce </span><br><span class="line">// 因为升级需要按版本迭代，需要根据现有版本升级到最终版才能往上升；</span><br><span class="line">// 参考链接：https://docs.gitlab.com/ee/update/index.html<span class="comment">#upgrade-paths</span></span><br><span class="line">13.1.11 -&gt; latest 13.12.Z -&gt; latest 14.0.Z -&gt; 14.1.Z -&gt; latest 14.Y.Z</span><br><span class="line">$ yum -y install gitlab-ce-13.9.2-ce.0.el7.x86_64</span><br><span class="line">$ yum -y install gitlab-ce-14.1.0-ce.0.el7.x86_64</span><br></pre></td></tr></table></figure><ul><li>服务控制命令</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动/停止/重启/状态 所有 gitlab 组件</span></span><br><span class="line">$ gitlab-ctl start/stop/restart/status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动指定模块组件,停止同理</span></span><br><span class="line">$ gitlab-ctl start redis/postgresql/gitlab-workhorse/logrotate/nginx/sidekiq/unicorn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成配置并启动服务</span></span><br><span class="line">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><ul><li>日志相关</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 实时查看所有日志</span></span><br><span class="line">$ gitlab-ctl <span class="built_in">tail</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实时各个模块日志</span></span><br><span class="line">$ gitlab-ctl <span class="built_in">tail</span> redis/postgresql/gitlab-workhorse/logrotate/nginx/sidekiq/unicorn</span><br></pre></td></tr></table></figure><ul><li>重设管理员或指定用户密码</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> bin]<span class="comment"># gitlab-rails console production</span></span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line"> GitLab:       11.10.4 (62c464651d2)</span><br><span class="line"> GitLab Shell: 9.0.0</span><br><span class="line"> PostgreSQL:   9.6.11</span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">Loading production environment (Rails 5.0.7.2)</span><br><span class="line">irb(main):001:0&gt; user = User.<span class="built_in">where</span>(<span class="built_in">id</span>:1).first</span><br><span class="line">=&gt; <span class="comment">#&lt;User id:1 @root&gt;</span></span><br><span class="line">irb(main):002:0&gt; user.password = <span class="string">&#x27;qwer1234&#x27;</span></span><br><span class="line">=&gt; <span class="string">&quot;qwer1234&quot;</span></span><br><span class="line">irb(main):003:0&gt; user.password_confirmation = <span class="string">&#x27;qwer1234&#x27;</span></span><br><span class="line">=&gt; <span class="string">&quot;qwer1234&quot;</span></span><br><span class="line">irb(main):004:0&gt; user.save</span><br><span class="line">Enqueued ActionMailer::DeliveryJob (Job ID: 4752a4a4-4e85-4e8b-9f27-72788abfe97c) to Sidekiq(mailers) with arguments: <span class="string">&quot;DeviseMailer&quot;</span>, <span class="string">&quot;password_change&quot;</span>, <span class="string">&quot;deliver_now&quot;</span>, <span class="comment">#&lt;GlobalID:0x00007f519e7501d8 @uri=#&lt;URI::GID gid://gitlab/User/1&gt;&gt;</span></span><br><span class="line">=&gt; <span class="literal">true</span></span><br><span class="line">irb(main):005:0&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h3><p>1）PostgreSQL 数据源</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## PostgreSQL 配置Gitlab数据库授权</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">su - postgres</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-bash-4.1$ psql -U postgres</span></span><br><span class="line">psql (10.12)</span><br><span class="line">输入 &quot;help&quot; 来获取帮助信息.</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">postgres=<span class="comment"># CREATE USER gitlab_user WITH PASSWORD &#x27;gitlab_passwd&#x27;;</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">postgres=<span class="comment"># GRANT ALL PRIVILEGES ON DATABASE gitlabhq_production TO gitlab_user;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 修改Gitlab配置文件</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vim /etc/gitlab/gitlab.rb</span></span><br><span class="line">......</span><br><span class="line">postgresql[&#x27;enable&#x27;] = false    </span><br><span class="line">gitlab_rails[&#x27;db_adapter&#x27;] = &quot;postgresql&quot;</span><br><span class="line">gitlab_rails[&#x27;db_encoding&#x27;] = &quot;unicode&quot;</span><br><span class="line">gitlab_rails[&#x27;db_database&#x27;] = &quot;gitlabhq_production&quot;</span><br><span class="line">gitlab_rails[&#x27;db_pool&#x27;] = 100</span><br><span class="line">gitlab_rails[&#x27;db_username&#x27;] = &quot;username&quot;</span><br><span class="line">gitlab_rails[&#x27;db_password&#x27;] = &quot;password&quot;</span><br><span class="line">gitlab_rails[&#x27;db_host&#x27;] = &quot;db_host_ip&quot;</span><br><span class="line">gitlab_rails[&#x27;db_port&#x27;] = 5432</span><br><span class="line">gitlab_rails[&#x27;db_prepared_statements&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;db_statements_limit&#x27;] = 1000</span><br><span class="line">......</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">gitlab-ctl reconfigure</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">gitlab-ctl restart</span></span><br></pre></td></tr></table></figure><p>2）配置MySQL数据源</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## MySQL 配置Gitlab数据库授权</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">CREATE DATABASE gitlab;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">GRANT ALL ON gitlab.* TO <span class="string">&#x27;gitlab_user&#x27;</span>@<span class="string">&#x27;gitlab_host_ip&#x27;</span> IDENTIFIED BY <span class="string">&#x27;gitlab_password&#x27;</span>;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 更换 rubygem 安装源</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/opt/gitlab/embedded/bin/gem sources --remove https://rubygems.org/</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/opt/gitlab/embedded/bin/gem sources -a https://gems.ruby-china.com</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">sed -i <span class="string">&#x27;s#rubygems.org#gems.ruby-china.com#g&#x27;</span> /opt/gitlab/embedded/service/gitlab-rails/Gemfile</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 安装依赖</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">yum install -y mysql-devel gcc-c++</span> </span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> /opt/gitlab/embedded/service/gitlab-rails/    <span class="comment"># Gemfile 所在目录</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">/opt/gitlab/embedded/bin/bundle install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 修改依赖数据源</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cd</span> /opt/gitlab/embedded/service/gitlab-rails/</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vim .bundle/config</span></span><br><span class="line">---</span><br><span class="line">BUNDLE_RETRY: &quot;5&quot;</span><br><span class="line">BUNDLE_JOBS: &quot;9&quot;</span><br><span class="line">BUNDLE_WITHOUT: &quot;development:test:postgres&quot;    # mysql 改成 postgres</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## Gem安装数据源 mysql2</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> /opt/gitlab/embedded/bin/gem install mysql2 -v <span class="string">&#x27;0.3.20&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 修改Gitlab 配置文件</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">vim /etc/gitlab/gitlab.rb</span></span><br><span class="line">......</span><br><span class="line">postgresql[&#x27;enable&#x27;] = false</span><br><span class="line">gitlab_rails[&#x27;db_adapter&#x27;] = &quot;mysql2&quot;</span><br><span class="line">gitlab_rails[&#x27;db_encoding&#x27;] = &quot;utf8&quot;</span><br><span class="line">gitlab_rails[&#x27;db_database&#x27;] = &quot;gitlab&quot;</span><br><span class="line">gitlab_rails[&#x27;db_username&#x27;] = &quot;gitlab_user&quot;</span><br><span class="line">gitlab_rails[&#x27;db_password&#x27;] = &#x27;gitlab_password&#x27;</span><br><span class="line">gitlab_rails[&#x27;db_host&#x27;] = &#x27;db_host_ip&#x27;</span><br><span class="line">gitlab_rails[&#x27;db_port&#x27;] = &#x27;3306&#x27;</span><br><span class="line">......</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">## 重新加载配置</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">gitlab-ctl reconfigure</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">gitlab-ctl restart</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker部署_Gitlab</title>
      <link href="/2022/04/07/gitlab/docker%E9%83%A8%E7%BD%B2_Gitlab/"/>
      <url>/2022/04/07/gitlab/docker%E9%83%A8%E7%BD%B2_Gitlab/</url>
      
        <content type="html"><![CDATA[<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>查看现有gitlab版本，下载镜像，从Docker的镜像仓库中下载gitlab社区版镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker search gitlab</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull gitlab/gitlab-ce:latest</span> </span><br><span class="line">//选用最新版本</span><br></pre></td></tr></table></figure><h3 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h3><p>因为容器的数据是不能持久化保存的。所以我们需要用 docker volume 的方式将存储的数据映射到操作系统的目录中来。<br>这样就算运行的容器崩溃，我们重新启动一个新的容器，原来容器中的数据还是不会丢失.<br>映射主要端口、目录，重新命令为gitlab</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//加-d表示后台运行</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -detach \ </span> </span><br><span class="line">--publish 443:443 --publish 80:80 --publisth 2222:22 \ </span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">--volume /home/gitlab/config:/etc/gitlab \</span><br><span class="line">--volume /home/gitlab/logs:/var/log/gitlab \</span><br><span class="line">--volume /home/gitlab/data:/var/opt/gitlab \</span><br><span class="line">--volume /etc/localtime:/etc/localtime \</span><br><span class="line">--privileged=true gitlab/gitlab-ce:latest  </span><br><span class="line"></span><br><span class="line">操作命令如下：</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -detach -p 443:443 -p 80:80 -p 2222:22 --name gitlab --restart always -v /home/gitlab/config:/etc/gitlab -v /home/gitlab/logs:/var/log/gitlab -v /home/gitlab/data:/var/opt/gitlab -v /etc/localtime:/etc/localtime --privileged=<span class="literal">true</span> gitlab/gitlab-ce:latest</span></span><br></pre></td></tr></table></figure><p>等待几分钟，使用浏览器打开即可；<br>注：如报502响应超时，检查CPU负载，git占用CPU是否99%，检查端口是否占用</p><h3 id="定制配置"><a href="#定制配置" class="headerlink" title="定制配置"></a>定制配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /home/gitlab/config</span></span><br><span class="line">//修改gitlab配置文件</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim gitlab.rb</span> </span><br><span class="line">unicorn[&#x27;listen&#x27;] = &#x27;localhost&#x27;</span><br><span class="line">unicorn[&#x27;port&#x27;] = 80</span><br></pre></td></tr></table></figure><p>如Gitlab启动较慢，可针对性能进行修改配置文件，建议进行容器配置，因需要重新reconfigure和restart生效</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /home/gitlab/gitlab.rb</span></span><br><span class="line">//修改以下项目内容</span><br><span class="line">unicorn[&#x27;enable&#x27;] = true                                   //减少进程数与超时时间</span><br><span class="line">unicorn[&#x27;worker_timeout&#x27;] = 60                             //超时时间60秒</span><br><span class="line">unicorn[&#x27;worker_processes&#x27;] = 2                            //不能低于2，否则卡死，Worker=CPU核数+1</span><br><span class="line"></span><br><span class="line">//Gitlab默认使用PostgreSQL</span><br><span class="line">postgresql[&#x27;shared_buffers&#x27;] = &quot;256&quot;                       //减少数据库缓存大小，默认256，可适当改小</span><br><span class="line">postgresql[&#x27;max_worker_processes&#x27;] = 8                     //减少数据库并发数</span><br><span class="line">sidekiq[&#x27;concurrency&#x27;] = 10                                //减少sidekiq并发数</span><br><span class="line"></span><br><span class="line">//减少unicorn内存使用</span><br><span class="line">unicorn[&#x27;worker_memory_limit_min&#x27;] = &quot;200 * 1 &lt;&lt; 20&quot;</span><br><span class="line">unicorn[&#x27;worker_memory_limit_max&#x27;] = &quot;300 * 1 &lt;&lt; 20</span><br></pre></td></tr></table></figure><p>配置邮箱服务SMTP服务器，以阿里云企业邮箱为例</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /home/gitlab/gitlab.rb</span></span><br><span class="line">//配置下面，需要配置smtp_tls</span><br><span class="line">gitlab_rails[&#x27;smtp_enable&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.qiye.aliyun.com&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_port&#x27;] = 465</span><br><span class="line">gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;smart-team@genesissolutions.net&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_password&#x27;] = &quot;Smart2019@!~&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;genesissolutions.net&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_tls&#x27;] = true</span><br><span class="line"></span><br><span class="line">//配置邮箱来源，与展示的名称</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_enabled&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;smart-team@genesissolutions.net&#x27;</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_display_name&#x27;] = &#x27;Gitlab&#x27;</span><br></pre></td></tr></table></figure><p>进入容器，进行重新配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker <span class="built_in">exec</span> -it gitlab /bin/bash</span>  </span><br><span class="line"></span><br><span class="line">//执行命令重新配置gitlab</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gitlab-ctl reconfigure</span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gitlab-ctl restart</span></span><br><span class="line"></span><br><span class="line">//进入邮件控制台进行测试邮件是否成功</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gitlab-rail console</span> </span><br><span class="line">Notify.test_email(&#x27;228003666@qq.com&#x27;, &#x27;Message Subject&#x27;, &#x27;Message Body&#x27;).deliver_no</span><br></pre></td></tr></table></figure><p>进一步测试接受邮件验证：可以在gitlab创建一个用户，创建完成会给用户邮箱发送邮件，让用户设置自己账户的密码，接收邮件信息；</p><p>常用配置内容如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//需要重新reconfigure和restart生效</span><br><span class="line">//修改域名地址</span><br><span class="line">external_url &#x27;http://188.188.2.112&#x27;  </span><br><span class="line">gitlab_rails[&#x27;gitlab_ssh_host&#x27;] = &#x27;188.188.2.112&#x27;</span><br><span class="line">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 2222</span><br><span class="line"></span><br><span class="line">//去除注释，并修改admin@example.com地址,配置系统邮件发送地址和回复地址</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_enabled&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;smart-team@genesissolutions.net&#x27;</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_reply_to&#x27;] = &#x27;smart-team@genesissolutions.net&#x27;</span><br><span class="line">alertmanager[&#x27;admin_email&#x27;] = &#x27;smart-team@genesissolutions.net&#x27;</span><br><span class="line"></span><br><span class="line">//修改Gitlab代码下拉的克隆地址，以下进入容器进行处理</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /var/opt/gitlab/gitlab-rail/etc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml //永久修改</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vim gitlab.yml</span></span><br><span class="line">gitlab</span><br><span class="line">  host: 188.188.2.112</span><br><span class="line">  port: 80</span><br><span class="line">  https: false</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gitlab-ctl rest</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7_部署GitLab</title>
      <link href="/2022/04/07/gitlab/centos7%E9%83%A8%E7%BD%B2_Gitlab/"/>
      <url>/2022/04/07/gitlab/centos7%E9%83%A8%E7%BD%B2_Gitlab/</url>
      
        <content type="html"><![CDATA[<h3 id="安装环境："><a href="#安装环境：" class="headerlink" title="安装环境："></a>安装环境：</h3><ul><li>系统环境：ESXi-6.7.0 + CentOS-7-x86_64-Minimal-2009</li><li>安装版本：gitlab-ce-14.1.0</li></ul><blockquote><p>开放对应服务，或直接关闭防火墙</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld</span><br><span class="line"></span><br><span class="line">$ firewall-cmd --add-service=ssh --permanent</span><br><span class="line">$ firewall-cmd --add-service=http --permanent</span><br><span class="line">$ firewalld-cmd --reload</span><br></pre></td></tr></table></figure><blockquote><p>配置依赖环境</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install policycoreutils openssh-server openssh-clients postfix</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now sshd postfix</span><br></pre></td></tr></table></figure><h3 id="安装-GitLab"><a href="#安装-GitLab" class="headerlink" title="安装 GitLab"></a>安装 GitLab</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220111165225877.png" alt="image-20220111165225877"></p><ul><li>方法一：配置源地址，再通过 Yum 在线安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/yum.repos.d/gitlab-ce.repo</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=gitlab-ce</span><br><span class="line">baseurl=http://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum list | grep gitlab-ce  </span><br><span class="line">$ yum -y install gitlab-ce-14.1.0</span><br></pre></td></tr></table></figure><ul><li>方法二：下载 Rpm 文件，再直接离线安装</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-14.1.0-ce.0.el7.x86_64.rpm</span><br><span class="line">$ rpm -ivh gitlab-ce-14.1.0-ce.0.el7.x86_64.rpm --force --nodeps</span><br></pre></td></tr></table></figure><h3 id="配置-GitLab"><a href="#配置-GitLab" class="headerlink" title="配置 GitLab"></a>配置 GitLab</h3><p>修改 <code>/etc/gitlab/gitlab.rb</code> 配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## GitLab URL 可为域名或本机IP</span></span><br><span class="line">external_url <span class="string">&#x27;https://yk-gitlab.net&#x27;</span></span><br></pre></td></tr></table></figure><p>邮箱配置 (非必要，自先选择)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">### GitLab email server settings</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_address&#x27;</span>] = <span class="string">&quot;smtp.qq.com&quot;</span>           //邮件服务</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_port&#x27;</span>] = 465                        //465默认开启smtp_tls</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_user_name&#x27;</span>] = <span class="string">&quot;sinath@vip.qq.com&quot;</span>   //发件人地址</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_password&#x27;</span>] = <span class="string">&quot;****************&quot;</span>     //邮箱授权码(自行百度)</span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_domain&#x27;</span>] = <span class="string">&quot;qq.com&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_authentication&#x27;</span>] = <span class="string">&quot;login&quot;</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_enable_starttls_auto&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_tls&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;smtp_pool&#x27;</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### Email Settings</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_enabled&#x27;</span>] = <span class="literal">true</span></span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_from&#x27;</span>] = <span class="string">&#x27;sinath@vip.qq.com&#x27;</span> //发件人邮箱</span><br><span class="line">gitlab_rails[<span class="string">&#x27;gitlab_email_display_name&#x27;</span>] = <span class="string">&#x27;sinath&#x27;</span>    //发件人名称</span><br><span class="line">user[<span class="string">&#x27;git_user_email&#x27;</span>] = <span class="string">&quot;sinath@vip.qq.com&quot;</span>            //同上</span><br></pre></td></tr></table></figure><blockquote><p>初始化服务，修改配置后需要执行命令初始化并重启</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl reconfigure</span><br><span class="line">$ gitlab-ctl restart</span><br></pre></td></tr></table></figure><p>正常输出日志代表部署成功，初始管理员用户为 <strong>root</strong>，密码在安装过程中已随机生成并保存在 <code>/etc/gitlab/initial_root_password</code>中，有效期 24 小时</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Running handlers:</span><br><span class="line">Running handlers complete</span><br><span class="line">Chef Infra Client finished, 572/1520 resources updated <span class="keyword">in</span> 04 minutes 16 seconds</span><br><span class="line"></span><br><span class="line">Notes:</span><br><span class="line">Default admin account has been configured with following details:</span><br><span class="line">Username: root</span><br><span class="line">Password: You didn<span class="string">&#x27;t opt-in to print initial root password to STDOUT.</span></span><br><span class="line"><span class="string">Password stored to /etc/gitlab/initial_root_password. This file will be cleaned up in first reconfigure run after 24 hours.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NOTE: Because these credentials might be present in your log files in plain text, it is highly recommended to reset the password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">gitlab Reconfigured!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$ cat /etc/gitlab/initial_root_password</span></span><br><span class="line"><span class="string"># WARNING: This value is valid only in the following conditions</span></span><br><span class="line"><span class="string">#          1. If provided manually (either via `GITLAB_ROOT_PASSWORD` environment variable or via `gitlab_rails[&#x27;</span>initial_root_password<span class="string">&#x27;]` setting in `gitlab.rb`, it was provided before database was seeded for the first time (usually, the first reconfigure run).</span></span><br><span class="line"><span class="string">#          2. Password hasn&#x27;</span>t been changed manually, either via UI or via <span class="built_in">command</span> line.</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#          If the password shown here doesn&#x27;t work, you must reset the admin password following https://docs.gitlab.com/ee/security/reset_user_password.html#reset-your-root-password.</span></span><br><span class="line"></span><br><span class="line">Password: d5WxYmXvXbEOfpzm/LZ6Bibmc+HzNTGpjNQU/3hdbh0=</span><br><span class="line"></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> This file will be automatically deleted in the first reconfigure run after 24 hours.</span></span><br></pre></td></tr></table></figure><h3 id="验证状态"><a href="#验证状态" class="headerlink" title="验证状态"></a>验证状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl status</span><br><span class="line">down: alertmanager: 0s, normally up, want up; run: <span class="built_in">log</span>: (pid 3505) 5177s</span><br><span class="line">run: gitaly: (pid 4357) 5105s; run: <span class="built_in">log</span>: (pid 2680) 5280s</span><br><span class="line">run: gitlab-exporter: (pid 4366) 5105s; run: <span class="built_in">log</span>: (pid 3264) 5194s</span><br><span class="line">run: gitlab-workhorse: (pid 4322) 5106s; run: <span class="built_in">log</span>: (pid 3113) 5214s</span><br><span class="line">run: grafana: (pid 4579) 5094s; run: <span class="built_in">log</span>: (pid 4120) 5123s</span><br><span class="line">run: logrotate: (pid 4252) 1693s; run: <span class="built_in">log</span>: (pid 2576) 5292s</span><br><span class="line">run: nginx: (pid 3158) 5210s; run: <span class="built_in">log</span>: (pid 3176) 5207s</span><br><span class="line">run: node-exporter: (pid 4334) 5106s; run: <span class="built_in">log</span>: (pid 3228) 5200s</span><br><span class="line">run: postgres-exporter: (pid 4572) 5094s; run: <span class="built_in">log</span>: (pid 3716) 5159s</span><br><span class="line">run: postgresql: (pid 2827) 5274s; run: <span class="built_in">log</span>: (pid 2848) 5271s</span><br><span class="line">run: prometheus: (pid 4383) 5104s; run: <span class="built_in">log</span>: (pid 3463) 5182s</span><br><span class="line">run: puma: (pid 3025) 5228s; run: <span class="built_in">log</span>: (pid 3036) 5225s</span><br><span class="line">run: redis: (pid 2609) 5287s; run: <span class="built_in">log</span>: (pid 2617) 5286s</span><br><span class="line">run: redis-exporter: (pid 4368) 5105s; run: <span class="built_in">log</span>: (pid 3359) 5188s</span><br><span class="line">run: sidekiq: (pid 3053) 5222s; run: <span class="built_in">log</span>: (pid 3067) 5219s</span><br><span class="line"></span><br><span class="line">$ lsof -i:80</span><br><span class="line">COMMAND  PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   3158       root    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   3159 gitlab-www    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   3160 gitlab-www    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   3161 gitlab-www    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   3162 gitlab-www    7u  IPv4  28763      0t0  TCP *:http (LISTEN)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220111183425464.png" alt="image-20220111183425464"></p><h3 id="程序-amp-目录"><a href="#程序-amp-目录" class="headerlink" title="程序&amp;目录"></a>程序&amp;目录</h3><p>GitLab由主要由以下服务构成，他们共同承担了Gitlab的运作需要</p><ul><li>nginx: 静态web服务器</li><li>gitlab-shell: 用于处理Git命令和修改authorized keys列表</li><li>gitlab-workhorse: 轻量级的反向代理服务器</li><li>logrotate：日志文件管理工具</li><li>postgresql：数据库</li><li>redis：缓存数据库</li><li>sidekiq：用于在后台执行队列任务（异步执行）</li><li>unicorn：HTTP服务，GitLab Rails应用是托管在这个服务器上面的</li></ul><p>主要程序目录</p><ul><li>主配置文件: &#x2F;etc&#x2F;gitlab&#x2F;gitlab.rb</li><li>文档根目录: &#x2F;opt&#x2F;gitlab</li><li>默认存储库位置: &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;git-data&#x2F;repositories</li><li>Nginx配置文件: &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx&#x2F;conf&#x2F;gitlab-http.conf</li><li>Postgresql数据目录: &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;postgresql&#x2F;data</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li>控制台打开：gitlab-rails</li><li>数据库命令：gitlab-psql</li><li>数据备份还原：gitlab-rake</li><li>客户端操作命令：gitlab-ctl<ul><li>启动：gitlab-ctl start</li><li>停止：gitlab-ctl stop</li><li>重启：gitlab-ctl restart</li><li>查看：gitlab-ctl status</li><li>日志：gitlab-ctl tail nginx(组件)</li></ul></li></ul><p>参考文档：</p>]]></content>
      
      
      <categories>
          
          <category> devops </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作_更新fork的项目为最新版本</title>
      <link href="/2022/04/07/git/git%E6%93%8D%E4%BD%9C_%E6%9B%B4%E6%96%B0fork%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%BA%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC/"/>
      <url>/2022/04/07/git/git%E6%93%8D%E4%BD%9C_%E6%9B%B4%E6%96%B0fork%E7%9A%84%E9%A1%B9%E7%9B%AE%E4%B8%BA%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 github 上 fork 了一个项目之后，如何使自己 fork 的项目和原先作者的项目分支保持同步呢，下面使用 k8s 的项目做示范，示范如何使 fork 的项目更新保持同步。</p></blockquote><p>1）<strong>首先 Clone 项目到本地</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:yuikuen/k8s.git</span><br><span class="line">Cloning into <span class="string">&#x27;k8s&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 1091, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (459/459), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (296/296), <span class="keyword">done</span>.</span><br><span class="line">Receiving objectremote: Total 1091 (delta 176), reused 409 (delta 145), pack-reused 632</span><br><span class="line">Receiving objects: 100% (1091/1091), 5.24 MiB | 1.27 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (452/452), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure><p>2）<strong>查看当前远程版本库地址</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:yuikuen/k8s.git (fetch)</span><br><span class="line">origin  git@github.com:yuikuen/k8s.git (push)</span><br></pre></td></tr></table></figure><p>3）<strong>添加原项目 git 地址到本地版本库</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add upstream https://github.com/dotbalo/k8s.git</span><br></pre></td></tr></table></figure><p>4）<strong>检查版本是否添加成功</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:yuikuen/k8s.git (fetch)</span><br><span class="line">origin  git@github.com:yuikuen/k8s.git (push)</span><br><span class="line">upstream        https://github.com/dotbalo/k8s.git (fetch)</span><br><span class="line">upstream        https://github.com/dotbalo/k8s.git (push)</span><br></pre></td></tr></table></figure><p>5）<strong>原项目更新内容同步到本地</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch upstream</span><br><span class="line">remote: Enumerating objects: 25, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (25/25), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (16/16), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 21 (delta 9), reused 14 (delta 4), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (21/21), 51.27 KiB | 905.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">From https://github.com/dotbalo/k8s</span><br><span class="line"> * [new branch]      add-license-1 -&gt; upstream/add-license-1</span><br><span class="line"> * [new branch]      master        -&gt; upstream/master</span><br></pre></td></tr></table></figure><p>6）<strong>查看本地分支</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch -a</span><br><span class="line">* master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/add-license-1</span><br><span class="line">  remotes/origin/master</span><br><span class="line">  remotes/upstream/add-license-1</span><br><span class="line">  remotes/upstream/master</span><br></pre></td></tr></table></figure><p>7）<strong>同步更新内容到本地对应分支</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge upstream/master</span><br><span class="line">Already up to <span class="built_in">date</span>.</span><br></pre></td></tr></table></figure><p>8）<strong>提交更新内容到 fork 地址</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push</span><br><span class="line">Enumerating objects: 1, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (1/1), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (1/1), 241 bytes | 241.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 1 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">To github.com:yuikuen/k8s.git</span><br><span class="line">   2896ca2..00d23be  master -&gt; master</span><br></pre></td></tr></table></figure><p>最后自行到 Github 仓库查看是否有 update 成功；</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作_上传代码至远程仓库</title>
      <link href="/2022/04/07/git/git%E6%93%8D%E4%BD%9C_%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E8%87%B3%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2022/04/07/git/git%E6%93%8D%E4%BD%9C_%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81%E8%87%B3%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本地创建了一个 Demo 工程项目，现通过 <strong>命令行</strong> 将该项目上传到 github 或者 gitlab 远程仓库，具体操作流程如下：</p></blockquote><p>1）建立本地 git 仓库，cd 到你的本地项目根目录下，执行 git init 命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> demo </span><br><span class="line">$ git init</span><br><span class="line"><span class="comment"># 进入本地工程根目录，init后将此目录变成git可管理的仓库</span></span><br></pre></td></tr></table></figure><p>2）将本地项目工作区的所有文件添加到暂存区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line"><span class="comment"># 小数点 “.” ，意为添加文件夹下的所有文件，可换成具体文件名</span></span><br></pre></td></tr></table></figure><p>3）将暂存区的文件提交到本地仓库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;注释说明&quot;</span></span><br></pre></td></tr></table></figure><p>4）在 github 或者 gitlab 上创建新的 repository</p><p>略过</p><p>5）将本地代码仓库关联到 github&#x2F;gitlab 上</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin git@yk-gitlab.net:root/intell-project.git</span><br></pre></td></tr></table></figure><p>错误 <code>fatal:remote origin already exists</code> 解决方案</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote <span class="built_in">rm</span> origin</span><br><span class="line">$ git remote add origin git@yk-gitlab.net:root/intell-project.git</span><br><span class="line"><span class="comment"># 删除仓库日志再重新关联</span></span><br></pre></td></tr></table></figure><p>6）将代码由本地仓库上传到 github 远程仓库，依次执行下列语句</p><ul><li>获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull --rebase origin master  </span><br><span class="line"><span class="comment"># 不加这句可能报错，原因是 github 中的 README.md 文件不在本地仓库中,可以通过该命令进行代码合并</span></span><br></pre></td></tr></table></figure><ul><li>把当前分支 master 推送到远程，执行此命令后有可能会让输入用户名、密码：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master  </span><br><span class="line"><span class="comment"># 执行完之后如果无错误就上传成功了，需要提示的是这里的 master 是 github 默认的分支，</span></span><br><span class="line"><span class="comment"># 如果你本地的当前分支不是 master，就用git checkout master命令切换到master分支，</span></span><br><span class="line"><span class="comment"># 如果你想用本地当前分支上传代码，则把第6步的命令里的 master 切换成你的当前分支名即可。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker问题_如何清理无用镜像</title>
      <link href="/2022/04/07/docker/docker%E9%97%AE%E9%A2%98_%E5%A6%82%E4%BD%95%E6%B8%85%E7%90%86%E6%97%A0%E7%94%A8%E9%95%9C%E5%83%8F/"/>
      <url>/2022/04/07/docker/docker%E9%97%AE%E9%A2%98_%E5%A6%82%E4%BD%95%E6%B8%85%E7%90%86%E6%97%A0%E7%94%A8%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="概要说明"><a href="#概要说明" class="headerlink" title="概要说明"></a>概要说明</h3><blockquote><p>无效 &amp; 未使用镜像的产生和困惑</p><ol><li>构建镜像过程中因为脚本错误导致很多镜像构建终止，产生很多 none 标签的版本</li><li>手动构建镜像的时候没有进行提交，遗留来的垃圾镜像</li><li>这些镜像占据较大的存储空间，需要删除</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Docker 采用保守的方法来清理未使用的对象（通常称为“垃圾回收”），例如镜像、容器、卷和网络等；</span><br><span class="line">除非明确要求 Docker 这样做，否则通常不会删除这些对象，这可能会导致 Docker 使用额外的磁盘空间。</span><br><span class="line">对于每种类型的对象，Docker 都提供了一条 prune 命令。另外，可以使用 docker system prune 一次清理多种类型的对象。</span><br></pre></td></tr></table></figure><hr><h3 id="镜像清理"><a href="#镜像清理" class="headerlink" title="镜像清理"></a>镜像清理</h3><ul><li>清理 none 镜像</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images prune</span><br><span class="line"><span class="comment"># 默认情况下，只会清理没被标记且没被引用的镜像</span></span><br><span class="line">WARNING! This will remove all dangling images.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br><span class="line">Total reclaimed space: 0B</span><br></pre></td></tr></table></figure><ul><li>清理无容器使用的镜像</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker image prune -a</span><br><span class="line"><span class="comment"># 默认情况下，系统会提示是否继续。要绕过提示，请使用 -f 或 --force 标志。</span></span><br><span class="line"><span class="comment"># 可以使用 --filter 标志使用过滤表达式来限制修剪哪些镜像。例如，只考虑 24 小时前创建的镜像</span></span><br><span class="line">$ docker image prune -a --filter <span class="string">&quot;until=24h&quot;</span></span><br></pre></td></tr></table></figure><h3 id="容器清理"><a href="#容器清理" class="headerlink" title="容器清理"></a>容器清理</h3><blockquote><p>停止容器后不会自动删除这个容器，除非在启动容器的时候指定了 –rm 标志。</p><p>一般停止状态的容器的可写层仍然占用磁盘空间。要清理掉这些，可以使用 docker container prune 命令</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container prune</span><br><span class="line"></span><br><span class="line">WARNING! This will remove all stopped containers.</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span>? [y/N] y</span><br></pre></td></tr></table></figure><p>默认情况下，系统会提示是否继续，要绕过提示，请使用 -f 或 –force 强制进行，那所有停止状态的容器就会被删除。而使用 –filter 可用来限制范围。例如，下面的命令只会删除 24 小时之前创建的停止状态的容器，与镜像方式同理；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker container prune -a --filter <span class="string">&quot;until=24h&quot;</span></span><br></pre></td></tr></table></figure><h3 id="网络清理"><a href="#网络清理" class="headerlink" title="网络清理"></a>网络清理</h3><blockquote><p>Docker 网络不会占用太多磁盘空间，但是它们会创建 iptables 规则，桥接网络设备和路由表条目。要清理这些东西，可以使用 docker network prune 来清理没有被容器未使用的网络</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker network prune</span><br></pre></td></tr></table></figure><h3 id="定时清理"><a href="#定时清理" class="headerlink" title="定时清理"></a>定时清理</h3><p>运行 <code>crontab -e</code> 命令编辑定时任务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line">$ 0 1 * * * docker image prune -a --force --filter <span class="string">&quot;until=72h&quot;</span></span><br><span class="line">$ systemctl restart crond.service</span><br></pre></td></tr></table></figure><p>上面的定时任务是每天夜里 1 点钟删除 3 天（72h）之前的 image。具体的操作时间和 image 保留时间，可根据实际的情况修改</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置_开启2376端口并启用TLS加密</title>
      <link href="/2022/04/07/docker/docker%E9%85%8D%E7%BD%AE_%E5%BC%80%E5%90%AF2376%E7%AB%AF%E5%8F%A3%E5%B9%B6%E5%90%AF%E7%94%A8TLS%E5%8A%A0%E5%AF%86/"/>
      <url>/2022/04/07/docker/docker%E9%85%8D%E7%BD%AE_%E5%BC%80%E5%90%AF2376%E7%AB%AF%E5%8F%A3%E5%B9%B6%E5%90%AF%E7%94%A8TLS%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="概要说明"><a href="#概要说明" class="headerlink" title="概要说明"></a>概要说明</h3><blockquote><p>上篇已介绍了 Docker 2375 端口是如何开启并配置使用的。现因开放 2375 端口的监听，从而引发一系列安全问题，针对问题根源可关闭 2375 端口并采用 TLS 加密 2376 端口来解决；</p></blockquote><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><ul><li>创建存放密钥目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> /etc/docker/tls &amp;&amp; <span class="built_in">cd</span> /etc/docker/tls</span><br></pre></td></tr></table></figure><ul><li>生成 CA 私&amp;公钥</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 需要连续输入两次相同的密码</span></span><br><span class="line">$ openssl genrsa -aes256 -out ca-key.pem 4096</span><br><span class="line"></span><br><span class="line"><span class="comment"># 依次输入密码、国家、省、市、组织名称等</span></span><br><span class="line">$ openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成server-key.pem</span></span><br><span class="line">$ openssl genrsa -out server-key.pem 4096</span><br></pre></td></tr></table></figure><ul><li>配置白名单，推荐配置 0.0.0.0，允许所有 IP 连接但只有证书才可以连接成功</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把下面的IP换成你自己服务器外网的IP或者域名</span></span><br><span class="line">$ openssl req -subj <span class="string">&quot;/CN=188.188.3.112&quot;</span> -sha256 -new -key server-key.pem -out server.csr</span><br><span class="line">$ <span class="built_in">echo</span> subjectAltName = IP:188.188.3.112,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure><ul><li>执行命令，将 Docker 守护程序密钥的扩展使用属性设置为仅用于服务器身份验证</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令，并输入之前设置的密码，生成签名证书</span></span><br><span class="line">$ openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem \</span><br><span class="line">  -CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br></pre></td></tr></table></figure><ul><li>生成客户端的 key.pem，到时候把生成好的几个公钥私钥拷出去即可</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl genrsa -out key.pem 4096</span><br><span class="line">$ openssl req -subj <span class="string">&#x27;/CN=client&#x27;</span> -new -key key.pem -out client.csr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行命令，要使密钥适合客户端身份验证，请创建扩展配置文件</span></span><br><span class="line">$ <span class="built_in">echo</span> extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure><ul><li>生成cert.pem,需要输入前面设置的密码，生成签名证书</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem \</span><br><span class="line">  -CAcreateserial -out cert.pem -extfile extfile.cnf</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 删除不需要的文件，两个证书签名请求</span></span><br><span class="line">$ <span class="built_in">rm</span> -v client.csr server.csr</span><br></pre></td></tr></table></figure><ul><li>修改权限，要保护您的密钥免受意外损坏，请删除其写入权限。要使它们只能被您读取，更改文件模式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 证书可以是对外可读的，删除写入权限以防止意外损坏</span></span><br><span class="line">$ <span class="built_in">chmod</span> -v 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line">$ <span class="built_in">chmod</span> -v 0444 ca.pem server-cert.pem cert.pem</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>修改 Docker 配置，使 Docker 守护程序仅接受来自提供 CA 信任的证书的客户端的连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /lib/systemd/system/docker.service</span><br><span class="line"><span class="comment"># ExecStart=/usr/bin/dockerd 下面增加</span></span><br><span class="line">ExecStart=/usr/bin/dockerd \</span><br><span class="line">        --tlsverify \</span><br><span class="line">        --tlscacert=/etc/docker/tls/ca.pem \</span><br><span class="line">        --tlscert=/etc/docker/tls/server-cert.pem \</span><br><span class="line">        --tlskey=/etc/docker/tls/server-key.pem \</span><br><span class="line">        -H tcp://0.0.0.0:2376 \</span><br><span class="line">        -H unix://var/run/docker.sock</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload </span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="检验测试"><a href="#检验测试" class="headerlink" title="检验测试"></a>检验测试</h3><p>查看 2376 端口是否启动，并本地连接测试 Docker API 是否可用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -nltp | grep 2376</span><br><span class="line">tcp6       0      0 :::2376                 :::*                    LISTEN      5881/dockerd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有指定证书访问测试</span></span><br><span class="line">$ curl https://188.188.3.112:2376/info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定证书访问测试</span></span><br><span class="line">$ curl https://188.188.3.112:2376/info --cert /etc/docker/tls/cert.pem --key /etc/docker/tls/key.pem --cacert /etc/docker/tls/ca.pem</span><br></pre></td></tr></table></figure><h3 id="IDEA-配置"><a href="#IDEA-配置" class="headerlink" title="IDEA 配置"></a>IDEA 配置</h3><p>将客户端所需的 <code>ca.pem、cert.pem、key.pem</code> 3个密钥文件从服务器下载到本地，并修改 IDEA 的 Docker 连接</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"># pom.xml 文件参考</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--执行mvn package,即执行 mvn clean package docker:build--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 镜像名称 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定标签 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>latest<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 基础镜像--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>openjdk:8-jdk-alpine<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 切换到容器工作目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">workdir</span>&gt;</span>/<span class="tag">&lt;/<span class="name">workdir</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;,&quot;-jar&quot;,&quot;$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 指定远程 Docker API地址  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>https://a.youlai.store:2376<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定tls证书的目录 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dockerCertPath</span>&gt;</span>C:\certs\docker\a.youlai.store<span class="tag">&lt;/<span class="name">dockerCertPath</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 复制 jar包到docker容器指定目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 用于指定需要复制的根目录，$&#123;project.build.directory&#125;表示target目录 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 用于指定需要复制的文件，$&#123;project.build.finalName&#125;.jar就是打包后的target目录下的jar包名称　--&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="脚本参考"><a href="#脚本参考" class="headerlink" title="脚本参考"></a>脚本参考</h3><ul><li>cert.sh 域名方式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$1</span> ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;请输入Docker服务器主机名&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">HOST=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/cert/docker</span><br><span class="line"><span class="built_in">cd</span> /data/cert/docker</span><br><span class="line">openssl genrsa -aes256 -out ca-key.pem 4096</span><br><span class="line">openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br><span class="line">openssl genrsa -out server-key.pem 4096</span><br><span class="line">openssl req -subj <span class="string">&quot;/CN=<span class="variable">$HOST</span>&quot;</span> -sha256 -new -key server-key.pem -out server.csr</span><br><span class="line"><span class="comment"># 配置白名单，推荐配置0.0.0.0，允许所有IP连接但只有证书才可以连接成功</span></span><br><span class="line"><span class="built_in">echo</span> subjectAltName = DNS:<span class="variable">$HOST</span>,IP:0.0.0.0 &gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br><span class="line">openssl genrsa -out key.pem 4096</span><br><span class="line">openssl req -subj <span class="string">&#x27;/CN=client&#x27;</span> -new -key key.pem -out client.csr</span><br><span class="line"><span class="built_in">echo</span> extendedKeyUsage = clientAuth &gt; extfile.cnf</span><br><span class="line">openssl x509 -req -days 365 -sha256 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfile.cnf</span><br><span class="line"><span class="built_in">rm</span> -v client.csr server.csr</span><br><span class="line"><span class="built_in">chmod</span> -v 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line"><span class="built_in">chmod</span> -v 0444 ca.pem server-cert.pem cert.pem</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>IP 地址方式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建 Docker TLS 证书</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#相关配置信息</span></span><br><span class="line">SERVER=<span class="string">&quot;IP地址&quot;</span></span><br><span class="line">PASSWORD=<span class="string">&quot;自己设置密码&quot;</span></span><br><span class="line">COUNTRY=<span class="string">&quot;CN&quot;</span>  <span class="comment">##地区码可以随便填</span></span><br><span class="line">STATE=<span class="string">&quot;JS&quot;</span>   <span class="comment">##地区码可以随便填</span></span><br><span class="line">CITY=<span class="string">&quot;SZ&quot;</span>  <span class="comment">##地区码可以随便填</span></span><br><span class="line">ORGANIZATION=<span class="string">&quot;org&quot;</span>   <span class="comment">##自定义随便填</span></span><br><span class="line">ORGANIZATIONAL_UNIT=<span class="string">&quot;org&quot;</span>  <span class="comment">##自定义随便填</span></span><br><span class="line">EMAIL=<span class="string">&quot;&quot;</span>  <span class="comment">##邮箱随便填</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###开始生成文件###</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;开始生成文件&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到生产密钥的目录，按照上面的脚本目录，新建一个pme目录用来生成加密文件</span></span><br><span class="line"><span class="built_in">cd</span> /etc/docker/tls/pem</span><br><span class="line"><span class="comment">#生成ca私钥(使用aes256加密)</span></span><br><span class="line">openssl genrsa -aes256 -passout pass:<span class="variable">$PASSWORD</span>  -out ca-key.pem 2048</span><br><span class="line"><span class="comment">#生成ca证书，填写配置信息</span></span><br><span class="line">openssl req -new -x509 -passin <span class="string">&quot;pass:<span class="variable">$PASSWORD</span>&quot;</span> -days 3650 -key ca-key.pem -sha256 -out ca.pem -subj <span class="string">&quot;/C=<span class="variable">$COUNTRY</span>/ST=<span class="variable">$STATE</span>/L=<span class="variable">$CITY</span>/O=<span class="variable">$ORGANIZATION</span>/OU=<span class="variable">$ORGANIZATIONAL_UNIT</span>/CN=<span class="variable">$SERVER</span>/emailAddress=<span class="variable">$EMAIL</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成server证书私钥文件</span></span><br><span class="line">openssl genrsa -out server-key.pem 2048</span><br><span class="line"><span class="comment">#生成server证书请求文件</span></span><br><span class="line">openssl req -subj <span class="string">&quot;/CN=<span class="variable">$SERVER</span>&quot;</span> -new -key server-key.pem -out server.csr</span><br><span class="line"><span class="comment">#配置白名单  你使用的是服务器Ip的话,请将前面的DNS换成IP  echo subjectAltName = IP:$SERVER,IP:0.0.0.0 &gt;&gt; extfile.cnf</span></span><br><span class="line">sh -c  <span class="string">&#x27;echo &quot;subjectAltName = IP:&#x27;</span><span class="variable">$SERVER</span><span class="string">&#x27;,IP:0.0.0.0&quot; &gt;&gt; extfile.cnf&#x27;</span></span><br><span class="line">sh -c  <span class="string">&#x27;echo &quot;extendedKeyUsage = serverAuth&quot; &gt;&gt; extfile.cnf&#x27;</span></span><br><span class="line"><span class="comment">#使用CA证书及CA密钥以及上面的server证书请求文件进行签发，生成server自签证书</span></span><br><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> server.csr -CA ca.pem -CAkey ca-key.pem -passin <span class="string">&quot;pass:<span class="variable">$PASSWORD</span>&quot;</span> -CAcreateserial  -out server-cert.pem  -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成client证书RSA私钥文件</span></span><br><span class="line">openssl genrsa -out key.pem 2048</span><br><span class="line"><span class="comment">#生成client证书请求文件</span></span><br><span class="line">openssl req -subj <span class="string">&#x27;/CN=client&#x27;</span> -new -key key.pem -out client.csr</span><br><span class="line"></span><br><span class="line">sh -c <span class="string">&#x27;echo extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf&#x27;</span></span><br><span class="line"><span class="comment">#生成client自签证书（根据上面的client私钥文件、client证书请求文件生成）</span></span><br><span class="line">openssl x509 -req -days 3650 -<span class="keyword">in</span> client.csr -CA ca.pem -CAkey ca-key.pem  -passin <span class="string">&quot;pass:<span class="variable">$PASSWORD</span>&quot;</span> -CAcreateserial -out cert.pem  -extfile extfile.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改密钥权限</span></span><br><span class="line"><span class="built_in">chmod</span> 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line"><span class="comment">#更改密钥权限</span></span><br><span class="line"><span class="built_in">chmod</span> 0444 ca.pem server-cert.pem cert.pem</span><br><span class="line"><span class="comment">#删除无用文件</span></span><br><span class="line"><span class="built_in">rm</span> client.csr server.csr -rf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;生成文件完成&quot;</span></span><br><span class="line"><span class="comment">###生成结束###</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置_开启2375端口</title>
      <link href="/2022/04/07/docker/docker%E9%85%8D%E7%BD%AE_%E5%BC%80%E5%90%AF2375%E7%AB%AF%E5%8F%A3/"/>
      <url>/2022/04/07/docker/docker%E9%85%8D%E7%BD%AE_%E5%BC%80%E5%90%AF2375%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="概要说明"><a href="#概要说明" class="headerlink" title="概要说明"></a>概要说明</h3><blockquote><p>为了实现集群管理，Docker 提供了远程管理接口。Docker Daemon 作为守护进程，运行在后台，可以执行发送到管理接口上的 Docker 命令。</p><p>而启动 Docker Daemon 时，加入 -H 0.0.0.0:2375，Docker Daemon 就可以接收远端的 Docker Client 发送的指令。</p><p>注意，Docker 是把 2375 端口作为非加密端口暴露出来，一般是用在测试环境中。此时，没有任何加密和认证过程，&#x3D;&#x3D;只要知道 Docker 主机的 IP，任何人都可以管理这台主机上的容器和镜像&#x3D;&#x3D;。</p></blockquote><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>**Docker 开启 2375 端口，提供外部访问 Docker **</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>在 <code>ExecStart=/usr/bin/dockerd-current</code> 后增加 <code>-H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock </span><br></pre></td></tr></table></figure><p>在此附上 <code>docker.service</code> 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">BindsTo=containerd.service</span><br><span class="line">After=network-online.target firewalld.service containerd.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">Requires=docker.socket</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"><span class="comment"># the default is not to use systemd for cgroups because the delegate issues still</span></span><br><span class="line"><span class="comment"># exists and systemd currently does not support the cgroup feature set required</span></span><br><span class="line"><span class="comment"># for containers run by docker</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock -H fd:// --containerd=/run/containerd/containerd.sock</span><br><span class="line"><span class="comment"># 在此增加 tcp://0.0.0.0:2375</span></span><br><span class="line">ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT</span><br><span class="line"><span class="comment"># 在此增加防火墙通行规则</span></span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">TimeoutSec=0</span><br><span class="line">RestartSec=2</span><br><span class="line">Restart=always</span><br></pre></td></tr></table></figure><h3 id="重启验证"><a href="#重启验证" class="headerlink" title="重启验证"></a>重启验证</h3><p><strong>重启 docker，重新读取配置文件并启动服务</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl daemon-reload</span><br><span class="line">$ systemctl restart docker</span><br></pre></td></tr></table></figure><p><strong>验证并排除问题</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ netstat -tunlp | grep 2375</span><br><span class="line">tcp6       0      0 :::2375                 :::*                    LISTEN      5388/dockerd</span><br></pre></td></tr></table></figure><p>如失败请检查防火墙及 <code>Selinux</code> 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --add-port=2375/tcp</span><br><span class="line">$ firewall-cmd --add-port=2375/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="题外内容"><a href="#题外内容" class="headerlink" title="题外内容"></a>题外内容</h3><p>上述说明已基本讲解了 Docker 开启 2375 端口的作用，一般应用在内网测试环境，而云上服务建议勿开启并暴露此端口，以防被作矿机</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker配置_Maven插件</title>
      <link href="/2022/04/07/docker/docker%E9%85%8D%E7%BD%AE_Maven%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/04/07/docker/docker%E9%85%8D%E7%BD%AE_Maven%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="概要说明"><a href="#概要说明" class="headerlink" title="概要说明"></a>概要说明</h3><blockquote><p>在持续集成过程中，项目工程一般使用 Maven 编译打包，然后生成镜像，通过镜像上线，能够大大提供上线效率，同时能够快速动态扩容，快速回滚等。<code>docker-maven-plugin</code> 插件就是为了在 Maven 工程中，通过简单的配置，自动生成镜像并推送到仓库中。</p></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>测试 Java Maven 项目用 docker-maven 插件打镜像，上传镜像等操作，需要先安装一下 Docker、Maven、Java 等等，这里忽略安装过程。</p><h3 id="Demo-示例"><a href="#Demo-示例" class="headerlink" title="Demo 示例"></a>Demo 示例</h3><ul><li>配置 Docker_Host</li></ul><p>docker-maven-plugin 插件默认连接本地 Docker 地址为：localhost:2375，所以需要先设置环境变量；</p><p>&#x3D;&#x3D;[建议：开启 2376 端口启用 TLS 加密的方式进行]&#x3D;&#x3D;</p><p>注意：如果没有设置 DOCKER_HOST 环境变量，可以命令行显示指定 DOCKER_HOST 来执行，如我本机指定 DOCKER_HOST：<code>DOCKER_HOST=unix:///var/run/docker.sock mvn clean install docker:build</code></p><ul><li>构建镜像</li></ul><blockquote><p>构建镜像可以使用两种方式，第一种是将构建信息指定到 POM 中，第二种是使用已存在的 Dockerfile 构建</p></blockquote><p>第一种方式，支持将 <code>FROM, ENTRYPOINT, CMD, MAINTAINER</code> 以及 <code>ADD</code> 信息配置在 POM 中，不需要使用 Dockerfile 配置。但是如果使用 <code>VOLUME</code> 或其他 Dockerfile 中的命令的时候，需要使用第二种方式，创建一个 Dockerfile，并在 POM 中配置 <code>dockerDirectory</code> 来指定路径即可</p><p><strong>Java Maven 示例演示</strong></p><ul><li>指定构建信息到 Pom 中构建</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>mavendemo<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maintainer</span>&gt;</span>docker_maven docker_maven@email.com<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">workdir</span>&gt;</span>/ROOT<span class="tag">&lt;/<span class="name">workdir</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cmd</span>&gt;</span>[&quot;java&quot;, &quot;-version&quot;]<span class="tag">&lt;/<span class="name">cmd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/ROOT<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 Dockerfile 构建</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">pom.xml配置</span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>mavendemo<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$&#123;basedir&#125;/docker<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span> <span class="comment">&lt;!-- 指定 Dockerfile 路径--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这里是复制 jar 包到 docker 容器指定目录配置，也可以写到 Docokerfile 中 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/ROOT<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$&#123;basedir&#125;/docker/Dockerfile 配置</span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> java</span><br><span class="line"><span class="keyword">MAINTAINER</span> docker_maven docker_maven@email.com</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /ROOT</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-version&quot;</span>]</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;<span class="variable">$&#123;project.build.finalName&#125;</span>.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>上两种方式执行<code>docker:build</code>效果是一样的，执行输出过程大致如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[INFO] --- docker-maven-plugin:1.0.0:build (default-cli) @ mavenDemo ---</span><br><span class="line">[INFO] Building image mavendemo</span><br><span class="line">Step 1/5 : FROM java</span><br><span class="line"> ---&gt; d23bdf5b1b1b</span><br><span class="line">Step 2/5 : MAINTAINER docker_maven docker_maven@email.com</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 2faf180d4a50</span><br><span class="line">Step 3/5 : WORKDIR /ROOT</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 862210f7956a</span><br><span class="line">Step 4/5 : ENTRYPOINT java -jar mavenDemo.jar</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 96bbe83de6ec</span><br><span class="line"> ---&gt; c29009c88993</span><br><span class="line">Removing intermediate container 96bbe83de6ec</span><br><span class="line">Step 5/5 : CMD java -version</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> f69b8d2a75b1</span><br><span class="line"> ---&gt; bc8d54014325</span><br><span class="line">Removing intermediate container f69b8d2a75b1</span><br><span class="line">Successfully built bc8d54014325</span><br></pre></td></tr></table></figure><h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3><ul><li><p><code>mvn clean package docker:build</code> 只执行 build 操作</p></li><li><p><code>mvn clean package docker:build -DpushImage</code> 执行 build 完成后 push 镜像</p></li><li><p><code>mvn clean package docker:build -DpushImageTag</code> 执行 build 并 push 指定 tag 的镜像</p></li></ul><p>注意：这里必须指定至少一个 imageTag，它可以配置到 POM 中，也可以在命令行指定。</p><p>命令行指定如下：</p><p><code>mvn clean package docker:build -DpushImageTags -DdockerImageTags=imageTag_1 -DdockerImageTags=imageTag_2</code>，POM 文件中指定配置如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>imageTag_1<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>imageTag_2<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>绑定 Docker 命令到 Maven 各个阶段</strong></p><blockquote><p>绑定 Docker 命令到 Maven 各个阶段，可以把 Docker 分为 build、tag、push，然后分别绑定 Maven 的 package、deploy 阶段。此时，只需要执行 <code>mvn deploy</code> 就可以完成整个 build、tag、push 操作了，当执行 <code>mvn build</code> 就只完成 build、tag 操作。除此此外，当想跳过某些步骤或者只执行某个步骤时，不需要修改 POM 文件，只需要指定跳过 docker 某个步骤即可。比如当工程已经配置好了自动化模板了，但是这次只需要打镜像到本地自测，不想执行 push 阶段，那么此时执行要指定参数 <code>-DskipDockerPush</code> 就可跳过 push 操作了。</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>mavendemo<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>java<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maintainer</span>&gt;</span>docker_maven docker_maven@email.com<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">workdir</span>&gt;</span>/ROOT<span class="tag">&lt;/<span class="name">workdir</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">cmd</span>&gt;</span>[&quot;java&quot;, &quot;-version&quot;]<span class="tag">&lt;/<span class="name">cmd</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;, &quot;$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/ROOT<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>tag-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>tag<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">image</span>&gt;</span>mavendemo:latest<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">newName</span>&gt;</span>docker.io/wanyang3/mavendemo:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">newName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>push-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>deploy<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>push<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>docker.io/wanyang3/mavendemo:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上示例，当我们执行 <code>mvn package</code> 时，执行 build、tag 操作，当执行 <code>mvn deploy</code> 时，执行build、tag、push 操作。如果我们想跳过 docker 某个过程时，只需要：</p><ul><li><code>-DskipDockerBuild</code> 跳过 build 镜像</li><li><code>-DskipDockerTag</code> 跳过 tag 镜像</li><li><code>-DskipDockerPush</code> 跳过 push 镜像</li><li><code>-DskipDocker</code> 跳过整个阶段</li></ul><p>例如：想执行 package 时，跳过 tag 过程，那么就需要 <code>mvn package -DskipDockerTag</code></p><h3 id="私有仓库"><a href="#私有仓库" class="headerlink" title="私有仓库"></a>私有仓库</h3><p>实际工作环境中，需要 push 镜像到公司私有 Docker 仓库中，使用 <code>docker-maven-plugin</code> 插件也是很容易实现，有几种方式实现：</p><ul><li>修改 POM 文件 imageName 操作</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>registry.example.com/spring/mavendemo:v1.0.0<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>修改 POM 文件中 newName 操作</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>mavendemo<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>tag-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>tag<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span>&gt;</span>mavendemo<span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">newName</span>&gt;</span>registry.example.com/wanyang3/mavendemo:v1.0.0<span class="tag">&lt;/<span class="name">newName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="安全认证"><a href="#安全认证" class="headerlink" title="安全认证"></a>安全认证</h3><p>当 push 镜像到 Docker 仓库中时，不管是共有还是私有，经常会需要安全认证，登录完成之后才可以进行操作。当然，可以通过命令行 <code>docker login -u user_name -p password docker_registry_host</code> 登录，但是对于自动化流程来说，就不是很方便了。使用 docker-maven-plugin 插件可以很容易实现安全认证</p><p>首先在 Maven 的配置文件 setting.xml 中增加相关 server 配置，主要配置 Docker registry用户认证信息</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>my-docker-registry<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>test<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">email</span>&gt;</span>test@mail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后只需要在 pom.xml 中使用 server id 即可</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>registry.example.com/wanyang3/mavendemo:v1.0.0<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">      ...</span><br><span class="line">      <span class="tag">&lt;<span class="name">serverId</span>&gt;</span>my-docker-registry<span class="tag">&lt;/<span class="name">serverId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><p>docker-maven-plugin 插件还提供了很多很实用的配置</p><table><thead><tr><th>参数</th><th>说明</th><th>默认值</th></tr></thead><tbody><tr><td><forceTags>true</forceTags></td><td>build 时强制覆盖 tag，配合 imageTags 使用</td><td>false</td></tr><tr><td><noCache>true</noCache></td><td>build 时，指定 –no-cache 不使用缓存</td><td>false</td></tr><tr><td><pullOnBuild>true</pullOnBuild></td><td>build 时，指定 –pull&#x3D;true 每次都重新拉取基础镜像</td><td>false</td></tr><tr><td><pushImage>true</pushImage></td><td>build 完成后 push 镜像</td><td>false</td></tr><tr><td><pushImageTag>true</pushImageTag></td><td>build 完成后，push 指定 tag 的镜像，配合 imageTags 使用</td><td>false</td></tr><tr><td><retryPushCount>5</retryPushCount></td><td>push 镜像失败，重试次数</td><td>5s</td></tr><tr><td><retryPushTimeout>10</retryPushTimeout></td><td>push 镜像失败，重试时间</td><td>10s</td></tr><tr><td><rm>true</rm></td><td>build 时，指定 –rm&#x3D;true 即 build 完成后删除中间容器</td><td>false</td></tr><tr><td><useGitCommitId>true</useGitCommitId></td><td>build 时，使用最近的 git commit id 前7位作为 tag，例如：image:b50b604，前提是不配置 newName</td><td>false</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile构建_进程运行用户</title>
      <link href="/2022/04/07/docker/dockerfile%E6%9E%84%E5%BB%BA_%E8%BF%9B%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%94%A8%E6%88%B7/"/>
      <url>/2022/04/07/docker/dockerfile%E6%9E%84%E5%BB%BA_%E8%BF%9B%E7%A8%8B%E8%BF%90%E8%A1%8C%E7%94%A8%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>默认情况下，容器中的进程以 root 用户权限运行，并且这个 root 用户和宿主机中的 root 是同一个用户，那就意味着一旦容器中的拥有最高权限，就有可能控制宿主机上的一切！</p><p>容器化带来的巨大价值在于所有这些独立的容器(其实是进程)可以共享一个内核。这意味着即使由成百上千的容器运行在 docker 宿主机上，但<strong>内核控制的</strong> <strong>uid</strong> <strong>和</strong> <strong>gid</strong> <strong>则仍然只有一套</strong></p></blockquote><p><strong>容器默认启动用户</strong></p><p>一般如果容器启动，不做相关的设置，进程默认都以 root 用户权限启动，下面以各个 demo 进行说明</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d --name sleepme ubuntu <span class="built_in">sleep</span> infinity</span><br><span class="line">$ docker <span class="built_in">exec</span> -it sleepme bash</span><br><span class="line">root@88f0dec72938:/<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) <span class="built_in">groups</span>=0(root)</span><br></pre></td></tr></table></figure><p>注：上面命令中并没使用 sudo，并且宿主机登录用户为 root，uid 为 0</p><p>在宿主机中查看 sleep 进程信息：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ps -ef|grep <span class="built_in">sleep</span></span><br><span class="line">root     13741 13721  0 11:41 ?        00:00:00 <span class="built_in">sleep</span> infinity</span><br><span class="line">root     13825 13606  0 11:54 pts/0    00:00:00 grep --color=auto <span class="built_in">sleep</span></span><br></pre></td></tr></table></figure><p>sleep 进程的有效用户名称是 root，也就是说 sleep 进程具有 root 权限，然后进入容器内部查看，sleep 进程也具有 root 权限；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@88f0dec72938:/<span class="comment"># ps aux| grep sleepme</span></span><br><span class="line">root        27  0.0  0.0   3312   740 pts/0    S+   04:18   0:00 grep --color=auto sleepme</span><br></pre></td></tr></table></figure><p>那就对应了<font color=red>容器内的 root 用户和宿主机上的 root 用户是同一个 </font>，原因就是整个系统共享同一个内核，而内核只管理一套 uid 和 gid</p><blockquote><p>通过 Dockerfile 中的 USER 命令或者是 docker run 命令的 <code>--user</code> 参数指定容器中进程的用户身份</p></blockquote><p><strong>Dockerfile 中指定用户身份</strong></p><p>在 Dockerfile 中添加一个用户 appuser，并使用 USER 命令指定以该用户的身份运行程序，内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> Dockerfile</span><br><span class="line">FROM ubuntu</span><br><span class="line">RUN groupadd -g 1000 appuser &amp;&amp; useradd -m -u 1000 -g appuser appuser</span><br><span class="line">USER appuser</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;infinity&quot;</span>]</span><br><span class="line"></span><br><span class="line">$ docker build -t <span class="built_in">sleep</span> .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM ubuntu</span><br><span class="line"> ---&gt; ba6acccedd29</span><br><span class="line">Step 2/4 : RUN groupadd -g 1000 appuser &amp;&amp; useradd -m -u 1000 -g appuser appuser</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 8e6f790c60b4</span><br><span class="line">Removing intermediate container 8e6f790c60b4</span><br><span class="line"> ---&gt; ca170f1eae32</span><br><span class="line">Step 3/4 : USER appuser</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 0bc69a433a89</span><br><span class="line">Removing intermediate container 0bc69a433a89</span><br><span class="line"> ---&gt; 3028bcebd365</span><br><span class="line">Step 4/4 : ENTRYPOINT [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;infinity&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 1eeb8df4c0b5</span><br><span class="line">Removing intermediate container 1eeb8df4c0b5</span><br><span class="line"> ---&gt; 1dbc7e1f8b10</span><br><span class="line">Successfully built 1dbc7e1f8b10</span><br><span class="line">Successfully tagged <span class="built_in">sleep</span>:latest</span><br></pre></td></tr></table></figure><p>使用 sleep 镜像启动一个容器，并查看进程信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d --name sleepme2 <span class="built_in">sleep</span>:latest</span><br><span class="line"><span class="comment"># 宿主机</span></span><br><span class="line">ps aux| grep <span class="built_in">sleep</span></span><br><span class="line">1000     14821  0.0  0.0   2516   592 ?        Ss   13:44   0:00 <span class="built_in">sleep</span> infinity</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it sleepme2 bash</span><br><span class="line">appuser@13e744b0e65f:/$ ps aux|grep <span class="built_in">sleep</span></span><br><span class="line">appuser      1  0.0  0.0   2516   592 ?        Ss   05:44   0:00 <span class="built_in">sleep</span> infinity</span><br></pre></td></tr></table></figure><p>容器中的当前用户就是设置的 appuser，查看容器中的 <code>/etc/passwd</code> 文件，会发现 appuser 的 uid 就是 1000</p><p>（如宿主机系统中存在一个 uid 为 1000 的用户，那容器中的程序以 appuser (1000) 的身份运行，那宿主机就会将此认为是宿主机的 1000 用户，所以在容器内部，用户 appuser 能够获取容器外部用户 1000 的权利和特权，并且在宿主机上授予用户或 uid 1000 的特权也将授予容器内的 appuser）</p><p><strong>命令行参数中自定用户身份</strong></p><p>通过 <code>docker run </code> 命令的 <code>--user</code> 参数指定容器中进程的用户身份。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d --user 1000 --name sleepmd ubuntu <span class="built_in">sleep</span> infinity</span><br><span class="line">$ ps aux| grep <span class="built_in">sleep</span></span><br><span class="line">1000     15067  0.2  0.0   2516   588 ?        Ss   13:58   0:00 <span class="built_in">sleep</span> infinity</span><br></pre></td></tr></table></figure><p>因在命令行上指令了参数 <code>--user 1000</code>，所以这里 sleep 进程的有效用户显示为 1000</p><p>注：在创建容器时通过 <code>docker run --user</code> 指定的用户身份会覆盖掉 Dockerfile 中指定的值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker run -d --user 0 --name sleepme2 ubuntu <span class="built_in">sleep</span> infinity</span><br><span class="line">$ ps aux|grep <span class="built_in">sleep</span></span><br><span class="line">root     15425  0.2  0.0   2516   528 ?        Ss   14:07   0:00 <span class="built_in">sleep</span> infinity</span><br></pre></td></tr></table></figure><p>指定了 <code>--user 0</code> 参数的进程，显示有效用户为 root，说明命令行参数覆盖了 Dockerfile 中 USER 命令的设置</p><p><strong>一般新镜像打包都会首选 alpine 镜像</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># alpine测试用户创建</span></span><br><span class="line">$ <span class="built_in">cat</span> Dockerfile </span><br><span class="line">FROM alpine:3.15.0</span><br><span class="line">RUN addgroup -g 1001 -S appuser &amp;&amp; adduser -u 1001 -S appuser -G appuser</span><br><span class="line">USER 1001</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;sleep&quot;</span>,<span class="string">&quot;3600&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># jdk:alpine创建用户并指定用户运行jar进程</span></span><br><span class="line">$ <span class="built_in">cat</span> Dockerfile </span><br><span class="line">FROM yk-harbor.net/public/jdk:alpine_glibc-8u202 </span><br><span class="line">RUN addgroup -g 1001 -S vault &amp;&amp; adduser -u 1001 -S vault -G vault</span><br><span class="line">USER vault </span><br><span class="line">ADD app.jar /</span><br><span class="line">ENTRYPOINT [<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;java <span class="variable">$&#123;JAVA_OPTS&#125;</span> -jar /app.jar <span class="variable">$&#123;0&#125;</span> <span class="variable">$&#123;@&#125;</span>&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>Ubuntu 与 Centos 下 useradd 与 adduser 有所不同，在此记录一下</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line">FROM ubuntu</span><br><span class="line"><span class="comment"># build参数</span></span><br><span class="line">ARG user=<span class="built_in">test</span></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y sudo </span><br><span class="line"><span class="comment"># 添加用户：赋予sudo权限，指定密码</span></span><br><span class="line">RUN useradd --create-home --no-log-init --shell /bin/bash <span class="variable">$&#123;user&#125;</span> \</span><br><span class="line">    &amp;&amp; adduser <span class="variable">$&#123;user&#125;</span> sudo \</span><br><span class="line">    &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;user&#125;</span>:1&quot;</span> | chpasswd</span><br><span class="line"><span class="comment"># 改变用户的UID和GID</span></span><br><span class="line"><span class="comment"># RUN usermod -u 1000 $&#123;user&#125; &amp;&amp; usermod -G 1000 $&#123;user&#125;</span></span><br><span class="line"><span class="comment"># 指定容器起来的工作目录</span></span><br><span class="line">WORKDIR /home/<span class="variable">$&#123;user&#125;</span></span><br><span class="line"><span class="comment"># 指定容器起来的登录用户</span></span><br><span class="line">USER <span class="variable">$&#123;user&#125;</span></span><br><span class="line"><span class="comment"># RUN是构建时执行</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;user&#125;</span>&quot;</span> &gt; world.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile构建_Jdk镜像</title>
      <link href="/2022/04/07/docker/dockerfile%E6%9E%84%E5%BB%BA_Jdk%E9%95%9C%E5%83%8F/"/>
      <url>/2022/04/07/docker/dockerfile%E6%9E%84%E5%BB%BA_Jdk%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="概要说明"><a href="#概要说明" class="headerlink" title="概要说明"></a>概要说明</h3><blockquote><p>Dockerfile 是一个文本文档，文本内包含许多命令，每一条命令构建一层，因此每一条指令的内容，就是描述该层应当如何构建；</p><p>一般 Docker 中的镜像都可以在官方 <a href="https://registry.hub.docker.com/">DockerHub</a> 中进行下载，如需自定义镜像，建议选用 <code>alpine &amp; slim</code> 作为使用；在此为了更好的理解 Dockerfile 的功能，下述以构建 JDK 为例讲解；</p></blockquote><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>Dockerfile 由一行行命令语句组成，并支持以 # 开头的注释行</p><p><strong>主体内容分为四部分：</strong></p><table><thead><tr><th>主体内容</th><th>命令</th><th>备注</th></tr></thead><tbody><tr><td>基础镜像信息</td><td>FROM</td><td>指令用于指定要构建的镜像的基础镜像。它通常是 Dockerfile 中的第一条指令。</td></tr><tr><td>维护者信息</td><td>MAINTAINER</td><td>指令设置生成图像的作者字段</td></tr><tr><td>镜像操作指令</td><td>RUN</td><td>指令用于在镜像中执行命令，这会创建新的镜像层。每个 RUN 指令创建一个新的镜像层</td></tr><tr><td></td><td>(COPY&#x2F;ADD)</td><td>指令用于将文件作为一个新的层添加到镜像中。使用 COPY 指令将应用代码赋值到镜像中</td></tr><tr><td></td><td>EXPOSE</td><td>指令用于记录应用所使用的网络端口</td></tr><tr><td></td><td>WORKDIR</td><td>在执行 RUN 后面的 shell 命令前会先 cd 进 WORKDIR 后面的目录</td></tr><tr><td></td><td>ONBUILD</td><td>指令将映像用作另一个构建的基础时，将在以后的时间向该映像添加触发指令</td></tr><tr><td>容器启动时执行指令</td><td>CMD</td><td>指令中只能有一条指令 Dockerfile，如果列出多个，则只有最后一个 CMD 才会生效,指令的主要目的是为执行中的容器提供默认值</td></tr><tr><td></td><td>ENTRYPOINT</td><td>指令用于指定镜像以容器方式启动后默认运行的程序</td></tr></tbody></table><hr><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>2019年4月16日，Oracle 发布了新的 JDK 8 的更新，版本号为 8u211 和 8u212。与以往不同的是，新版本的许可协议从BCL换成了OTN，这就意味着不能在生产环境使用这个版本了，因此现选用的是 Oracle JDK 最后的免费版本 8u202。</p><p>另外由于默认 JDK8 是不能使用高强度加密算法的， 需要把 <code>jce_policy-8.zip</code> 中的两个 jar 包拷贝到 <code>\lib\security</code> 下面， 替换掉两个原有的同名文件，以开启对高强度加密算法支持</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/src/dockerjdk8 &amp;&amp; <span class="built_in">cd</span> !$</span><br><span class="line">$ wget https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/jdk-8u202-linux-x64.tar.gz</span><br><span class="line">$ wget https://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip</span><br></pre></td></tr></table></figure><h3 id="镜像构建"><a href="#镜像构建" class="headerlink" title="镜像构建"></a>镜像构建</h3><p>构建选用的是 alpine 镜像，alpine 表明镜像的操作系统是 alpine linux，alpine linux本身很小，镜像的大小是5M左右，而运行 JDK 需要 Glibc 库的依赖。所以先基于 Alpine Linux 镜像，重新构建包含 glibc 库，从而再根据 alpine-glibc 镜像来构建 JDK-alpine-glibc</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ vim Dockerfile-glibc</span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG=C.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.10/main &gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> http://mirrors.ustc.edu.cn/alpine/v3.10/community &gt;&gt; /etc/apk/repositories &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ALPINE_GLIBC_BASE_URL=<span class="string">&quot;https://github.com/sgerrand/alpine-pkg-glibc/releases/download&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ALPINE_GLIBC_PACKAGE_VERSION=<span class="string">&quot;2.33-r0&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ALPINE_GLIBC_BASE_PACKAGE_FILENAME=<span class="string">&quot;glibc-<span class="variable">$ALPINE_GLIBC_PACKAGE_VERSION</span>.apk&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ALPINE_GLIBC_BIN_PACKAGE_FILENAME=<span class="string">&quot;glibc-bin-<span class="variable">$ALPINE_GLIBC_PACKAGE_VERSION</span>.apk&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    ALPINE_GLIBC_I18N_PACKAGE_FILENAME=<span class="string">&quot;glibc-i18n-<span class="variable">$ALPINE_GLIBC_PACKAGE_VERSION</span>.apk&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk add --no-cache --virtual=.build-dependencies wget ca-certificates &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;-----BEGIN PUBLIC KEY-----\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApZ2u1KJKUu/fW4A25y9m\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">        y70AGEa/J3Wi5ibNVGNn1gT1r0VfgeWd0pUybS4UmcHdiNzxJPgoWQhV2SSW1JYu\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">        tOqKZF5QSN6X937PTUpNBjUvLtTQ1ve1fp39uf/lEXPpFpOPL88LKnDBgbh7wkCp\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">        m2KzLVGChf83MS0ShL6G9EQIAUxLm99VpgRjwqTQ/KfzGtpke1wqws4au0Ab4qPY\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">        KXvMLSPLUp7cfulWvhmZSegr5AdhNw5KNizPqCJT8ZrGvgHypXyiFvvAH5YRtSsc\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">        Zvo9GI2e2MaZyo9/lvb+LbLEJZKEQckqRj4P26gmASrZEPStwc+yqy1ShHLA0j6m\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">        1QIDAQAB\</span></span></span><br><span class="line"><span class="string"><span class="language-bash">        -----END PUBLIC KEY-----&quot;</span> | sed <span class="string">&#x27;s/   */\n/g&#x27;</span> &gt; <span class="string">&quot;/etc/apk/keys/sgerrand.rsa.pub&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    wget \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;<span class="variable">$ALPINE_GLIBC_BASE_URL</span>/<span class="variable">$ALPINE_GLIBC_PACKAGE_VERSION</span>/<span class="variable">$ALPINE_GLIBC_BASE_PACKAGE_FILENAME</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;<span class="variable">$ALPINE_GLIBC_BASE_URL</span>/<span class="variable">$ALPINE_GLIBC_PACKAGE_VERSION</span>/<span class="variable">$ALPINE_GLIBC_BIN_PACKAGE_FILENAME</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;<span class="variable">$ALPINE_GLIBC_BASE_URL</span>/<span class="variable">$ALPINE_GLIBC_PACKAGE_VERSION</span>/<span class="variable">$ALPINE_GLIBC_I18N_PACKAGE_FILENAME</span>&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk add --no-cache \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;<span class="variable">$ALPINE_GLIBC_BASE_PACKAGE_FILENAME</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;<span class="variable">$ALPINE_GLIBC_BIN_PACKAGE_FILENAME</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;<span class="variable">$ALPINE_GLIBC_I18N_PACKAGE_FILENAME</span>&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> <span class="string">&quot;/etc/apk/keys/sgerrand.rsa.pub&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 <span class="string">&quot;<span class="variable">$LANG</span>&quot;</span> || <span class="literal">true</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&quot;export LANG=<span class="variable">$LANG</span>&quot;</span> &gt; /etc/profile.d/locale.sh &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    \</span></span><br><span class="line"><span class="language-bash">    apk del glibc-i18n &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> <span class="string">&quot;/root/.wget-hsts&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk del .build-dependencies &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;<span class="variable">$ALPINE_GLIBC_BASE_PACKAGE_FILENAME</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;<span class="variable">$ALPINE_GLIBC_BIN_PACKAGE_FILENAME</span>&quot;</span> \</span></span><br><span class="line"><span class="language-bash">        <span class="string">&quot;<span class="variable">$ALPINE_GLIBC_I18N_PACKAGE_FILENAME</span>&quot;</span></span></span><br><span class="line">        </span><br><span class="line">$ docker build -f Dockerfile-glibc -t alpine-glibc:a3.<span class="number">14</span>_g2.<span class="number">33</span> .</span><br><span class="line"></span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY                      TAG                      IMAGE ID       CREATED         SIZE</span><br><span class="line">alpine-glibc                    <span class="number">3.14</span>                     <span class="number">4</span>fa28b64d76b   <span class="number">5</span> seconds ago   <span class="number">17.7</span>MB</span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ vim Dockerfile-jdk</span><br><span class="line"><span class="keyword">FROM</span> alpine-glibc:a3.<span class="number">14</span>_g2.<span class="number">33</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_VERSION=<span class="number">8</span> \</span><br><span class="line">    JAVA_UPDATE=<span class="number">202</span> \</span><br><span class="line">    JAVA_BUILD=<span class="number">08</span> \</span><br><span class="line">    JAVA_HOME=<span class="string">&quot;/usr/lib/jvm/default-jvm&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-8u202-linux-x64.tar.gz /tmp</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> jce_policy-8.zip /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --no-cache --virtual=build-dependencies wget ca-certificates unzip &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">cd</span> <span class="string">&quot;/tmp&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mkdir</span> -p <span class="string">&quot;/usr/lib/jvm&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">mv</span> <span class="string">&quot;/tmp/jdk1.<span class="variable">$&#123;JAVA_VERSION&#125;</span>.0_<span class="variable">$&#123;JAVA_UPDATE&#125;</span>&quot;</span> <span class="string">&quot;/usr/lib/jvm/java-<span class="variable">$&#123;JAVA_VERSION&#125;</span>-oracle&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">ln</span> -s <span class="string">&quot;java-<span class="variable">$&#123;JAVA_VERSION&#125;</span>-oracle&quot;</span> <span class="string">&quot;<span class="variable">$JAVA_HOME</span>&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">ln</span> -s <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/bin/&quot;</span>* <span class="string">&quot;/usr/bin/&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/&quot;</span>*src.zip &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/lib/missioncontrol&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/lib/visualvm&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/lib/&quot;</span>*javafx* \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/plugin.jar&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/ext/jfxrt.jar&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/javaws&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/javaws.jar&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/desktop&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/plugin&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/&quot;</span>deploy* \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/&quot;</span>*javafx* \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/&quot;</span>*jfx* \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/libdecora_sse.so&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/&quot;</span>libprism_*.so \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/libfxplugins.so&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/libglass.so&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/libgstreamer-lite.so&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/&quot;</span>libjavafx*.so \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/amd64/&quot;</span>libjfx*.so &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/jjs&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/keytool&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/orbd&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/pack200&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/policytool&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/rmid&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/rmiregistry&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/servertool&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/tnameserv&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/bin/unpack200&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/ext/nashorn.jar&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/jfr.jar&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/jfr&quot;</span> \</span></span><br><span class="line"><span class="language-bash">           <span class="string">&quot;<span class="variable">$JAVA_HOME</span>/jre/lib/oblique-fonts&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    unzip -jo -d <span class="string">&quot;<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre/lib/security&quot;</span> <span class="string">&quot;jce_policy-<span class="variable">$&#123;JAVA_VERSION&#125;</span>.zip&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> <span class="string">&quot;<span class="variable">$&#123;JAVA_HOME&#125;</span>/jre/lib/security/README.txt&quot;</span> &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk del build-dependencies &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> <span class="string">&quot;/tmp/&quot;</span>* &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    apk add tzdata &amp;&amp; <span class="built_in">cp</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">echo</span> <span class="string">&#x27;public class Main &#123; public static void main(String[] args) &#123; System.out.println(&quot;Java code is running fine!&quot;); &#125; &#125;&#x27;</span> &gt; Main.java &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    javac Main.java &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    java Main &amp;&amp; \</span></span><br><span class="line"><span class="language-bash">    <span class="built_in">rm</span> -r <span class="string">&quot;/tmp/&quot;</span>*</span></span><br><span class="line">    </span><br><span class="line">$ docker build -f Dockerfile-jdk -t jdk:alpine_glibc-<span class="number">8</span>u202 .</span><br></pre></td></tr></table></figure><h3 id="验证测试"><a href="#验证测试" class="headerlink" title="验证测试"></a>验证测试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker images</span><br><span class="line">REPOSITORY                      TAG                       IMAGE ID       CREATED          SIZE</span><br><span class="line">yk-harbor.net/public/jdk        alpine_glibc-8u202        82403b887e0a   9 days ago       168MB</span><br><span class="line"></span><br><span class="line">$ docker run -it --<span class="built_in">rm</span> yk-harbor.net/public/jdk:alpine_glibc-8u202 /bin/sh</span><br><span class="line">/ <span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">&quot;1.8.0_202&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_202-b08)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装_Docker-compose</title>
      <link href="/2022/04/07/docker/centos7%E5%AE%89%E8%A3%85_docker-compose/"/>
      <url>/2022/04/07/docker/centos7%E5%AE%89%E8%A3%85_docker-compose/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker Compose 是 docker 提供的一个命令行工具，用来定义和运行由多个容器组成的应用</p></blockquote><p>1）在线安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.3.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br><span class="line">$ <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>2）离线安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/docker/compose/releases/download/v2.3.1/docker-compose-linux-x86_64</span><br><span class="line">$ <span class="built_in">mv</span> docker-compose-Linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">$ <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="line">$ docker-compose --version</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装_Docker(Yum)</title>
      <link href="/2022/04/07/docker/centos7%E5%AE%89%E8%A3%85_docker(yum)/"/>
      <url>/2022/04/07/docker/centos7%E5%AE%89%E8%A3%85_docker(yum)/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker 要求 CentOS 系统的内核版本高于 3.10，安装前请确认 CentOS 版本是否支持 Docker</p></blockquote><p>1）安装依赖</p><p>安装需要的软件包，yum-util 提供 yum-config-manager 功能，另外两个是 devicemapper 驱动依赖</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>由于国内访问不到 docker 官方镜像的缘故，可以通过 aliyun 的源来完成；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">$ yum makecache fast</span><br></pre></td></tr></table></figure><p>2）程序安装</p><p>安装 docker 相关的依赖 默认最新版(<strong>docker-ce:社区版 ee:企业版</strong>)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install docker-ce docker-ce-cli containerd.io -y</span><br><span class="line"></span><br><span class="line">//可选择安装特定版本</span><br><span class="line">$ yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line">$ yum install docker-ce-19.03.9 docker-ce-cli-19.03.9 containerd.io</span><br></pre></td></tr></table></figure><p>所有节点设置防火墙规则，并让生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /lib/systemd/system/docker.service</span><br><span class="line">[Service]</span><br><span class="line">ExecStartPost=/sbin/iptables -I FORWARD -s 0.0.0.0/0 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并加入开机启动</span></span><br><span class="line">$ systemctl start docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>3）配置加速</p><p>镜像加速器：阿里云加速器，daocloud 加速器，中科大加速器<br>Docker 中国官方镜像加速：<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt; /etc/docker/daemon.json &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;registry-mirrors&quot;: [</span></span><br><span class="line"><span class="string">      &quot;https://eihzr0te.mirror.aliyuncs.com&quot;,</span></span><br><span class="line"><span class="string">      &quot;https://dockerhub.mirrors.nwafu.edu.cn/&quot;,</span></span><br><span class="line"><span class="string">      &quot;https://mirror.ccs.tencentyun.com&quot;,</span></span><br><span class="line"><span class="string">      &quot;https://docker.mirrors.ustc.edu.cn/&quot;,</span></span><br><span class="line"><span class="string">      &quot;https://reg-mirror.qiniu.com&quot;,</span></span><br><span class="line"><span class="string">      &quot;http://hub-mirror.c.163.com/&quot;,</span></span><br><span class="line"><span class="string">      &quot;https://registry.docker-cn.com&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 docker 服务</span></span><br><span class="line">$ systemctl daemon-reload &amp;&amp; systemctl restart docker &amp;&amp; systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rook部署_Ceph集群</title>
      <link href="/2022/04/07/ceph/rook%E9%83%A8%E7%BD%B2_Ceph%E9%9B%86%E7%BE%A4/"/>
      <url>/2022/04/07/ceph/rook%E9%83%A8%E7%BD%B2_Ceph%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>rook 的版本大于 1.3，不要使用目录创建集群，要使用单独的裸盘进行创建，也就是创建一个新的磁盘，挂载到宿主机，不进行格式化，直接使用即可；(新加磁盘的名称，可以通过 fdisk -l 查看)</li><li>做这个实验需要高配置，每个节点配置不能低于 2 核 4G</li><li>k8s 1.19 以上版本，快照功能需要单独安装 snapshot 控制器</li></ol><h3 id="Rook-安装"><a href="#Rook-安装" class="headerlink" title="Rook 安装"></a>Rook 安装</h3><p>1）下载指定版本 Rock，或者下载最新版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --single-branch --branch v1.6.3 https://github.com/rook/rook.git</span><br></pre></td></tr></table></figure><p>2）配置更改</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> rook/cluster/examples/kubernetes/ceph</span><br></pre></td></tr></table></figure><blockquote><p>修改 Rook CSI 镜像地址，因为原本的地址可能是 gcr 的镜像，是无法被国内访问的，所以需要提交同步 gcr 的镜像到阿里云镜像仓库，修改如下:</p></blockquote><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">operator.yaml</span></span><br><span class="line">  <span class="comment"># ROOK_CSI_CEPH_IMAGE: &quot;quay.io/cephcsi/cephcsi:v3.3.1&quot;</span></span><br><span class="line">  <span class="comment"># ROOK_CSI_REGISTRAR_IMAGE: &quot;k8s.gcr.io/sig-storage/csi-node-driver-registrar:v2.0.1&quot;</span></span><br><span class="line">  <span class="comment"># ROOK_CSI_RESIZER_IMAGE: &quot;k8s.gcr.io/sig-storage/csi-resizer:v1.0.1&quot;</span></span><br><span class="line">  <span class="comment"># ROOK_CSI_PROVISIONER_IMAGE: &quot;k8s.gcr.io/sig-storage/csi-provisioner:v2.0.4&quot;</span></span><br><span class="line">  <span class="comment"># ROOK_CSI_SNAPSHOTTER_IMAGE: &quot;k8s.gcr.io/sig-storage/csi-snapshotter:v4.0.0&quot;</span></span><br><span class="line">  <span class="comment"># ROOK_CSI_ATTACHER_IMAGE: &quot;k8s.gcr.io/sig-storage/csi-attacher:v3.0.2&quot;</span></span><br><span class="line">  <span class="attr">ROOK_CSI_REGISTRAR_IMAGE:</span> <span class="string">&quot;registry.cn-beijing.aliyuncs.com/dotbalo/csi-node-driver-registrar:v2.0.1&quot;</span></span><br><span class="line">  <span class="attr">ROOK_CSI_RESIZER_IMAGE:</span> <span class="string">&quot;registry.cn-beijing.aliyuncs.com/dotbalo/csi-resizer:v1.0.1&quot;</span></span><br><span class="line">  <span class="attr">ROOK_CSI_PROVISIONER_IMAGE:</span> <span class="string">&quot;registry.cn-beijing.aliyuncs.com/dotbalo/csi-provisioner:v2.0.4&quot;</span></span><br><span class="line">  <span class="attr">ROOK_CSI_SNAPSHOTTER_IMAGE:</span> <span class="string">&quot;registry.cn-beijing.aliyuncs.com/dotbalo/csi-snapshotter:v4.0.0&quot;</span></span><br><span class="line">  <span class="attr">ROOK_CSI_ATTACHER_IMAGE:</span> <span class="string">&quot;registry.cn-beijing.aliyuncs.com/dotbalo/csi-attacher:v3.0.2&quot;</span></span><br><span class="line"><span class="comment"># 如果是其他版本，需要自行同步</span></span><br></pre></td></tr></table></figure><p>新版本 rook 默认关闭了自动发现容器的部署，可以找到 ROOK_ENABLE_DISCOVERY_DAEMON 改成 true 即可</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Whether to start the discovery daemon to watch for raw storage devices on nodes in the cluster.</span></span><br><span class="line"><span class="comment"># This daemon does not need to run if you are only going to create your OSDs based on StorageClassDeviceSets with PVCs.</span></span><br><span class="line"><span class="attr">ROOK_ENABLE_DISCOVERY_DAEMON:</span> <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>3）部署程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> cluster/examples/kubernetes/ceph</span><br><span class="line">$ kubectl create -f crds.yaml -f common.yaml -f operator.yaml</span><br><span class="line">$ kubectl get po -n rook-ceph</span><br><span class="line">NAME                                  READY   STATUS    RESTARTS   AGE</span><br><span class="line">rook-ceph-operator-65965c66b5-2cpf8   1/1     Running   0          14h</span><br><span class="line">rook-discover-6rcfg                   1/1     Running   0          14h</span><br><span class="line">rook-discover-gq229                   1/1     Running   0          14h</span><br><span class="line">rook-discover-x85hn                   1/1     Running   8          18h</span><br><span class="line">rook-discover-xdmtv                   1/1     Running   0          14h</span><br><span class="line">rook-discover-xt9pq                   1/1     Running   0          14h</span><br><span class="line">rook-discover-zsp6s                   1/1     Running   0          14h</span><br></pre></td></tr></table></figure><p>等待 operator 容器和 discover 容器启动，全部变成 1&#x2F;1 Running 才可以创建 Ceph 集群</p><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>1）配置更改，主要更改的是 osd 节点所在的位置：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">vim</span> <span class="string">cluster.yaml</span></span><br><span class="line">  <span class="attr">mon:</span></span><br><span class="line">    <span class="comment"># Set the number of mons to be started. Must be an odd number, and is generally recommended to be 3.</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment"># The mons should be on unique nodes. For production, at least 3 nodes are recommended for this reason.</span></span><br><span class="line">    <span class="comment"># Mons should only be allowed on the same node for test environments where data loss is acceptable.</span></span><br><span class="line">    <span class="attr">allowMultiplePerNode:</span> <span class="literal">false</span>  <span class="comment"># 是否允许同个节点部署多个mon，建议false</span></span><br><span class="line">  <span class="attr">mgr:</span></span><br><span class="line">    <span class="comment"># When higher availability of the mgr is needed, increase the count to 2.</span></span><br><span class="line">    <span class="comment"># In that case, one mgr will be active and one in standby. When Ceph updates which</span></span><br><span class="line">    <span class="comment"># mgr is active, Rook will update the mgr services to match the active mgr.</span></span><br><span class="line">    <span class="attr">count:</span> <span class="number">2</span>  <span class="comment"># 高可用环境建议设置为2</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">  <span class="attr">dashboard:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># serve the dashboard under a subpath (useful when you are accessing the dashboard via a reverse proxy)</span></span><br><span class="line">    <span class="comment"># urlPrefix: /ceph-dashboard</span></span><br><span class="line">    <span class="comment"># serve the dashboard at the given port.</span></span><br><span class="line">    <span class="comment"># port: 8443</span></span><br><span class="line">    <span class="comment"># serve the dashboard using SSL</span></span><br><span class="line">    <span class="attr">ssl:</span> <span class="literal">false</span>  <span class="comment"># 改为false</span></span><br><span class="line">  <span class="comment"># enable prometheus alerting for cluster</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="comment"># cluster level storage configuration and selection</span></span><br><span class="line">    <span class="attr">useAllNodes:</span> <span class="literal">true</span>    <span class="comment"># 是否所有节点，改为false</span></span><br><span class="line">    <span class="attr">useAllDevices:</span> <span class="literal">true</span>  <span class="comment"># 是否所有磁盘，改为false</span></span><br><span class="line">    <span class="comment">#deviceFilter:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># 去除注释，设置节点和磁盘位置</span></span><br><span class="line"><span class="comment">#    nodes:</span></span><br><span class="line"><span class="comment">#    - name: &quot;172.17.4.201&quot;</span></span><br><span class="line"><span class="comment">#      devices: # specific devices to use for storage can be specified for each node</span></span><br><span class="line"><span class="comment">#      - name: &quot;sdb&quot;</span></span><br><span class="line">    <span class="attr">nodes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;k8s-node01&quot;</span>  <span class="comment"># 注意不能写IP地址</span></span><br><span class="line">      <span class="attr">devices:</span> <span class="comment"># specific devices to use for storage can be specified for each node</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;sdc&quot;</span>       <span class="comment"># 注意添加的磁盘名称</span></span><br></pre></td></tr></table></figure><p>注意：新版必须采用裸盘，即未格式化的磁盘。其中 k8s-node01 node02 node03 有新加的一个磁盘，可以通过 lsblk -f 查看新添加的磁盘名称。建议最少三个节点，否则后面的试验可能会出现问题</p><p>2）查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl create -f cluster.yaml</span><br><span class="line"></span><br><span class="line">$ kubectl get cephcluster -n rook-ceph</span><br><span class="line">NAME        DATADIRHOSTPATH   MONCOUNT   AGE   PHASE   MESSAGE                        HEALTH        EXTERNAL</span><br><span class="line">rook-ceph   /var/lib/rook     3          15m   Ready   Cluster created successfully   HEALTH_WARN</span><br></pre></td></tr></table></figure><p>需要注意的是，osd-x 的容器必须是存在的，且是正常的。如果上述 Pod 均正常，则认为集群安装成功</p><p><strong>参考文献</strong></p><p><a href="https://ke.qq.com/course/2738602">更多学习内容请参考-K8s全栈架构师(基于世界五百强生产经验研发)</a></p>]]></content>
      
      
      <categories>
          
          <category> rook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Ceph集群</title>
      <link href="/2022/04/07/ceph/centos7%E9%83%A8%E7%BD%B2_Ceph%E9%9B%86%E7%BE%A4/"/>
      <url>/2022/04/07/ceph/centos7%E9%83%A8%E7%BD%B2_Ceph%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<p><strong>版本环境：</strong></p><ul><li>硬件系统：ESXI 6.7.0 Update 1</li><li>操作系统：CentOS 7.9</li><li>Docker 版本：20.10.6</li><li>Ceph 版本：13.2.10</li></ul><blockquote><p><strong>集群环境：</strong>四台服务器，可上外网，其中三台作为 ceph 集群，一台作为 cehp 客户端，除了 client 外每台加一个磁盘（&#x2F;dev&#x2F;sdb），无需分区；</p></blockquote><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>1）配置主机名及 hosts</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/hosts &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">188.188.4.110 client</span></span><br><span class="line"><span class="string">188.188.4.111 ceph01</span></span><br><span class="line"><span class="string">188.188.4.112 ceph02</span></span><br><span class="line"><span class="string">188.188.4.113 ceph03</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><p>2）关闭防火墙及 Selinux</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld</span><br><span class="line">$ setenforce 0</span><br><span class="line">$ sed -i <span class="string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/sysconfig/selinux</span><br><span class="line">$ sed -i <span class="string">&#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><p>3）设置 ntpdate 时间同步并设置在 crontab 内</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -ivh http://mirrors.wlnmp.com/centos/wlnmp-release-centos.noarch.rpm</span><br><span class="line">$ yum install ntpdate -y</span><br><span class="line">$ <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span> &gt;/etc/timezone</span><br><span class="line">$ ntpdate time2.aliyun.com</span><br><span class="line">$ crontab -e</span><br><span class="line"><span class="comment"># 加入到crontab</span></span><br><span class="line">*/5 * * * * /usr/sbin/ntpdate time2.aliyun.com</span><br></pre></td></tr></table></figure><p>4）配置 Ceph-yum 源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install epel-release -y</span><br><span class="line">$ <span class="built_in">cat</span> &gt; /etc/yum.repos.d/ceph.repo &lt; EOF</span><br><span class="line">[ceph]</span><br><span class="line">name=ceph</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-mimic/el7/x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line"> </span><br><span class="line">[ceph-noarch]</span><br><span class="line">name=cephnoarch</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-mimic/el7/noarch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line"> </span><br><span class="line">[ceph-source]</span><br><span class="line">name=Ceph <span class="built_in">source</span> packages</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-mimic/el7/SRPMS</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">priority=1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>5）更新系统并配置 ssh 免密登录（以 ceph01 为部署节点，配置使 ceph01 可以免密登录四台主机）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y update</span><br><span class="line">$ ssh-keygen -t rsa</span><br><span class="line">$ ssh-copy-id ceph01</span><br><span class="line">$ ssh-copy-id ceph02</span><br><span class="line">$ ssh-copy-id ceph03</span><br><span class="line">$ ssh-copy-id client</span><br></pre></td></tr></table></figure><p>在 ceph01 上ssh其他主机无需输入密码代表配置 ssh 成功</p><h3 id="部署工具"><a href="#部署工具" class="headerlink" title="部署工具"></a>部署工具</h3><p>1）在 ceph01 上安装部署工具（其他节点不用安装）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install ceph-deploy -y</span><br></pre></td></tr></table></figure><p>2）每个节点都建立一个集群配置目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> /etc/ceph</span><br><span class="line">$ <span class="built_in">cd</span> /etc/ceph</span><br></pre></td></tr></table></figure><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy new ceph01</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/usr/bin/ceph-deploy&quot;</span>, line 18, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from ceph_deploy.cli import main</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python2.7/site-packages/ceph_deploy/cli.py&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    import pkg_resources</span><br><span class="line">ImportError: No module named pkg_resources</span><br><span class="line"><span class="comment"># 报错处理，缺少python依赖</span></span><br><span class="line">$ yum install python-setuptools</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 成功执行过程如下：</span></span><br><span class="line">[ceph_deploy.conf][DEBUG ] found configuration file at: /root/.cephdeploy.conf</span><br><span class="line">[ceph_deploy.cli][INFO  ] Invoked (2.0.1): /usr/bin/ceph-deploy new ceph01</span><br><span class="line">[ceph_deploy.cli][INFO  ] ceph-deploy options:</span><br><span class="line">[ceph_deploy.cli][INFO  ]  username                      : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  func                          : &lt;<span class="keyword">function</span> new at 0x7f9f8a0a1de8&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  verbose                       : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  overwrite_conf                : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  quiet                         : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cd_conf                       : &lt;ceph_deploy.conf.cephdeploy.Conf instance at 0x7f9f8981b518&gt;</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cluster                       : ceph</span><br><span class="line">[ceph_deploy.cli][INFO  ]  ssh_copykey                   : True</span><br><span class="line">[ceph_deploy.cli][INFO  ]  mon                           : [<span class="string">&#x27;ceph01&#x27;</span>]</span><br><span class="line">[ceph_deploy.cli][INFO  ]  public_network                : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  ceph_conf                     : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  cluster_network               : None</span><br><span class="line">[ceph_deploy.cli][INFO  ]  default_release               : False</span><br><span class="line">[ceph_deploy.cli][INFO  ]  fsid                          : None</span><br><span class="line">[ceph_deploy.new][DEBUG ] Creating new cluster named ceph                             <span class="comment"># 创建新的集群 ceph</span></span><br><span class="line">[ceph_deploy.new][INFO  ] making sure passwordless SSH succeeds                       <span class="comment"># ssh 免密登录 ceph01 成功</span></span><br><span class="line">[ceph01][DEBUG ] connected to host: ceph01 </span><br><span class="line">[ceph01][DEBUG ] detect platform information from remote host</span><br><span class="line">[ceph01][DEBUG ] detect machine <span class="built_in">type</span></span><br><span class="line">[ceph01][DEBUG ] find the location of an executable</span><br><span class="line">[ceph01][INFO  ] Running <span class="built_in">command</span>: /usr/sbin/ip <span class="built_in">link</span> show</span><br><span class="line">[ceph01][INFO  ] Running <span class="built_in">command</span>: /usr/sbin/ip addr show</span><br><span class="line">[ceph01][DEBUG ] IP addresses found: [u<span class="string">&#x27;188.188.4.111&#x27;</span>]</span><br><span class="line">[ceph_deploy.new][DEBUG ] Resolving host ceph01                                       <span class="comment"># 连接ceph01获取IP为188.188.4.111</span></span><br><span class="line">[ceph_deploy.new][DEBUG ] Monitor ceph01 at 188.188.4.111</span><br><span class="line">[ceph_deploy.new][DEBUG ] Monitor initial members are [<span class="string">&#x27;ceph01&#x27;</span>]</span><br><span class="line">[ceph_deploy.new][DEBUG ] Monitor addrs are [<span class="string">&#x27;188.188.4.111&#x27;</span>]</span><br><span class="line">[ceph_deploy.new][DEBUG ] Creating a random mon key...                                <span class="comment"># 创建mon的key</span></span><br><span class="line">[ceph_deploy.new][DEBUG ] Writing monitor keyring to ceph.mon.keyring...</span><br><span class="line">[ceph_deploy.new][DEBUG ] Writing initial config to ceph.conf...                      <span class="comment"># 创建ceph.conf配置文件</span></span><br></pre></td></tr></table></figure><p>会在当前配置文件目录生成以下配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceph.conf  ceph-deploy-ceph.log  ceph.mon.keyring</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>ceph.conf                        集群配置文件</li><li>ceph-deploy-ceph.log   使用ceph-deploy部署的日志记录</li><li>ceph.mon.keyring          mon的验证key文件 监控需要的令牌</li></ul><h3 id="节点加入"><a href="#节点加入" class="headerlink" title="节点加入"></a>节点加入</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 所有节点都需要安装</span></span><br><span class="line">$ yum install ceph ceph-radosgw -y</span><br><span class="line">$ ceph -v</span><br><span class="line">ceph version 13.2.10 (564bdc4ae87418a232fc901524470e1a0f76d641) mimic (stable)</span><br></pre></td></tr></table></figure><blockquote><p>注意： 如公网OK,并且网速好的话,可以用<code>ceph-deploy install node1 node2 node3</code>命令来安装,但网速不好的话会比较坑，所以这里选择直接用准备好的本地 ceph 源,然后<code>yum install ceph ceph-radosgw -y</code>安装即可。</p></blockquote><h3 id="创建-mon-监控"><a href="#创建-mon-监控" class="headerlink" title="创建 mon 监控"></a>创建 mon 监控</h3><blockquote><p>一般执行 <code>ceph-deploy mon create-initial</code> 即可，但执行报错，则修改配置 <code>public network = 188.188.4.0/24</code> 再执行命令</p></blockquote><p>1）解决命令执行错报错问题，修改 ceph01 配置文件在 <code>[global]</code> 配置端添加下面一句</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ceph.conf </span><br><span class="line">public network = 188.188.4.0/24</span><br></pre></td></tr></table></figure><p>2）监控节点初始化，并同步配置到所有节点(ceph01,ceph02,ceph03,不包括 client）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy mon create-initial</span><br><span class="line">[node1][DEBUG ] write cluster configuration to /etc/ceph/&#123;cluster&#125;.conf</span><br><span class="line">[ceph_deploy.mon][ERROR ] RuntimeError: config file /etc/ceph/ceph.conf exists with different content; use --overwrite-conf to overwrite</span><br><span class="line">[ceph_deploy][ERROR ] GenericError: Failed to create 1 monitors</span><br></pre></td></tr></table></figure><p>3）查看监控状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph health</span><br><span class="line">HEALTH_OK</span><br></pre></td></tr></table></figure><p>4）将配置信息同步到所有节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy admin ceph01 ceph02 ceph03</span><br><span class="line"><span class="comment"># 查看其他节点是否多了几个配置文件</span></span><br><span class="line">$ ll</span><br><span class="line">总用量 12</span><br><span class="line">-rw------- 1 root root 151 8月   3 14:46 ceph.client.admin.keyring</span><br><span class="line">-rw-r--r-- 1 root root 322 8月   3 14:46 ceph.conf</span><br><span class="line">-rw-r--r-- 1 root root  92 4月  24 01:07 rbdmap</span><br><span class="line">-rw------- 1 root root   0 8月   1 16:46 tmpDX_w1Z</span><br></pre></td></tr></table></figure><p>5）再次查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    <span class="built_in">id</span>:     a9aa277d-7192-4687-b384-9787b73ece71</span><br><span class="line">    health: HEALTH_OK                     <span class="comment"># 集群监控状态OK</span></span><br><span class="line">  </span><br><span class="line">  services:</span><br><span class="line">    mon: 1 daemons, quorum node1 (age 3m) <span class="comment"># 1个mon</span></span><br><span class="line">    mgr: no daemons active</span><br><span class="line">    osd: 0 osds: 0 up, 0 <span class="keyword">in</span></span><br><span class="line">  </span><br><span class="line">  data:</span><br><span class="line">    pools:   0 pools, 0 pgs</span><br><span class="line">    objects: 0 objects, 0 B</span><br><span class="line">    usage:   0 B used, 0 B / 0 B avail</span><br><span class="line">    pgs:    </span><br></pre></td></tr></table></figure><p><strong>为了防止 mon 单点故障，你可以加多个 mon 节点(建议奇数个，因为有 quorum 仲裁投票）</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy mon add ceph02</span><br><span class="line">$ ceph-deploy mon add ceph03</span><br><span class="line">$ ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    <span class="built_in">id</span>:     a9aa277d-7192-4687-b384-9787b73ece71</span><br><span class="line">    health: HEALTH_OK</span><br><span class="line">  </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum node1,node2,node3 (age 0.188542s) <span class="comment"># 3个mon了</span></span><br><span class="line">    mgr: no daemons active</span><br><span class="line">    osd: 0 osds: 0 up, 0 <span class="keyword">in</span></span><br><span class="line">  </span><br><span class="line">  data:</span><br><span class="line">    pools:   0 pools, 0 pgs</span><br><span class="line">    objects: 0 objects, 0 B</span><br><span class="line">    usage:   0 B used, 0 B / 0 B avail</span><br><span class="line">    pgs:    </span><br></pre></td></tr></table></figure><p><strong>注：监控异常问题</strong>，ceph 集群对时间同步要求非常高, 即使你已经将 ntpd 服务开启,但仍然可能有 <code>clock skew deteted</code> 相关警告</p><p>监控到时间不同步的解决方法：</p><p>1）<strong>在 ceph 集群所有节点上(<code>node1</code>,<code>node2</code>,<code>node3</code>)操作，</strong>不使用 ntpd 服务，直接使用 crontab 同步</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl stop ntpd</span><br><span class="line">$ systemctl <span class="built_in">disable</span> ntpd</span><br><span class="line">$ crontab -e</span><br><span class="line">*/10 * * * * ntpdate ntp1.aliyun.com  <span class="comment"># 每5或10分钟同步1次公网的任意时间服务器</span></span><br></pre></td></tr></table></figure><p>2）调大时间警告的阈值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/ceph/ceph.conf</span><br><span class="line">[global]                          <span class="comment"># 在global参数组里添加以下两行                        </span></span><br><span class="line">mon clock drift allowed = 2       <span class="comment"># monitor间的时钟滴答数(默认0.5秒)</span></span><br><span class="line">mon clock drift warn backoff = 30 <span class="comment"># 调大时钟允许的偏移量(默认为5)</span></span><br></pre></td></tr></table></figure><p><font color=red>每次修改了 ceph.conf 配置需要加 <code>--overwrite-conf</code> 参数覆盖同步到所有节点，再所有 ceph 集群节点上重启 ceph-mon.target 服务</font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy --overwrite-conf admin node1 node2 node3</span><br><span class="line">$ systemctl restart ceph-mon.target</span><br></pre></td></tr></table></figure><h3 id="创建-mgr-管理"><a href="#创建-mgr-管理" class="headerlink" title="创建 mgr 管理"></a>创建 mgr 管理</h3><p>eph luminous 版本中新增加了一个组件：Ceph Manager Daemon，简称 ceph-mgr；</p><p>该组件的主要作用是分担和扩展 monitor 的部分功能，减轻 monitor 的负担，让更好地管理 ceph 存储系统；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy mgr create ceph01</span><br></pre></td></tr></table></figure><p>添加多个 mgr 可以实现 HA</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy mgr create ceph02</span><br><span class="line">$ ceph-deploy mgr create ceph03</span><br><span class="line">$ ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    <span class="built_in">id</span>:     a9aa277d-7192-4687-b384-9787b73ece71</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            Module <span class="string">&#x27;restful&#x27;</span> has failed dependency: No module named <span class="string">&#x27;pecan&#x27;</span></span><br><span class="line">            Reduced data availability: 1 pg inactive</span><br><span class="line">            OSD count 0 &lt; osd_pool_default_size 3</span><br><span class="line">  </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum node1,node2,node3 (age 11m)</span><br><span class="line">    mgr: node1(active, since 3m), standbys: node2, node3  <span class="comment"># 3个mgr其中node1为active node2 3为standbys</span></span><br><span class="line">    osd: 0 osds: 0 up, 0 <span class="keyword">in</span></span><br><span class="line">  </span><br><span class="line">  data:</span><br><span class="line">    pools:   1 pools, 1 pgs</span><br><span class="line">    objects: 0 objects, 0 B</span><br><span class="line">    usage:   0 B used, 0 B / 0 B avail</span><br><span class="line">    pgs:     100.000% pgs unknown</span><br><span class="line">             1 unknown</span><br></pre></td></tr></table></figure><h3 id="创建-osd-存储"><a href="#创建-osd-存储" class="headerlink" title="创建 osd 存储"></a>创建 osd 存储</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看相关帮忙,lsblk 查看已添加的磁盘情况</span></span><br><span class="line">$ ceph-deploy disk --<span class="built_in">help</span></span><br><span class="line">$ ceph-deploy osd --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><p>zap 表示干掉磁盘上的数据,相当于格式化</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy disk zap ceph01 /dev/sdb</span><br><span class="line">$ ceph-deploy disk zap ceph02 /dev/sdb</span><br><span class="line">$ ceph-deploy disk zap ceph03 /dev/sdb</span><br></pre></td></tr></table></figure><p>将磁盘创建为 osd</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy osd create --data /dev/sdb ceph01</span><br><span class="line">$ ceph-deploy osd create --data /dev/sdb ceph02</span><br><span class="line">$ ceph-deploy osd create --data /dev/sdb ceph03</span><br><span class="line">$ ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    <span class="built_in">id</span>:     a9aa277d-7192-4687-b384-9787b73ece71</span><br><span class="line">    health: HEALTH_WARN</span><br><span class="line">            Module <span class="string">&#x27;restful&#x27;</span> has failed dependency: No module named <span class="string">&#x27;pecan&#x27;</span></span><br><span class="line">  </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph01,ceph02,ceph03 (age 22m)</span><br><span class="line">    mgr: ceph01(active, since 14m), standbys: ceph02, ceph03</span><br><span class="line">    osd: 3 osds: 3 up (since 4s), 3 <span class="keyword">in</span> (since 4s) <span class="comment"># 3个osd 3个up启用状态 3 in代表3G在使用 每块硬盘占用1G</span></span><br><span class="line">  </span><br><span class="line">  data:</span><br><span class="line">    pools:   1 pools, 1 pgs</span><br><span class="line">    objects: 0 objects, 0 B</span><br><span class="line">    usage:   3.0 GiB used, 45 GiB / 48 GiB avail  <span class="comment"># 3G使用 45G空闲 总计48G及三块16G硬盘相加之和</span></span><br><span class="line">    pgs:     1 active+clean</span><br></pre></td></tr></table></figure><h3 id="集群扩容"><a href="#集群扩容" class="headerlink" title="集群扩容"></a>集群扩容</h3><p>假设再加一个新的集群节点 ceph04</p><ol><li>主机名配置和绑定</li><li>在 ceph04 上 <code>yum install ceph ceph-radosgw -y</code> 安装软件</li><li>在部署节点 ceph01 上同步配置文件给 ceph04，<code>ceph-deploy admin ceph04</code></li><li>按需求选择在 ceph04 上添加 mon 或 mgr 或 osd 等</li></ol><h3 id="Ceph-Dashboard"><a href="#Ceph-Dashboard" class="headerlink" title="Ceph-Dashboard"></a>Ceph-Dashboard</h3><p>1）查看集群状态确认 mgr 的 active 节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph -s</span><br><span class="line">  cluster:</span><br><span class="line">    <span class="built_in">id</span>:     134c6247-2fd4-4669-8c19-d0c9200d90c8</span><br><span class="line">    health: HEALTH_OK</span><br><span class="line">  </span><br><span class="line">  services:</span><br><span class="line">    mon: 3 daemons, quorum ceph01,ceph02,ceph03</span><br><span class="line">    mgr: ceph01(active), standbys: ceph02, ceph03  <span class="comment"># 确认mgr active节点为 ceph01</span></span><br><span class="line">    osd: 3 osds: 3 up, 3 <span class="keyword">in</span></span><br><span class="line">    rgw: 1 daemon active</span><br><span class="line">  </span><br><span class="line">  data:</span><br><span class="line">    pools:   4 pools, 32 pgs</span><br><span class="line">    objects: 189  objects, 1.5 KiB</span><br><span class="line">    usage:   3.0 GiB used, 45 GiB / 48 GiB avail</span><br><span class="line">    pgs:     32 active+clean</span><br></pre></td></tr></table></figure><p>2）查看开启及关闭的模块</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph mgr module <span class="built_in">ls</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;enabled_modules&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;balancer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;crash&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dashboard&quot;</span>,</span><br><span class="line">        <span class="string">&quot;iostat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;restful&quot;</span>,</span><br><span class="line">        <span class="string">&quot;status&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;disabled_modules&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">            <span class="string">&quot;can_run&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;error_string&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;influx&quot;</span>,</span><br><span class="line">            <span class="string">&quot;can_run&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="string">&quot;error_string&quot;</span>: <span class="string">&quot;influxdb python module not found&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;localpool&quot;</span>,</span><br><span class="line">            <span class="string">&quot;can_run&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;error_string&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;prometheus&quot;</span>,</span><br><span class="line">            <span class="string">&quot;can_run&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;error_string&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;selftest&quot;</span>,</span><br><span class="line">            <span class="string">&quot;can_run&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;error_string&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;smart&quot;</span>,</span><br><span class="line">            <span class="string">&quot;can_run&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;error_string&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;telegraf&quot;</span>,</span><br><span class="line">            <span class="string">&quot;can_run&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;error_string&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;telemetry&quot;</span>,</span><br><span class="line">            <span class="string">&quot;can_run&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;error_string&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;zabbix&quot;</span>,</span><br><span class="line">            <span class="string">&quot;can_run&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&quot;error_string&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3）<strong>开启 dashboard 模块</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph mgr module <span class="built_in">enable</span> dashboard</span><br></pre></td></tr></table></figure><p>如开启报错，可按下述处理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph mgr module <span class="built_in">enable</span> dashboard</span><br><span class="line">Error ENOENT: all mgr daemons <span class="keyword">do</span> not support module <span class="string">&#x27;dashboard&#x27;</span>, pass --force to force enablement</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要在每个开启 mgr 的节点安装 ceph-mgr-dashboard</span></span><br><span class="line">$ yum install ceph-mgr-dashboard -y</span><br></pre></td></tr></table></figure><p>注意：不能仅仅在 active 节点安装，需要在 standby 节点都安装</p><p>4）<strong>创建自签名证书</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph dashboard create-self-signed-cert</span><br><span class="line">Self-signed certificate created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成密钥对，并配置给ceph mgr</span></span><br><span class="line">$ <span class="built_in">mkdir</span> /etc/mgr-dashboard</span><br><span class="line">$ <span class="built_in">cd</span> /etc/mgr-dashboard/</span><br><span class="line">$ openssl req -new -nodes -x509 -subj <span class="string">&quot;/O=IT-ceph/CN=cn&quot;</span> -days 3650 -keyout dashboard.key -out dashboard.crt -extensions v3_ca</span><br><span class="line">dashboard.crt  dashboard.key</span><br></pre></td></tr></table></figure><p>5）<strong>配置 mgr services</strong></p><p>在 ceph 集群的 active mgr 节点上配置 mgr services</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph config <span class="built_in">set</span> mgr mgr/dashboard/server_addr 188.188.4.111</span><br><span class="line">$ ceph config <span class="built_in">set</span> mgr mgr/dashboard/server_port 8080</span><br></pre></td></tr></table></figure><p>重启 dashboard 模块,并查看访问地址(注意：不重启查看的端口是默认的8443端口，无法访问)</p><p>6）<strong>重启 dashboard 模块</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph mgr module <span class="built_in">disable</span> dashboard</span><br><span class="line">$ ceph mgr module <span class="built_in">enable</span> dashboard</span><br><span class="line"><span class="comment"># 查看mgr service</span></span><br><span class="line">$ ceph mgr services</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;dashboard&quot;</span>: <span class="string">&quot;https://192.168.1.101:8080/&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7）设置访问 web 页面用户名和密码</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph dashboard set-login-credentials admin admin</span><br></pre></td></tr></table></figure><p>通过本机或其它主机访问 <a href="https://ip:8080/">https://ip:8080</a></p><h3 id="Ceph-文件存储"><a href="#Ceph-文件存储" class="headerlink" title="Ceph 文件存储"></a>Ceph 文件存储</h3><p>要运行 Ceph 文件系统，必须先装只是带一个 mds 的 Ceph 存储集群</p><p>Ceph.MDS：为 Ceph 文件存储类型存放元数据 metadata（也就是说 Ceph 块存储和 Ceph 对象存储不使用 MDS）</p><p>1）增设配置：在 ceph01 部署节点上修改配置 &#x2F;etc&#x2F;ceph&#x2F;ceph.conf  增加配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mon_allow_pool_delete = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>2）同步配置文件，注意修改了配置文件才需要同步，没有修改不需要同步配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy --overwrite-conf admin ceph01 ceph02 ceph03</span><br></pre></td></tr></table></figure><p>3）创建 mds</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy mds create ceph01 ceph02 ceph03</span><br></pre></td></tr></table></figure><p>一个 Ceph 文件系统需要至少两个 RADOS 存储池，一个用于数据，一个用于元数据</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph osd pool create cephfs_pool 128</span><br><span class="line">pool <span class="string">&#x27;cephfs_pool&#x27;</span> created</span><br><span class="line">$ ceph osd pool create cephfs_metadata 64</span><br><span class="line">pool <span class="string">&#x27;cephfs_metadata&#x27;</span> created</span><br></pre></td></tr></table></figure><p>参数解释</p><ul><li><p>创建 pool 自定义名为 cephfs_pool 用于存储数据 PG 数为 128 (因用于存储数据所以 PG 数较大)</p></li><li><p>创建 pool 自定义名为 cephfs_metadata 用于存储元数据 PG 数为 64</p></li><li><p>少于5个OSD则PG数为128，5-10个OSD则PG数为512，10-50个OSD则PG数为1024，更多的OSD需要自行计算</p></li></ul><p>4）查看创建的 pool 详细信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph osd pool <span class="built_in">ls</span> |grep cephfs</span><br><span class="line">cephfs_pool</span><br><span class="line">cephfs_metadata</span><br><span class="line"></span><br><span class="line">$ ceph osd pool get cephfs_pool all</span><br><span class="line">size: 3</span><br><span class="line">min_size: 2</span><br><span class="line">pg_num: 128</span><br><span class="line">pgp_num: 128</span><br><span class="line">crush_rule: replicated_rule</span><br><span class="line">hashpspool: <span class="literal">true</span></span><br><span class="line">nodelete: <span class="literal">false</span></span><br><span class="line">nopgchange: <span class="literal">false</span></span><br><span class="line">nosizechange: <span class="literal">false</span></span><br><span class="line">write_fadvise_dontneed: <span class="literal">false</span></span><br><span class="line">noscrub: <span class="literal">false</span></span><br><span class="line">nodeep-scrub: <span class="literal">false</span></span><br><span class="line">use_gmt_hitset: 1</span><br><span class="line">fast_read: 0</span><br><span class="line">pg_autoscale_mode: warn</span><br></pre></td></tr></table></figure><p>6）创建文件系统</p><p>创建 Ceph 文件系统,并确认客户端访问的节点</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph fs new cephfs cephfs_metadata cephfs_pool</span><br><span class="line">new fs with metadata pool 10 and data pool 9</span><br></pre></td></tr></table></figure><p>7）查看状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph osd pool <span class="built_in">ls</span></span><br><span class="line">.rgw.root</span><br><span class="line">default.rgw.control</span><br><span class="line">default.rgw.meta</span><br><span class="line">default.rgw.log</span><br><span class="line">cephfs_pool</span><br><span class="line">cephfs_metadata</span><br><span class="line"></span><br><span class="line">$ ceph fs <span class="built_in">ls</span>   <span class="comment"># 确认metadata池和data池        </span></span><br><span class="line">name: cephfs, metadata pool: cephfs_metadata, data pools: [cephfs_pool ]</span><br><span class="line"></span><br><span class="line">$ ceph mds <span class="built_in">stat</span></span><br><span class="line">...</span><br><span class="line">cephfs-1/1/1 up  &#123;0=ceph03=up:active&#125;, 2 up:standby <span class="comment"># ceph03为active,up状态;其他为standby</span></span><br></pre></td></tr></table></figure><p>注：metadata 保存在 ceph03 上</p><p>8）Key 文件生成</p><p>客户端准备验证 key 文件，ceph 默认启用了 cephx 认证, 所以客户端的挂载必须要验证（ceph.conf 默认配置文件开启）</p><p>可在集群节点(ceph01,ceph02,ceph03)上任意一台查看密钥字符串</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/ceph/ceph.client.admin.keyring</span><br><span class="line">$ ceph-authtool -p /etc/ceph/ceph.client.admin.keyring &gt;admin.key</span><br></pre></td></tr></table></figure><p>把这个文件放在客户端<code>client /root/admin.key</code>(注意：直接把 key 复制编辑 admin.key 文档可能会在挂载时报错)</p><p>9）客户端挂载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install ceph-fuse</span><br><span class="line">$ mount -t ceph ceph01:6789:/ /mnt -o name=admin,secretfile=/root/admin.key</span><br><span class="line">$ <span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><p>需要安装否则客户端不支持，也可以使用其他 node 主机名进行挂载，例如 ceph03</p><p>注意：如使用文件挂载报错，可以使用参数 secret&#x3D;秘钥 进行挂载；也可以使用两个客户端，同时挂载此文件存储，实现同读同写；</p><p>10）验证集群</p><p>往挂载的硬盘写数据可以在 dashboard 查看读写监控状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/mnt/file1 bs=10M count=1000</span><br></pre></td></tr></table></figure><p>11）删除文件存储</p><p>在所有挂载了文件存储的客户端卸载文件挂载，并停掉所有节点的 mds</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ umount /mnt</span><br><span class="line">$ systemctl stop ceph-mds.target</span><br></pre></td></tr></table></figure><p>回到集群任意一个节点上(node1,node2,node3 其中之一)删除</p><p><strong>如果要客户端删除,需要在 node1 上 <code>ceph-deploy admin client</code> 同步配置才可以</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph fs <span class="built_in">rm</span> cephfs --yes-i-really-mean-it</span><br><span class="line">$ ceph osd pool delete cephfs_metadata cephfs_metadata --yes-i-really-really-mean-it</span><br><span class="line">pool <span class="string">&#x27;cephfs_metadata&#x27;</span> removed</span><br><span class="line">$ ceph osd pool delete cephfs_pool cephfs_pool --yes-i-really-really-mean-it</span><br><span class="line">pool <span class="string">&#x27;cephfs_pool&#x27;</span> removed</span><br></pre></td></tr></table></figure><p>注意：为了安全需要输入两次创建的pool名并且加参数 <code>--yes-i-really-really-mean-it</code> 才能删除</p><p>另注意：需要在配置文件添加以下配置，才能删除</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mon_allow_pool_delete = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如还提示报错：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error EPERM: pool deletion is disabled; you must first <span class="built_in">set</span> the mon_allow_pool_delete config option to <span class="literal">true</span> before you can destroy a pool</span><br></pre></td></tr></table></figure><p>则重启服务 ceph-mon.target 即可<code>$ systemctl restart ceph-mon.target</code></p><p>上述执行后，再重新开启所有节点的 mds 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl start ceph-mds.target</span><br></pre></td></tr></table></figure><h3 id="Ceph-块存储"><a href="#Ceph-块存储" class="headerlink" title="Ceph 块存储"></a>Ceph 块存储</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><p>1）同步配置：在 ceph01上同步配置文件到 client</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/ceph</span><br><span class="line">$ ceph-deploy admin client</span><br></pre></td></tr></table></figure><p>2）建议存储池，并初始化（在客户端 client 操作）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph osd pool create rbd_pool 128</span><br><span class="line">pool <span class="string">&#x27;rbd_pool&#x27;</span> created</span><br><span class="line"></span><br><span class="line">$ rbd pool init rbd_pool</span><br></pre></td></tr></table></figure><p>3）创建存储卷，一个存储卷（这里卷名为 volume1 大小为 5000M）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rbd create volume1 --pool rbd_pool --size 5000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看创建状态</span></span><br><span class="line">$ rbd <span class="built_in">ls</span> rbd_pool</span><br><span class="line">volume1</span><br><span class="line">$ rbd info volume1 -p rbd_pool</span><br><span class="line">rbd image <span class="string">&#x27;volume1&#x27;</span>:         <span class="comment"># volume1 为 rbd_image</span></span><br><span class="line">    size 4.9 GiB <span class="keyword">in</span> 1250 objects</span><br><span class="line">    order 22 (4 MiB objects)</span><br><span class="line">    <span class="built_in">id</span>: 60fc6b8b4567</span><br><span class="line">    block_name_prefix: rbd_data.60fc6b8b4567</span><br><span class="line">    format: 2                <span class="comment"># 两种格式1和2 默认是2</span></span><br><span class="line">    features: layering, exclusive-lock, object-map, fast-diff, deep-flatten</span><br><span class="line">    op_features:</span><br><span class="line">    flags:</span><br><span class="line">    create_timestamp: Tue Aug  4 09:20:05 2020</span><br></pre></td></tr></table></figure><p>4）映射块设备，将创建的卷映射成块设备，因为 rbd 镜像的一些特性，OS kernel 并不支持，所以映射报错</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rbd map rbd_pool/volume1</span><br><span class="line">rbd: sysfs write failed</span><br><span class="line">RBD image feature <span class="built_in">set</span> mismatch. You can <span class="built_in">disable</span> features unsupported by the kernel with <span class="string">&quot;rbd feature disable rbd_pool/volume1 object-map fast-diff deep-flatten&quot;</span>.</span><br><span class="line">In some cases useful info is found <span class="keyword">in</span> syslog - try <span class="string">&quot;dmesg | tail&quot;</span>.</span><br><span class="line">rbd: map failed: (6) No such device or address</span><br></pre></td></tr></table></figure><p><strong>解决办法：disable 掉相关特性</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rbd feature <span class="built_in">disable</span> rbd_pool/volume1 exclusive-lock object-map fast-diff deep-flatten</span><br></pre></td></tr></table></figure><p>再次映射</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rbd map rbd_pool/volume1</span><br><span class="line">/dev/rbd0</span><br><span class="line"></span><br><span class="line">$ rbd showmapped</span><br><span class="line"><span class="built_in">id</span> pool     image   snap device   </span><br><span class="line">0  rbd_pool volume1 -    /dev/rbd0</span><br></pre></td></tr></table></figure><p>创建了磁盘&#x2F;dev&#x2F;rbd0 类似于做了一个软连接</p><p><strong>如果需要取消映射可以使用命令</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rbd unmap /dev/rbd0</span><br></pre></td></tr></table></figure><p>5）格式化挂载</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkfs.xfs /dev/rbd0</span><br><span class="line">$ mount /dev/rbd0 /mnt</span><br><span class="line">$ <span class="built_in">df</span> -h|<span class="built_in">tail</span> -1</span><br><span class="line">/dev/rbd0                4.9G   33M  4.9G    1% /mnt</span><br></pre></td></tr></table></figure><h4 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h4><p>1）如扩容成8000M</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rbd resize --size 8000 rbd_pool/volume1</span><br><span class="line">Resizing image: 100% complete...done.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看并没有变化</span></span><br><span class="line">$ <span class="built_in">df</span> -h|<span class="built_in">tail</span> -1</span><br><span class="line">/dev/rbd0                4.9G   33M  4.9G    1% /mnt</span><br></pre></td></tr></table></figure><p>2）动态刷新扩容</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ xfs_growfs -d /mnt/</span><br><span class="line">meta-data=/dev/rbd0              isize=512    agcount=8, agsize=160768 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0 spinodes=0</span><br><span class="line">data     =                       bsize=4096   blocks=1280000, imaxpct=25</span><br><span class="line">         =                       sunit=1024   swidth=1024 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal               bsize=4096   blocks=2560, version=2</span><br><span class="line">         =                       sectsz=512   sunit=8 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br><span class="line">data blocks changed from 1280000 to 2048000</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再次查看，扩容成功</span></span><br><span class="line">$ <span class="built_in">df</span> -h|<span class="built_in">tail</span> -1</span><br><span class="line">/dev/rbd0                7.9G   33M  7.8G    1% /mnt</span><br></pre></td></tr></table></figure><p>注意：该命令和 LVM 扩容命令一致</p><h4 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h4><p>1）<strong>块存储裁减</strong>不能在线裁减，裁减后需要重新格式化再挂载，如果有数据需要提前备份好数据，如裁减为5000M</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rbd resize --size 5000 rbd_pool/volume1 --allow-shrink</span><br><span class="line">Resizing image: 100% complete...done.</span><br></pre></td></tr></table></figure><p>2）卸载，格式化</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ umount /mnt</span><br><span class="line">$ fdisk -l</span><br><span class="line">$ mkfs.xfs -f /dev/rbd0</span><br><span class="line">$ mount /dev/rbd0 /mnt/</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">df</span> -h|<span class="built_in">tail</span> -1</span><br><span class="line">/dev/rbd0                4.9G   33M  4.9G    1% /mnt</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#卸载</span></span><br><span class="line">$ umount /mnt</span><br><span class="line"><span class="comment">#取消映射</span></span><br><span class="line">$ rbd unmap /dev/rbd0</span><br><span class="line"><span class="comment">#删除存储池</span></span><br><span class="line">$ ceph osd pool delete rbd_pool rbd_pool --yes-i-really-really-mean-it</span><br><span class="line">pool <span class="string">&#x27;rbd_pool&#x27;</span> removed</span><br></pre></td></tr></table></figure><h3 id="Ceph-对象存储"><a href="#Ceph-对象存储" class="headerlink" title="Ceph 对象存储"></a>Ceph 对象存储</h3><p>1）创建 rgw（在 ceph01 上创建 rgw）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ceph-deploy rgw create ceph01</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看,运行端口是7480</span></span><br><span class="line">$ lsof -i:7480</span><br></pre></td></tr></table></figure><p>2）测试连接，在客户端测试连接对象网关，在 client 安装测试工具，创建一个测试用户，需要在部署节点使用 <code>ceph-deploy admin client</code> 同步配置文件给 client</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ radosgw-admin user create --uid=<span class="string">&quot;testuser&quot;</span> --display-name=<span class="string">&quot;First User&quot;</span>|grep -E <span class="string">&#x27;access_key|secret_key&#x27;</span></span><br><span class="line">            <span class="string">&quot;access_key&quot;</span>: <span class="string">&quot;S859J38AS6WW1CZSB90M&quot;</span>,</span><br><span class="line">            <span class="string">&quot;secret_key&quot;</span>: <span class="string">&quot;PCmfHoAsHw2GIEioSWvN887o02VXesOkX2gJ20fG&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ radosgw-admin user create --uid=<span class="string">&quot;testuser&quot;</span> --display-name=<span class="string">&quot;First User&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;testuser&quot;</span>,</span><br><span class="line">    <span class="string">&quot;display_name&quot;</span>: <span class="string">&quot;First User&quot;</span>,</span><br><span class="line">    <span class="string">&quot;email&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;suspended&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;max_buckets&quot;</span>: 1000,</span><br><span class="line">    <span class="string">&quot;auid&quot;</span>: 0,</span><br><span class="line">    <span class="string">&quot;subusers&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;keys&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;user&quot;</span>: <span class="string">&quot;testuser&quot;</span>,</span><br><span class="line">            <span class="string">&quot;access_key&quot;</span>: <span class="string">&quot;S859J38AS6WW1CZSB90M&quot;</span>,</span><br><span class="line">            <span class="string">&quot;secret_key&quot;</span>: <span class="string">&quot;PCmfHoAsHw2GIEioSWvN887o02VXesOkX2gJ20fG&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;swift_keys&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;caps&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;op_mask&quot;</span>: <span class="string">&quot;read, write, delete&quot;</span>,</span><br><span class="line">    <span class="string">&quot;default_placement&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;placement_tags&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;bucket_quota&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;check_on_raw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;max_size&quot;</span>: -1,</span><br><span class="line">        <span class="string">&quot;max_size_kb&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;max_objects&quot;</span>: -1</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;user_quota&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;check_on_raw&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;max_size&quot;</span>: -1,</span><br><span class="line">        <span class="string">&quot;max_size_kb&quot;</span>: 0,</span><br><span class="line">        <span class="string">&quot;max_objects&quot;</span>: -1</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;temp_url_keys&quot;</span>: [],</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;rgw&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mfa_ids&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面一大段主要有用的为 access_key 与 secret_key，用于连接对象存储网关</p><p>3）S3连接对象网关，客户端安装 s3cmd 工具，并编写配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install s3cmd</span><br></pre></td></tr></table></figure><p>4）创建配置文件，内容如下</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /root/.s3cfg</span><br><span class="line">[default]</span><br><span class="line">access_key = S859J38AS6WW1CZSB90M</span><br><span class="line">secret_key = PCmfHoAsHw2GIEioSWvN887o02VXesOkX2gJ20fG</span><br><span class="line">host_base = 192.168.1.101:7480</span><br><span class="line">host_bucket = 192.168.1.101:7480/%(bucket)</span><br><span class="line">cloudfront_host = 192.168.1.101:7480</span><br><span class="line">use_https = False</span><br></pre></td></tr></table></figure><p>5）列出 bucket</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ s3cmd <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>6）创建一个桶，上传、下载测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ s3cmd mb s3://test_bucket              <span class="comment"># 创建</span></span><br><span class="line">$ s3cmd put /etc/fstab s3://test_bucket  <span class="comment"># 上传</span></span><br><span class="line">$ s3cmd get  s3://test_bucket/fstab      <span class="comment"># 下载</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ceph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ceph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7问题_清除buff&amp;cache</title>
      <link href="/2022/04/07/centos/centos7%E9%97%AE%E9%A2%98_%E6%B8%85%E9%99%A4buff&amp;cache/"/>
      <url>/2022/04/07/centos/centos7%E9%97%AE%E9%A2%98_%E6%B8%85%E9%99%A4buff&amp;cache/</url>
      
        <content type="html"><![CDATA[<h3 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a>查看内存使用情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Tool admin]<span class="comment"># free -h</span></span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:            31G         16G        1.1G        107M         13G         14G</span><br><span class="line">Swap:           63G        6.0G         58G</span><br></pre></td></tr></table></figure><ul><li>total：总内存</li><li>used：已用内存</li><li>free：空闲内存</li><li>buff&#x2F;cache：已使用的缓存</li><li>avaiable：已用内存</li></ul><h3 id="清理已使用的缓存"><a href="#清理已使用的缓存" class="headerlink" title="清理已使用的缓存"></a>清理已使用的缓存</h3><p>执行 sync 命令是为了确保文件系统的完整性，手动执行 sync 命令，将所有未写的系统缓冲区写到磁盘中，包含已修改的 i-node、已延迟的块 I&#x2F;O 和读写映射文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">sync</span>; <span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure><ul><li>Buffer 指的是 Linux 内存的：Buffer Cache (缓冲区缓存)</li><li>Cache 指的是 Linux 内存的：Page Cache (页面缓存)</li></ul><p>一般处理方式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 表示清除pagecache</span></span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。</span></span><br><span class="line"><span class="comment"># slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache</span></span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/vm/drop_caches  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 表示清除pagecache和slab分配器中的缓存对象</span></span><br><span class="line"><span class="built_in">echo</span> 3 &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7问题_删除文件时排除特定文件</title>
      <link href="/2022/04/07/centos/centos7%E9%97%AE%E9%A2%98_%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%97%B6%E6%8E%92%E9%99%A4%E7%89%B9%E5%AE%9A%E6%96%87%E4%BB%B6/"/>
      <url>/2022/04/07/centos/centos7%E9%97%AE%E9%A2%98_%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E6%97%B6%E6%8E%92%E9%99%A4%E7%89%B9%E5%AE%9A%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用命令在删除文件时排除或忽略某特定文件</p></blockquote><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>1）首先开启扩展通配符</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启通配符功能，并查看是否开启，例子 rm -f !(name.file)</span></span><br><span class="line">$ <span class="built_in">shopt</span> -s extglob</span><br><span class="line">$ <span class="built_in">shopt</span> -s</span><br><span class="line">checkwinsize   on</span><br><span class="line">cmdhist        on</span><br><span class="line">expand_aliases on</span><br><span class="line">extglob        on</span><br><span class="line">extquote       on</span><br><span class="line">force_fignore  on</span><br><span class="line">histappend     on</span><br><span class="line">hostcomplete   on</span><br><span class="line">interactive_commentson</span><br><span class="line">login_shell    on</span><br><span class="line">progcomp       on</span><br><span class="line">promptvars     on</span><br><span class="line">sourcepath     on</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> -rf !(1.tt)</span><br></pre></td></tr></table></figure><h3 id="命令法"><a href="#命令法" class="headerlink" title="命令法"></a>命令法</h3><p>1）在 test 文件夹下有 1.tt、1.png、index.html，现在要删除除 1.tt 之外的所有文件，则可以执行如下命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find . -not -name <span class="string">&quot;1.tt&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>也可以将 find 的结果通过 xargs 进行转换后再交给 rm 命令处理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find . -not -name <span class="string">&quot;1.tt&quot;</span> | xargs <span class="built_in">rm</span> -rf</span><br></pre></td></tr></table></figure><h3 id="脚本法"><a href="#脚本法" class="headerlink" title="脚本法"></a>脚本法</h3><p>1）编写 shell 脚本，然后执行</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">ls</span>`;<span class="keyword">do</span> <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$i</span>&quot;</span> != 1.tt ];<span class="keyword">then</span> <span class="built_in">rm</span> -rf <span class="variable">$i</span>;<span class="keyword">fi</span>;<span class="keyword">done</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置_服务器初始化操作</title>
      <link href="/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>&#x3D;&#x3D;–注意–&#x3D;&#x3D; 做任何操作前，请提前做好对应的文件备份，以防配置错误导致系统崩溃；</p></blockquote><p>1）关闭安全配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /bin/cp /etc/selinux/config /etc/selinux/config.bak.$(<span class="built_in">date</span> +%F_%T)</span><br><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld</span><br></pre></td></tr></table></figure><p>2）安装常用基础命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install vim expect screen lrzsz tree openssl openssh-clients openssl-devel openssh-server telnet iftop iotop sysstat wget ntpdate dos2unix lsof net-tools mtr gcc gcc-c++ cmake zip unzip git sudo psmisc</span><br></pre></td></tr></table></figure><p>3）配置阿里云源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mv</span> /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak.$(<span class="built_in">date</span> +%F_%T)</span><br><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">$ wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">$ yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure><p>4）同步服务器时间</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/sbin/ntpdate ntp1.aliyun.com &amp;&gt; /dev/null &amp;&amp;  hwclock --systohc &amp;&gt; /dev/null</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;*/5 * * * * /usr/sbin/ntpdate ntp1.aliyun.com &amp;&amp;  hwclock --systohc&quot;</span> &gt;&gt; /var/spool/cron/root</span><br><span class="line">$ systemctl restart crond</span><br></pre></td></tr></table></figure><p>5）修改样式，优化 history 记录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /var/log/command_history</span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PS1=<span class="string">&quot;[\e[1;34;40m\]\d \e[31;40m\]\u\e[32;40m\]@\e[35;40m\]\h \e[36;40m\]\W\[\e[0m\]]\\$ &quot;</span></span><br><span class="line"><span class="built_in">export</span> HISTSIZE=100</span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;&lt;%F %T-<span class="subst">$(who -u am i | awk &#x27;&#123;print $NF&#125;&#x27; | sed -e &#x27;s/[()</span>]//g&#x27;)-<span class="subst">$(whoami)</span>&gt;&quot;</span></span><br><span class="line"><span class="built_in">export</span> HISTORY_FILE=/var/log/command_history/`<span class="built_in">date</span> <span class="string">&#x27;+%F&#x27;</span>`.<span class="built_in">log</span></span><br><span class="line"><span class="built_in">export</span> PROMPT_COMMAND=<span class="string">&#x27;&#123; date &quot;+%F %T $(history 1 | &#123; read x cmd; echo &quot;$cmd !![USER:$USER FROM IP:$SSH_CLIENT PS:$SSH_TTY]&quot;; &#125;)&quot;; &#125; &gt;&gt; $HISTORY_FILE&#x27;</span></span><br><span class="line"><span class="built_in">export</span> TMOUT=300</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>6）调整用户级别的文件描述符数量及进程数量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /bin/cp /etc/security/limits.conf /etc/security/limits.conf.bak.$(<span class="built_in">date</span> +%F_%T)</span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/security/limits.conf &lt;&lt; <span class="string">EOF</span></span><br><span class="line"><span class="string">*   soft    nofile      65535</span></span><br><span class="line"><span class="string">*   hard    nofile      65535</span></span><br><span class="line"><span class="string">*   soft    nproc       65535</span></span><br><span class="line"><span class="string">*   hard    nproc       65535</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ /bin/cp /etc/security/limits.d/20-nproc.conf  /etc/security/limits.d/20-nproc.conf.bak.$(<span class="built_in">date</span> +%F_%T)</span><br><span class="line">$ <span class="built_in">echo</span> -e <span class="string">&#x27;*      soft    nproc     65535\nroot   soft    nproc     unlimited&#x27;</span> &gt; /etc/security/limits.d/20-nproc.conf</span><br></pre></td></tr></table></figure><p>7）修改字符集</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /bin/cp /etc/locale.conf /etc/locale.conf.bak.$(<span class="built_in">date</span> +%F_%T)</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;LANG=&quot;en_US.UTF-8&quot;&#x27;</span> &gt; /etc/locale.conf</span><br><span class="line">$ <span class="built_in">source</span> /etc/locale.conf</span><br></pre></td></tr></table></figure><p>8）内核参数优化</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /bin/cp /etc/sysctl.conf /etc/sysctl.conf.bak.$(<span class="built_in">date</span> +%F_%T)</span><br><span class="line">$ <span class="built_in">cat</span> &gt;&gt; /etc/sysctl.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">net.ipv4.ip_forward = 1   </span></span><br><span class="line"><span class="string">net.ipv4.conf.all.rp_filter = 1  </span></span><br><span class="line"><span class="string">net.ipv4.conf.default.rp_filter = 1 </span></span><br><span class="line"><span class="string">net.ipv4.conf.all.accept_source_route = 0  </span></span><br><span class="line"><span class="string">net.ipv4.conf.default.accept_source_route = 0   </span></span><br><span class="line"><span class="string">kernel.sysrq = 0   </span></span><br><span class="line"><span class="string">kernel.core_uses_pid = 1  </span></span><br><span class="line"><span class="string">kernel.msgmnb = 65536 </span></span><br><span class="line"><span class="string">kernel.msgmax = 65536  </span></span><br><span class="line"><span class="string">net.ipv6.conf.all.disable_ipv6 = 1</span></span><br><span class="line"><span class="string">net.ipv6.conf.default.disable_ipv6 = 1</span></span><br><span class="line"><span class="string">###调整系统级别的文件描述符的数量</span></span><br><span class="line"><span class="string">fs.file-max = 6553500</span></span><br><span class="line"><span class="string">###调整系统级别的允许线程的数量</span></span><br><span class="line"><span class="string">kernel.pid_max=1000000</span></span><br><span class="line"><span class="string">###内存资源使用相关设定</span></span><br><span class="line"><span class="string">vm.vfs_cache_pressure = 100000</span></span><br><span class="line"><span class="string">vm.max_map_count = 262144</span></span><br><span class="line"><span class="string">vm.swappiness = 0</span></span><br><span class="line"><span class="string">net.core.wmem_default = 8388608   </span></span><br><span class="line"><span class="string">net.core.rmem_default = 8388608  </span></span><br><span class="line"><span class="string">net.core.rmem_max = 16777216 </span></span><br><span class="line"><span class="string">net.core.wmem_max = 16777216 </span></span><br><span class="line"><span class="string">net.ipv4.tcp_rmem = 4096 8192 4194304 </span></span><br><span class="line"><span class="string">net.ipv4.tcp_wmem = 4096 8192 4194304    </span></span><br><span class="line"><span class="string">##应对DDOS攻击,TCP连接建立设置</span></span><br><span class="line"><span class="string">net.ipv4.tcp_syncookies = 1 </span></span><br><span class="line"><span class="string">net.ipv4.tcp_synack_retries = 1  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_syn_retries = 1   </span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_syn_backlog = 262144 </span></span><br><span class="line"><span class="string">##应对timewait过高,TCP连接断开设置</span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_tw_buckets = 6000  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_recycle = 1  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_tw_reuse = 1 </span></span><br><span class="line"><span class="string">net.ipv4.tcp_timestamps = 0   </span></span><br><span class="line"><span class="string">net.ipv4.tcp_fin_timeout = 30 </span></span><br><span class="line"><span class="string">net.ipv4.ip_local_port_range = 1024 65000</span></span><br><span class="line"><span class="string">###TCP keepalived 连接保鲜设置</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_time = 1200</span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_intvl = 15 </span></span><br><span class="line"><span class="string">net.ipv4.tcp_keepalive_probes = 5</span></span><br><span class="line"><span class="string">###其他TCP相关调节</span></span><br><span class="line"><span class="string">net.core.somaxconn = 8192 </span></span><br><span class="line"><span class="string">net.core.netdev_max_backlog = 262144  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_max_orphans = 3276800    </span></span><br><span class="line"><span class="string">net.ipv4.tcp_sack = 1  </span></span><br><span class="line"><span class="string">net.ipv4.tcp_window_scaling = 1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">$ sysctl -p &amp;&gt; /dev/null</span><br></pre></td></tr></table></figure><p>9）限制远程连接及设置策略</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /bin/cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak.$(<span class="built_in">date</span> +%F_%T)</span><br><span class="line">$ sed -i <span class="string">&#x27;s/\#Port 22/Port 65522/&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">$ sed -i <span class="string">&#x27;s/\#PermitRootLogin yes/PermitRootLogin no/&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">$ sed -i <span class="string">&#x27;s/\#PermitEmptyPasswords no/PermitEmptyPasswords no/&#x27;</span> /etc/ssh/sshd_config</span><br><span class="line">$ sed -i <span class="string">&#x27;s/\#UseDNS yes/UseDNS no/&#x27;</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置_时间同步服务</title>
      <link href="/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="实验背景"><a href="#实验背景" class="headerlink" title="实验背景"></a>实验背景</h3><p>最近部署 Kube-Prometheus 时，虽然已安装了 ntpdate 并同步了 <code>time2.aliyun.com</code> ,但还是提示 <code>Clock not synchronising.</code> 以此为例重新安装 chrony 并开启同步功能；</p><h3 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h3><p>chrony 是网络时间协议（NTP）的通用实现，具体介绍 &amp; 其它时间同步软件对比：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y chrony</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认配置文件</span></span><br><span class="line">$ <span class="built_in">cat</span> /etc/chrony.conf </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 pool.ntp.org 项目中的公共服务器。以server开，理论上想添加多少时间服务器都可以</span></span><br><span class="line"><span class="comment"># Use public servers from the pool.ntp.org project.</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line">server 0.centos.pool.ntp.org iburst</span><br><span class="line">server 1.centos.pool.ntp.org iburst</span><br><span class="line">server 2.centos.pool.ntp.org iburst</span><br><span class="line">server 3.centos.pool.ntp.org iburst</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下列为新增的公共服务器</span></span><br><span class="line"><span class="comment"># 国家服务器</span></span><br><span class="line">server 0.cn.pool.ntp.org</span><br><span class="line">server 1.cn.pool.ntp.org</span><br><span class="line">server 2.cn.pool.ntp.org</span><br><span class="line">server 3.cn.pool.ntp.org</span><br><span class="line"><span class="comment"># 阿里</span></span><br><span class="line">server ntp.aliyun.com</span><br><span class="line"><span class="comment"># 腾讯</span></span><br><span class="line">server time1.cloud.tencent.com</span><br><span class="line">server time2.cloud.tencent.com</span><br><span class="line">server time3.cloud.tencent.com</span><br><span class="line">server time4.cloud.tencent.com</span><br><span class="line">server time5.cloud.tencent.com</span><br><span class="line"><span class="comment"># 苹果</span></span><br><span class="line">server time.asia.apple.com</span><br><span class="line"><span class="comment"># 微软</span></span><br><span class="line">server time.windows.com</span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">server cn.ntp.org.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据实际时间计算出服务器增减时间的比率，然后记录到一个文件中，在系统重启后为系统做出最佳时间补偿调整</span></span><br><span class="line"><span class="comment"># Record the rate at which the system clock gains/losses time.</span></span><br><span class="line">driftfile /var/lib/chrony/drift</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果系统时钟的偏移量大于1秒，则允许系统时钟在前三次更新中步进</span></span><br><span class="line"><span class="comment"># Allow the system clock to be stepped in the first three updates</span></span><br><span class="line"><span class="comment"># if its offset is larger than 1 second.</span></span><br><span class="line">makestep 1.0 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用实时时钟（RTC）的内核同步</span></span><br><span class="line"><span class="comment"># Enable kernel synchronization of the real-time clock (RTC).</span></span><br><span class="line">rtcsync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过使用 hwtimestamp 指令启用硬件时间戳</span></span><br><span class="line"><span class="comment"># Enable hardware timestamping on all interfaces that support it.</span></span><br><span class="line"><span class="comment">#hwtimestamp *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Increase the minimum number of selectable sources required to adjust</span></span><br><span class="line"><span class="comment"># the system clock.</span></span><br><span class="line"><span class="comment">#minsources 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定 NTP 客户端地址，以允许或拒绝连接到扮演时钟服务器的机器</span></span><br><span class="line"><span class="comment"># Allow NTP client access from local network.</span></span><br><span class="line"><span class="comment">#allow 192.168.0.0/16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Serve time even if not synchronized to a time source.</span></span><br><span class="line"><span class="comment">#local stratum 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定包含 NTP 身份验证密钥的文件</span></span><br><span class="line"><span class="comment"># Specify file containing keys for NTP authentication.</span></span><br><span class="line"><span class="comment">#keyfile /etc/chrony.keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志文件的目录</span></span><br><span class="line"><span class="comment"># Specify directory for log files.</span></span><br><span class="line">logdir /var/log/chrony</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择日志文件要记录的信息</span></span><br><span class="line"><span class="comment"># Select which information is logged.</span></span><br><span class="line"><span class="comment">#log measurements statistics tracking</span></span><br></pre></td></tr></table></figure><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">$ systemctl start chronyd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> chronyd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前状态</span></span><br><span class="line">$ systemctl status chronyd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看亚洲时区</span></span><br><span class="line">$ timedatectl list-timezones | grep Asia</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line">$ timedatectl set-timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><h3 id="验证效果"><a href="#验证效果" class="headerlink" title="验证效果"></a>验证效果</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看现有的时间服务器</span></span><br><span class="line">$ chronyc sources -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看时间服务器状态</span></span><br><span class="line">$ chronyc sourcestats -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示时钟同步相关参数</span></span><br><span class="line">$ chronyc tracking</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前时区及时间</span></span><br><span class="line">$ timedatectl </span><br></pre></td></tr></table></figure><h3 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 ntpdate 同步时间</span></span><br><span class="line">$ ntpdate ntp.aliyun.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># chronyd 未启动时，如下命令同步时间</span></span><br><span class="line">$ chronyd -q <span class="string">&#x27;server pool.ntp.org iburst&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chronyd 启动时，使用如下命令同步时间</span></span><br><span class="line">$ chronyc -a <span class="string">&#x27;burst 4/4&#x27;</span> &amp;&amp; <span class="built_in">sleep</span> 10 &amp;&amp; chronyc -a makestep</span><br><span class="line"></span><br><span class="line"><span class="comment"># date 设置时间</span></span><br><span class="line">$ <span class="built_in">date</span> -s <span class="string">&#x27;2021-06-03 19:00:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭 ntp 同步后，才可以使用 timedatectl 进行时间设置</span></span><br><span class="line">$ timedatectl set-ntp <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日期和时间</span></span><br><span class="line">$ timedatectl set-time <span class="string">&#x27;2021-06-03 19:00:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日期</span></span><br><span class="line">$ timedatectl set-time <span class="string">&#x27;2021-06-03&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时间</span></span><br><span class="line">$ timedatectl set-time <span class="string">&#x27;19:00:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置完成后，再开启</span></span><br><span class="line">$ timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ntpdate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置_升级内核</title>
      <link href="/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/"/>
      <url>/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ELRepo 仓库是基于社区的企业级 Linux 仓库，提供对 RHEL 和 其他基于 RHEL 的 Linux 发行版（CentOS、Scientific、Fedora 等）的支持</p></blockquote><h3 id="确认内核"><a href="#确认内核" class="headerlink" title="确认内核"></a>确认内核</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux data 3.10.0-1160.el7.x86_64 <span class="comment">#1 SMP Mon Oct 19 16:18:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h3 id="内核安装"><a href="#内核安装" class="headerlink" title="内核安装"></a>内核安装</h3><ul><li>在线安装</li></ul><p>通过下载rpm 包进行安装。先导入 elrepo 的 key，然后安装 elrepo 的 yum 源：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">$ rpm -Uvh https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm</span><br><span class="line"><span class="comment"># --enablerepo选项开启CentOS系统上的指定仓库。默认开启的是 elrepo，这里用elrepo-kernel替换。</span></span><br></pre></td></tr></table></figure><p>仓库启用后，可以使用下面的命令列出可用的内核相关包，长期维护版本为 lt，主线最新版为 ml,接下来使用命令安装长期支持版本较为稳定</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum --disablerepo=<span class="string">&quot;*&quot;</span> --enablerepo=<span class="string">&quot;elrepo-kernel&quot;</span> list available</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * elrepo-kernel: hkg.mirror.rackspace.com</span><br><span class="line">Available Packages</span><br><span class="line">elrepo-release.noarch                          7.0-5.el7.elrepo                  elrepo-kernel</span><br><span class="line">kernel-lt-devel.x86_64                         5.4.182-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-lt-doc.noarch                           5.4.182-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-lt-headers.x86_64                       5.4.182-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-lt-tools.x86_64                         5.4.182-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-lt-tools-libs.x86_64                    5.4.182-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-lt-tools-libs-devel.x86_64              5.4.182-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-ml.x86_64                               5.16.12-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-ml-devel.x86_64                         5.16.12-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-ml-doc.noarch                           5.16.12-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-ml-headers.x86_64                       5.16.12-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-ml-tools.x86_64                         5.16.12-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-ml-tools-libs.x86_64                    5.16.12-1.el7.elrepo              elrepo-kernel</span><br><span class="line">kernel-ml-tools-libs-devel.x86_64              5.16.12-1.el7.elrepo              elrepo-kernel</span><br><span class="line">perf.x86_64                                    5.16.12-1.el7.elrepo              elrepo-kernel</span><br><span class="line">python-perf.x86_64                             5.16.12-1.el7.elrepo              elrepo-kernel</span><br><span class="line"></span><br><span class="line">$ yum -y install kernel-lt --enablerepo=elrepo-kernel</span><br></pre></td></tr></table></figure><ul><li>离线安装</li></ul><p>实际生产环境可能需要指定内核版本情况，可以通过下载 kernel image 的 rpm 包进行安装；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-lt-5.4.182-1.el7.elrepo.x86_64.rpm</span><br><span class="line">$ wget https://elrepo.org/linux/kernel/el7/x86_64/RPMS/kernel-lt-devel-5.4.182-1.el7.elrepo.x86_64.rpm</span><br><span class="line"></span><br><span class="line">$ rpm -ivh kernel-lt-5.4.182-1.el7.elrepo.x86_64.rpm</span><br><span class="line">$ rpm -ivh kernel-lt-devel-5.4.182-1.el7.elrepo.x86_64.rpm</span><br><span class="line">$ yum localinstall -y kernel-lt*</span><br></pre></td></tr></table></figure><h3 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h3><p>内核安装好后，需要设置为默认启动选项并重启后才会生效</p><p><strong>查看现有内核版本</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ awk -F\<span class="string">&#x27; &#x27;</span><span class="variable">$1</span>==<span class="string">&quot;menuentry &quot;</span> &#123;<span class="built_in">print</span> i++ <span class="string">&quot; : &quot;</span> <span class="variable">$2</span>&#125;<span class="string">&#x27; /etc/grub2.cfg</span></span><br><span class="line"><span class="string">0 : CentOS Linux (5.4.182-1.el7.elrepo.x86_64) 7 (Core)</span></span><br><span class="line"><span class="string">1 : CentOS Linux (3.10.0-1160.36.2.el7.x86_64) 7 (Core)</span></span><br><span class="line"><span class="string">2 : CentOS Linux (3.10.0-1160.el7.x86_64) 7 (Core)</span></span><br><span class="line"><span class="string">3 : CentOS Linux (0-rescue-678752f2ad574ce2b3d58a01705c580f) 7 (Core)</span></span><br></pre></td></tr></table></figure><ul><li>方法一：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过 grub2-set-default 0 命令设置</span></span><br><span class="line">$ grub2-set-default 0</span><br></pre></td></tr></table></figure><ul><li>方法二：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑 /etc/default/grub 文件</span></span><br><span class="line">$ vim /etc/default/grub</span><br><span class="line">GRUB_TIMEOUT=0      // 修改索引号为0</span><br><span class="line">GRUB_DISTRIBUTOR=<span class="string">&quot;<span class="subst">$(sed &#x27;s, release .*$,,g&#x27; /etc/system-release)</span>&quot;</span></span><br><span class="line">GRUB_DEFAULT=saved</span><br><span class="line">GRUB_DISABLE_SUBMENU=<span class="literal">true</span></span><br><span class="line">GRUB_TERMINAL_OUTPUT=<span class="string">&quot;console&quot;</span></span><br><span class="line">GRUB_CMDLINE_LINUX=<span class="string">&quot;crashkernel=auto rd.lvm.lv=centos_data/root rd.lvm.lv=centos_data/swap rhgb quiet&quot;</span></span><br><span class="line">GRUB_DISABLE_RECOVERY=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>设置<code>GRUB_DEFAULT=0</code>，通过上面查询显示的编号为 0 的内核作为默认内核：</p><p><strong>生成 grub 配置文件并重启</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grub2-mkconfig -o /boot/grub2/grub.cfg &amp;&amp; reboot now</span><br><span class="line"></span><br><span class="line">//验证内核信息</span><br><span class="line">$ <span class="built_in">uname</span> -a</span><br><span class="line">Linux update 5.4.182-1.el7.elrepo.x86_64 <span class="comment">#1 SMP Tue Mar 1 13:06:47 EST 2022 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure><h3 id="卸载旧版"><a href="#卸载旧版" class="headerlink" title="卸载旧版"></a>卸载旧版</h3><p>可选择性操作，查看现有的内核</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep kernel</span><br><span class="line">kernel-headers-3.10.0-1160.36.2.el7.x86_64</span><br><span class="line">kernel-3.10.0-1160.36.2.el7.x86_64</span><br><span class="line">kernel-ml-5.4.182-1.el7.elrepo.x86_64</span><br><span class="line">kernel-devel-3.10.0-1160.el7.x86_64</span><br><span class="line">kernel-tools-libs-3.10.0-1160.36.2.el7.x86_64</span><br><span class="line">kernel-tools-3.10.0-1160.36.2.el7.x86_64</span><br><span class="line">kernel-devel-3.10.0-1160.36.2.el7.x86_64</span><br><span class="line">kernel-3.10.0-1160.el7.x86_64</span><br></pre></td></tr></table></figure><ul><li>方法一：<strong>yum remove 删除旧内核的 RPM 包</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove kernel-headers-3.10.0-1160.36.2.el7.x86_64 \</span><br><span class="line">  kernel-3.10.0-1160.36.2.el7.x86_64 \</span><br><span class="line">  kernel-devel-3.10.0-1160.el7.x86_64 \</span><br><span class="line">  kernel-devel-3.10.0-1160.el7.x86_64 \</span><br><span class="line">  kernel-tools-libs-3.10.0-1160.36.2.el7.x86_64 \</span><br><span class="line">  kernel-tools-3.10.0-1160.36.2.el7.x86_64 \</span><br><span class="line">  kernel-devel-3.10.0-1160.36.2.el7.x86_64 \</span><br><span class="line">  kernel-3.10.0-1160.el7.x86_64</span><br></pre></td></tr></table></figure><ul><li>方法二：<strong>yum-utils 工具</strong>，设置保留内核数量</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install yum-utils</span><br><span class="line">$ package-cleanup --oldkernels --count=2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置_修改远程端口</title>
      <link href="/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3/"/>
      <url>/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Centos 7.x 安装好后，默认开启 ssh (22) 端口，和 root 远程访问权限，为了更安全的使用系统，最好是修改默认的远程端口并关闭 root 远程访问权限</p></blockquote><p>1）修改 <code>/etc/ssh/sshd_config</code> 文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># If you want to change the port on a SELinux system, you have to tell</span></span><br><span class="line"><span class="comment"># SELinux about this change.</span></span><br><span class="line"><span class="comment"># semanage port -a -t ssh_port_t -p tcp #PORTNUMBER</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Port 22                //取消注释，使用默认的22端口</span><br><span class="line">Port 65522             //增加新的远程端口65522</span><br><span class="line"><span class="comment">#AddressFamily any</span></span><br><span class="line"><span class="comment">#ListenAddress 0.0.0.0</span></span><br><span class="line"><span class="comment">#ListenAddress ::</span></span><br></pre></td></tr></table></figure><p>重启 sshd 服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart sshd.service</span><br></pre></td></tr></table></figure><blockquote><p>使用 65522 端口连接会发现，并不能连接终端设备，并且会报错误信息</p><p><code>Job for sshd.service failed because the control process exited with error code. See “systemctl status sshd.service” and “journalctl -xe” for details.</code></p></blockquote><p>按命令提示查看 sshd 状态发现，65522 端口绑定失败，没有生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl status sshd.service</span><br><span class="line">● sshd.service - OpenSSH server daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu 2022-02-10 15:59:21 CST; 16s ago</span><br><span class="line">     Docs: man:sshd(8)</span><br><span class="line">           man:sshd_config(5)</span><br><span class="line"> Main PID: 1854 (sshd)</span><br><span class="line">   CGroup: /system.slice/sshd.service</span><br><span class="line">           └─1854 /usr/sbin/sshd -D</span><br><span class="line"></span><br><span class="line">Feb 10 15:59:21 nextcloud systemd[1]: Stopped OpenSSH server daemon.</span><br><span class="line">Feb 10 15:59:21 nextcloud systemd[1]: Starting OpenSSH server daemon...</span><br><span class="line">Feb 10 15:59:21 nextcloud sshd[1854]: error: Bind to port 65522 on 0.0.0.0 failed: Permission denied.</span><br><span class="line">Feb 10 15:59:21 nextcloud sshd[1854]: error: Bind to port 65522 on :: failed: Permission denied.</span><br><span class="line">Feb 10 15:59:21 nextcloud sshd[1854]: Server listening on 0.0.0.0 port 22.</span><br><span class="line">Feb 10 15:59:21 nextcloud sshd[1854]: Server listening on :: port 22.</span><br><span class="line">Feb 10 15:59:21 nextcloud systemd[1]: Started OpenSSH server daemon.</span><br></pre></td></tr></table></figure><p>2）查看 SELinux 服务状态，并查看 ssh 服务端口绑定状态</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /usr/sbin/sestatus -v</span><br><span class="line">SELinux status:                 enabled             //状态为已开启</span><br><span class="line">SELinuxfs mount:                /sys/fs/selinux</span><br><span class="line">SELinux root directory:         /etc/selinux</span><br><span class="line">Loaded policy name:             targeted</span><br><span class="line">Current mode:                   enforcing</span><br><span class="line">Mode from config file:          enforcing</span><br><span class="line">Policy MLS status:              enabled</span><br><span class="line">Policy deny_unknown status:     allowed</span><br><span class="line">Max kernel policy version:      31</span><br><span class="line"></span><br><span class="line">$ semanage port -l | grep ssh</span><br><span class="line">ssh_port_t                     tcp      22          //服务端口只有22，并没新绑定的65522</span><br></pre></td></tr></table></figure><p>3）命令向 SELinux 添加 ssh 端口，并且查看相关服务状态 &amp; 端口</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ semanage port -a -t ssh_port_t -p tcp 65522</span><br><span class="line">$ semanage port -l | grep ssh</span><br><span class="line">ssh_port_t                     tcp      65522, 22</span><br><span class="line"></span><br><span class="line">$ systemctl restart sshd</span><br><span class="line">$ systemctl status sshd.service</span><br><span class="line">● sshd.service - OpenSSH server daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/sshd.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Thu 2022-02-10 16:02:54 CST; 1s ago</span><br><span class="line">     Docs: man:sshd(8)</span><br><span class="line">           man:sshd_config(5)</span><br><span class="line"> Main PID: 1916 (sshd)</span><br><span class="line">   CGroup: /system.slice/sshd.service</span><br><span class="line">           └─1916 /usr/sbin/sshd -D</span><br><span class="line"></span><br><span class="line">Feb 10 16:02:54 nextcloud systemd[1]: Starting OpenSSH server daemon...</span><br><span class="line">Feb 10 16:02:54 nextcloud sshd[1916]: Server listening on 0.0.0.0 port 65522.</span><br><span class="line">Feb 10 16:02:54 nextcloud sshd[1916]: Server listening on :: port 65522.</span><br><span class="line">Feb 10 16:02:54 nextcloud sshd[1916]: Server listening on 0.0.0.0 port 22.</span><br><span class="line">Feb 10 16:02:54 nextcloud systemd[1]: Started OpenSSH server daemon.</span><br><span class="line">Feb 10 16:02:54 nextcloud sshd[1916]: Server listening on :: port 22.</span><br></pre></td></tr></table></figure><p>重新查看 sshd 服务，发现此时 65522 端口已经在侦听状态</p><p>4）开启 firewall 端口</p><p>默认防火墙是阻止端口连接的，现 SSH 新端口也是无法连接的</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --list-all</span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: ens192</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports:                       //查看端口状态，未有开放的端口</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --add-port=65522/tcp --permanent</span><br><span class="line">$ firewall-cmd –reload</span><br><span class="line">success</span><br><span class="line">$ firewall-cmd --list-all</span><br><span class="line">public (active)</span><br><span class="line">  target: default</span><br><span class="line">  icmp-block-inversion: no</span><br><span class="line">  interfaces: ens192</span><br><span class="line">  sources: </span><br><span class="line">  services: dhcpv6-client ssh</span><br><span class="line">  ports: 65522/tcp</span><br><span class="line">  protocols: </span><br><span class="line">  masquerade: no</span><br><span class="line">  forward-ports: </span><br><span class="line">  source-ports: </span><br><span class="line">  icmp-blocks: </span><br><span class="line">  rich rules: </span><br></pre></td></tr></table></figure><p>添加完规则后，重启载入使用其生效，此时再查看服务状态 ports 已多了 65522&#x2F;tcp，现使用新端口远程连接，便可成功登陆系统</p><p>5）禁止 root 用户远程登录</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line"><span class="comment"># Authentication:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#LoginGraceTime 2m</span></span><br><span class="line">PermitRootLogin no           //取消注释，并设置为no</span><br><span class="line"><span class="comment">#StrictModes yes</span></span><br><span class="line"><span class="comment">#MaxAuthTries 6</span></span><br><span class="line"><span class="comment">#MaxSessions 10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置_修改终端字体颜色</title>
      <link href="/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E4%BF%AE%E6%94%B9%E7%BB%88%E7%AB%AF%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/"/>
      <url>/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_%E4%BF%AE%E6%94%B9%E7%BB%88%E7%AB%AF%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>PS1 是 Linux 终端用户的一个环境变量，用来定义命令行提示符的参数</p></blockquote><p>1）了解 PS1</p><p>在终端输入命令，可得到当前 PS1 的定义值</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PS1</span></span><br><span class="line">[\u@\h \W]\$</span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">PS1=<span class="string">&#x27;[\u@\h \W]\$ &#x27;</span>  的意思就是：[当前用户的账号名称@主机名的第一个名字 工作目录的最后一层目录名]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><strong>PS1的常用参数以及含义:</strong></p><blockquote><ul><li>\e：控制符\033</li><li>\u：当前用户账号名称</li><li>\h：主机名称简称，仅取主机名中的第一个名字</li><li>\H：完整主机名</li><li>\v ：BASH 的版本信息</li><li>\w：当前工作目录，完整的工作目录名称</li><li>\W：当前工作目录基名，利用 basename 取得工作目录名称，只显示最后一个目录名</li><li>\d ：日期，格式为 weekday month date，例如：”Mon Aug 1”</li><li>\t  ：24小时时间格式，如：HH：MM：SS</li><li>\T ：12小时时间格式，如：HH：MM</li><li>!    ：命令历史数</li><li>#  ：开机后命令历史数，下达的第几个命令</li><li>$  ：提示字符，如是 root 用户，提示符为 #，普通用户则为 $</li></ul></blockquote><p>2）颜色设置参数</p><p>在 PS1 中设置字符颜色的格式为：[\e[F;Bm]……..[\e[0m]，其中 “F“ 为字体颜色，编号为 30-37，“B” 为背景颜色，编号为 40-47,[\e[0m]作为颜色设定的结束，只需将对应数字套入设置格式中即可</p><p>颜色对照表：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">颜色对照表：</span><br><span class="line">F    B</span><br><span class="line">30   40   黑色</span><br><span class="line">31   41   红色</span><br><span class="line">32   42   绿色</span><br><span class="line">33   43   黄色</span><br><span class="line">34   44   蓝色</span><br><span class="line">35   45   紫红色</span><br><span class="line">36   46   青蓝色</span><br><span class="line">37   47   白色</span><br></pre></td></tr></table></figure><p>比如要设置命令行的格式为绿字黑底 ([\e[32;40m])，显示当前用户的账号名称 (\u)、主机的第一个名字 (\h)、完整的当前工作目录名称(\w)、24小时格式时间 (\t)，可以直接在命令行键入如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ PS1=<span class="string">&#x27;[\[\e[32;40m\]\u@\h \w \t]$ \[\e[0m\]&#x27;</span></span><br></pre></td></tr></table></figure><p>3）永久保存命令行样式</p><p>上面的设置的作用域只有当前终端的登陆有效，关闭终端或退出登录即刻失效。要想永久性的保存设置，需要修改 .bashrc 配置文件</p><ul><li><strong>修改.bashrc文件</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.bashrc</span><br><span class="line"><span class="comment"># 加入这一行</span></span><br><span class="line">PS1=<span class="string">&quot;\[\e[37;40m\][\[\e[32;40m\]\u\[\e[37;40m\]@\h \[\e[36;40m\]\w\[\e[0m\]]\\$ &quot;</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> .bashrc</span><br></pre></td></tr></table></figure><ul><li><strong>开机脚本启动</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;PS1=&quot;\[\e[37;40m\][\[\e[32;40m\]\u\[\e[37;40m\]@\h \[\e[36;40m\]\w\[\e[0m\]]\\$ &quot;&#x27;</span> &gt; /etc/profile.d/env.sh</span><br></pre></td></tr></table></figure><p><em>个人实例参考</em>，其中 [1;34;40m] 表示 [高亮;字体-蓝;背景-黑]</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;PS1=&quot;[\e[1;34;40m\]\d \e[31;40m\]\u\e[32;40m\]@\e[35;40m\]\h \e[36;40m\]\W\[\e[0m\]]\\$ &quot;&#x27;</span> &gt; /etc/profile.d/env.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置_Google Authenticator</title>
      <link href="/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_Google%20Authenticator/"/>
      <url>/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE_Google%20Authenticator/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一般服务器远程 ssh 都是采用密码或密钥的方式，而给服务器配置远程 ssh 登录的二次验证是一个非常必要的安全措施，即使知道了访问密码也无法登录机器。采用 Google Authenticator 作动态密钥做为二次验证，也解决了密钥无需常备身上的不便</p></blockquote><p><strong>Google Authenticator</strong> 是基于时间的动态密钥，其产生原理可以大概描述如下，服务器端和客户端都通过一段相同的key，加上当前时间，经过某种相同的算法产生动态密钥，<strong>每30秒进行一次计算</strong>。当进行登录时，如果输入的客户端的密钥和服务端当前维护的密钥一致则通过验证。</p><p>想要进行成功验证，必须要同时满足两个条件</p><ul><li>服务端和手机端的key相同</li><li>服务端和手机端的时间要同步到分钟级别</li></ul><h3 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h3><p>1）安装依赖</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y epel-* mercurial autoconf automake libtool pam-devel</span><br></pre></td></tr></table></figure><p>2）安装 Google Authenticator</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum list | grep authenticator</span><br><span class="line">google-authenticator.x86_64              1.04-1.el7                    @epel </span><br><span class="line"></span><br><span class="line">$ yum install google-authenticator</span><br></pre></td></tr></table></figure><p>3）配置 Google Authenticator</p><ul><li>添加 google_authenticator 认证模块</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ find / -name <span class="string">&#x27;pam_google_authenticator.so&#x27;</span></span><br><span class="line">/usr/lib64/security/pam_google_authenticator.so</span><br></pre></td></tr></table></figure><ul><li>sshd 添加 Google Authenticator 认证</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/pam.d/sshd</span><br><span class="line"><span class="comment"># 第一行添加</span></span><br><span class="line">auth required pam_google_authenticator.so</span><br><span class="line"><span class="comment"># 一旦所有用户都有OATH-TOTP令牌，可以从此行中删除nullok ，以使MFA成为强制性</span></span><br><span class="line">auth required pam_google_authenticator.so nullok</span><br></pre></td></tr></table></figure><p>如果你希望没有开启两步验证的账号还可以登录，则在此文件后面添加 nullok</p><ul><li>sshd 添加 pam 认证</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line">ChallengeResponseAuthentication <span class="built_in">yes</span></span><br><span class="line">UsePAM <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><ul><li>重启 SSH 服务</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart sshd.service</span><br></pre></td></tr></table></figure><p>4）切到需要使用 Google 身份验证器的账号，执行命令并且需要确认几点信息</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ google-authenticator</span><br><span class="line"><span class="comment">#这里会有一个二维码，需要在手机上下载 googleauthenticator APP扫码绑定</span></span><br><span class="line"><span class="comment">#安卓 IOS手机都可以在应用商店搜索安装</span></span><br><span class="line">...</span><br><span class="line">Your new secret key is: XQ2WB526GLPJ7SI64Z3RZISOEE</span><br><span class="line">Your verification code is 917990</span><br><span class="line">Your emergency scratch codes are:</span><br><span class="line">  42623319</span><br><span class="line">  72314571</span><br><span class="line">  14476695</span><br><span class="line">  95764389</span><br><span class="line">  38976136</span><br></pre></td></tr></table></figure><ul><li>是否配置基于时间的动态密钥，选择<code>y</code>，之后会出现超级大一个二维码，下面还会有一些小字</li></ul><blockquote><p>Do you want authentication tokens to be time-based (y&#x2F;n) y</p></blockquote><ul><li>是否将配置信息更新到自己家目录，选择<code>y</code>进行更新，这个文件里面就保存着上面的key信息，以防后续还有新的手机设备需要用到key</li></ul><blockquote><p>Do you want me to update your “&#x2F;root&#x2F;.google_authenticator” file? (y&#x2F;n) y</p></blockquote><ul><li>是否禁止同一密钥在30秒内被多次使用，如果想要更安全就选择<code>y</code>，如果想要更方便就选择<code>n</code></li></ul><blockquote><p>Do you want to disallow multiple uses of the same authentication<br>token? This restricts you to one login about every 30s, but it increases<br>your chances to notice or even prevent man-in-the-middle attacks (y&#x2F;n) y</p></blockquote><ul><li>是否允许前8次和后8次的动态密钥也有效，如果客户端和手机端都是基于网络的时间同步，选择<code>n</code>提高安全性</li></ul><blockquote><p>By default, a new token is generated every 30 seconds by the mobile app.<br>In order to compensate for possible time-skew between the client and the server,<br>we allow an extra token before and after the current time. This allows for a<br>time skew of up to 30 seconds between authentication server and client. If you<br>experience problems with poor time synchronization, you can increase the window<br>from its default size of 3 permitted codes (one previous code, the current<br>code, the next code) to 17 permitted codes (the 8 previous codes, the current<br>code, and the 8 next codes). This will permit for a time skew of up to 4 minutes<br>between client and server.<br>Do you want to do so? (y&#x2F;n) y</p></blockquote><ul><li>是否限制30秒内最多3次尝试，为了防止恶意试错，选择<code>y</code></li></ul><blockquote><p>If the computer that you are logging into isn’t hardened against brute-force<br>login attempts, you can enable rate-limiting for the authentication module.<br>By default, this limits attackers to no more than 3 login attempts every 30s.<br>Do you want to enable rate-limiting? (y&#x2F;n) y</p></blockquote><p>至此，服务端配置全部完毕，回到 root 重启服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart sshd</span><br></pre></td></tr></table></figure><h3 id="手机端配置"><a href="#手机端配置" class="headerlink" title="手机端配置"></a>手机端配置</h3><p>手机端的配置就简单得多，打开 app，点击右下角的加号，选择密钥方式输入 key(XQ2WB526GLPJ7SI64Z3RZISOEE) 或直接扫描二维码</p><h3 id="Xshell-登录验证"><a href="#Xshell-登录验证" class="headerlink" title="Xshell 登录验证"></a>Xshell 登录验证</h3><p>正常 ssh 登陆服务器，不过输入完用户名以后在这里选择交互键盘</p><ul><li>这里是用的密码登录，如果是密钥验证的话这里会有点不同</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220211100930994.png" alt="image-20220211100930994"></p><ul><li>点击下一步就会要求你输入动态密钥(查看下手机，输入6位数密钥)，之后输入密码即可成功登录服务器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220211101438548.png" alt="image-20220211101438548"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220211101156760.png" alt="image-20220211101156760"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220211101520517.png" alt="image-20220211101520517"></p><h3 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h3><blockquote><p>无法成功登录的一些常见问题，首先关于登录的一些报错都在<code>/var/log/secure</code>这个日志文件中，不管是什么场景登陆失败都可以先查看下失败日志，对症下药</p></blockquote><ul><li>时间不同步</li></ul><p>建议安装时间同步服务器或者安装一个自动同步时间的软件(例如：chrony)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y chrony</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now chronyd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置-升级Git版本</title>
      <link href="/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE-%E5%8D%87%E7%BA%A7Git%E7%89%88%E6%9C%AC/"/>
      <url>/2022/04/07/centos/centos7%E9%85%8D%E7%BD%AE-%E5%8D%87%E7%BA%A7Git%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>Centos 7 自带的 git 版本为 1.8.3.1，因版本过低，个别应用不兼容，在此进行升级更新；</p><p>1）确认当前版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure><p>2）配置存储库</p><p>启用 Wandisco GIT 存储库，在此之前先写入新 yum 存储库配置文件，在终端输入：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/yum.repos.d/wandisco-git.repo</span><br><span class="line">[wandisco-git]</span><br><span class="line">name=Wandisco GIT Repository</span><br><span class="line">baseurl=http://opensource.wandisco.com/centos/7/git/<span class="variable">$basearch</span>/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco</span><br></pre></td></tr></table></figure><p>3）导入存储库 GPG 密钥并安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo rpm --import http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco</span><br><span class="line">$ yum install git</span><br></pre></td></tr></table></figure><p>4）验证 Git 版本</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">git version 2.31.1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_主从DNS服务器</title>
      <link href="/2022/04/07/centos/centos7%E9%83%A8%E7%BD%B2_%E4%B8%BB%E4%BB%8EDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/04/07/centos/centos7%E9%83%A8%E7%BD%B2_%E4%B8%BB%E4%BB%8EDNS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DNS(Domain Name Service) 域名解析服务，就是将域名和 ip 之间做相应的转换，利用 TCP 和 UDP 的53号端口，UDP是供用户查询的，主从复制用TCP和UDP的53端口都用。</p></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>实例操作：以域名 yuikuen.top 为例配置一个 DNS 服务器，实现正反向解析</p><p>以 IP：188.188.4.44&#x2F;24 的 CentOS 7 服务器作为 DNS 服务器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/g&#x27;</span> /etc/sysconfig/selinux</span><br><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld</span><br><span class="line">或</span><br><span class="line">$ firewall-cmd --zone=public --add-port=53/tcp --permanent</span><br><span class="line">$ firewall-cmd --zone=public --add-port=53/udp --permanent</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="程序搭建"><a href="#程序搭建" class="headerlink" title="程序搭建"></a>程序搭建</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 安装<span class="built_in">bind</span>组件并设置开机启动</span><br><span class="line">$ yum -y install <span class="built_in">bind</span>*</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now named.service</span><br><span class="line"></span><br><span class="line">// 检查服务及端口是否正常</span><br><span class="line">$ ps -eaf|grep named</span><br><span class="line">named     1743     1  2 14:38 ?        00:00:00 /usr/sbin/named -u named -c /etc/named.conf</span><br><span class="line">root      1751  1448  0 14:38 pts/0    00:00:00 grep --color=auto named</span><br><span class="line"></span><br><span class="line">$ ss -nult|grep :53</span><br><span class="line">udp    UNCONN     0      0      127.0.0.1:53                    *:*                  </span><br><span class="line">udp    UNCONN     0      0         [::1]:53                 [::]:*                  </span><br><span class="line">tcp    LISTEN     0      10     127.0.0.1:53                    *:*                  </span><br><span class="line">tcp    LISTEN     0      10        [::1]:53                 [::]:* </span><br></pre></td></tr></table></figure><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><p>在配置Bind服务时，主要用到以下三个配置文件：</p><ul><li>主配置文件（&#x2F;etc&#x2F;named.conf）：用来定义bind服务程序的运行。</li><li>区域配置文件（&#x2F;etc&#x2F;named.rfc1912.zones）：用来保存域名和IP地址对应关系的所在位置。类似于图书的目录，对应着每个域和相应IP地址所在的具体位置，当需要查看或修改时，可根据这个位置找到相关文件。</li><li>数据配置文件目录（&#x2F;var&#x2F;named）：该目录用来保存域名和IP地址真实对应关系的数据配置文件。</li></ul><p>1）主配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 方法一</span><br><span class="line">$ sed -i -e <span class="string">&#x27;s/127.0.0.1/any/&#x27;</span> -e <span class="string">&#x27;s/localhost/any/&#x27;</span> /etc/named.conf</span><br><span class="line">// 方法二</span><br><span class="line">$ vim /etc/named.conf</span><br><span class="line">options &#123;</span><br><span class="line">        listen-on port 53 &#123; any; &#125;;       //监控所有IP,改成any</span><br><span class="line">        listen-on-v6 port 53 &#123; ::1; &#125;;</span><br><span class="line">        directory       <span class="string">&quot;/var/named&quot;</span>;     //数据库存放位置</span><br><span class="line">        dump-file       <span class="string">&quot;/var/named/data/cache_dump.db&quot;</span>;</span><br><span class="line">        statistics-file <span class="string">&quot;/var/named/data/named_stats.txt&quot;</span>;</span><br><span class="line">        memstatistics-file <span class="string">&quot;/var/named/data/named_mem_stats.txt&quot;</span>;</span><br><span class="line">        recursing-file  <span class="string">&quot;/var/named/data/named.recursing&quot;</span>;</span><br><span class="line">        secroots-file   <span class="string">&quot;/var/named/data/named.secroots&quot;</span>;</span><br><span class="line">        allow-query     &#123; any; &#125;;         //允许所有客户端访问区域数据库，实现解析,改成any</span><br><span class="line"></span><br><span class="line">        recursion <span class="built_in">yes</span>;</span><br><span class="line"></span><br><span class="line">        dnssec-enable <span class="built_in">yes</span>;</span><br><span class="line">        dnssec-validation <span class="built_in">yes</span>;</span><br></pre></td></tr></table></figure><p>2）区域配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/named.rfc1912.zones</span><br><span class="line">// 参考格式（正反一样）</span><br><span class="line">    zone <span class="string">&quot;ZONE_NAME&quot;</span> IN &#123;                      //添加自定义域</span><br><span class="line">            <span class="built_in">type</span> &#123;master|slave|hint|forward&#125;;  //指定类型，hint（根区域）、master（主区域）、slave（辅助区域）</span><br><span class="line">            file <span class="string">&quot;ZONE_NAME.zone&quot;</span>;             //指定区域数据库文件名</span><br><span class="line">            allow-update &#123; none; &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">// 正向解析</span><br><span class="line">    zone <span class="string">&quot;yuikuen.top&quot;</span> IN &#123;</span><br><span class="line">            <span class="built_in">type</span> master;</span><br><span class="line">            file <span class="string">&quot;yuikuen.top.zone&quot;</span>;</span><br><span class="line">            allow-update &#123; none; &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">// 反向解析</span><br><span class="line">    zone <span class="string">&quot;4.188.188.in-addr.arpa&quot;</span> IN &#123;</span><br><span class="line">            <span class="built_in">type</span> master;</span><br><span class="line">            file <span class="string">&quot;188.188.4.arpa&quot;</span>;</span><br><span class="line">            allow-update &#123; none; &#125;;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><p>3）数据配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /var/named</span><br><span class="line">// 正向解析，与区域文件名一致</span><br><span class="line">$ <span class="built_in">cp</span> -p named.localhost yuikuen.top.zone</span><br><span class="line">$ vim yuikuen.top.zone</span><br><span class="line">@       IN SOA  @ rname.invalid. (</span><br><span class="line">                                        0       ; serial      //更新序列号</span><br><span class="line">                                        1D      ; refresh     //更新时间</span><br><span class="line">                                        1H      ; retry       //重试时间</span><br><span class="line">                                        1W      ; expire      //失效时间</span><br><span class="line">                                        3H )    ; minimum     //无效解决记录的缓存时间</span><br><span class="line">        NS      @</span><br><span class="line">        A       127.0.0.1</span><br><span class="line">        AAAA    ::1</span><br><span class="line">www     IN      A   188.188.4.44</span><br><span class="line">@       IN      A   188.188.4.44</span><br><span class="line">mail    IN      A   188.188.4.44</span><br><span class="line">bbs     IN      A   188.188.4.44</span><br><span class="line">cloud   IN      A   188.188.4.244</span><br><span class="line"></span><br><span class="line">// 反向解析，与区域文件名一到致</span><br><span class="line">$ <span class="built_in">cp</span> -p named.loopback 188.188.4.arpa</span><br><span class="line">$ vim 188.188.4.arpa</span><br><span class="line"><span class="variable">$TTL</span> 1D</span><br><span class="line">@       IN SOA  @ rname.invalid. (</span><br><span class="line">                                        0       ; serial</span><br><span class="line">                                        1D      ; refresh</span><br><span class="line">                                        1H      ; retry</span><br><span class="line">                                        1W      ; expire</span><br><span class="line">                                        3H )    ; minimum</span><br><span class="line">        NS      @   </span><br><span class="line">        A       127.0.0.1</span><br><span class="line">        AAAA    ::1</span><br><span class="line">        PTR     localhost.</span><br><span class="line">44    IN    PTR    www.yuikuen.top.</span><br><span class="line">44    IN    PTR    yuikuen.top.</span><br><span class="line">44    IN    PTR    mail.yuikuen.top.</span><br><span class="line">44    IN    PTR    bbs.yuikuen.top.</span><br><span class="line">244   IN    PTR    cloud.yuikuen.top.</span><br></pre></td></tr></table></figure><h3 id="启动验证"><a href="#启动验证" class="headerlink" title="启动验证"></a>启动验证</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chown</span> named.named yuikuen.top.zone 188.188.4.arpa</span><br><span class="line"></span><br><span class="line">// 验证配置文件是否有格式问题</span><br><span class="line">$ named-checkconf /etc/named.conf</span><br><span class="line">$ named-checkzone yuikuen.top /var/named/yuikuen.top.zone</span><br><span class="line">$ named-checkzone 188.188.4.arpa /var/named/188.188.4.arpa</span><br><span class="line">$ rndc reload</span><br><span class="line">$ systemctl restart named</span><br></pre></td></tr></table></figure><p>客户端配置测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install bind-utils</span><br><span class="line"></span><br><span class="line">$ vim /etc/resolv.conf</span><br><span class="line">nameserver 188.188.4.44</span><br><span class="line"></span><br><span class="line">$ vim /etc/sysconfig/network-scripts/ifcfg-ens192</span><br><span class="line">DNS=<span class="string">&quot;188.188.4.44&quot;</span></span><br><span class="line"></span><br><span class="line">$ nslookup -pt=a www.yuikuen.top</span><br><span class="line">$ nslookup -pt=ptr 188.188.4.44</span><br><span class="line"></span><br><span class="line">$ dig www.yuikuen.top @188.188.4.44</span><br><span class="line">$ dig yuikuen.top @188.188.4.44</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">// windows客户端修改dns后进行访问测试；</span><br><span class="line">nslookup <span class="number">188</span>.<span class="number">188</span>.<span class="number">4</span>.<span class="number">244</span></span><br><span class="line">服务器:  bbs.yuikuen.top</span><br><span class="line"><span class="function">Address:  188.188.4.44</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">名称:    <span class="title">cloud.yuikuen.top</span></span></span><br><span class="line"><span class="function"><span class="title">Address</span>:  188.188.4.244</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">C</span>:\<span class="title">Users</span>\<span class="title">zynb9</span>&gt;<span class="title">nslookup</span> <span class="title">cloud.yuikuen.top</span></span></span><br><span class="line"><span class="function">服务器:  <span class="title">bbs.yuikuen.top</span></span></span><br><span class="line"><span class="function"><span class="title">Address</span>:  188.188.4.44</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">名称:    <span class="title">cloud.yuikuen.top</span></span></span><br><span class="line"><span class="function"><span class="title">Address</span>:  188.188.4.244</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220304140924714.png" alt="image-20220304140924714"></p><h3 id="主从配置"><a href="#主从配置" class="headerlink" title="主从配置"></a>主从配置</h3><blockquote><p>主从服务器好处是起到备份解析记录与负载均衡的作用，通过部署从服务器可减轻主服务器的负载压力，提升用户的查询效率；</p></blockquote><ul><li>准备两台服务器，IP：188.188.4.44(主)、IP：188.188.4.201(从)</li><li>前置环境及安装部署一致；</li></ul><p>1）主配置文件(从)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim </span><br><span class="line">options &#123;</span><br><span class="line">    listen-on port 53 &#123; any;&#125;;         <span class="comment">#监听本地所有的IP</span></span><br><span class="line">    allow-query       &#123; any;&#125;;         <span class="comment">#所有的客户端都可以查询区域数据库，实现解析 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）区域配置文件(主)</p><p>首先在主服务器的区域配置文件中允许该从服务器的更新请求，即修改allow-update {允许更新区域信息的主机地址;};参数，然后重启主服务器的 DNS 服务程序。主服务器确保区域数据文件中为每个从服务器配置 NS 记录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/named.rfc1912.zones</span><br><span class="line">// 增加正反向-从服务器配置</span><br><span class="line">zone <span class="string">&quot;yuikuen.top&quot;</span> IN &#123;</span><br><span class="line">    <span class="built_in">type</span> master;</span><br><span class="line">    file <span class="string">&quot;yuikuen.top.zone&quot;</span>;</span><br><span class="line">    allow-update &#123; 188.188.4.201; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">&quot;4.188.188.in-addr.arpa&quot;</span> IN &#123;</span><br><span class="line">    <span class="built_in">type</span> master;</span><br><span class="line">    file <span class="string">&quot;188.188.4.arpa&quot;</span>;</span><br><span class="line">    allow-update &#123; 188.188.4.201; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 刷新配置文件并重启服务</span><br><span class="line">$ rndc reload</span><br><span class="line">$ systemctl restart named</span><br></pre></td></tr></table></figure><p>3）数据配置文件(从)，从服务器无需写解析数据文件，直接从主服务器同步数据文件；</p><p><font color=red>注意：区域数据库文件 yuikuen.top.zone 在 centos6 是明文，而在 centos7 是密文</font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 从主服务器同步解析数据到从服务器上</span><br><span class="line">$ rndc reload</span><br><span class="line">server reload successful</span><br><span class="line">$ systemctl restart named</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cat</span> /etc/named.rfc1912.zones | <span class="built_in">tail</span> -n 11</span><br><span class="line">zone <span class="string">&quot;yuikuen.top&quot;</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> slave;</span><br><span class="line">        file <span class="string">&quot;slaves/yuikuen.top.zone&quot;</span>;</span><br><span class="line">        masters &#123; 188.188.4.44; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">zone <span class="string">&quot;4.188.188.in-addr.arpa&quot;</span> IN &#123;</span><br><span class="line">        <span class="built_in">type</span> slave;</span><br><span class="line">        file <span class="string">&quot;slaves/188.188.4.arpa&quot;</span>;</span><br><span class="line">        masters &#123; 188.188.4.44; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> /var/named/slaves</span><br><span class="line">188.188.4.arpa  yuikuen.top.zone</span><br></pre></td></tr></table></figure><p>4）为了展示效果，使用 win 客户端添加两个 dns 地址，模拟主服务器关机，dns 服务是否失效；</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220304150914824.png" alt="image-20220304150914824"></p><p>参考文章：</p>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 部署-Vsftpd服务</title>
      <link href="/2022/04/07/centos/centos7%E9%83%A8%E7%BD%B2_Vsftpd%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/04/07/centos/centos7%E9%83%A8%E7%BD%B2_Vsftpd%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>ESXi-6.7.0</li><li>CentOS 7.9 </li><li>vsftpd.x86_64 0:3.0.2-29.el7_9</li></ul><h3 id="VsFtpd-安装"><a href="#VsFtpd-安装" class="headerlink" title="VsFtpd 安装"></a>VsFtpd 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install vsftpd</span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now vsftpd</span><br></pre></td></tr></table></figure><p>1）修改配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf.bak</span><br><span class="line">$ grep -v <span class="string">&quot;#&quot;</span> /etc/vsftpd/vsftpd.conf.bak &gt; /etc/vsftpd/vsftpd.conf</span><br><span class="line"><span class="comment"># 注意不能有多余的空格</span></span><br><span class="line">$ vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">anonymous_enable=NO       <span class="comment">#是否开启匿名用户</span></span><br><span class="line">local_enable=YES          <span class="comment">#允许本机账号登录FTP</span></span><br><span class="line">write_enable=YES          <span class="comment">#允许账号都有写操作</span></span><br><span class="line">local_umask=022           <span class="comment">#文件目录权限：777-022=755，文件权限：666-022=644</span></span><br><span class="line">dirmessage_enable=YES     <span class="comment">#进入某个目录的时候，是否在客户端提示一下</span></span><br><span class="line">xferlog_enable=YES        <span class="comment">#日志记录</span></span><br><span class="line">connect_from_port_20=YES  <span class="comment">#开放port模式的20端口的连接</span></span><br><span class="line">xferlog_std_format=YES    <span class="comment">#日志成为std格式</span></span><br><span class="line">chroot_local_user=YES     <span class="comment">#限制用户只能在自己的目录活动</span></span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">ls_recurse_enable=NO      <span class="comment">#是否允许使用ls -R等命令</span></span><br><span class="line">listen=YES                <span class="comment">#监听ipv4端口，开了这个就说明vsftpd可以独立运行，不用依赖其他服务</span></span><br><span class="line">pam_service_name=vsftpd   <span class="comment">#pam模块的名称，放置在 /etc/pam.d/vsftpd ，认证用</span></span><br><span class="line">userlist_enable=YES       <span class="comment">#使用允许登录的名单</span></span><br><span class="line">userlist_deny=NO          <span class="comment">#限制允许登录的名单，前提是userlist_enable=YES</span></span><br><span class="line">allow_writeable_chroot=YES     <span class="comment">#允许限制在自己的目录活动的用户 拥有写权限</span></span><br><span class="line">tcp_wrappers=YES               <span class="comment">#Tcp wrappers ： Transmission Control Protocol (TCP) Wrappers 为由 inetd 生成的服务提供了增强的安全性。</span></span><br><span class="line">pasv_min_port=6661             <span class="comment">#被动模式起始端口，0为随机分配</span></span><br><span class="line">pasv_max_port=6666             <span class="comment">#被动模式结束端口，0为随机分配</span></span><br><span class="line">user_config_dir=/etc/vsftpd/userconfig    <span class="comment">#主目录配置，用户目录配置</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------------------</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">xferlog_std_format=YES</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">ls_recurse_enable=NO</span><br><span class="line">listen=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line">userlist_enable=YES</span><br><span class="line">userlist_deny=NO</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line">pasv_min_port=6661</span><br><span class="line">pasv_max_port=6666</span><br><span class="line">user_config_dir=/etc/vsftpd/userconfig</span><br></pre></td></tr></table></figure><p>修改后重启刷新配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl restart vsftpd</span><br></pre></td></tr></table></figure><p>安全建议：把默认端口 21 端口进行修改</p><p>2）新建账密</p><p>一般使用 <code>useradd -d newuser</code> 新建用户是可以登录系统的，这样会创建很多账密，会给系统带来安全隐患。因此需要将 <code>/etc/passwd</code> 中的用户改成 <code>/sbin/nologin</code> ，FTP 账密就无法登录了；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把ftp用户的shell改为/usr/bin/nologin,注意这里的bin不是sbin</span></span><br><span class="line">$ <span class="built_in">echo</span> /usr/bin/nologin &gt;&gt; /etc/shells</span><br><span class="line">$ useradd -s /usr/bin/nologin newuser</span><br><span class="line">$ passwd newuser</span><br></pre></td></tr></table></figure><p>3）开放权限目录</p><p>编辑 user_list ，主要功能是允许登录 FTP 的名单，一行一个用户，不能把多个写一行；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/vsftpd/user_list</span><br><span class="line"><span class="comment"># vsftpd userlist</span></span><br><span class="line"><span class="comment"># If userlist_deny=NO, only allow users in this file</span></span><br><span class="line"><span class="comment"># If userlist_deny=YES (default), never allow users in this file, and</span></span><br><span class="line"><span class="comment"># do not even prompt for a password.</span></span><br><span class="line"><span class="comment"># Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers</span></span><br><span class="line"><span class="comment"># for users that are denied.</span></span><br><span class="line">root</span><br><span class="line">bin</span><br><span class="line">daemon</span><br><span class="line">adm</span><br><span class="line">lp</span><br><span class="line"><span class="built_in">sync</span></span><br><span class="line">shutdown</span><br><span class="line">halt</span><br><span class="line">mail</span><br><span class="line">news</span><br><span class="line">uucp</span><br><span class="line">operator</span><br><span class="line">games</span><br><span class="line">nobody</span><br><span class="line">newuser</span><br></pre></td></tr></table></figure><p><strong>自定义用户主目录</strong></p><p>在创建 vsftpd 时，默认每个用户的主目录都会在 home，也就是说每个用户的主目录都是在不同的目录中，为了更好的集中管理，最好是将各用户作为子目录并且都集中在同一个主目录下；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@share home]<span class="comment"># ll</span></span><br><span class="line">total 0</span><br><span class="line">drwx------. 2 admin    admin    83 Nov 19 02:19 admin</span><br><span class="line">drwx------. 2 newuser  newuser  62 Nov 22 18:39 newuser</span><br></pre></td></tr></table></figure><p><strong>现把各用户主目录集中放到 <code>/home/ftp_data/username</code> 下集中管理</strong></p><p>之前 <strong><code>/etc/vsftpd/vsftpd.conf</code></strong> 配置文件中，有 <code>user_config_dir=/etc/vsftpd/userconfig</code> #主目录配置，用户目录配置。就是定义用户的主目录，userconfig 默认是没的，必须新建，给每个用户定义主目录配置文件放至到哪个目录下，实现自定义主目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /etc/vsftpd/userconfig</span><br><span class="line">$ vim /etc/vsftpd/userconfig/newuser</span><br><span class="line">local_root=/home/ftp_data/newuser</span><br></pre></td></tr></table></figure><p><font color=red>注意：配置文件名字必须与用户名相同</font></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /home/ftp_data/newuser</span><br><span class="line">$ <span class="built_in">chmod</span> -R 777 /home/ftp_data/newuser</span><br><span class="line">$ tree /home/</span><br><span class="line">/home/</span><br><span class="line">├── admin</span><br><span class="line">├── ftp_data</span><br><span class="line">│   └── newuser</span><br></pre></td></tr></table></figure><p>4）防火墙配置</p><p>建议将监听端口改成连续，如 6660，被动模式端口范围 6661~6666</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --add-port=6660-6666/tcp --permanent</span><br><span class="line">success</span><br><span class="line">$ firewall-cmd --reload</span><br><span class="line">success</span><br><span class="line">$ firewall-cmd --zone=public --query-port=6660-6666/tcp</span><br><span class="line"><span class="built_in">yes</span></span><br></pre></td></tr></table></figure><h3 id="配置扩展"><a href="#配置扩展" class="headerlink" title="配置扩展"></a>配置扩展</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">anonymous_enable=NO            <span class="comment">#是否开启匿名用户</span></span><br><span class="line">local_enable=YES               <span class="comment">#允许本机账号登录FTP</span></span><br><span class="line">write_enable=YES               <span class="comment">#允许账号都有写操作</span></span><br><span class="line">local_umask=022                <span class="comment">#文件目录权限：777-022=755，文件权限：666-022=644</span></span><br><span class="line"><span class="comment">#anon_upload_enable=YES        #匿名用户是否有上传文件的功能</span></span><br><span class="line"><span class="comment">#anon_mkdir_write_enable=YES   #匿名用户是否有创建文件夹的功能</span></span><br><span class="line">dirmessage_enable=YES          <span class="comment">#进入某个目录的时候，是否在客户端提示一下</span></span><br><span class="line">xferlog_enable=YES             <span class="comment">#日志记录</span></span><br><span class="line">connect_from_port_20=YES       <span class="comment">#开放port模式的20端口的连接</span></span><br><span class="line"><span class="comment">#chown_uploads=YES             #允许没人认领的文件上传的时候，更改掉所属用chown_uploads=YES的前提下，所属的用户</span></span><br><span class="line"><span class="comment">#xferlog_file=/var/log/xferlog #日志存放的地方</span></span><br><span class="line">xferlog_std_format=YES         <span class="comment">#日志成为std格式</span></span><br><span class="line"><span class="comment">#idle_session_timeout=600      #用户无操作服务器会主动断开连接，单位秒</span></span><br><span class="line"><span class="comment">#data_connection_timeout=120   #数据连接超时</span></span><br><span class="line"><span class="comment">#nopriv_user=ftpsecure         #以ftpsecure作为此一服务执行者的权限。因为ftpsecure的权限相当的低，因此即使被入侵，入侵者仅能取得nobody的权限！</span></span><br><span class="line"><span class="comment">#async_abor_enable=YES         #异步停用，由客户发起</span></span><br><span class="line"><span class="comment">#ascii_upload_enable=YES       #使用ascii格式上传文件</span></span><br><span class="line"><span class="comment">#ascii_download_enable=YES     #使用ascii格式下载文件</span></span><br><span class="line"><span class="comment">#ftpd_banner=Welcome to blah FTP service  #欢迎词</span></span><br><span class="line"><span class="comment">#deny_email_enable=YES         #以anonymous用户登录时候，是否禁止掉名单中的emaill密码。</span></span><br><span class="line"><span class="comment">#banned_email_file=/etc/vsftpd/banned_emails  #以anonymous用户登录时候，所禁止emaill密码名单。</span></span><br><span class="line">chroot_local_user=YES          <span class="comment">#限制用户只能在自己的目录活动</span></span><br><span class="line"><span class="comment">#chroot_list_enable=YES        #例外名单，如果是YES的话，上面的选项会跟这个名单反调（会被上面的选项影响）。</span></span><br><span class="line"><span class="comment">#chroot_list_file=/etc/vsftpd/chroot_list</span></span><br><span class="line">ls_recurse_enable=NO           <span class="comment">#是否允许使用ls -R等命令</span></span><br><span class="line">listen=YES                     <span class="comment">#监听ipv4端口，开了这个就说明vsftpd可以独立运行，不用依赖其他服务。</span></span><br><span class="line"><span class="comment">#listen_ipv6=YES               #监听ipv6端口</span></span><br><span class="line">pam_service_name=vsftpd        <span class="comment">#pam模块的名称，放置在/etc/pam.d/vsftpd，认证用</span></span><br><span class="line">userlist_enable=YES            <span class="comment">#使用允许登录的名单</span></span><br><span class="line">userlist_deny=NO               <span class="comment">#限制允许登录的名单，前提是userlist_enable=YES</span></span><br><span class="line">allow_writeable_chroot=YES     <span class="comment">#允许限制在自己的目录活动的用户拥有写权限</span></span><br><span class="line">tcp_wrappers=YES               <span class="comment">#Tcp wrappers ： Transmission Control Protocol (TCP) Wrappers 为由 inetd 生成的服务提供了增强的安全性。</span></span><br><span class="line">user_config_dir=/etc/vsftpd/userconfig  <span class="comment">#主目录配置，用户目录配置</span></span><br><span class="line"> </span><br><span class="line">pasv_min_port=6661 （0为随机分配）</span><br><span class="line">pasv_max_port=6665（这两项定义了可以同时执行下载链接的数量。）</span><br><span class="line"><span class="comment">#被动模式端口范围：注意：linux客户端默认使用被动模式，windows客户端默认使用主动模式。在ftp客户端中执行&quot;passive&quot;来切换数据通道的模式。也可以使用&quot;ftp -A ip&quot;直接使用主动模式。主动模式、被动模式是有客户端来指定的。</span></span><br></pre></td></tr></table></figure><h3 id="懒人脚本"><a href="#懒人脚本" class="headerlink" title="懒人脚本"></a>懒人脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">FTP服务器用户创建脚本</span></span><br><span class="line"></span><br><span class="line">read -p &quot;请输入要新建的用户：&quot; newuser</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断新建用户是否存在</span></span><br><span class="line">id $newuser &amp;&gt;/dev/null</span><br><span class="line">if [ $? -ne 0 ]</span><br><span class="line">then</span><br><span class="line">        useradd -s /usr/bin/nologin $newuser</span><br><span class="line">echo &quot;用户$newuser成功创建&quot;</span><br><span class="line">passwd $newuser</span><br><span class="line">else</span><br><span class="line">echo &quot;用户$newuser已存在或者输入用户名错误，程序已终止&quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断允许登陆用户列表文件是否存在</span></span><br><span class="line">if [ -f &quot;/etc/vsftpd/user_list&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;正在将$newuser写入允许登陆列表配置文件&quot;</span><br><span class="line">echo $newuser &gt;&gt;/etc/vsftpd/user_list    #把用户名写入到这个文件</span><br><span class="line">else</span><br><span class="line">echo &quot;文件不存在，没有/etc/vsftpd/user_list这个文件&quot;</span><br><span class="line">echo &quot;程序终止&quot;</span><br><span class="line">exit </span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断用户主目录配置文件是否存在</span></span><br><span class="line">if [ -f &quot;/etc/vsftpd/userconfig/$newuser&quot; ]</span><br><span class="line">then</span><br><span class="line">echo &quot;用户主目录配置文件已存在，程序终止&quot;</span><br><span class="line">echo &quot;请确定此文件/etc/vsftpd/userconfig/$newuser，并查看/home/ftp_data/路径下是否存在此用户的数据&quot;</span><br><span class="line">exit</span><br><span class="line">else</span><br><span class="line">echo &quot;正在创建$newuser主目录配置文件&quot;</span><br><span class="line">touch /etc/vsftpd/userconfig/$newuser  #新建用户主目录配置文件</span><br><span class="line">echo &quot;local_root=/home/ftp_data/$newuser&quot;&gt;&gt;/etc/vsftpd/userconfig/$newuser  #写入用户主目录信息</span><br><span class="line">echo &quot;用户$newuser主目录信息文件配置完毕&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">判断用户主目录是否存在</span></span><br><span class="line">if [ ! -d &quot;/home/ftp_data/$newuser&quot; ];then</span><br><span class="line">mkdir -p /home/ftp_data/$newuser</span><br><span class="line">echo &quot;用户$newuser主目录创建完毕&quot;</span><br><span class="line">chmod -R 777 /home/ftp_data/$newuser</span><br><span class="line">echo &quot;用户$newuser主目录权限配置完毕&quot;</span><br><span class="line">echo &quot;$newuser用户FTP账号配置完毕，请登陆测试&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;/home/ftp_data/$newuser目录已经存在,请检查此目录内是否有重要文件，防止数据被覆盖程序已终止&quot;</span><br><span class="line">exit</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsftpd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Nodejs-TLS</title>
      <link href="/2022/04/07/centos/centos7%E9%83%A8%E7%BD%B2_Nodejs-TLS/"/>
      <url>/2022/04/07/centos/centos7%E9%83%A8%E7%BD%B2_Nodejs-TLS/</url>
      
        <content type="html"><![CDATA[<p>到 <a href="http://nodejs.cn/download/">Nodejs 中文网</a> 查看下载地址，并且下载相应的安装包；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://npm.taobao.org/mirrors/node/v16.9.1/node-v16.9.1-linux-x64.tar.xz</span><br><span class="line"></span><br><span class="line">$ xz -d node-v16.9.1-linux-x64.tar.xz</span><br><span class="line">$ tar -xf node-v16.9.1-linux-x64.tar -C /usr/local/nodejs</span><br></pre></td></tr></table></figure><p>建立软连接，变为全局</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">ln</span> -s /usr/local/nodejs/node-v16.9.1-linux-x64/bin/npm /usr/local/bin/</span><br><span class="line">$ <span class="built_in">ln</span> -s /usr/local/nodejs/node-v16.9.1-linux-x64/bin/node /usr/local/bin/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># 在文末增加下列内容</span></span><br><span class="line"><span class="comment"># nodejs</span></span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/usr/local/nodejs/node-v16.9.1-linux-x64</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$NODE_HOME</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>配置生效，并测试</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line">$ node -v</span><br><span class="line">v16.9.1</span><br><span class="line">$ npm -v</span><br><span class="line">6.14.15</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Cockpit可视化监控</title>
      <link href="/2022/04/07/centos/centos7%E9%83%A8%E7%BD%B2_Cockpit%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%8E%A7/"/>
      <url>/2022/04/07/centos/centos7%E9%83%A8%E7%BD%B2_Cockpit%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Cockpit 是一款基于 Web 的可视化管理工具，对一些常见的命令行管理操作都有界面支持，比如用户管理、防火墙管理、服务器资源监控等</p></blockquote><p>测试环境为 CentOS 7 版本，此外 Cockpit 还支持其他 Linux 发行版，请自行体验；另程序可根据需要进行扩展，实现各应用监控</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220222102955180.png" alt="image-20220222102955180"></p><h3 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h3><p>1）Cockpit 安装(具体功能介绍请参考官网)</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y cockpit cockpit-storaged cockpit-networkmanager cockpit-packagekit cockpit-ostree cockpit-machines cockpit-podman cockpit-selinux cockpit-kdump cockpit-sosreport cockpit-docker cockpit-dashboard</span><br></pre></td></tr></table></figure><p>可自行安装其他扩展来实现功能</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y cockpit-composer cockpit-certificates cockpit-389-ds cockpit-session-recording cockpit-subscriptions cockpit-ovirt-dashboard cockpit-zfs</span><br></pre></td></tr></table></figure><p>2）启动程序并开放服务</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> --now cockpit.socket</span><br><span class="line">$ firewall-cmd --permanent --zone=public --add-service=cockpit</span><br><span class="line">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>3）浏览器访问 9090 端口测试</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220222104321113.png" alt="image-20220222104321113"></p><p>用户名和密码就是 linux 服务器的用户名和密码，登陆即可进入首页</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220222105217234.png" alt="image-20220222105217234"></p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><ul><li>仪表盘</li></ul><p>其他服务器也安装 Cockpit，可将机器添加到监控列表</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220222105350227.png" alt="image-20220222105350227"></p><ul><li>网络监控</li></ul><p>可配置防火墙，开放或禁止服务、端口等功能</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220222105559611.png" alt="image-20220222105559611"></p><ul><li>虚拟容器</li></ul><p>运行镜像以及拉取新镜像</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220222105729292.png" alt="image-20220222105729292"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220222105856251.png" alt="image-20220222105856251"></p><ul><li>还有更多的功能，在此就不再逐一介绍，请自行搭建体验。</li></ul>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cockpit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装_Lynis安全审计</title>
      <link href="/2022/04/07/centos/centos7%E5%AE%89%E8%A3%85_Lynis%E5%AE%89%E8%A3%85%E5%AE%A1%E8%AE%A1/"/>
      <url>/2022/04/07/centos/centos7%E5%AE%89%E8%A3%85_Lynis%E5%AE%89%E8%A3%85%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Lynis</strong> 是一款 Linux 系统的安全审计以及加固工具，能够进行深层次的安全扫描，其目的是检测潜在的时间并对未来的系统加固提供建议，扫描一般系统信息，脆弱软件包以及潜在的错误配置,执行全面的运行状况扫描，以支持系统强化和合规性测试 </p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220312101221307.png" alt="image-20220312101221307"></p><p>1）配置 <strong>Lynis</strong> 源，并安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/yum.repos.d/cisofy-lynis.repo</span><br><span class="line">[lynis]</span><br><span class="line">name=CISOfy Software - Lynis package</span><br><span class="line">baseurl=https://packages.cisofy.com/community/lynis/rpm/</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.cisofy.com/keys/cisofy-software-rpms-public.key</span><br><span class="line">gpgcheck=1</span><br><span class="line">priority=2</span><br><span class="line"></span><br><span class="line">$ yum install lynis -y</span><br><span class="line">$ lynis --version</span><br><span class="line">3.0.7</span><br></pre></td></tr></table></figure><p>2）<strong>Lynis</strong> 功能</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看帮忙命令及显示可以使用的命令</span></span><br><span class="line">$ lynis -h</span><br><span class="line"></span><br><span class="line">$ lynis show commands</span><br><span class="line">Commands:</span><br><span class="line">lynis audit</span><br><span class="line">lynis configure</span><br><span class="line">lynis generate</span><br><span class="line">lynis show</span><br><span class="line">lynis update</span><br><span class="line">lynis upload-only</span><br><span class="line"></span><br><span class="line"><span class="comment"># 审计配置文件，内有说明如何执行安全审计</span></span><br><span class="line">$ lynis show profiles</span><br><span class="line">/etc/lynis/default.prf</span><br><span class="line"></span><br><span class="line">$ lynis show settings</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220312102609203.png" alt="image-20220312102609203"></p><p>3）执行安全审计，对系统执行基本安全审计，请运行以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lynis audit system</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220312103100316.png" alt="image-20220312103100316"></p><p>执行此命令时，Lynis 会探测系统和软件配置是否存在任何潜在弱点或漏洞，然后将审计信息记录在 <code>/var/log/lynis.log</code> 文件中，并将审计报告存储在 <code>/var/log/lynis-report.dat</code> 文件中</p><p>4）执行系统检查的关键领域：</p><ol><li>引导文件</li><li>软件包</li><li>配置文件</li><li>与日志记录和审计相关的目录</li></ol><blockquote><p>在系统审计过程中，你很可能会遇到不同的审计结果，关键字有Found、OK、Not Found、Suggestion、Warning等，应特别注意产生<code>Warning</code>的系统检查。应采取措施解决所描述的问题，因为这可能会破坏系统的安全性，在扫描结束时，将收到一份审计摘要，其中包括可以用来加强系统安全性的警告和建议。每条建议都会有一个 URL连接，里面记录着如何解决问题</p></blockquote><p>5）查看特定审计的详细信息</p><p>每个系统检查都与一个唯一的测试 ID 相关联，例如，查看我们在摘要部分收到的警告和建议详细信息，请运行命令，其中 <code>SSH-7408</code> 是测试 ID</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lynis show details SSH-7408</span><br></pre></td></tr></table></figure><p>运行以下命令可以查看各种测试 ID</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lynis show tests</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220312103712493.png" alt="image-20220312103712493"></p>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lynis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7安装_FFmpeg视频解码</title>
      <link href="/2022/04/07/centos/centos7%E5%AE%89%E8%A3%85_FFmpeg%E8%A7%86%E9%A2%91%E8%A7%A3%E7%A0%81/"/>
      <url>/2022/04/07/centos/centos7%E5%AE%89%E8%A3%85_FFmpeg%E8%A7%86%E9%A2%91%E8%A7%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<ul><li>方法一：</li></ul><p>1）安装依赖环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install gcc yasm</span><br></pre></td></tr></table></figure><p>2）下载程序包</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220216135348639.png" alt="image-20220216135348639"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://johnvansickle.com/ffmpeg/release-source/ffmpeg-4.1.tar.xz</span><br><span class="line">$ tar -xf ffmpeg-4.1.tar.xz &amp;&amp; <span class="built_in">cd</span> ./ffmpeg-4.1</span><br></pre></td></tr></table></figure><p>3）编译安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./configure --enable-shared --prefix=/usr/local/ffmpeg</span><br><span class="line">$ make &amp;&amp;　make install</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/ld.so.conf</span><br><span class="line">/usr/local/ffmpeg/lib/</span><br><span class="line">$ ldconfig</span><br></pre></td></tr></table></figure><p>4）配置环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line">PATH=<span class="variable">$PATH</span>:/usr/local/ffmpeg/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line">$ ffmpeg -version</span><br></pre></td></tr></table></figure><ul><li>方法二：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz</span><br><span class="line">$ tar -xf ffmpeg-git-amd64-static.tar.xz &amp;&amp; <span class="built_in">cd</span> ./ffmpeg-git-20220108-amd64-static</span><br><span class="line">$ <span class="built_in">mv</span> ffmpeg ffprobe /usr/bin/</span><br><span class="line"></span><br><span class="line">ffmpeg -version</span><br><span class="line">ffmpeg version N-60236-gffb000fff8-static https://johnvansickle.com/ffmpeg/  Copyright (c) 2000-2022 the FFmpeg developers</span><br><span class="line">built with gcc 8 (Debian 8.3.0-6)</span><br><span class="line">configuration: --enable-gpl --enable-version3 --enable-static --disable-debug --disable-ffplay --disable-indev=sndio --disable-outdev=sndio --cc=gcc --enable-fontconfig --enable-frei0r --enable-gnutls --enable-gmp --enable-libgme --enable-gray --enable-libaom --enable-libfribidi --enable-libass --enable-libvmaf --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librubberband --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libvorbis --enable-libopus --enable-libtheora --enable-libvidstab --enable-libvo-amrwbenc --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libdav1d --enable-libxvid --enable-libzvbi --enable-libzimg</span><br><span class="line">libavutil      57. 18.100 / 57. 18.100</span><br><span class="line">libavcodec     59. 20.100 / 59. 20.100</span><br><span class="line">libavformat    59. 17.100 / 59. 17.100</span><br><span class="line">libavdevice    59.  5.100 / 59.  5.100</span><br><span class="line">libavfilter     8. 25.100 /  8. 25.100</span><br><span class="line">libswscale      6.  5.100 /  6.  5.100</span><br><span class="line">libswresample   4.  4.100 /  4.  4.100</span><br><span class="line">libpostproc    56.  4.100 / 56.  4.100</span><br><span class="line"></span><br><span class="line">$ ffprobe -version</span><br><span class="line">ffprobe version N-60236-gffb000fff8-static https://johnvansickle.com/ffmpeg/  Copyright (c) 2007-2022 the FFmpeg developers</span><br><span class="line">built with gcc 8 (Debian 8.3.0-6)</span><br><span class="line">configuration: --enable-gpl --enable-version3 --enable-static --disable-debug --disable-ffplay --disable-indev=sndio --disable-outdev=sndio --cc=gcc --enable-fontconfig --enable-frei0r --enable-gnutls --enable-gmp --enable-libgme --enable-gray --enable-libaom --enable-libfribidi --enable-libass --enable-libvmaf --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-librubberband --enable-libsoxr --enable-libspeex --enable-libsrt --enable-libvorbis --enable-libopus --enable-libtheora --enable-libvidstab --enable-libvo-amrwbenc --enable-libvpx --enable-libwebp --enable-libx264 --enable-libx265 --enable-libxml2 --enable-libdav1d --enable-libxvid --enable-libzvbi --enable-libzimg</span><br><span class="line">libavutil      57. 18.100 / 57. 18.100</span><br><span class="line">libavcodec     59. 20.100 / 59. 20.100</span><br><span class="line">libavformat    59. 17.100 / 59. 17.100</span><br><span class="line">libavdevice    59.  5.100 / 59.  5.100</span><br><span class="line">libavfilter     8. 25.100 /  8. 25.100</span><br><span class="line">libswscale      6.  5.100 /  6.  5.100</span><br><span class="line">libswresample   4.  4.100 /  4.  4.100</span><br><span class="line">libpostproc    56.  4.100 / 56.  4.100</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7配置_本地Repo仓库</title>
      <link href="/2022/04/07/centos/cenots7%E9%85%8D%E7%BD%AE_%E6%9C%AC%E5%9C%B0Repo%E4%BB%93%E5%BA%93/"/>
      <url>/2022/04/07/centos/cenots7%E9%85%8D%E7%BD%AE_%E6%9C%AC%E5%9C%B0Repo%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><ul><li>ESXi-6.7.0</li><li>CentOS 7.9</li></ul><h3 id="网络-YUM-源"><a href="#网络-YUM-源" class="headerlink" title="网络 YUM 源"></a>网络 YUM 源</h3><p>一般 Linux 使用的都是官方源，如果需要使用第三方工具，就需要使用其官方的或第三方提供的 YUM 仓库；</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/yum.repos.d/CentOS-Base.repo </span><br><span class="line"><span class="comment"># CentOS-Base.repo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class="line"><span class="comment"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class="line"><span class="comment"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class="line"><span class="comment"># unless you are manually picking other mirrors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the </span></span><br><span class="line"><span class="comment"># remarked out baseurl= line instead.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;<span class="built_in">arch</span>=<span class="variable">$basearch</span>&amp;repo=os&amp;infra=<span class="variable">$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/os/$basearch/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#released updates </span></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates</span><br><span class="line">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;<span class="built_in">arch</span>=<span class="variable">$basearch</span>&amp;repo=updates&amp;infra=<span class="variable">$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/updates/$basearch/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that may be useful</span></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras</span><br><span class="line">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;<span class="built_in">arch</span>=<span class="variable">$basearch</span>&amp;repo=extras&amp;infra=<span class="variable">$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/extras/$basearch/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Plus</span><br><span class="line">mirrorlist=http://mirrorlist.centos.org/?release=<span class="variable">$releasever</span>&amp;<span class="built_in">arch</span>=<span class="variable">$basearch</span>&amp;repo=centosplus&amp;infra=<span class="variable">$infra</span></span><br><span class="line"><span class="comment">#baseurl=http://mirror.centos.org/centos/$releasever/centosplus/$basearch/</span></span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><ul><li>更换 YUM 源地址，此处以阿里云源为例</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">$ <span class="built_in">cat</span> /etc/yum.repos.d/CentOS-Base.repo </span><br><span class="line"><span class="comment"># CentOS-Base.repo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class="line"><span class="comment"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class="line"><span class="comment"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class="line"><span class="comment"># unless you are manually picking other mirrors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the </span></span><br><span class="line"><span class="comment"># remarked out baseurl= line instead.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"> </span><br><span class="line">[base]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Base - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/os/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line"><span class="comment">#released updates </span></span><br><span class="line">[updates]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Updates - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/updates/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line"><span class="comment">#additional packages that may be useful</span></span><br><span class="line">[extras]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Extras - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></span><br><span class="line">[centosplus]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Plus - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br><span class="line"> </span><br><span class="line"><span class="comment">#contrib - packages by Centos Users</span></span><br><span class="line">[contrib]</span><br><span class="line">name=CentOS-<span class="variable">$releasever</span> - Contrib - mirrors.aliyun.com</span><br><span class="line">failovermethod=priority</span><br><span class="line">baseurl=http://mirrors.aliyun.com/centos/<span class="variable">$releasever</span>/contrib/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.aliyuncs.com/centos/<span class="variable">$releasever</span>/contrib/<span class="variable">$basearch</span>/</span><br><span class="line">        http://mirrors.cloud.aliyuncs.com/centos/<span class="variable">$releasever</span>/contrib/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7</span><br></pre></td></tr></table></figure><ul><li><p>或自行添加网络 Yum 源</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim mysql-community.repo</span><br><span class="line">[mysql57-community]</span><br><span class="line">name=MySQL 5.7 Community Server</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/mysql/yum/mysql57-community-el7/ <span class="comment">#这个连接决定了可以安装的版本</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure></li><li><p>根据系统内核版本修改配置，将文件中的 <code>$releasever</code> 全部替换为版本号 7 ，直接更新缓存</p></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">:%s/<span class="variable">$releasever</span>/7/g</span><br><span class="line">$ yum clean all</span><br><span class="line">$ yum makecache</span><br></pre></td></tr></table></figure><h3 id="本地-YUM-源"><a href="#本地-YUM-源" class="headerlink" title="本地 YUM 源"></a>本地 YUM 源</h3><p>Yum 工具，只需要连接互联网，就可直接使用，但有时服务器是无外网权限就需要自定义本地 Yum 源实现下载安装。</p><ul><li>默认是官方源，本地源需要自行创建一个以 <code>.repo</code> 结尾的文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[base]                <span class="comment"># 仓库名称，不能重复</span></span><br><span class="line">name=cdrom            <span class="comment"># 注释信息</span></span><br><span class="line">baseurl=file:///mnt/  <span class="comment"># yum源的地址</span></span><br><span class="line">enabled=1             <span class="comment"># 是否启用，默认为启动，0则为禁用</span></span><br><span class="line">gpgcheck=0            <span class="comment"># 是否检查源合法性，为1时要配置gpgkey</span></span><br><span class="line">gpgkey=URL            <span class="comment"># 根据上配置来判定是否需要填写</span></span><br></pre></td></tr></table></figure><ul><li>创建 repo 配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> /etc/yum.repos.d/Local-MySQL.repo</span><br><span class="line">[mysql-tsinghua]</span><br><span class="line">name=Localhost MySQL repo</span><br><span class="line">baseurl=http://188.188.3.80/sinath/mirrors/tsinghua/mysql/yum/mysql57-community-el7/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"><span class="comment">#gpgkey=URL</span></span><br></pre></td></tr></table></figure><ul><li>编写同步脚本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install rsync</span><br><span class="line">$ vim mirrors-tsinghua.sh</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line">/usr/bin/rsync -artP rsync://mirrors.tuna.tsinghua.edu.cn/mysql/ /home/ftp_data/sinath/mirrors/tsinghua/mysql/</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x mirrors-tsinghua.sh</span><br><span class="line">$ sh mirrors-tsinghua.sh</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211122191853287.png" alt="image-20211122191853287"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211122191905100.png" alt="image-20211122191905100"></p><ul><li>下载后清除缓存，列出 yum 软件列表或安装测试</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum clean all</span><br><span class="line">$ yum makecache</span><br><span class="line">$ yum list</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> centos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> repo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装_i3桌面及配置</title>
      <link href="/2022/04/07/archlinux/archlinux%E5%AE%89%E8%A3%85_i3%E6%A1%8C%E9%9D%A2%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/04/07/archlinux/archlinux%E5%AE%89%E8%A3%85_i3%E6%A1%8C%E9%9D%A2%E5%8F%8A%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>首先通过安装介质启动到 live 环境，选第一个，以 root 身份进入一个虚拟控制台，默认 shell 为 zsh</p><p><code>Arch Linux install medium (x86_64,UEFI)</code></p><p>1）判断无线网卡是否被锁</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rfkill list  </span><br><span class="line">--------------</span><br><span class="line">0: phy0: Wireless LAN</span><br><span class="line">    Soft blocked: <span class="built_in">yes</span></span><br><span class="line">    Hard blocked: <span class="built_in">yes</span></span><br><span class="line">//如果出现以上内容，可以调节网卡开关打开它。如果没有开关，那就使用以下命令：</span><br><span class="line">$ rfkill unblock wifi</span><br></pre></td></tr></table></figure><p>2）连接网络</p><p>方法一：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip add</span><br><span class="line">$ ip <span class="built_in">link</span> <span class="built_in">set</span> wlan0 up</span><br><span class="line">$ iwctl </span><br><span class="line">[iwd]device list  //列出无线设备名称</span><br><span class="line">[iwd]station wlan0(&lt;device&gt;) scan  //扫描当前环境下的网络</span><br><span class="line">[iwd]station &lt;device&gt; get-networks  //会显示扫描到的所有网络</span><br><span class="line">[iwd]station &lt;device&gt; connect &lt;network name&gt;</span><br><span class="line">password</span><br><span class="line">[iwd]<span class="built_in">exit</span></span><br><span class="line">$ ping www.baidu.com</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ip <span class="built_in">link</span> <span class="built_in">set</span> wlan0 up</span><br><span class="line">$ iwlist wlan0 scan | grep ESSID</span><br><span class="line">$ wpa_passphrase ESSID passwd &gt; internet.conf</span><br><span class="line">$ wpa_supplicant -c internet.conf -i wlan0 &amp;</span><br><span class="line">$ dhcpcd &amp;</span><br><span class="line">$ ping www.baidu.com</span><br></pre></td></tr></table></figure><p>3）停止 reflector 服务，禁止自动更新</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl stop reflector.service</span><br></pre></td></tr></table></figure><p>4）同步网络时间</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ timedatectl set-ntp <span class="literal">true</span></span><br><span class="line">$ timedatectl status</span><br></pre></td></tr></table></figure><p>5）更新为国内镜像源</p><p>方法一：</p><p>将中国源排在前列，中科大、清华</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ reflector --country China --age 72 --<span class="built_in">sort</span> rate --protocol https --save /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>6）通过ssh链接当前主机进行(可选)</p><ol><li>在当前安装环境下输入 <code>passwd</code>  为当前环境设置一个密码，不用太长，两三位就可以了。输入时不会显示。</li><li>执行 <code>ip -brief address</code> 查看当前ip地址，一般是 192.168.&lt;…&gt;.&lt;…&gt; IP 地址后面斜杠之后的掩码位不用哦</li><li>准备另外一台设备，应当使该设备与安装主机在同一局域网内，就是俩设备都连着同一个 WiFi</li></ol><p>几种设备的连接方式：</p><p> Windows：在终端输入：<code>ssh -o StrictHostKeyChecking=no root@&lt;刚刚查看的IP地址&gt;</code></p><p> Linux&amp;macOS：在终端输入：<code>ssh -o StrictHostKeyChecking=no root@&lt;刚刚查看的IP地址&gt;</code></p><p>7）磁盘分区[仅供参考]</p><p>方法一：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cfdisk /dev/sda</span><br><span class="line">EFI分区       300 MB</span><br><span class="line">swap分区      4GB</span><br><span class="line">root分区      剩余空间</span><br></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ fdisk /dev/sda</span><br><span class="line">g //创建gpt格式</span><br><span class="line">n //创建分区</span><br><span class="line">p //显示分区情况</span><br><span class="line">w //保存并退出</span><br><span class="line">EFI分区       300 MB</span><br><span class="line">swap分区      4GB</span><br><span class="line">root分区      剩余空间</span><br></pre></td></tr></table></figure><p>8）格式化</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkfs.vfat /dev/sda1</span><br><span class="line">$ mkswap /dev/sda2</span><br><span class="line">$ swapon /dev/sda2</span><br><span class="line">$ mkfs.ext4 /dev/sda3</span><br></pre></td></tr></table></figure><p>9）安装系统</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#挂载</span></span><br><span class="line">$ mount /dev/sda3 /mnt</span><br><span class="line">$ <span class="built_in">mkdir</span> /mnt/boot</span><br><span class="line">$ mount /dev/sda1 /mnt/boot</span><br><span class="line"></span><br><span class="line">$ pacstrap /mnt linux linux-firmware linux-headers base base-devel vi vim git bash-completion</span><br></pre></td></tr></table></figure><p>10）生成系统表文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line">$ <span class="built_in">cat</span> /mnt/etc/fstab</span><br></pre></td></tr></table></figure><p>11）进入新系统配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ arch-chroot /mnt</span><br><span class="line"></span><br><span class="line">//时区</span><br><span class="line">$ <span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">$ hwclock --systohc</span><br><span class="line"></span><br><span class="line">//系统语言</span><br><span class="line">$ vim /etc/locale.gen</span><br><span class="line"><span class="comment">#将以下两行取消注释</span></span><br><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line"></span><br><span class="line">//生成本地语言信息</span><br><span class="line">$ locale-gen</span><br><span class="line">//设置语言环境变量</span><br><span class="line">$ vim /etc/locale.conf</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line"></span><br><span class="line">//主机名</span><br><span class="line">$ vim /etc/hostname</span><br><span class="line">archlinux</span><br><span class="line">//hosts</span><br><span class="line">$ vim /etc/hosts</span><br><span class="line">127.0.0.1   localhost</span><br><span class="line">::1         localhost</span><br><span class="line">127.0.1.1   archlinux.localdomain archlinux</span><br><span class="line"></span><br><span class="line">//安装相关包</span><br><span class="line">$ pacman -S grub efibootmgr efivar networkmanager intel-ucode</span><br><span class="line">$ pacman -S neovim dhcpcd zsh zsh-completions wpa_supplicant iwd sudo netctl</span><br></pre></td></tr></table></figure><p>12）配置 grub</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ grub-install /dev/sda</span><br><span class="line">$ grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>13）激活启用 NetworkManager</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> NetworkManager</span><br></pre></td></tr></table></figure><p>14）设置 root 密码并重启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ passwd</span><br><span class="line">$ <span class="built_in">exit</span></span><br><span class="line">$ umount /mnt/boot/efi</span><br><span class="line">$ umount /mnt</span><br><span class="line">$ reboot</span><br></pre></td></tr></table></figure><p>15）联网</p><p>方法一：</p><blockquote><p>输入 <code>nmtui</code> 选择 “Activate a connection” 回车进入，选择你需要的网络，连接后back返回即可</p></blockquote><p>方法二：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -Syu wpa_supplicant dhcpcd netctl //确保已安装</span><br><span class="line">$ <span class="built_in">cd</span> /etc/netctl/examples  //找示例配置文件</span><br><span class="line">$ ip <span class="built_in">link</span> <span class="built_in">set</span> wlan0 up</span><br><span class="line">$ iwlist wlan0 scan | grep ESSID //记下无线网卡名称和wifi匹配名称</span><br><span class="line">$ <span class="built_in">cp</span> /etc/netctl/example/wireless-wpa /etc/netctl/somedescriptivename</span><br><span class="line">$ vim /etc/netctl/somedescriptivename  //配置ssid\passwd,注意使用权限<span class="built_in">chmod</span> 600禁止非root用户访问</span><br><span class="line">$ systemctl <span class="built_in">enable</span> netctl-auto@wlan0.service   //注意wifi名称</span><br><span class="line">$ dhcpcd &amp;</span><br><span class="line">$ ip add</span><br><span class="line">$ ping www.baidu.com</span><br></pre></td></tr></table></figure><p>注意事项：<br>当您进入接入点范围时，netctl 将自动连接到 <code>/etc/netctl</code> 中的任何配置文件<br>此设置仅适用于使用 Security&#x3D;wpa-configsection 和的配置文件 Security&#x3D;wpa。<br>禁用所有以前启用的 wifi 配置文件，netctl disable profilename 否则启用 netctl-auto 后，netctl 会在启动时将它们启动两次。</p><p>16）开启 ssh 连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -S openssh</span><br><span class="line">$ systemctl <span class="built_in">enable</span> sshd</span><br><span class="line">$ ip -brief address</span><br><span class="line"></span><br><span class="line">$ vim /etc/ssh/sshd_config</span><br><span class="line">--------------------------------------</span><br><span class="line"><span class="comment"># 将下列的语句值改为yes</span></span><br><span class="line">PermitRootLogin <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>其他终端进行连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -o StrictHostKeyChecking=no root@&lt;刚刚查看的IP地址&gt;</span><br></pre></td></tr></table></figure><p>17）配置 base shell 环境变量</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/skel/.bashrc</span><br><span class="line">-------------------------------</span><br><span class="line"><span class="comment"># 在alias行上面添加</span></span><br><span class="line"><span class="built_in">export</span> EDITOR=vim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续添加</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">&#x27;grep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> egrep=<span class="string">&#x27;egrep --color=auto&#x27;</span></span><br><span class="line"><span class="built_in">alias</span> fgrep=<span class="string">&#x27;fgrep --color=auto&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在alias 之后添加脚本</span></span><br><span class="line">[ ! -e ~/.dircolors ] &amp;&amp; <span class="built_in">eval</span> $(<span class="built_in">dircolors</span> -p &gt; ~/.dircolors)</span><br><span class="line">[ -e /bin/dircolors ] &amp;&amp; <span class="built_in">eval</span> $(<span class="built_in">dircolors</span> -b ~/.dircolors)</span><br><span class="line"><span class="comment"># 保存退出</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cp</span> /etc/skel/.bashrc ~</span><br></pre></td></tr></table></figure><p>18）添加标准用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ useradd --create-home sinath</span><br><span class="line">$ passwd sinath</span><br><span class="line">$ usermod -aG wheel,<span class="built_in">users</span>,storage,power,lp,adm,optical sinath</span><br><span class="line">$ visudo</span><br><span class="line">//取消注释</span><br><span class="line">%wheel ALL=(ALL) ALL</span><br></pre></td></tr></table></figure><p>19）添加 ArchlinuxCN 存储库</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/pacman.conf</span><br><span class="line">--------------------------------------</span><br><span class="line">把[multilib]这两行注释删除,再添加源</span><br><span class="line"><span class="comment"># 在最后添加</span></span><br><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span>   </span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line">$ pacman -Syy</span><br><span class="line">$ pacman -Syu &amp;&amp; pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><p><strong>注</strong> ： 如果以上更新密钥步骤出现错误，就是那种连着一串 ERROR 的情况，请执行以下步骤</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> -rf /etc/pacman.c/gnupg</span><br><span class="line">$ pacman-key --init</span><br><span class="line">$ pacman-key --populate archlinux archlinuxcn</span><br><span class="line">$ pacman -Syy</span><br></pre></td></tr></table></figure><p>20）显卡、声卡配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#检查显卡</span></span><br><span class="line">$ lspci | grep -e VGA -e 3D</span><br><span class="line"></span><br><span class="line"><span class="comment">#不同显卡驱动---核显不用安装(可略)</span></span><br><span class="line">$ sudo pacman -S nvidia nvidia-utils <span class="comment"># NVIDIA </span></span><br><span class="line">$ sudo pacman -S xf86-video-amdgpu   <span class="comment"># AMD</span></span><br><span class="line">$ sudo pacman -S xf86-video-intel    <span class="comment"># Intel</span></span><br><span class="line"></span><br><span class="line">$ pacman -S xf86-video-intel vulkan-intel mesa</span><br><span class="line">$ pacman -S alsa-utils pulseaudio pulseaudio-bluetooth cups</span><br></pre></td></tr></table></figure><p>21）安装字体</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S adobe-source-code-pro-fonts adobe-source-han-serif-cn-fonts wqy-zenhei wqy-microhei noto-fonts-cjk noto-fonts-emoji noto-fonts-extra</span><br></pre></td></tr></table></figure><p>打开字体引擎</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile.d/freetype2.sh</span><br><span class="line">--------------------------------------------</span><br><span class="line"><span class="comment"># 取消注释最后一句</span></span><br><span class="line"><span class="built_in">export</span> FREETYPE_PROPERTIES=<span class="string">&quot;truetype:interpreter-version=40&quot;</span></span><br></pre></td></tr></table></figure><p>22）桌面环境</p><ul><li>安装 Display Server [开源]</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -S xorg xorg-server xorg-xinit</span><br><span class="line">可选</span><br><span class="line">$ <span class="built_in">cp</span> /etc/X11/xinit/xinitrc ~/.xinitrc</span><br><span class="line">//注释<span class="comment">#twm &amp;以下内容</span></span><br><span class="line">最后添加</span><br><span class="line"><span class="built_in">exec</span> i3</span><br></pre></td></tr></table></figure><ul><li>安装 Display Manager</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//Gnome</span><br><span class="line">$ pacman -S gdm</span><br><span class="line">//KDE</span><br><span class="line">$ pacman -S sddm</span><br><span class="line">//Xfce|DDE</span><br><span class="line">$ pacman -S lightdm lightdm-gtk-greeter</span><br></pre></td></tr></table></figure><p>设置开机自启</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> gdm</span><br><span class="line">//使用哪个就将gdm替换成安装的dm</span><br></pre></td></tr></table></figure><ul><li>安装i3</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -S i3</span><br><span class="line">$ pacman -S i3-gaps i3blocks i3lock i3status //可选</span><br></pre></td></tr></table></figure><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.config/i3/config</span><br><span class="line">修改默认的mod快捷键，默认是windows键，改为Alt键</span><br><span class="line">把<span class="built_in">set</span> <span class="variable">$mod</span> Mod4改为<span class="built_in">set</span> <span class="variable">$mod</span> Mod1</span><br><span class="line"></span><br><span class="line">默认i3的快捷键冲突了，修改配置文件，搜索+d,注释掉第二个</span><br><span class="line">bindsym <span class="variable">$mod</span>+d <span class="built_in">exec</span> --no-startup dmenu run</span><br><span class="line">bindsym <span class="variable">$mod</span>+d <span class="built_in">exec</span> --no-startup-id i3-dmenu-desktop</span><br></pre></td></tr></table></figure><p>23）软件</p><ul><li>输入法</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S fcitx5-im fcitx5-chinese-addons fcitx5-rime fcitx5-configtool</span><br><span class="line">$ sudo vim ~/.pam_environment</span><br><span class="line"><span class="comment"># 添加以下内容</span></span><br><span class="line">INPUT_METHOD  DEFAULT=fcitx5</span><br><span class="line">GTK_IM_MODULE DEFAULT=fcitx5</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx5</span><br><span class="line">XMODIFIERS    DEFAULT=<span class="string">&quot;@im=fcitx5&quot;</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">$ sudo vim ~/.xprofile</span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx5</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx5</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx</span><br><span class="line">fcitx5 &amp;</span><br><span class="line"></span><br><span class="line">$ vim ~/.config/i3/config</span><br><span class="line"><span class="comment"># Autostart applictions</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id fcitx</span><br></pre></td></tr></table></figure><ul><li>仿终端</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S alacritty</span><br><span class="line">$ vim ~/.config/i3/config</span><br><span class="line"><span class="comment"># start a terminal 修改默认终端</span></span><br><span class="line">bindsym <span class="variable">$mod</span>+Return <span class="built_in">exec</span> alacritty</span><br><span class="line"></span><br><span class="line">$ alacritty --version</span><br><span class="line">$ sudo <span class="built_in">mkdir</span> ~/.config/alacritty</span><br><span class="line">$ <span class="built_in">cd</span> ~/.config/alacritty</span><br><span class="line">$ wget https://github.com/alacritty/alacritty/releases/download/v0.9.0/alacritty.yml</span><br><span class="line">$ vim alacritty.yml</span><br><span class="line">background_opacity: 0.8 //背景透明度</span><br></pre></td></tr></table></figure><ul><li>窗口透明</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S picom</span><br><span class="line">$ vim ~/.config/i3/config</span><br><span class="line">$ exec_always --no-startup-id picom -b</span><br><span class="line">$ <span class="built_in">cp</span> /etc/xdg/picom.conf .</span><br><span class="line">$ sudo vim ~/.config/picom.conf</span><br><span class="line"><span class="comment"># Opacity</span></span><br><span class="line">inactive-opacity = 0.7;</span><br><span class="line">active-opacity = 0.9;</span><br></pre></td></tr></table></figure><ul><li>浏览器</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S firefox </span><br><span class="line">$ yay -S google-chrome</span><br><span class="line">$ vim ~/.config/i3/config</span><br><span class="line">bindsym <span class="variable">$mod</span>+F2 <span class="built_in">exec</span> google-chrome-stable</span><br><span class="line">bindsym <span class="variable">$mod</span>+F3 <span class="built_in">exec</span> firefox</span><br></pre></td></tr></table></figure><ul><li>压缩软件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S unrar unzip p7zip</span><br></pre></td></tr></table></figure><ul><li>文件管理器</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S pcmanfm  //图形文件管理器</span><br><span class="line">$ sudo pacman -S ranger   //命令行文件管理器</span><br></pre></td></tr></table></figure><ul><li>状态栏</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S polybar</span><br><span class="line">$ sudo <span class="built_in">mkdir</span> ~/.config/polybar</span><br><span class="line">$ <span class="built_in">cp</span> /usr/share/doc/polybar/config <span class="variable">$HOME</span>/.config/polybar/config</span><br><span class="line">$ sudo <span class="built_in">touch</span> <span class="variable">$HOME</span>/.config/polybar/config/launch.sh</span><br><span class="line">$ sudo <span class="built_in">chmod</span> +x launch.sh</span><br><span class="line">$ vim launch.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 终端可能已经有在运行的实例</span></span><br><span class="line">killall -q polybar</span><br><span class="line"><span class="comment"># 等待进程被终止</span></span><br><span class="line"><span class="keyword">while</span> pgrep -u <span class="variable">$UID</span> -x polybar &gt;/dev/null; <span class="keyword">do</span> <span class="built_in">sleep</span> 1; <span class="keyword">done</span></span><br><span class="line"><span class="comment"># 运行Polybar，使用默认的配置文件路径 ~/.config/polybar/config</span></span><br><span class="line">polybar mybar &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Polybar runing...&quot;</span></span><br></pre></td></tr></table></figure><p>注释i3自带的bar或i3blocks配置使用polybar启动脚本启动polybar</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.config/i3/config</span><br><span class="line">//增加开机启动脚本</span><br><span class="line">exec_always --no-startup-id <span class="variable">$HOME</span>/.config/polybar/launch.sh</span><br><span class="line">//注释原bar</span><br><span class="line"><span class="comment">#bar &#123;</span></span><br><span class="line"><span class="comment">#i3bar_command i3bar --transparency</span></span><br><span class="line"><span class="comment">#status_command i3blocks</span></span><br><span class="line"><span class="comment">#position top</span></span><br><span class="line"><span class="comment">#colors &#123;</span></span><br><span class="line"><span class="comment">#background #9370DB3F</span></span><br><span class="line"><span class="comment">#separator #778899</span></span><br><span class="line"><span class="comment">## 使用RGBA颜色  #边界 背景 文本</span></span><br><span class="line"><span class="comment">#focused_workspace  #778899A5 #87CEEBA5 #FFFAFAF5</span></span><br><span class="line"><span class="comment">#inactive_workspace #7788993F #AFEEEE3F #FFFAFAF5</span></span><br><span class="line"><span class="comment">#urgent_workspace   #80808072 #FF450072 #FFFAFAF5</span></span><br><span class="line"><span class="comment">#    &#125;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><p>polybar配置参考</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim ~/.config/polybar/config</span><br><span class="line">[colors]</span><br><span class="line">background = <span class="comment">#b0222222  //修改背景透明</span></span><br><span class="line">[bar/mybar]             //修改成自身bar</span><br><span class="line">modules-right = alsa eth cpu memory <span class="built_in">date</span> bluetooth //状态栏显示字体</span><br><span class="line">[module/eth]            //有线/无线网卡名称</span><br><span class="line">interface = enp4s0f0</span><br></pre></td></tr></table></figure><ul><li>rofi快捷启动(dmenu)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S rofi</span><br><span class="line">bindsym <span class="variable">$mod</span>+d <span class="built_in">exec</span> --no-startup-id rofi -show drun //(可选)</span><br><span class="line">bindsym <span class="variable">$mod</span>+space --release <span class="built_in">exec</span> <span class="string">&quot;rofi -combi-modi drun,window,ssh -show combi -modi combi&quot;</span></span><br></pre></td></tr></table></figure><ul><li>feh墙纸</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S feh</span><br><span class="line">$ <span class="built_in">mkdir</span> ~/Pictures/backgrounds  //壁纸保存路径</span><br><span class="line">$ <span class="built_in">ls</span> /usr/bin/feh</span><br><span class="line">$ <span class="built_in">mkdir</span> -p ~/.config/feh</span><br><span class="line">$ vim ~/.config/wallpic.sh</span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    find ~/Pictures/backgrounds/ -<span class="built_in">type</span> f \( -name <span class="string">&#x27;*.jpg&#x27;</span> -o -name <span class="string">&#x27;*.png&#x27;</span> \) -print0 |</span><br><span class="line">        <span class="built_in">shuf</span> -n1 -z | xargs -0 feh --bg-scale</span><br><span class="line">    <span class="built_in">sleep</span> 15m</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x wallpic.sh</span><br><span class="line"></span><br><span class="line">$ vim ~/.config/i3/config</span><br><span class="line"><span class="built_in">exec</span> --no-startup-id feh --randomize --big-fill ~/Pictures/backgrounds/*</span><br><span class="line">exec_always --no-startup-id <span class="variable">$HOME</span>/.config/feh/wallpic.sh</span><br></pre></td></tr></table></figure><ul><li>ohmyzsh终端</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置终端</span></span><br><span class="line">$ <span class="built_in">cat</span> /etc/shells      <span class="comment"># 查看系统所有shell</span></span><br><span class="line">$ chsh -s /usr/bin/zsh <span class="comment"># 更改默认shell为zsh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装ohmyzsh</span></span><br><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line"><span class="comment"># zsh-syntax-highlighting：语法高亮</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># autosuggestions：记住用过的命令</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主题，这里使用的主题是powerlevel10k，详细信息可从Github找到</span></span><br><span class="line">$ git <span class="built_in">clone</span> --depth=1 https://github.com/romkatv/powerlevel10k.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/themes/powerlevel10k</span><br><span class="line"></span><br><span class="line">$ sudo vim ~/.zshrc                       <span class="comment"># 修改配置文件</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;powerlevel10k/powerlevel10k&quot;</span>   <span class="comment"># 更改ZSH_THEME</span></span><br><span class="line">plugins=(git                              <span class="comment"># 更改plugins</span></span><br><span class="line">       zsh-autosuggestions</span><br><span class="line">       zsh-syntax-highlighting</span><br><span class="line">       sudo</span><br><span class="line">       extract</span><br><span class="line">     )</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LANG=EN_US.UTF-8</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc                         <span class="comment"># 刷新配置,打开终端按提示进行配置即可</span></span><br></pre></td></tr></table></figure><ul><li>截图软件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo pacman -S flameshot</span><br><span class="line">$ sudo vim ~/.config/i3/config</span><br><span class="line"><span class="comment"># 添加截图快捷方式</span></span><br><span class="line">bindsym Print --release <span class="built_in">exec</span> /usr/bin/flameshot gui</span><br><span class="line"><span class="comment">#for_window [class=&quot;flameshot&quot;] floating enable </span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id flameshot</span><br></pre></td></tr></table></figure><ul><li>i3配置文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置窗口边框等等</span></span><br><span class="line">new_window none</span><br><span class="line">new_float normal</span><br><span class="line">hide_edge_borders both</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置窗口间距</span></span><br><span class="line">gaps inner 8</span><br><span class="line">gaps outer 6</span><br><span class="line"></span><br><span class="line"><span class="comment"># screen before suspend. Use loginctl lock-session to lock your screen.</span></span><br><span class="line"><span class="built_in">exec</span> --no-startup-id xss-lock --transfer-sleep-lock -- i3lock --nofork</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use pactl to adjust volume in PulseAudio.</span></span><br><span class="line"><span class="built_in">set</span> <span class="variable">$refresh_i3status</span> killall -SIGUSR1 i3status</span><br><span class="line">bindsym XF86AudioRaiseVolume <span class="built_in">exec</span> --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% &amp;&amp; <span class="variable">$refresh_i3status</span></span><br><span class="line">bindsym XF86AudioLowerVolume <span class="built_in">exec</span> --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% &amp;&amp; <span class="variable">$refresh_i3status</span></span><br><span class="line">bindsym XF86AudioMute <span class="built_in">exec</span> --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle &amp;&amp; <span class="variable">$refresh_i3status</span></span><br><span class="line">bindsym XF86AudioMicMute <span class="built_in">exec</span> --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle &amp;&amp; <span class="variable">$refresh_i3status</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> archlinx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i3wm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VsCode配置_SpringBoot项目环境</title>
      <link href="/2022/04/07/tools/vscode%E9%85%8D%E7%BD%AE_springboot%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/04/07/tools/vscode%E9%85%8D%E7%BD%AE_springboot%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h3><p>可选择 OpenJDK 或 OracleJDK</p><ul><li><strong>OpenJDK</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221120055668.png" alt="image-20220221120055668"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221120301777.png" alt="image-20220221120301777"></p><ul><li><strong>OracleJDK</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221133546365.png" alt="image-20220221133546365"></p><p>1）选择 msi &amp; exe，一路安装</p><p>2）修改环境变量，我的电脑→属性→高级系统设置→高级选项→环境变量</p><ul><li>系统变量处点击新建系统变量–变量名： <code>JAVA_HOME</code>，变量值：<code>C:\Program Files\Java\jdk1.8.0_321</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221135002345.png" alt="image-20220221135002345"></p><ul><li>再次新建系统变量-变量名： <code>CLASSPATH</code>，变量值：<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221135524774.png" alt="image-20220221135524774"></p><ul><li>找到用户变量 PATH，点击编辑并新建两个变量值：<code>%JAVA_HOME%\bin</code> <code>%JAVA_HOME%\jre\bin</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221140146796.png" alt="image-20220221140146796"></p><p>3）验证，打开 cmd 下输入 <code>java -version 或 javac</code></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version &quot;<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_261&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_261-b12)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25</span>.<span class="number">261</span>-b12, mixed <span class="built_in">mode</span>)</span><br></pre></td></tr></table></figure><h3 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h3><p>1）下载程序，选择 <code>bin.zip</code> 后缀文件下载，解压到本地</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221141047035.png" alt="image-20220221141047035"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221141255411.png" alt="image-20220221141255411"></p><p>2）配置环境变量</p><ul><li>MAVEN_HOME</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221141811291.png" alt="image-20220221141811291"></p><ul><li>PATH</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221141555797.png" alt="image-20220221141555797"></p><ul><li>验证 <code>mvn -v</code></li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ mvn -v</span><br><span class="line">Apache Maven <span class="number">3</span>.<span class="number">8</span>.<span class="number">4</span> (<span class="number">9</span>b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class="line">Maven home: C:\Program Files\apache-maven-<span class="number">3</span>.<span class="number">8</span>.<span class="number">4</span></span><br><span class="line">Java version: <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_261, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.<span class="number">8</span>.<span class="number">0</span>_261\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows <span class="number">10</span>&quot;, version: &quot;<span class="number">10</span>.<span class="number">0</span>&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;</span><br></pre></td></tr></table></figure><p>3）配置仓库</p><ul><li>本地仓库</li></ul><p>创建目录并修改配置文件，<code>.\apache-maven-3.8.4\conf\settings</code> (需要具体访问权限)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>C:\Program Files\apache-maven-3.8.4\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221143653457.png" alt="image-20220221143653457"></p><ul><li>中央仓库，添加 <a href="https://developer.aliyun.com/mvn/guide">阿里云maven仓库</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221144415645.png" alt="image-20220221144415645"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221145314721.png" alt="image-20220221145314721"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221145515599.png" alt="image-20220221145515599"></p><h3 id="SpringBoot-搭建"><a href="#SpringBoot-搭建" class="headerlink" title="SpringBoot 搭建"></a>SpringBoot 搭建</h3><p>1）安装插件</p><p>在 Visual Studio Code 中打开扩展视图(Ctrl+Shift+X)，搜索并安装</p><ul><li>Java Extension Pack (Java 扩展包)</li><li>Spring Boot Extension Pack</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221145837536.png" alt="image-20220221145837536"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221152233092.png" alt="image-20220221152233092"></p><p>2）配置环境(JDK、Maven)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221152534220.png" alt="image-20220221152534220"></p><p>把 maven 的可执行文件路径配置、maven的 setting 路径配置、java.home 的路径配置</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221153137855.png" alt="image-20220221153137855"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;security.workspace.trust.untrustedFiles&quot;: &quot;open&quot;,</span><br><span class="line">    &quot;workbench.startupEditor&quot;: &quot;newUntitledFile&quot;,</span><br><span class="line">    &quot;java.errors.incompleteClasspath.severity&quot;: &quot;ignore&quot;,</span><br><span class="line">    &quot;workbench.colorTheme&quot;: &quot;Visual Studio Dark&quot;,</span><br><span class="line">    &quot;java.home&quot;:&quot;C:\\Program Files\\Java\\jdk1.8.0_261&quot;,</span><br><span class="line">    &quot;java.configuration.maven.userSettings&quot;: &quot;C:\\Program Files\\apache-maven-3.8.4\\conf\\settings.xml&quot;,</span><br><span class="line">    &quot;maven.executable.path&quot;: &quot;C:\\Program Files\\apache-maven-3.8.4\\bin\\mvn.cmd&quot;,</span><br><span class="line">    &quot;maven.terminal.useJavaHome&quot;: true,</span><br><span class="line">    &quot;maven.terminal.customEnv&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;environmentVariable&quot;: &quot;JAVA_HOME&quot;,</span><br><span class="line">            &quot;value&quot;: &quot;C:\\Program Files\\Java\\jdk1.8.0_261&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;extensions.autoUpdate&quot;: false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成重启 VSCode</p><p>3）创建 SpringBoot 项目</p><p>使用快捷键(Ctrl+Shift+P)命令窗口，输入 Spring 选择创建 Maven 项目 <code>Spring Initializr:Create a Maven Project...</code></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221153901836.png" alt="image-20220221153901836"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154026593.png" alt="image-20220221154026593"></p><p>选择 java</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154103719.png" alt="image-20220221154103719"></p><p>设置包名</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154142247.png" alt="image-20220221154142247"></p><p>设置项目名</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154156150.png" alt="image-20220221154156150"></p><p>选择 jar</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154237790.png" alt="image-20220221154237790"></p><p>jdk 选择 1.8</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154303768.png" alt="image-20220221154303768"></p><p>选择依赖</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221155142385.png" alt="image-20220221155142385"></p><p>4）修改配置文件</p><p>将 application.properties 改为 yml格式，并添加数据库配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span>  <span class="comment"># 配置mysql</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mydb?characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>  <span class="comment"># 默认端口</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5）运行项目，选择 DemoApplication.java 文件，右键菜单 运行(第一次运行要下载相关maven依赖，会比较慢)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221160842429.png" alt="image-20220221160842429"></p><p><strong>异常提示</strong></p><p>1）右下角会弹出一个弹框</p><p><code>Java 11 or more recent is required to run. Please download and install a recent JDK. Source: Language Support for Java™ by Red Hat</code></p><p>错误是<strong>Language Support for Java™ by Red Hat</strong>这个插件报出来的，其原因是这个插件鼓励开发者们使用 Java 11或者更新的版本。在v0.64.1这个版本更新中，这个插件将 Java 11作为运行版本</p><p>解决方案：选择降级到v0.64.1之前，同时关闭插件自动更新</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221155953950.png" alt="image-20220221155953950"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221160134291.png" alt="image-20220221160134291"></p><h3 id="Git-克隆项目"><a href="#Git-克隆项目" class="headerlink" title="Git 克隆项目"></a>Git 克隆项目</h3><p>使用快捷键(Ctrl+Shift+P)命令窗口，输入 git clone</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221161249590.png" alt="image-20220221161249590"></p><p>输入项目地址，选择工作区，待下载完进行运行测试</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221161414983.png" alt="image-20220221161414983"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221162027244.png" alt="image-20220221162027244"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo配置_OneDrive图床</title>
      <link href="/2022/04/07/tools/picgo%E9%85%8D%E7%BD%AE_OneDrive%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/04/07/tools/picgo%E9%85%8D%E7%BD%AE_OneDrive%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>前言</strong>：之前使用 Github 作为 Hexo 博客，而 Gitee 作为博客图床使用，但 22&#x2F;03&#x2F;27 之后，Gitee 图床废了！！具说是官方添加了防盗链导致，虽然现在 Typora + PicGo + Gitee 的图床是可以正常显示了，我的笔记都得以查看，但我博客还是无法显示图片，而 Gitee 作为图床，体质也不算太好(有 1M 图片大小的限制)，为了安全起见，还是建议更换图床。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/3eddd173846db4ea4004f8034cce489e.png" alt="image-20220329104339503"></p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>不想额外花费，可免费决不采用收费方式，比如使用 OneDrive、GoogleDrive</li><li>能帮助我管理图片，作为免费的图床，Typora &amp; Blog 都能在网络获取图片</li></ul><p>经过多番查证，为了方便自己的习惯，具体方案还是选择 PicGo +  OneDrive(Amazon S3) + Typora + Blog。PicGo 不提供存储，但它有个 Amazon S3 插件，配合 PoweredBy.Cloud + S3 插件，可实现 OneDrive 图床服务</p><p>1）为什么使用 OneDrive</p><p>Amazon S3 是一个产品，主流的存储产品，比如阿里云 OSS、华为 OSS、腾讯 COS 等，虽然存储不贵，但还是有带宽、流量等费用问题；</p><p>而 OneDrive 免费 5G 空间，容量不足还能升级，将来文件迁移也方便，也自带杀毒和备份恢复功能（GoogleDrive 免费 15G 空间，但国内上传和访问都是问题，也就放弃了）</p><p>2）PicGo 的好处</p><p><a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 是开源产品，可以在 Github 上找到，在 Win、Linux、MacOS 等不同平台都提供了程序，并且还可以安装不同的插件来配合各大存储服务；</p><h3 id="PicGo-安装"><a href="#PicGo-安装" class="headerlink" title="PicGo 安装"></a>PicGo 安装</h3><p>安装方式都较为简单，在此就不再详说，可参照 PicGo Github</p><p>1）<strong>安装后打开主界面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/da8c34e3a24806ab88854faae58451a9.png" alt="image-20220329113154369"></p><p>2）<strong>选择插件设置-搜索 S3 -选择安装 S3 1.1.4(picgo amazon s3 uploader)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/a6bdcaf760592f201da335997203183f.png" alt="image-20220329112946374"></p><blockquote><p>注意：必须先安装 <a href="https://nodejs.org/en/">node.js</a> 才能安装插件，请自行提前安装一下</p></blockquote><h3 id="PoweredBy-Cloud-配置"><a href="#PoweredBy-Cloud-配置" class="headerlink" title="PoweredBy.Cloud 配置"></a>PoweredBy.Cloud 配置</h3><blockquote><p><a href="https://poweredby.cloud/">PoweredBy.Cloud</a> 是一个将 GoogleDrive 和 OneDrive 变成图床的工具，存在网盘里文件的支链我们是无法获取的，如果能获取到文件的支链，那就能将 GoogleDrive 和 OneDrive 当作图床用，它就是这样一个免费工具，提供网盘的直链，而且使用起来没有任何限制</p></blockquote><p>1）注册账号 </p><ol><li>打开 <a href="https://poweredby.cloud/">PoweredBy.Cloud</a> 并注册，注册非常简单，只需要提供一个可收邮件的邮箱，登录地址会发送到邮箱</li><li>在邮箱里找到登录地址，并点击登录地址登录到 PoweredBy.Cloud</li><li>在 PoweredBy.Cloud 的控制台里添加一个 site，例如：<a href="http://demo.stdcdn.com/">http://demo.stdcdn.com</a>  选择 GoogleDrive 或者 OneDrive 作为存储空间(PoweredBy.Cloud 会在你的网盘里创建一个 <a href="http://demo.stdcdn.com/">http://demo.stdcdn.com</a> 的文件夹)</li></ol><p>注册site截图如下，Site Name 将在后面使用</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/f8a423e911cf882ce7b45bc9c82096e8.png" alt="image-20220329114225569"></p><p>2）创建 Developer 密钥(S3)</p><p>点击 Developer 选项-&gt;点击 Create Access Key 按钮-&gt;输入任意 key 名称(仅做备注)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/fda4209f4bd3370934b82f5861cdbb94.png" alt="image-20220329114559645"></p><h3 id="PicGo-配置-S3"><a href="#PicGo-配置-S3" class="headerlink" title="PicGo 配置 S3"></a>PicGo 配置 S3</h3><p>配置 S3 的关键参数在创建密钥后，access_key、secret_access_key 都已经出现，剩下的还有两个关键值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是两个关键参数</span></span><br><span class="line"><span class="comment">//固定值,endpoint 自定义节点</span></span><br><span class="line">endpoint_url=<span class="string">&#x27;https://stdcdn.com&#x27;</span></span><br><span class="line"><span class="comment">//桶,bucketName 这就是你的SiteName。</span></span><br><span class="line">bucket=<span class="string">&quot;yuikuen&quot;</span></span><br><span class="line"><span class="comment">//自定义节点</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//stdcdn.com</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/1ec466a959fe032877e4fce8c0bc987b.png" alt="image-20220331151315083"></p><p><strong>测试图片上传效果</strong></p><p>1）使用 PicGo 测试上传效果，最终会在我们的 OneDrive 中出现</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/ccd5adfe012727d0212a7a766d204878.png" alt="image-20220331151355857"></p><p>2）Typora 中，可以在图像中配置上传图片，并且上传可以进行验证图片上传选项操作</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/a433a9e8a646062b9b12ab7065d8b69f.png" alt="image-20220329115206895"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo配置_Gitee图床</title>
      <link href="/2022/04/07/tools/picgo%E9%85%8D%E7%BD%AE_Gitee%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/04/07/tools/picgo%E9%85%8D%E7%BD%AE_Gitee%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>前言</strong>：一开始都是使用云笔记的，但不便于保存或查看，后面转到了在线博客。而在线博客的编辑器坑太多了，所以开始尝试不同的方案，现暂敲定采用 “Typora + GitHub + Hexo” 方式，而图床一开始也是保存本地的，但在上传时又过于慢，因此改成 “Typora + GitHub + Hexo + PicGo(Gitee)” 来实现 Markdown 图床。</p></blockquote><h3 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h3><ul><li>PicGo (Windows、Manjaro Linux)</li><li>PicGo-plugin-gitee-uploader 插件</li></ul><p>Windows 与 Manjaro Linux 的安装方式都较为简单，在此就不再详说，可参照 PicGo Github</p><p><strong>安装后打开主界面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207154537047.png" alt="image-20211207154537047"></p><p><strong>选择插件设置-搜索 gitee -选择安装 gitee-uploader 1.1.2</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207154656271.png" alt="image-20211207154656271"></p><blockquote><p>注意：必须先安装 <a href="https://nodejs.org/en/">node.js</a> 才能安装插件，请自行提前安装一下</p></blockquote><h3 id="建立-Gitee-图床库"><a href="#建立-Gitee-图床库" class="headerlink" title="建立 Gitee 图床库"></a>建立 Gitee 图床库</h3><p>注册码云方法略过，直接创建仓库即可，新建仓库要点如下：</p><ul><li>仓库名称不可重复</li><li>仓库设为公开，便于博客访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207155208280.png" alt="image-20211207155208280"></p><h3 id="配置-PicGo"><a href="#配置-PicGo" class="headerlink" title="配置 PicGo"></a>配置 PicGo</h3><p>打开软件，选择图床设置 gitee</p><ul><li>repo：用户名&#x2F;仓库名称</li><li>branch：分支，默认为 master</li><li>token：码云的私人令牌</li><li>path：路径，根据实际填写</li><li>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 <code>Upload 图片名 by picGo - 时间</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207160229270.png" alt="image-20211207160229270"></p><p><strong>Token 获取，在个人设置创建就有了</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207160827190.png" alt="image-20211207160827190"></p><p>根据实际需求进行勾选，默认即可；</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207161003426.png" alt="image-20211207161003426"></p><p>需要验证一下密码，验证密码之后会出来一串数字，这一串数字就是你的 token，注意：这个令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，直接复制进去</p><h3 id="配置-Typora"><a href="#配置-Typora" class="headerlink" title="配置 Typora"></a>配置 Typora</h3><p>文件–偏好设置–图像，根据自身环境配置，点击验证图片上传选项即可，下以 <em>Windows</em> 为例</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207161531543.png" alt="image-20211207161531543"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Esxi问题_解决虚拟机关机卡住问题</title>
      <link href="/2022/04/07/tools/esxi%E9%97%AE%E9%A2%98_%E8%A7%A3%E5%86%B3%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%B3%E6%9C%BA%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/07/tools/esxi%E9%97%AE%E9%A2%98_%E8%A7%A3%E5%86%B3%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%B3%E6%9C%BA%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ESXi 在日常使用时经常会遇到机器卡住的情况 这种情况下 GUI 的方式无从下手, 需要从 cli 的方式处理</p></blockquote><p>1）首先开启宿主机的 shell (SSH) 服务</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210824102352466.png" alt="image-20210824102352466"></p><p>2）<strong>Xshell 登录</strong>，用户名 root 密码 就是安装时设置的 ESXi 的密码，可以用 esxtop 查看具体性能情况</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210824102735270.png" alt="image-20210824102735270"></p><p>3）<strong>查看虚拟机</strong>并根据机器 id 进行关闭指定虚拟机</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看虚拟机的列表</span></span><br><span class="line">$ esxcli vm process list </span><br><span class="line">Gitlab</span><br><span class="line">   World ID: 2099532</span><br><span class="line">   Process ID: 0</span><br><span class="line">   VMX Cartel ID: 2099517</span><br><span class="line">   UUID: 56 4d 48 08 86 8b 8f 67-a5 4a 33 f3 87 a8 d0 59</span><br><span class="line">   Display Name: Gitlab</span><br><span class="line">   Config File: /vmfs/volumes/6107a9c3-0511c860-9122-fcaa144d4e7d/Gitlab/Gitlab.vmx</span><br><span class="line"></span><br><span class="line">Jenkins</span><br><span class="line">   World ID: 2108579</span><br><span class="line">   Process ID: 0</span><br><span class="line">   VMX Cartel ID: 2108578</span><br><span class="line">   UUID: 56 4d 7e f1 59 73 75 50-f4 90 c8 4f 61 20 43 7a</span><br><span class="line">   Display Name: Jenkins</span><br><span class="line">   Config File: /vmfs/volumes/6107a9c3-0511c860-9122-fcaa144d4e7d/Jenkins/Jenkins.vmx</span><br><span class="line"></span><br><span class="line">dev</span><br><span class="line">   World ID: 2166668</span><br><span class="line">   Process ID: 0</span><br><span class="line">   VMX Cartel ID: 2166667</span><br><span class="line">   UUID: 56 4d ec fe f6 5f 03 80-95 97 de 30 60 ff 71 9c</span><br><span class="line">   Display Name: dev</span><br><span class="line">   Config File: /vmfs/volumes/6107a9f1-67821e71-248c-fcaa144d4e7d/dev/dev.vmx</span><br><span class="line"></span><br><span class="line">harbor&amp;nexus</span><br><span class="line">   World ID: 2206805</span><br><span class="line">   Process ID: 0</span><br><span class="line">   VMX Cartel ID: 2206804</span><br><span class="line">   UUID: 56 4d 26 c0 b4 1b 45 fd-b4 6d e6 ca 1e 64 30 a8</span><br><span class="line">   Display Name: harbor&amp;nexus</span><br><span class="line">   Config File: /vmfs/volumes/6107a9c3-0511c860-9122-fcaa144d4e7d/harbor&amp;nexus/harbor&amp;nexus.vmx</span><br></pre></td></tr></table></figure><p>根据上面查询出来的 world id 直接进行下一步 <code>esxcli vm process kill --world-id= </code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据虚拟机的名字查找机器world id</span></span><br><span class="line">$ esxcli vm process list | grep jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据world id 强制关闭虚拟机.</span></span><br><span class="line">$ esxcli vm process <span class="built_in">kill</span> -w=2108579 -t=hard</span><br></pre></td></tr></table></figure><p>之后再查看列表是否已经删除并正常关机了</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esxi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Glpi资产信息系统</title>
      <link href="/2022/04/07/tools/centos7%E9%83%A8%E7%BD%B2_Glpi%E8%B5%84%E4%BA%A7%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/04/07/tools/centos7%E9%83%A8%E7%BD%B2_Glpi%E8%B5%84%E4%BA%A7%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>GLPI 是一个企业私有资产信息同步管理平台，提供功能全面的 IT 资源管理接口，可以用它来建立数据库全面管理 IT 的电脑，显示器，服务器，打印机，网络设备，电话，甚至硒鼓和墨盒等，具体功能可参考官网</p></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>1）<strong>系统要求</strong></p><ul><li>操作系统：CentOS Linux release 7.9</li><li>GLPI 版本：glpi-9.5.7</li><li>Nginx 版本：nginx-1.15.3</li><li>Php 版本：php-7.4.27</li><li>MySQL 版本：mysql-5.7.25-linux-glibc2.12-x86_64</li></ul><p>2）<strong>前置环境</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld</span><br><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="LNMP-部署"><a href="#LNMP-部署" class="headerlink" title="LNMP 部署"></a>LNMP 部署</h3><ul><li><strong>Nginx</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class="line">$ wget http://nginx.org/download/nginx-1.15.3.tar.gz</span><br><span class="line">$ tar -xf nginx-1.15.3.tar.gz &amp;&amp; <span class="built_in">cd</span> ./nginx-1.21.4</span><br><span class="line">$ ./configure --prefix=/usr/local/nginx </span><br><span class="line">$ make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line">$ groupadd nginx</span><br><span class="line">$ useradd -M -g nginx -s /sbin/nologin nginx</span><br><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">user nginx nginx;</span><br><span class="line"></span><br><span class="line">$ vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now nginx &amp;&amp; systemctl status nginx</span><br></pre></td></tr></table></figure><ul><li><strong>MySQL</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -e --nodeps mariadb-libs</span><br><span class="line">$ yum -y install wget cmake gcc gcc-c++ ncurses numactl ncurses-devel libaio-devel openssl openssl-devel libaio</span><br><span class="line">$ wget https://cdn.mysql.com/archives/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">$ tar -zxvf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz -C /usr/local/ &amp;&amp; <span class="built_in">cd</span> /usr/local</span><br><span class="line">$ <span class="built_in">mv</span> mysql-5.7.25-linux-glibc2.12-x86_64  mysql &amp;&amp; <span class="built_in">cd</span> ./mysql/</span><br><span class="line">$ groupadd mysql</span><br><span class="line">$ useradd -r -g mysql mysql</span><br><span class="line"></span><br><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">max_connections=200</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default-storage-engine=INNODB </span><br><span class="line">max_allowed_packet=16M</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql ./</span><br><span class="line">$ ./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line">e0qFnvkLj/ow</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cp</span> ./support-files/mysql.server /etc/rc.d/init.d/mysqld</span><br><span class="line">$ <span class="built_in">chmod</span> +x /etc/rc.d/init.d/mysqld</span><br><span class="line">$ chkconfig --add mysqld</span><br><span class="line">$ service mysqld start</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">$ mysql -u root -p</span><br><span class="line">Enter password:输入默认的临时密码</span><br><span class="line">&gt; <span class="built_in">set</span> password=password(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">&gt; <span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>=password(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">&gt; GRANT ALL ON *.* TO user@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">&gt; flush privileges;</span><br></pre></td></tr></table></figure><ul><li><strong>Php</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install https://rpms.remirepo.net/enterprise/remi-release-7.rpm</span><br><span class="line">$ yum clean all &amp;&amp; yum makecache</span><br><span class="line">$ yum -y install yum-utils</span><br><span class="line">$ yum repolist all |grep php</span><br><span class="line">$ yum-config-manager --<span class="built_in">enable</span> remi-php74</span><br><span class="line">$ yum -y install php php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json php-redis php-fileinfo php-mysqli php-session php-zlib php-simplexml php-intl php-domxml php-ldap  php-openssl php-xmlrpc php-pecl-apcu php-pear-CAS php-opcache</span><br><span class="line">$ systemctl start php-fpm &amp;&amp; systemctl <span class="built_in">enable</span> php-fpm</span><br><span class="line">$ php -v</span><br><span class="line">$ php --modules</span><br></pre></td></tr></table></figure><h3 id="Glpi-安装"><a href="#Glpi-安装" class="headerlink" title="Glpi 安装"></a>Glpi 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/glpi-project/glpi/releases/download/9.5.7/glpi-9.5.7.tgz</span><br><span class="line">$ tar -xf glpi-9.5.7.tgz -C /usr/local/nginx/html</span><br><span class="line">$ <span class="built_in">chown</span> nginx:nginx -R /usr/local/nginx/html</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/nginx/html/glpi/ &amp;&amp; <span class="built_in">chmod</span> -R 777 config files</span><br><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">server&#123;</span><br><span class="line">listen 80 ;</span><br><span class="line">server_name 188.188.4.44;</span><br><span class="line"></span><br><span class="line">root /usr/local/nginx/html/glpi;</span><br><span class="line"></span><br><span class="line"><span class="comment">#301重定向</span></span><br><span class="line"><span class="comment">#rewrite ^(.*)$ $1 permanent;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#强制SSL</span></span><br><span class="line"><span class="comment">#rewrite ^(.*)$  https://$host$1 permanent;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#防盗链</span></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"><span class="comment">#伪静态</span></span><br><span class="line"><span class="comment">#include /usr/local/nginx/html/glpi/.rewrite.conf;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首页</span></span><br><span class="line">root /usr/local/nginx/html/glpi;</span><br><span class="line">index index.php index.html error/index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#流量限制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志</span></span><br><span class="line"><span class="comment">#access_log /usr/local/nginx/logs/nginx_access_$logdate.log main;</span></span><br><span class="line">error_page  403  /error/403.html;</span><br><span class="line">error_page  400  /error/400.html;</span><br><span class="line">error_page  404  /error/404.html;</span><br><span class="line">error_page  502  /error/502.html;</span><br><span class="line">error_page  503  /error/503.html;</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理PHP</span></span><br><span class="line">location  ~ [^/]\.php(/|$) &#123;</span><br><span class="line">root /usr/local/nginx/html/glpi;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_split_path_info  ^(.+\.php)(.*)$;</span><br><span class="line">fastcgi_param  SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">fastcgi_param  PATH_INFO <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">include fastcgi.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#DenyFiles</span></span><br><span class="line">location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ systemctl restart nginx php-fpm</span><br></pre></td></tr></table></figure><p>1）开始安装（如果后续推出新版本，可选择升级即可）</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220309144826505.png" alt="image-20220309144826505"></p><p>2）检查运行环境要求，若显示相关报错，如果缺少安装包就装包，如果提示权限不足就查权限是否设置正确；</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220309145912348.png" alt="image-20220309145912348"></p><p>插件安装参考：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.27/ext/intl</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=intl</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220309153040069.png" alt="image-20220309153040069"></p><p>3）连接数据库–输入服务器地址、用户名、密码(请自行创建账号密码)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220309153131383.png" alt="image-20220309153131383"></p><p>4）登录GLPI管理控制台，成功后的界面</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310095627201.png" alt="image-20220310095627201"></p><p>5）安全设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/nginx/html/glpi/install/</span><br><span class="line">$ <span class="built_in">mv</span> install.php install.php.$(<span class="built_in">date</span> +%F_%T)</span><br></pre></td></tr></table></figure><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>FusionInventory 就像网关一样，收集代理发送的信息。它会在管理员不费吹灰之力的情况下创建或更新 GLPI 中的信息</p><p>1）安装插件：设置–插件–查找插件目录</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310111042009.png" alt="image-20220310111042009"></p><p>2）进入插件页面，根据个人选择不同插件进行安装</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310111244451.png" alt="image-20220310111244451"></p><p>3）下载安装包–&#x3D;&#x3D;注：GLPI 和 FusionInventory 的版本必须适配&#x3D;&#x3D;</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310111221817.png" alt="image-20220310111221817"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310111352011.png" alt="image-20220310111352011"></p><p>4）下载或上传插件安装包至 glpi 插件目录，刷新网页即可安装、启用插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/nginx/html/glpi/plugins</span><br><span class="line">$ wget https://github.com/pluginsGLPI/ocsinventoryng/releases/download/1.7.3/glpi-ocsinventoryng-1.7.3.tar.gz</span><br><span class="line">$ wget https://github.com/fusioninventory/fusioninventory-for-glpi/releases/download/glpi9.5%2B3.0/fusioninventory-9.5+3.0.tar.bz2</span><br><span class="line">$ tar -xf glpi-ocsinventoryng-1.7.3.tar.gz</span><br><span class="line">$ tar -jxf fusioninventory-9.5+3.0.tar.bz2</span><br><span class="line">$ ll</span><br><span class="line">total 5140</span><br><span class="line">drwxr-xr-x. 16 root  root     4096 Mar 22  2021 fusioninventory</span><br><span class="line">-rw-r--r--.  1 root  root  3520305 Dec  8 13:26 fusioninventory-9.5+3.0.tar.bz2</span><br><span class="line">-rw-r--r--.  1 root  root  1727867 Dec  8 09:10 glpi-ocsinventoryng-1.7.3.tar.gz</span><br><span class="line">drwxr-xr-x. 12 root  root     4096 Dec  4  2020 ocsinventoryng</span><br><span class="line">-rwxrwxrwx.  1 nginx nginx      80 Jan 27 22:34 remove.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310112132989.png" alt="image-20220310112132989"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310112402323.png" alt="image-20220310112402323"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310112554916.png" alt="image-20220310112554916"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> glpi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Gerrit3.4.x</title>
      <link href="/2022/04/07/tools/centos7%E9%83%A8%E7%BD%B2_Gerrit3.4.x/"/>
      <url>/2022/04/07/tools/centos7%E9%83%A8%E7%BD%B2_Gerrit3.4.x/</url>
      
        <content type="html"><![CDATA[<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p>本文使用 ESXI 虚拟机进行实验；</p><ul><li>2核 CPU，5GB 内存，50GB 硬盘，IP：188.188.3.144</li><li>CentOS 7.9 最小化安装</li></ul><p><a href="https://www.gerritcodereview.com/">Gerrit</a> 支持多种数据库、多种认证方式（参考<a href="https://gerrit-documentation.storage.googleapis.com/Documentation/3.4.1/install.html">官网手册</a>），这里使用</p><ul><li>mariadb数据库</li><li>http认证</li><li>Apache http server 作为 web 服务器，提供反向代理</li><li>gitweb 作为 Repository Browser</li></ul><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>1）安装依赖环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install git gitweb httpd java-11-openjdk java-11-openjdk-devel</span><br></pre></td></tr></table></figure><p>2）配置 httpd 反向代理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/httpd/conf.d/gerrit.conf</span><br><span class="line">&lt;VirtualHost *&gt;                        <span class="comment"># 可自定义端口，默认80</span></span><br><span class="line">    ServerName 188.188.3.144           <span class="comment"># 此为服务器IP地址</span></span><br><span class="line"></span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    ProxyVia Off</span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line"></span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">          Order deny,allow</span><br><span class="line">          Allow from all</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Location /login/&gt;</span><br><span class="line">      AuthType Basic</span><br><span class="line">      AuthName <span class="string">&quot;Gerrit Code Review&quot;</span></span><br><span class="line">      AuthBasicProvider file</span><br><span class="line">      AuthUserFile /gerrit.passwd      <span class="comment"># 此处基于文件方式认证，详细查看‘添加HTTP认证用户’         </span></span><br><span class="line">      Require valid-user</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">    AllowEncodedSlashes On</span><br><span class="line">    ProxyPass / http://127.0.0.1:8081/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now httpd</span><br></pre></td></tr></table></figure><ul><li>ServerName 根据自己实际情况自定义，此为本机 IP</li><li>Gerrit 的 http 认证方式，需要使用 HTTP 基本认证（httpd 要有访问权限才行，在此使用文件 <code>/gerrit.passwd</code>）方式认证</li><li>反向代理设置，从根目录”&#x2F;“，代理到”<a href="http://127.0.0.1:8081/&quot;%EF%BC%88%E6%B3%A8%E6%84%8F%E7%AB%AF%E5%8F%A3%E5%90%8E%E7%9A%84%E6%96%9C%E7%BA%BF%EF%BC%8C8081%E4%B8%BA">http://127.0.0.1:8081/&quot;（注意端口后的斜线，8081为</a> gerrit 监听的端口）</li></ul><p>3）配置 Jre</p><p>注意：官网上有注明使用的先决条件，要运行 GERRIT 服务，主机必须满足以下要求：JRE，版本 1.8 或 11 下载（ Gerrit 目前尚未与 Java 13 或更新兼容）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> java</span><br><span class="line">$ <span class="built_in">ls</span> -lr /usr/bin/java</span><br><span class="line">$ <span class="built_in">ls</span> -lrt /etc/alternatives/java</span><br><span class="line"><span class="comment"># 输出/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64就是JAVA的安装路径</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># Java Environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/jre/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>4）添加 HTTP 认证用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> /gerrit.passwd</span><br><span class="line">$ htpasswd /gerrit.passwd <span class="string">&quot;root&quot;</span></span><br><span class="line">New password: </span><br><span class="line">Re-<span class="built_in">type</span> new password: </span><br><span class="line">Adding password <span class="keyword">for</span> user root</span><br><span class="line">$ <span class="built_in">cat</span> /gerrit.passwd </span><br><span class="line">root:$apr1$XwPU680a<span class="variable">$XX</span>/1KGJViZ4QT7NLrl2/n/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：&quot;-c&quot;参数为创建，仅限第一次添加用户时使用，第二次创建时不要加&quot;-c&quot;参数</span></span><br><span class="line"><span class="comment"># 添加一个用户</span></span><br><span class="line">$ htpasswd -c /gerrit.passwd <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="comment"># 添加其他用户</span></span><br><span class="line">$ htpasswd -b /gerrit.passwd root passwd</span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">$ htpasswd -D /gerrit.passwd root</span><br><span class="line"><span class="comment"># 更改密码</span></span><br><span class="line">$ htpasswd -m /gerrit.passwd root</span><br></pre></td></tr></table></figure><h3 id="安装-Gerrit"><a href="#安装-Gerrit" class="headerlink" title="安装 Gerrit"></a>安装 Gerrit</h3><p>1）下载或上传 war 包，进行安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/gerrit &amp;&amp; <span class="built_in">cd</span> /usr/local/gerrit</span><br><span class="line">$ java -jar gerrit-3.4.1.war init -d review_site</span><br><span class="line">Using secure store: com.google.gerrit.server.securestore.DefaultSecureStore</span><br><span class="line">[2021-11-05 10:07:30,655] [main] INFO  com.google.gerrit.server.config.GerritServerConfigProvider : No /usr/local/gerrit/review_site/etc/gerrit.config; assuming defaults</span><br><span class="line"></span><br><span class="line">*** Gerrit Code Review 3.4.1</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Create <span class="string">&#x27;/usr/local/gerrit/review_site&#x27;</span> [Y/n]? y    <span class="comment"># 是否安装在此目录，选n程序自动退出，默认回车也可</span></span><br><span class="line"></span><br><span class="line">*** Git Repositories</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Location of Git repositories   [git]:              <span class="comment"># Git存储库，不指定则默认创建在程序目录./gerrit/review_site/git</span></span><br><span class="line"></span><br><span class="line">*** JGit Configuration</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Auto-configured <span class="string">&quot;receive.autogc = false&quot;</span> to <span class="built_in">disable</span> auto-gc after git-receive-pack.</span><br><span class="line"></span><br><span class="line">*** Index</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Type                           [lucene]:           <span class="comment"># 默认回车</span></span><br><span class="line"></span><br><span class="line">*** User Authentication</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Authentication method          [openid/?]: http    <span class="comment"># 认证方式http，在此使用反向代理</span></span><br><span class="line">Get username from custom HTTP header [y/N]? n      <span class="comment"># 是否自定义http头获取用户名</span></span><br><span class="line">SSO <span class="built_in">logout</span> URL                 :                   <span class="comment"># 默认回车</span></span><br><span class="line">Enable signed push support     [y/N]? y            <span class="comment"># 启用签名推送支持</span></span><br><span class="line"></span><br><span class="line">*** Review Labels</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Install Verified label         [y/N]?              <span class="comment"># 安装已验证标签，默认回车</span></span><br><span class="line"></span><br><span class="line">*** Email Delivery</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">SMTP server hostname           [localhost]: smtp.qq.com    <span class="comment"># smtp发送邮件服务器</span></span><br><span class="line">SMTP server port               [(default)]: 465            <span class="comment"># 465/994-SSL协议端口，25-非SSL协议端口</span></span><br><span class="line">SMTP encryption                [none/?]: SSL               <span class="comment"># 根据上述协议自行定义</span></span><br><span class="line">SMTP username                  [root]: sinath@vip.qq.com   <span class="comment"># 此为自定义自动发送邮件的地址</span></span><br><span class="line">sinath@vip.qq.com<span class="string">&#x27;s password   :                           # QQ邮箱此处为授权码，非邮箱密码，如163、企业邮箱即为密码</span></span><br><span class="line"><span class="string">              confirm password : </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** Container Process</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Run as                         [root]:        # 程序运行进程的用户，默认为当前用户，可另创用户                                            </span></span><br><span class="line"><span class="string">Java runtime                   [/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64]: </span></span><br><span class="line"><span class="string">Copy gerrit-3.4.1.war to review_site/bin/gerrit.war [Y/n]? y</span></span><br><span class="line"><span class="string">Copying gerrit-3.4.1.war to review_site/bin/gerrit.war</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** SSH Daemon</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Listen on address              [*]:           # 指定SSH后台服务监听地址</span></span><br><span class="line"><span class="string">Listen on port                 [29418]:       # 指定SSH后台服务的端口</span></span><br><span class="line"><span class="string">Generating SSH host key ... rsa... ed25519... ecdsa 256... ecdsa 384... ecdsa 521... done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** HTTP Daemon</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Behind reverse proxy           [y/N]? y       # 开启发向代理</span></span><br><span class="line"><span class="string">Proxy uses SSL (https://)      [y/N]?         # 默认开启SSL</span></span><br><span class="line"><span class="string">Subdirectory on proxy server   [/]:           # 代理服务器的根目录，默认为“/”，默认回车</span></span><br><span class="line"><span class="string">Listen on address              [*]: 127.0.0.1 # gerrit的监听地址</span></span><br><span class="line"><span class="string">Listen on port                 [8081]:        # gerrit的服务端口</span></span><br><span class="line"><span class="string">Canonical URL                  [http://127.0.0.1/]: http://188.188.3.144  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** Cache</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** Plugins</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Installing plugins.                           # 接下来就是询问是否安装插件，一路y即可</span></span><br><span class="line"><span class="string">Install plugin codemirror-editor version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed codemirror-editor v3.4.1</span></span><br><span class="line"><span class="string">Install plugin commit-message-length-validator version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed commit-message-length-validator v3.4.1</span></span><br><span class="line"><span class="string">Install plugin delete-project version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed delete-project v3.4.1</span></span><br><span class="line"><span class="string">Install plugin download-commands version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed download-commands v3.4.1</span></span><br><span class="line"><span class="string">Install plugin gitiles version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed gitiles v3.4.1</span></span><br><span class="line"><span class="string">Install plugin hooks version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed hooks v3.4.1</span></span><br><span class="line"><span class="string">Install plugin plugin-manager version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed plugin-manager v3.4.1</span></span><br><span class="line"><span class="string">Install plugin replication version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed replication v3.4.1</span></span><br><span class="line"><span class="string">Install plugin reviewnotes version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed reviewnotes v3.4.1</span></span><br><span class="line"><span class="string">Install plugin singleusergroup version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed singleusergroup v3.4.1</span></span><br><span class="line"><span class="string">Install plugin webhooks version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed webhooks v3.4.1</span></span><br><span class="line"><span class="string">Initializing plugins.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">============================================================================</span></span><br><span class="line"><span class="string">Welcome to the Gerrit community</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Find more information on the homepage: https://www.gerritcodereview.com</span></span><br><span class="line"><span class="string">Discuss Gerrit on the mailing list: https://groups.google.com/g/repo-discuss</span></span><br><span class="line"><span class="string">============================================================================</span></span><br><span class="line"><span class="string">Initialized /usr/local/gerrit/review_site</span></span><br><span class="line"><span class="string">Init complete, reindexing accounts with: reindex --site-path review_site --threads 1 --index accountsReindexed 0 documents in accounts index in 0.0s (0.0/s)</span></span><br><span class="line"><span class="string">Index accounts in version 11 is ready</span></span><br><span class="line"><span class="string">Warning: InterruptedException</span></span><br><span class="line"><span class="string">java.lang.InterruptedException</span></span><br><span class="line"><span class="string">at java.base/java.lang.Object.wait(Native Method)</span></span><br><span class="line"><span class="string">at java.base/java.lang.Thread.join(Thread.java:1308)</span></span><br><span class="line"><span class="string">at org.h2.util.MathUtils.getSecureRandom(MathUtils.java:105)</span></span><br><span class="line"><span class="string">at org.h2.util.MathUtils.secureRandomBytes(MathUtils.java:307)</span></span><br><span class="line"><span class="string">at org.h2.store.FileLock.setUniqueId(FileLock.java:315)</span></span><br><span class="line"><span class="string">at org.h2.store.FileLock.lockFile(FileLock.java:345)</span></span><br><span class="line"><span class="string">at org.h2.store.FileLock.lock(FileLock.java:136)</span></span><br><span class="line"><span class="string">at org.h2.engine.Database.open(Database.java:622)</span></span><br><span class="line"><span class="string">at org.h2.engine.Database.openDatabase(Database.java:260)</span></span><br><span class="line"><span class="string">at org.h2.engine.Database.&lt;init&gt;(Database.java:254)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.openSession(Engine.java:57)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.openSession(Engine.java:164)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.createSessionAndValidate(Engine.java:142)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.createSession(Engine.java:125)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.createSession(Engine.java:27)</span></span><br><span class="line"><span class="string">at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:331)</span></span><br><span class="line"><span class="string">at org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:107)</span></span><br><span class="line"><span class="string">at org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:91)</span></span><br><span class="line"><span class="string">at org.h2.Driver.connect(Driver.java:74)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl$SqlHandle.&lt;init&gt;(H2CacheImpl.java:679)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl$SqlStore.acquire(H2CacheImpl.java:647)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl$SqlStore.buildBloomFilter(H2CacheImpl.java:365)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl$SqlStore.open(H2CacheImpl.java:337)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl.start(H2CacheImpl.java:197)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.logging.LoggingContextAwareRunnable.run(LoggingContextAwareRunnable.java:113)</span></span><br><span class="line"><span class="string">at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span></span><br><span class="line"><span class="string">at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span></span><br><span class="line"><span class="string">at java.base/java.lang.Thread.run(Thread.java:829)</span></span><br><span class="line"><span class="string">Collecting projects:    2 changes with: reindex --site-path review_site --threads 1 --index changes</span></span><br><span class="line"><span class="string">Reindexing changes: project-slices: 100% (2/2), done    </span></span><br><span class="line"><span class="string">Reindexed 0 documents in changes index in 0.0s (0.0/s)</span></span><br><span class="line"><span class="string">Index changes in version 61 is ready</span></span><br><span class="line"><span class="string">Reindexing groups:      100% (2/2)ith: reindex --site-path review_site --threads 1 --index groups</span></span><br><span class="line"><span class="string">Reindexed 2 documents in groups index in 0.2s (12.7/s)</span></span><br><span class="line"><span class="string">Index groups in version 8 is ready</span></span><br><span class="line"><span class="string">Reindexing projects:    100% (2/2) with: reindex --site-path review_site --threads 1 --index projects</span></span><br><span class="line"><span class="string">Reindexed 2 documents in projects index in 0.1s (14.5/s)</span></span><br><span class="line"><span class="string">Index projects in version 4 is ready</span></span><br><span class="line"><span class="string">Executing /usr/local/gerrit/review_site/bin/gerrit.sh start</span></span><br><span class="line"><span class="string">Starting Gerrit Code Review: OK</span></span><br><span class="line"><span class="string">Waiting for server on 188.188.3.144:80 ... OK</span></span><br><span class="line"><span class="string">Opening http://188.188.3.144/#/admin/projects/ ...FAILED</span></span><br><span class="line"><span class="string">Open Gerrit with a JavaScript capable browser:</span></span><br><span class="line"><span class="string">  http://188.188.3.144/#/admin/projects/</span></span><br></pre></td></tr></table></figure><p>2）修改配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ./gerrit/review_site/etc/gerrit.config</span><br><span class="line">[gerrit]</span><br><span class="line">basePath = git</span><br><span class="line">canonicalWebUrl = http://188.188.3.145</span><br><span class="line">serverId = 1426be99-788d-4ee3-9c97-657e3f82b964</span><br><span class="line">[container]</span><br><span class="line">javaOptions = <span class="string">&quot;-Dflogger.backend_factory=com.google.common.flogger.backend.log4j.Log4jBackendFactory#getInstance&quot;</span></span><br><span class="line">javaOptions = <span class="string">&quot;-Dflogger.logging_context=com.google.gerrit.server.logging.LoggingContext#getInstance&quot;</span></span><br><span class="line">user = root</span><br><span class="line">javaHome = /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64</span><br><span class="line">[index]</span><br><span class="line"><span class="built_in">type</span> = lucene</span><br><span class="line">[auth]</span><br><span class="line"><span class="built_in">type</span> = HTTP</span><br><span class="line">[receive]</span><br><span class="line">enableSignedPush = <span class="literal">true</span></span><br><span class="line">[sendemail]</span><br><span class="line">smtpServer = smtp.qq.com</span><br><span class="line">smtpServerPort = 465</span><br><span class="line">smtpEncryption = SSL</span><br><span class="line">smtpUser = sinath@vip.qq.com</span><br><span class="line">[sshd]</span><br><span class="line">listenAddress = *:29418</span><br><span class="line">[httpd]</span><br><span class="line">listenUrl = proxy-http://127.0.0.1:8081/</span><br><span class="line">[cache]</span><br><span class="line">directory = cache</span><br></pre></td></tr></table></figure><p>3）启动并配置开机自启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 管理命令</span></span><br><span class="line">$ ./gerrit/review_site/bin/gerrit.sh start</span><br><span class="line">$ ./gerrit/review_site/bin/gerrit.sh stop</span><br><span class="line">$ ./gerrit/review_site/bin/gerrit.sh status</span><br><span class="line"></span><br><span class="line">$ netstat -ltnp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      1725/mysqld         </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1102/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1189/master         </span><br><span class="line">tcp6       0      0 :::29418                :::*                    LISTEN      4406/GerritCodeRevi </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      1783/httpd          </span><br><span class="line">tcp6       0      0 127.0.0.1:8081          :::*                    LISTEN      4406/GerritCodeRevi </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1102/sshd           </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1189/master</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/gerrit.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=gerrit Server</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/gerrit/review_site/bin/gerrit.sh start</span><br><span class="line">ExecStop=/usr/local/gerrit/review_site/bin/gerrit.sh stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>4）登录验证 <a href="http://server-ip/">http://server-ip</a></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211104151058542.png" alt="image-20211104151058542.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211104151110402.png" alt="image-20211104151110402"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211105104049204.png" alt="image-20211105104049204"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211105114258300.png" alt="image-20211105114258300"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gerrit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu配置_挂载新硬盘</title>
      <link href="/2022/04/07/ubuntu/ubuntu%E9%85%8D%E7%BD%AE_%E6%8C%82%E8%BD%BD%E6%96%B0%E7%A1%AC%E7%9B%98/"/>
      <url>/2022/04/07/ubuntu/ubuntu%E9%85%8D%E7%BD%AE_%E6%8C%82%E8%BD%BD%E6%96%B0%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>1）<strong>准备工作： 确保 parted 命令已安装</strong></p><ul><li>help 打印帮助信息</li><li>print 输出分区信息</li><li>mklabel 创建分区表， 即是使用 msdos（MBR）还是使用 gpt，或者是其他方式分区表- mkpart 创建新分区<ul><li>格式：mkpart PART-TYPE START END</li><li>PART-TYPE 类型主要有 primary（主分区）, extended（扩展分区）, logical（逻辑区）</li></ul></li><li>rm 删除一个分区</li><li>resizepart 调整指定的分区的大小</li><li>quit 退出该交互界面</li></ul><p>2）<strong>使用 <code>fdisk</code> 和 <code>df</code> 找到新插入的硬盘设备号 <code>dev/sd*</code></strong></p><p>输入 <code>sudo fdisk -l</code> 显示的信息中，对应的新硬盘就是一般是那个没有分区的，确保一下，这时再输入 <code>df -hf</code> 显示出来的已挂载的硬盘分区中没有这个硬盘，基本就确定了</p><p>3）<strong>使用 parted 命令分区</strong></p><ul><li>进入 <code>parted</code> 交互模式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ parted /dev/sdb </span><br></pre></td></tr></table></figure><ul><li>指定分区表类型，一般使用 GPT</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(parted) mklabel gpt</span><br></pre></td></tr></table></figure><ul><li>创建分区</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里以只有一个分区为例</span></span><br><span class="line"><span class="comment">#方式一：使用百分比来表示要分区的的空间大小</span></span><br><span class="line">(parted) mkpart primary 0% 100%</span><br><span class="line"><span class="comment">#方式二：使用容量表示要分区的大小（-1 这个值代表的是最后的位置）</span></span><br><span class="line">(parted) mkpart primary 0TB -1</span><br><span class="line"><span class="comment">#方法三：手动进行计算(没算准容易出现分区对不齐情况)</span></span><br><span class="line">(parted) mkpart primary 0 2000GB</span><br></pre></td></tr></table></figure><ul><li>打印创建好的分区，创建好后退出</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(parted) p</span><br><span class="line">(parted) quit</span><br></pre></td></tr></table></figure><p>4）格式化分区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkfs.ext4 /dev/sda1</span><br><span class="line"><span class="comment">#/dev/sdx 对应你的分区节点</span></span><br></pre></td></tr></table></figure><p>5）挂载分区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建挂载目录</span></span><br><span class="line">$ sudo <span class="built_in">mkdir</span> /home/disk2</span><br><span class="line"><span class="comment"># 2. 挂载</span></span><br><span class="line">$ sudo mount /dev/sda1 /home/disk2</span><br></pre></td></tr></table></figure><ul><li>开机自动挂载硬盘</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 获取硬盘UUID</span></span><br><span class="line">$ sudo blkid /dev/sda1</span><br><span class="line"><span class="comment"># 2. 添加到/etc/fstab</span></span><br><span class="line">$ sudo vim /etc/fstab</span><br><span class="line"><span class="comment"># 3. 格式如下：</span></span><br><span class="line">UUID=xxxxxxxxxxxxxx /home/disk2 ext4 defaults  0 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> disk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置_加密博文测试</title>
      <link href="/2022/04/07/other/hexo%E9%85%8D%E7%BD%AE_%E5%8A%A0%E5%AF%86%E5%8D%9A%E6%96%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/04/07/other/hexo%E9%85%8D%E7%BD%AE_%E5%8A%A0%E5%AF%86%E5%8D%9A%E6%96%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7861681c423cb7e3dd848f2b6745bfa27ee7eae9e8a28ce7a574bb51d919d9b7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> encrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/06/other/hello-world/"/>
      <url>/2022/04/06/other/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
