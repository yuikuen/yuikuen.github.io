<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VsCode配置_SpringBoot项目环境</title>
      <link href="/2022/04/07/tools/vscode%E9%85%8D%E7%BD%AE_springboot%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/"/>
      <url>/2022/04/07/tools/vscode%E9%85%8D%E7%BD%AE_springboot%E9%A1%B9%E7%9B%AE%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="JDK-安装"><a href="#JDK-安装" class="headerlink" title="JDK 安装"></a>JDK 安装</h3><p>可选择 OpenJDK 或 OracleJDK</p><ul><li><strong>OpenJDK</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221120055668.png" alt="image-20220221120055668"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221120301777.png" alt="image-20220221120301777"></p><ul><li><strong>OracleJDK</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221133546365.png" alt="image-20220221133546365"></p><p>1）选择 msi &amp; exe，一路安装</p><p>2）修改环境变量，我的电脑→属性→高级系统设置→高级选项→环境变量</p><ul><li>系统变量处点击新建系统变量–变量名： <code>JAVA_HOME</code>，变量值：<code>C:\Program Files\Java\jdk1.8.0_321</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221135002345.png" alt="image-20220221135002345"></p><ul><li>再次新建系统变量-变量名： <code>CLASSPATH</code>，变量值：<code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221135524774.png" alt="image-20220221135524774"></p><ul><li>找到用户变量 PATH，点击编辑并新建两个变量值：<code>%JAVA_HOME%\bin</code> <code>%JAVA_HOME%\jre\bin</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221140146796.png" alt="image-20220221140146796"></p><p>3）验证，打开 cmd 下输入 <code>java -version 或 javac</code></p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version &quot;<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_261&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_261-b12)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25</span>.<span class="number">261</span>-b12, mixed <span class="built_in">mode</span>)</span><br></pre></td></tr></table></figure><h3 id="Maven-安装"><a href="#Maven-安装" class="headerlink" title="Maven 安装"></a>Maven 安装</h3><p>1）下载程序，选择 <code>bin.zip</code> 后缀文件下载，解压到本地</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221141047035.png" alt="image-20220221141047035"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221141255411.png" alt="image-20220221141255411"></p><p>2）配置环境变量</p><ul><li>MAVEN_HOME</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221141811291.png" alt="image-20220221141811291"></p><ul><li>PATH</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221141555797.png" alt="image-20220221141555797"></p><ul><li>验证 <code>mvn -v</code></li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">$ mvn -v</span><br><span class="line">Apache Maven <span class="number">3</span>.<span class="number">8</span>.<span class="number">4</span> (<span class="number">9</span>b656c72d54e5bacbed989b64718c159fe39b537)</span><br><span class="line">Maven home: C:\Program Files\apache-maven-<span class="number">3</span>.<span class="number">8</span>.<span class="number">4</span></span><br><span class="line">Java version: <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_261, vendor: Oracle Corporation, runtime: C:\Program Files\Java\jdk1.<span class="number">8</span>.<span class="number">0</span>_261\jre</span><br><span class="line">Default locale: zh_CN, platform encoding: GBK</span><br><span class="line">OS name: &quot;windows <span class="number">10</span>&quot;, version: &quot;<span class="number">10</span>.<span class="number">0</span>&quot;, arch: &quot;amd64&quot;, family: &quot;windows&quot;</span><br></pre></td></tr></table></figure><p>3）配置仓库</p><ul><li>本地仓库</li></ul><p>创建目录并修改配置文件，<code>.\apache-maven-3.8.4\conf\settings</code> (需要具体访问权限)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>C:\Program Files\apache-maven-3.8.4\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221143653457.png" alt="image-20220221143653457"></p><ul><li>中央仓库，添加 <a href="https://developer.aliyun.com/mvn/guide">阿里云maven仓库</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221144415645.png" alt="image-20220221144415645"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221145314721.png" alt="image-20220221145314721"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h3><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221145515599.png" alt="image-20220221145515599"></p><h3 id="SpringBoot-搭建"><a href="#SpringBoot-搭建" class="headerlink" title="SpringBoot 搭建"></a>SpringBoot 搭建</h3><p>1）安装插件</p><p>在 Visual Studio Code 中打开扩展视图(Ctrl+Shift+X)，搜索并安装</p><ul><li>Java Extension Pack (Java 扩展包)</li><li>Spring Boot Extension Pack</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221145837536.png" alt="image-20220221145837536"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221152233092.png" alt="image-20220221152233092"></p><p>2）配置环境(JDK、Maven)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221152534220.png" alt="image-20220221152534220"></p><p>把 maven 的可执行文件路径配置、maven的 setting 路径配置、java.home 的路径配置</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221153137855.png" alt="image-20220221153137855"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;security.workspace.trust.untrustedFiles&quot;: &quot;open&quot;,</span><br><span class="line">    &quot;workbench.startupEditor&quot;: &quot;newUntitledFile&quot;,</span><br><span class="line">    &quot;java.errors.incompleteClasspath.severity&quot;: &quot;ignore&quot;,</span><br><span class="line">    &quot;workbench.colorTheme&quot;: &quot;Visual Studio Dark&quot;,</span><br><span class="line">    &quot;java.home&quot;:&quot;C:\\Program Files\\Java\\jdk1.8.0_261&quot;,</span><br><span class="line">    &quot;java.configuration.maven.userSettings&quot;: &quot;C:\\Program Files\\apache-maven-3.8.4\\conf\\settings.xml&quot;,</span><br><span class="line">    &quot;maven.executable.path&quot;: &quot;C:\\Program Files\\apache-maven-3.8.4\\bin\\mvn.cmd&quot;,</span><br><span class="line">    &quot;maven.terminal.useJavaHome&quot;: true,</span><br><span class="line">    &quot;maven.terminal.customEnv&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;environmentVariable&quot;: &quot;JAVA_HOME&quot;,</span><br><span class="line">            &quot;value&quot;: &quot;C:\\Program Files\\Java\\jdk1.8.0_261&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;extensions.autoUpdate&quot;: false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成重启 VSCode</p><p>3）创建 SpringBoot 项目</p><p>使用快捷键(Ctrl+Shift+P)命令窗口，输入 Spring 选择创建 Maven 项目 <code>Spring Initializr:Create a Maven Project...</code></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221153901836.png" alt="image-20220221153901836"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154026593.png" alt="image-20220221154026593"></p><p>选择 java</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154103719.png" alt="image-20220221154103719"></p><p>设置包名</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154142247.png" alt="image-20220221154142247"></p><p>设置项目名</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154156150.png" alt="image-20220221154156150"></p><p>选择 jar</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154237790.png" alt="image-20220221154237790"></p><p>jdk 选择 1.8</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221154303768.png" alt="image-20220221154303768"></p><p>选择依赖</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221155142385.png" alt="image-20220221155142385"></p><p>4）修改配置文件</p><p>将 application.properties 改为 yml格式，并添加数据库配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span>  <span class="comment"># 配置mysql</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mydb?characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull&amp;allowMultiQueries=true&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span>  <span class="comment"># 默认端口</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5）运行项目，选择 DemoApplication.java 文件，右键菜单 运行(第一次运行要下载相关maven依赖，会比较慢)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221160842429.png" alt="image-20220221160842429"></p><p><strong>异常提示</strong></p><p>1）右下角会弹出一个弹框</p><p><code>Java 11 or more recent is required to run. Please download and install a recent JDK. Source: Language Support for Java™ by Red Hat</code></p><p>错误是<strong>Language Support for Java™ by Red Hat</strong>这个插件报出来的，其原因是这个插件鼓励开发者们使用 Java 11或者更新的版本。在v0.64.1这个版本更新中，这个插件将 Java 11作为运行版本</p><p>解决方案：选择降级到v0.64.1之前，同时关闭插件自动更新</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221155953950.png" alt="image-20220221155953950"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221160134291.png" alt="image-20220221160134291"></p><h3 id="Git-克隆项目"><a href="#Git-克隆项目" class="headerlink" title="Git 克隆项目"></a>Git 克隆项目</h3><p>使用快捷键(Ctrl+Shift+P)命令窗口，输入 git clone</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221161249590.png" alt="image-20220221161249590"></p><p>输入项目地址，选择工作区，待下载完进行运行测试</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221161414983.png" alt="image-20220221161414983"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220221162027244.png" alt="image-20220221162027244"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo配置_OneDrive图床</title>
      <link href="/2022/04/07/tools/picgo%E9%85%8D%E7%BD%AE_OneDrive%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/04/07/tools/picgo%E9%85%8D%E7%BD%AE_OneDrive%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>前言</strong>：之前使用 Github 作为 Hexo 博客，而 Gitee 作为博客图床使用，但 22&#x2F;03&#x2F;27 之后，Gitee 图床废了！！具说是官方添加了防盗链导致，虽然现在 Typora + PicGo + Gitee 的图床是可以正常显示了，我的笔记都得以查看，但我博客还是无法显示图片，而 Gitee 作为图床，体质也不算太好(有 1M 图片大小的限制)，为了安全起见，还是建议更换图床。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/3eddd173846db4ea4004f8034cce489e.png" alt="image-20220329104339503"></p><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><ul><li>不想额外花费，可免费决不采用收费方式，比如使用 OneDrive、GoogleDrive</li><li>能帮助我管理图片，作为免费的图床，Typora &amp; Blog 都能在网络获取图片</li></ul><p>经过多番查证，为了方便自己的习惯，具体方案还是选择 PicGo +  OneDrive(Amazon S3) + Typora + Blog。PicGo 不提供存储，但它有个 Amazon S3 插件，配合 PoweredBy.Cloud + S3 插件，可实现 OneDrive 图床服务</p><p>1）为什么使用 OneDrive</p><p>Amazon S3 是一个产品，主流的存储产品，比如阿里云 OSS、华为 OSS、腾讯 COS 等，虽然存储不贵，但还是有带宽、流量等费用问题；</p><p>而 OneDrive 免费 5G 空间，容量不足还能升级，将来文件迁移也方便，也自带杀毒和备份恢复功能（GoogleDrive 免费 15G 空间，但国内上传和访问都是问题，也就放弃了）</p><p>2）PicGo 的好处</p><p><a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 是开源产品，可以在 Github 上找到，在 Win、Linux、MacOS 等不同平台都提供了程序，并且还可以安装不同的插件来配合各大存储服务；</p><h3 id="PicGo-安装"><a href="#PicGo-安装" class="headerlink" title="PicGo 安装"></a>PicGo 安装</h3><p>安装方式都较为简单，在此就不再详说，可参照 PicGo Github</p><p>1）<strong>安装后打开主界面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/da8c34e3a24806ab88854faae58451a9.png" alt="image-20220329113154369"></p><p>2）<strong>选择插件设置-搜索 S3 -选择安装 S3 1.1.4(picgo amazon s3 uploader)</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/a6bdcaf760592f201da335997203183f.png" alt="image-20220329112946374"></p><blockquote><p>注意：必须先安装 <a href="https://nodejs.org/en/">node.js</a> 才能安装插件，请自行提前安装一下</p></blockquote><h3 id="PoweredBy-Cloud-配置"><a href="#PoweredBy-Cloud-配置" class="headerlink" title="PoweredBy.Cloud 配置"></a>PoweredBy.Cloud 配置</h3><blockquote><p><a href="https://poweredby.cloud/">PoweredBy.Cloud</a> 是一个将 GoogleDrive 和 OneDrive 变成图床的工具，存在网盘里文件的支链我们是无法获取的，如果能获取到文件的支链，那就能将 GoogleDrive 和 OneDrive 当作图床用，它就是这样一个免费工具，提供网盘的直链，而且使用起来没有任何限制</p></blockquote><p>1）注册账号 </p><ol><li>打开 <a href="https://poweredby.cloud/">PoweredBy.Cloud</a> 并注册，注册非常简单，只需要提供一个可收邮件的邮箱，登录地址会发送到邮箱</li><li>在邮箱里找到登录地址，并点击登录地址登录到 PoweredBy.Cloud</li><li>在 PoweredBy.Cloud 的控制台里添加一个 site，例如：<a href="http://demo.stdcdn.com/">http://demo.stdcdn.com</a>  选择 GoogleDrive 或者 OneDrive 作为存储空间(PoweredBy.Cloud 会在你的网盘里创建一个 <a href="http://demo.stdcdn.com/">http://demo.stdcdn.com</a> 的文件夹)</li></ol><p>注册site截图如下，Site Name 将在后面使用</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/f8a423e911cf882ce7b45bc9c82096e8.png" alt="image-20220329114225569"></p><p>2）创建 Developer 密钥(S3)</p><p>点击 Developer 选项-&gt;点击 Create Access Key 按钮-&gt;输入任意 key 名称(仅做备注)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/fda4209f4bd3370934b82f5861cdbb94.png" alt="image-20220329114559645"></p><h3 id="PicGo-配置-S3"><a href="#PicGo-配置-S3" class="headerlink" title="PicGo 配置 S3"></a>PicGo 配置 S3</h3><p>配置 S3 的关键参数在创建密钥后，access_key、secret_access_key 都已经出现，剩下的还有两个关键值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是两个关键参数</span></span><br><span class="line"><span class="comment">//固定值,endpoint 自定义节点</span></span><br><span class="line">endpoint_url=<span class="string">&#x27;https://stdcdn.com&#x27;</span></span><br><span class="line"><span class="comment">//桶,bucketName 这就是你的SiteName。</span></span><br><span class="line">bucket=<span class="string">&quot;yuikuen&quot;</span></span><br><span class="line"><span class="comment">//自定义节点</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//stdcdn.com</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/1ec466a959fe032877e4fce8c0bc987b.png" alt="image-20220331151315083"></p><p><strong>测试图片上传效果</strong></p><p>1）使用 PicGo 测试上传效果，最终会在我们的 OneDrive 中出现</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/ccd5adfe012727d0212a7a766d204878.png" alt="image-20220331151355857"></p><p>2）Typora 中，可以在图像中配置上传图片，并且上传可以进行验证图片上传选项操作</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/a433a9e8a646062b9b12ab7065d8b69f.png" alt="image-20220329115206895"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo配置_Gitee图床</title>
      <link href="/2022/04/07/tools/picgo%E9%85%8D%E7%BD%AE_Gitee%E5%9B%BE%E5%BA%8A/"/>
      <url>/2022/04/07/tools/picgo%E9%85%8D%E7%BD%AE_Gitee%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>前言</strong>：一开始都是使用云笔记的，但不便于保存或查看，后面转到了在线博客。而在线博客的编辑器坑太多了，所以开始尝试不同的方案，现暂敲定采用 “Typora + GitHub + Hexo” 方式，而图床一开始也是保存本地的，但在上传时又过于慢，因此改成 “Typora + GitHub + Hexo + PicGo(Gitee)” 来实现 Markdown 图床。</p></blockquote><h3 id="程序安装"><a href="#程序安装" class="headerlink" title="程序安装"></a>程序安装</h3><ul><li>PicGo (Windows、Manjaro Linux)</li><li>PicGo-plugin-gitee-uploader 插件</li></ul><p>Windows 与 Manjaro Linux 的安装方式都较为简单，在此就不再详说，可参照 PicGo Github</p><p><strong>安装后打开主界面</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207154537047.png" alt="image-20211207154537047"></p><p><strong>选择插件设置-搜索 gitee -选择安装 gitee-uploader 1.1.2</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207154656271.png" alt="image-20211207154656271"></p><blockquote><p>注意：必须先安装 <a href="https://nodejs.org/en/">node.js</a> 才能安装插件，请自行提前安装一下</p></blockquote><h3 id="建立-Gitee-图床库"><a href="#建立-Gitee-图床库" class="headerlink" title="建立 Gitee 图床库"></a>建立 Gitee 图床库</h3><p>注册码云方法略过，直接创建仓库即可，新建仓库要点如下：</p><ul><li>仓库名称不可重复</li><li>仓库设为公开，便于博客访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207155208280.png" alt="image-20211207155208280"></p><h3 id="配置-PicGo"><a href="#配置-PicGo" class="headerlink" title="配置 PicGo"></a>配置 PicGo</h3><p>打开软件，选择图床设置 gitee</p><ul><li>repo：用户名&#x2F;仓库名称</li><li>branch：分支，默认为 master</li><li>token：码云的私人令牌</li><li>path：路径，根据实际填写</li><li>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 <code>Upload 图片名 by picGo - 时间</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207160229270.png" alt="image-20211207160229270"></p><p><strong>Token 获取，在个人设置创建就有了</strong></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207160827190.png" alt="image-20211207160827190"></p><p>根据实际需求进行勾选，默认即可；</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207161003426.png" alt="image-20211207161003426"></p><p>需要验证一下密码，验证密码之后会出来一串数字，这一串数字就是你的 token，注意：这个令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，直接复制进去</p><h3 id="配置-Typora"><a href="#配置-Typora" class="headerlink" title="配置 Typora"></a>配置 Typora</h3><p>文件–偏好设置–图像，根据自身环境配置，点击验证图片上传选项即可，下以 <em>Windows</em> 为例</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211207161531543.png" alt="image-20211207161531543"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Esxi问题_解决虚拟机关机卡住问题</title>
      <link href="/2022/04/07/tools/esxi%E9%97%AE%E9%A2%98_%E8%A7%A3%E5%86%B3%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%B3%E6%9C%BA%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98%20/"/>
      <url>/2022/04/07/tools/esxi%E9%97%AE%E9%A2%98_%E8%A7%A3%E5%86%B3%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%85%B3%E6%9C%BA%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98%20/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ESXi 在日常使用时经常会遇到机器卡住的情况 这种情况下 GUI 的方式无从下手, 需要从 cli 的方式处理</p></blockquote><p>1）首先开启宿主机的 shell (SSH) 服务</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210824102352466.png" alt="image-20210824102352466"></p><p>2）<strong>Xshell 登录</strong>，用户名 root 密码 就是安装时设置的 ESXi 的密码，可以用 esxtop 查看具体性能情况</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20210824102735270.png" alt="image-20210824102735270"></p><p>3）<strong>查看虚拟机</strong>并根据机器 id 进行关闭指定虚拟机</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看虚拟机的列表</span></span><br><span class="line">$ esxcli vm process list </span><br><span class="line">Gitlab</span><br><span class="line">   World ID: 2099532</span><br><span class="line">   Process ID: 0</span><br><span class="line">   VMX Cartel ID: 2099517</span><br><span class="line">   UUID: 56 4d 48 08 86 8b 8f 67-a5 4a 33 f3 87 a8 d0 59</span><br><span class="line">   Display Name: Gitlab</span><br><span class="line">   Config File: /vmfs/volumes/6107a9c3-0511c860-9122-fcaa144d4e7d/Gitlab/Gitlab.vmx</span><br><span class="line"></span><br><span class="line">Jenkins</span><br><span class="line">   World ID: 2108579</span><br><span class="line">   Process ID: 0</span><br><span class="line">   VMX Cartel ID: 2108578</span><br><span class="line">   UUID: 56 4d 7e f1 59 73 75 50-f4 90 c8 4f 61 20 43 7a</span><br><span class="line">   Display Name: Jenkins</span><br><span class="line">   Config File: /vmfs/volumes/6107a9c3-0511c860-9122-fcaa144d4e7d/Jenkins/Jenkins.vmx</span><br><span class="line"></span><br><span class="line">dev</span><br><span class="line">   World ID: 2166668</span><br><span class="line">   Process ID: 0</span><br><span class="line">   VMX Cartel ID: 2166667</span><br><span class="line">   UUID: 56 4d ec fe f6 5f 03 80-95 97 de 30 60 ff 71 9c</span><br><span class="line">   Display Name: dev</span><br><span class="line">   Config File: /vmfs/volumes/6107a9f1-67821e71-248c-fcaa144d4e7d/dev/dev.vmx</span><br><span class="line"></span><br><span class="line">harbor&amp;nexus</span><br><span class="line">   World ID: 2206805</span><br><span class="line">   Process ID: 0</span><br><span class="line">   VMX Cartel ID: 2206804</span><br><span class="line">   UUID: 56 4d 26 c0 b4 1b 45 fd-b4 6d e6 ca 1e 64 30 a8</span><br><span class="line">   Display Name: harbor&amp;nexus</span><br><span class="line">   Config File: /vmfs/volumes/6107a9c3-0511c860-9122-fcaa144d4e7d/harbor&amp;nexus/harbor&amp;nexus.vmx</span><br></pre></td></tr></table></figure><p>根据上面查询出来的 world id 直接进行下一步 <code>esxcli vm process kill --world-id= </code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 根据虚拟机的名字查找机器world id</span></span><br><span class="line">$ esxcli vm process list | grep jenkins</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据world id 强制关闭虚拟机.</span></span><br><span class="line">$ esxcli vm process <span class="built_in">kill</span> -w=2108579 -t=hard</span><br></pre></td></tr></table></figure><p>之后再查看列表是否已经删除并正常关机了</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esxi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Glpi资产信息系统</title>
      <link href="/2022/04/07/tools/centos7%E9%83%A8%E7%BD%B2_Glpi%E8%B5%84%E4%BA%A7%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/04/07/tools/centos7%E9%83%A8%E7%BD%B2_Glpi%E8%B5%84%E4%BA%A7%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>GLPI 是一个企业私有资产信息同步管理平台，提供功能全面的 IT 资源管理接口，可以用它来建立数据库全面管理 IT 的电脑，显示器，服务器，打印机，网络设备，电话，甚至硒鼓和墨盒等，具体功能可参考官网</p></blockquote><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>1）<strong>系统要求</strong></p><ul><li>操作系统：CentOS Linux release 7.9</li><li>GLPI 版本：glpi-9.5.7</li><li>Nginx 版本：nginx-1.15.3</li><li>Php 版本：php-7.4.27</li><li>MySQL 版本：mysql-5.7.25-linux-glibc2.12-x86_64</li></ul><p>2）<strong>前置环境</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> --now firewalld</span><br><span class="line">$ sed -i <span class="string">&#x27;s/SELINUX=enforcing/SELINUX=disabled/&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="LNMP-部署"><a href="#LNMP-部署" class="headerlink" title="LNMP 部署"></a>LNMP 部署</h3><ul><li><strong>Nginx</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel</span><br><span class="line">$ wget http://nginx.org/download/nginx-1.15.3.tar.gz</span><br><span class="line">$ tar -xf nginx-1.15.3.tar.gz &amp;&amp; <span class="built_in">cd</span> ./nginx-1.21.4</span><br><span class="line">$ ./configure --prefix=/usr/local/nginx </span><br><span class="line">$ make &amp;&amp; make install </span><br><span class="line"></span><br><span class="line">$ groupadd nginx</span><br><span class="line">$ useradd -M -g nginx -s /sbin/nologin nginx</span><br><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">user nginx nginx;</span><br><span class="line"></span><br><span class="line">$ vim /lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=nginx</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/nginx/sbin/nginx</span><br><span class="line">ExecReload=/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line">ExecStop=/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now nginx &amp;&amp; systemctl status nginx</span><br></pre></td></tr></table></figure><ul><li><strong>MySQL</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -e --nodeps mariadb-libs</span><br><span class="line">$ yum -y install wget cmake gcc gcc-c++ ncurses numactl ncurses-devel libaio-devel openssl openssl-devel libaio</span><br><span class="line">$ wget https://cdn.mysql.com/archives/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">$ tar -zxvf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz -C /usr/local/ &amp;&amp; <span class="built_in">cd</span> /usr/local</span><br><span class="line">$ <span class="built_in">mv</span> mysql-5.7.25-linux-glibc2.12-x86_64  mysql &amp;&amp; <span class="built_in">cd</span> ./mysql/</span><br><span class="line">$ groupadd mysql</span><br><span class="line">$ useradd -r -g mysql mysql</span><br><span class="line"></span><br><span class="line">$ vim /etc/my.cnf</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">[mysqld]</span><br><span class="line">port = 3306</span><br><span class="line">socket=/usr/local/mysql/mysql.sock</span><br><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/usr/local/mysql/data</span><br><span class="line">max_connections=200</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default-storage-engine=INNODB </span><br><span class="line">max_allowed_packet=16M</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chown</span> -R mysql:mysql ./</span><br><span class="line">$ ./bin/mysqld --initialize --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data</span><br><span class="line">e0qFnvkLj/ow</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cp</span> ./support-files/mysql.server /etc/rc.d/init.d/mysqld</span><br><span class="line">$ <span class="built_in">chmod</span> +x /etc/rc.d/init.d/mysqld</span><br><span class="line">$ chkconfig --add mysqld</span><br><span class="line">$ service mysqld start</span><br><span class="line"></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># MySQL</span></span><br><span class="line"><span class="built_in">export</span> MYSQL_HOME=/usr/local/mysql</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MYSQL_HOME</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line">$ mysql -u root -p</span><br><span class="line">Enter password:输入默认的临时密码</span><br><span class="line">&gt; <span class="built_in">set</span> password=password(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">&gt; <span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>=password(<span class="string">&#x27;password&#x27;</span>);</span><br><span class="line">&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line">&gt; GRANT ALL ON *.* TO user@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">&gt; flush privileges;</span><br></pre></td></tr></table></figure><ul><li><strong>Php</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install https://rpms.remirepo.net/enterprise/remi-release-7.rpm</span><br><span class="line">$ yum clean all &amp;&amp; yum makecache</span><br><span class="line">$ yum -y install yum-utils</span><br><span class="line">$ yum repolist all |grep php</span><br><span class="line">$ yum-config-manager --<span class="built_in">enable</span> remi-php74</span><br><span class="line">$ yum -y install php php-cli php-fpm php-mysqlnd php-zip php-devel php-gd php-mcrypt php-mbstring php-curl php-xml php-pear php-bcmath php-json php-redis php-fileinfo php-mysqli php-session php-zlib php-simplexml php-intl php-domxml php-ldap  php-openssl php-xmlrpc php-pecl-apcu php-pear-CAS php-opcache</span><br><span class="line">$ systemctl start php-fpm &amp;&amp; systemctl <span class="built_in">enable</span> php-fpm</span><br><span class="line">$ php -v</span><br><span class="line">$ php --modules</span><br></pre></td></tr></table></figure><h3 id="Glpi-安装"><a href="#Glpi-安装" class="headerlink" title="Glpi 安装"></a>Glpi 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/glpi-project/glpi/releases/download/9.5.7/glpi-9.5.7.tgz</span><br><span class="line">$ tar -xf glpi-9.5.7.tgz -C /usr/local/nginx/html</span><br><span class="line">$ <span class="built_in">chown</span> nginx:nginx -R /usr/local/nginx/html</span><br><span class="line">$ <span class="built_in">cd</span> /usr/local/nginx/html/glpi/ &amp;&amp; <span class="built_in">chmod</span> -R 777 config files</span><br><span class="line">$ vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">server&#123;</span><br><span class="line">listen 80 ;</span><br><span class="line">server_name 188.188.4.44;</span><br><span class="line"></span><br><span class="line">root /usr/local/nginx/html/glpi;</span><br><span class="line"></span><br><span class="line"><span class="comment">#301重定向</span></span><br><span class="line"><span class="comment">#rewrite ^(.*)$ $1 permanent;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#强制SSL</span></span><br><span class="line"><span class="comment">#rewrite ^(.*)$  https://$host$1 permanent;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#防盗链</span></span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"><span class="comment">#伪静态</span></span><br><span class="line"><span class="comment">#include /usr/local/nginx/html/glpi/.rewrite.conf;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#首页</span></span><br><span class="line">root /usr/local/nginx/html/glpi;</span><br><span class="line">index index.php index.html error/index.html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#流量限制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志</span></span><br><span class="line"><span class="comment">#access_log /usr/local/nginx/logs/nginx_access_$logdate.log main;</span></span><br><span class="line">error_page  403  /error/403.html;</span><br><span class="line">error_page  400  /error/400.html;</span><br><span class="line">error_page  404  /error/404.html;</span><br><span class="line">error_page  502  /error/502.html;</span><br><span class="line">error_page  503  /error/503.html;</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理PHP</span></span><br><span class="line">location  ~ [^/]\.php(/|$) &#123;</span><br><span class="line">root /usr/local/nginx/html/glpi;</span><br><span class="line">fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">fastcgi_split_path_info  ^(.+\.php)(.*)$;</span><br><span class="line">fastcgi_param  SCRIPT_FILENAME $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">fastcgi_param  PATH_INFO <span class="variable">$fastcgi_path_info</span>;</span><br><span class="line">include fastcgi.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#DenyFiles</span></span><br><span class="line">location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">return</span> 404;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ systemctl restart nginx php-fpm</span><br></pre></td></tr></table></figure><p>1）开始安装（如果后续推出新版本，可选择升级即可）</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220309144826505.png" alt="image-20220309144826505"></p><p>2）检查运行环境要求，若显示相关报错，如果缺少安装包就装包，如果提示权限不足就查权限是否设置正确；</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220309145912348.png" alt="image-20220309145912348"></p><p>插件安装参考：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/src/php-7.4.27/ext/intl</span><br><span class="line">$ /usr/local/php/bin/phpize</span><br><span class="line">$ ./configure --with-php-config=/usr/local/php/bin/php-config </span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/</span><br><span class="line"></span><br><span class="line">$ vim /usr/local/php/etc/php.ini</span><br><span class="line">extension=intl</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220309153040069.png" alt="image-20220309153040069"></p><p>3）连接数据库–输入服务器地址、用户名、密码(请自行创建账号密码)</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220309153131383.png" alt="image-20220309153131383"></p><p>4）登录GLPI管理控制台，成功后的界面</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310095627201.png" alt="image-20220310095627201"></p><p>5）安全设置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/nginx/html/glpi/install/</span><br><span class="line">$ <span class="built_in">mv</span> install.php install.php.$(<span class="built_in">date</span> +%F_%T)</span><br></pre></td></tr></table></figure><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>FusionInventory 就像网关一样，收集代理发送的信息。它会在管理员不费吹灰之力的情况下创建或更新 GLPI 中的信息</p><p>1）安装插件：设置–插件–查找插件目录</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310111042009.png" alt="image-20220310111042009"></p><p>2）进入插件页面，根据个人选择不同插件进行安装</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310111244451.png" alt="image-20220310111244451"></p><p>3）下载安装包–&#x3D;&#x3D;注：GLPI 和 FusionInventory 的版本必须适配&#x3D;&#x3D;</p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310111221817.png" alt="image-20220310111221817"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310111352011.png" alt="image-20220310111352011"></p><p>4）下载或上传插件安装包至 glpi 插件目录，刷新网页即可安装、启用插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/local/nginx/html/glpi/plugins</span><br><span class="line">$ wget https://github.com/pluginsGLPI/ocsinventoryng/releases/download/1.7.3/glpi-ocsinventoryng-1.7.3.tar.gz</span><br><span class="line">$ wget https://github.com/fusioninventory/fusioninventory-for-glpi/releases/download/glpi9.5%2B3.0/fusioninventory-9.5+3.0.tar.bz2</span><br><span class="line">$ tar -xf glpi-ocsinventoryng-1.7.3.tar.gz</span><br><span class="line">$ tar -jxf fusioninventory-9.5+3.0.tar.bz2</span><br><span class="line">$ ll</span><br><span class="line">total 5140</span><br><span class="line">drwxr-xr-x. 16 root  root     4096 Mar 22  2021 fusioninventory</span><br><span class="line">-rw-r--r--.  1 root  root  3520305 Dec  8 13:26 fusioninventory-9.5+3.0.tar.bz2</span><br><span class="line">-rw-r--r--.  1 root  root  1727867 Dec  8 09:10 glpi-ocsinventoryng-1.7.3.tar.gz</span><br><span class="line">drwxr-xr-x. 12 root  root     4096 Dec  4  2020 ocsinventoryng</span><br><span class="line">-rwxrwxrwx.  1 nginx nginx      80 Jan 27 22:34 remove.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310112132989.png" alt="image-20220310112132989"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310112402323.png" alt="image-20220310112402323"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20220310112554916.png" alt="image-20220310112554916"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> glpi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7部署_Gerrit3.4.x</title>
      <link href="/2022/04/07/tools/centos7%E9%83%A8%E7%BD%B2_Gerrit3.4.x/"/>
      <url>/2022/04/07/tools/centos7%E9%83%A8%E7%BD%B2_Gerrit3.4.x/</url>
      
        <content type="html"><![CDATA[<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><p>本文使用 ESXI 虚拟机进行实验；</p><ul><li>2核 CPU，5GB 内存，50GB 硬盘，IP：188.188.3.144</li><li>CentOS 7.9 最小化安装</li></ul><p><a href="https://www.gerritcodereview.com/">Gerrit</a> 支持多种数据库、多种认证方式（参考<a href="https://gerrit-documentation.storage.googleapis.com/Documentation/3.4.1/install.html">官网手册</a>），这里使用</p><ul><li>mariadb数据库</li><li>http认证</li><li>Apache http server 作为 web 服务器，提供反向代理</li><li>gitweb 作为 Repository Browser</li></ul><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p>1）安装依赖环境</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum -y install git gitweb httpd java-11-openjdk java-11-openjdk-devel</span><br></pre></td></tr></table></figure><p>2）配置 httpd 反向代理</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/httpd/conf.d/gerrit.conf</span><br><span class="line">&lt;VirtualHost *&gt;                        <span class="comment"># 可自定义端口，默认80</span></span><br><span class="line">    ServerName 188.188.3.144           <span class="comment"># 此为服务器IP地址</span></span><br><span class="line"></span><br><span class="line">    ProxyRequests Off</span><br><span class="line">    ProxyVia Off</span><br><span class="line">    ProxyPreserveHost On</span><br><span class="line"></span><br><span class="line">    &lt;Proxy *&gt;</span><br><span class="line">          Order deny,allow</span><br><span class="line">          Allow from all</span><br><span class="line">    &lt;/Proxy&gt;</span><br><span class="line"></span><br><span class="line">    &lt;Location /login/&gt;</span><br><span class="line">      AuthType Basic</span><br><span class="line">      AuthName <span class="string">&quot;Gerrit Code Review&quot;</span></span><br><span class="line">      AuthBasicProvider file</span><br><span class="line">      AuthUserFile /gerrit.passwd      <span class="comment"># 此处基于文件方式认证，详细查看‘添加HTTP认证用户’         </span></span><br><span class="line">      Require valid-user</span><br><span class="line">    &lt;/Location&gt;</span><br><span class="line"></span><br><span class="line">    AllowEncodedSlashes On</span><br><span class="line">    ProxyPass / http://127.0.0.1:8081/</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">$ systemctl <span class="built_in">enable</span> --now httpd</span><br></pre></td></tr></table></figure><ul><li>ServerName 根据自己实际情况自定义，此为本机 IP</li><li>Gerrit 的 http 认证方式，需要使用 HTTP 基本认证（httpd 要有访问权限才行，在此使用文件 <code>/gerrit.passwd</code>）方式认证</li><li>反向代理设置，从根目录”&#x2F;“，代理到”<a href="http://127.0.0.1:8081/&quot;%EF%BC%88%E6%B3%A8%E6%84%8F%E7%AB%AF%E5%8F%A3%E5%90%8E%E7%9A%84%E6%96%9C%E7%BA%BF%EF%BC%8C8081%E4%B8%BA">http://127.0.0.1:8081/&quot;（注意端口后的斜线，8081为</a> gerrit 监听的端口）</li></ul><p>3）配置 Jre</p><p>注意：官网上有注明使用的先决条件，要运行 GERRIT 服务，主机必须满足以下要求：JRE，版本 1.8 或 11 下载（ Gerrit 目前尚未与 Java 13 或更新兼容）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> java</span><br><span class="line">$ <span class="built_in">ls</span> -lr /usr/bin/java</span><br><span class="line">$ <span class="built_in">ls</span> -lrt /etc/alternatives/java</span><br><span class="line"><span class="comment"># 输出/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64就是JAVA的安装路径</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="comment"># Java Environment</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/jre/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib:<span class="variable">$CLASSPATH</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>4）添加 HTTP 认证用户</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> /gerrit.passwd</span><br><span class="line">$ htpasswd /gerrit.passwd <span class="string">&quot;root&quot;</span></span><br><span class="line">New password: </span><br><span class="line">Re-<span class="built_in">type</span> new password: </span><br><span class="line">Adding password <span class="keyword">for</span> user root</span><br><span class="line">$ <span class="built_in">cat</span> /gerrit.passwd </span><br><span class="line">root:$apr1$XwPU680a<span class="variable">$XX</span>/1KGJViZ4QT7NLrl2/n/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：&quot;-c&quot;参数为创建，仅限第一次添加用户时使用，第二次创建时不要加&quot;-c&quot;参数</span></span><br><span class="line"><span class="comment"># 添加一个用户</span></span><br><span class="line">$ htpasswd -c /gerrit.passwd <span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="comment"># 添加其他用户</span></span><br><span class="line">$ htpasswd -b /gerrit.passwd root passwd</span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line">$ htpasswd -D /gerrit.passwd root</span><br><span class="line"><span class="comment"># 更改密码</span></span><br><span class="line">$ htpasswd -m /gerrit.passwd root</span><br></pre></td></tr></table></figure><h3 id="安装-Gerrit"><a href="#安装-Gerrit" class="headerlink" title="安装 Gerrit"></a>安装 Gerrit</h3><p>1）下载或上传 war 包，进行安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -p /usr/local/gerrit &amp;&amp; <span class="built_in">cd</span> /usr/local/gerrit</span><br><span class="line">$ java -jar gerrit-3.4.1.war init -d review_site</span><br><span class="line">Using secure store: com.google.gerrit.server.securestore.DefaultSecureStore</span><br><span class="line">[2021-11-05 10:07:30,655] [main] INFO  com.google.gerrit.server.config.GerritServerConfigProvider : No /usr/local/gerrit/review_site/etc/gerrit.config; assuming defaults</span><br><span class="line"></span><br><span class="line">*** Gerrit Code Review 3.4.1</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Create <span class="string">&#x27;/usr/local/gerrit/review_site&#x27;</span> [Y/n]? y    <span class="comment"># 是否安装在此目录，选n程序自动退出，默认回车也可</span></span><br><span class="line"></span><br><span class="line">*** Git Repositories</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Location of Git repositories   [git]:              <span class="comment"># Git存储库，不指定则默认创建在程序目录./gerrit/review_site/git</span></span><br><span class="line"></span><br><span class="line">*** JGit Configuration</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Auto-configured <span class="string">&quot;receive.autogc = false&quot;</span> to <span class="built_in">disable</span> auto-gc after git-receive-pack.</span><br><span class="line"></span><br><span class="line">*** Index</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Type                           [lucene]:           <span class="comment"># 默认回车</span></span><br><span class="line"></span><br><span class="line">*** User Authentication</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Authentication method          [openid/?]: http    <span class="comment"># 认证方式http，在此使用反向代理</span></span><br><span class="line">Get username from custom HTTP header [y/N]? n      <span class="comment"># 是否自定义http头获取用户名</span></span><br><span class="line">SSO <span class="built_in">logout</span> URL                 :                   <span class="comment"># 默认回车</span></span><br><span class="line">Enable signed push support     [y/N]? y            <span class="comment"># 启用签名推送支持</span></span><br><span class="line"></span><br><span class="line">*** Review Labels</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">Install Verified label         [y/N]?              <span class="comment"># 安装已验证标签，默认回车</span></span><br><span class="line"></span><br><span class="line">*** Email Delivery</span><br><span class="line">*** </span><br><span class="line"></span><br><span class="line">SMTP server hostname           [localhost]: smtp.qq.com    <span class="comment"># smtp发送邮件服务器</span></span><br><span class="line">SMTP server port               [(default)]: 465            <span class="comment"># 465/994-SSL协议端口，25-非SSL协议端口</span></span><br><span class="line">SMTP encryption                [none/?]: SSL               <span class="comment"># 根据上述协议自行定义</span></span><br><span class="line">SMTP username                  [root]: sinath@vip.qq.com   <span class="comment"># 此为自定义自动发送邮件的地址</span></span><br><span class="line">sinath@vip.qq.com<span class="string">&#x27;s password   :                           # QQ邮箱此处为授权码，非邮箱密码，如163、企业邮箱即为密码</span></span><br><span class="line"><span class="string">              confirm password : </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** Container Process</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Run as                         [root]:        # 程序运行进程的用户，默认为当前用户，可另创用户                                            </span></span><br><span class="line"><span class="string">Java runtime                   [/usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64]: </span></span><br><span class="line"><span class="string">Copy gerrit-3.4.1.war to review_site/bin/gerrit.war [Y/n]? y</span></span><br><span class="line"><span class="string">Copying gerrit-3.4.1.war to review_site/bin/gerrit.war</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** SSH Daemon</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Listen on address              [*]:           # 指定SSH后台服务监听地址</span></span><br><span class="line"><span class="string">Listen on port                 [29418]:       # 指定SSH后台服务的端口</span></span><br><span class="line"><span class="string">Generating SSH host key ... rsa... ed25519... ecdsa 256... ecdsa 384... ecdsa 521... done</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** HTTP Daemon</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Behind reverse proxy           [y/N]? y       # 开启发向代理</span></span><br><span class="line"><span class="string">Proxy uses SSL (https://)      [y/N]?         # 默认开启SSL</span></span><br><span class="line"><span class="string">Subdirectory on proxy server   [/]:           # 代理服务器的根目录，默认为“/”，默认回车</span></span><br><span class="line"><span class="string">Listen on address              [*]: 127.0.0.1 # gerrit的监听地址</span></span><br><span class="line"><span class="string">Listen on port                 [8081]:        # gerrit的服务端口</span></span><br><span class="line"><span class="string">Canonical URL                  [http://127.0.0.1/]: http://188.188.3.144  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** Cache</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*** Plugins</span></span><br><span class="line"><span class="string">*** </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Installing plugins.                           # 接下来就是询问是否安装插件，一路y即可</span></span><br><span class="line"><span class="string">Install plugin codemirror-editor version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed codemirror-editor v3.4.1</span></span><br><span class="line"><span class="string">Install plugin commit-message-length-validator version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed commit-message-length-validator v3.4.1</span></span><br><span class="line"><span class="string">Install plugin delete-project version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed delete-project v3.4.1</span></span><br><span class="line"><span class="string">Install plugin download-commands version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed download-commands v3.4.1</span></span><br><span class="line"><span class="string">Install plugin gitiles version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed gitiles v3.4.1</span></span><br><span class="line"><span class="string">Install plugin hooks version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed hooks v3.4.1</span></span><br><span class="line"><span class="string">Install plugin plugin-manager version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed plugin-manager v3.4.1</span></span><br><span class="line"><span class="string">Install plugin replication version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed replication v3.4.1</span></span><br><span class="line"><span class="string">Install plugin reviewnotes version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed reviewnotes v3.4.1</span></span><br><span class="line"><span class="string">Install plugin singleusergroup version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed singleusergroup v3.4.1</span></span><br><span class="line"><span class="string">Install plugin webhooks version v3.4.1 [y/N]? y</span></span><br><span class="line"><span class="string">Installed webhooks v3.4.1</span></span><br><span class="line"><span class="string">Initializing plugins.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">============================================================================</span></span><br><span class="line"><span class="string">Welcome to the Gerrit community</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Find more information on the homepage: https://www.gerritcodereview.com</span></span><br><span class="line"><span class="string">Discuss Gerrit on the mailing list: https://groups.google.com/g/repo-discuss</span></span><br><span class="line"><span class="string">============================================================================</span></span><br><span class="line"><span class="string">Initialized /usr/local/gerrit/review_site</span></span><br><span class="line"><span class="string">Init complete, reindexing accounts with: reindex --site-path review_site --threads 1 --index accountsReindexed 0 documents in accounts index in 0.0s (0.0/s)</span></span><br><span class="line"><span class="string">Index accounts in version 11 is ready</span></span><br><span class="line"><span class="string">Warning: InterruptedException</span></span><br><span class="line"><span class="string">java.lang.InterruptedException</span></span><br><span class="line"><span class="string">at java.base/java.lang.Object.wait(Native Method)</span></span><br><span class="line"><span class="string">at java.base/java.lang.Thread.join(Thread.java:1308)</span></span><br><span class="line"><span class="string">at org.h2.util.MathUtils.getSecureRandom(MathUtils.java:105)</span></span><br><span class="line"><span class="string">at org.h2.util.MathUtils.secureRandomBytes(MathUtils.java:307)</span></span><br><span class="line"><span class="string">at org.h2.store.FileLock.setUniqueId(FileLock.java:315)</span></span><br><span class="line"><span class="string">at org.h2.store.FileLock.lockFile(FileLock.java:345)</span></span><br><span class="line"><span class="string">at org.h2.store.FileLock.lock(FileLock.java:136)</span></span><br><span class="line"><span class="string">at org.h2.engine.Database.open(Database.java:622)</span></span><br><span class="line"><span class="string">at org.h2.engine.Database.openDatabase(Database.java:260)</span></span><br><span class="line"><span class="string">at org.h2.engine.Database.&lt;init&gt;(Database.java:254)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.openSession(Engine.java:57)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.openSession(Engine.java:164)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.createSessionAndValidate(Engine.java:142)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.createSession(Engine.java:125)</span></span><br><span class="line"><span class="string">at org.h2.engine.Engine.createSession(Engine.java:27)</span></span><br><span class="line"><span class="string">at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:331)</span></span><br><span class="line"><span class="string">at org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:107)</span></span><br><span class="line"><span class="string">at org.h2.jdbc.JdbcConnection.&lt;init&gt;(JdbcConnection.java:91)</span></span><br><span class="line"><span class="string">at org.h2.Driver.connect(Driver.java:74)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl$SqlHandle.&lt;init&gt;(H2CacheImpl.java:679)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl$SqlStore.acquire(H2CacheImpl.java:647)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl$SqlStore.buildBloomFilter(H2CacheImpl.java:365)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl$SqlStore.open(H2CacheImpl.java:337)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.cache.h2.H2CacheImpl.start(H2CacheImpl.java:197)</span></span><br><span class="line"><span class="string">at com.google.gerrit.server.logging.LoggingContextAwareRunnable.run(LoggingContextAwareRunnable.java:113)</span></span><br><span class="line"><span class="string">at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span></span><br><span class="line"><span class="string">at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span></span><br><span class="line"><span class="string">at java.base/java.lang.Thread.run(Thread.java:829)</span></span><br><span class="line"><span class="string">Collecting projects:    2 changes with: reindex --site-path review_site --threads 1 --index changes</span></span><br><span class="line"><span class="string">Reindexing changes: project-slices: 100% (2/2), done    </span></span><br><span class="line"><span class="string">Reindexed 0 documents in changes index in 0.0s (0.0/s)</span></span><br><span class="line"><span class="string">Index changes in version 61 is ready</span></span><br><span class="line"><span class="string">Reindexing groups:      100% (2/2)ith: reindex --site-path review_site --threads 1 --index groups</span></span><br><span class="line"><span class="string">Reindexed 2 documents in groups index in 0.2s (12.7/s)</span></span><br><span class="line"><span class="string">Index groups in version 8 is ready</span></span><br><span class="line"><span class="string">Reindexing projects:    100% (2/2) with: reindex --site-path review_site --threads 1 --index projects</span></span><br><span class="line"><span class="string">Reindexed 2 documents in projects index in 0.1s (14.5/s)</span></span><br><span class="line"><span class="string">Index projects in version 4 is ready</span></span><br><span class="line"><span class="string">Executing /usr/local/gerrit/review_site/bin/gerrit.sh start</span></span><br><span class="line"><span class="string">Starting Gerrit Code Review: OK</span></span><br><span class="line"><span class="string">Waiting for server on 188.188.3.144:80 ... OK</span></span><br><span class="line"><span class="string">Opening http://188.188.3.144/#/admin/projects/ ...FAILED</span></span><br><span class="line"><span class="string">Open Gerrit with a JavaScript capable browser:</span></span><br><span class="line"><span class="string">  http://188.188.3.144/#/admin/projects/</span></span><br></pre></td></tr></table></figure><p>2）修改配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> ./gerrit/review_site/etc/gerrit.config</span><br><span class="line">[gerrit]</span><br><span class="line">basePath = git</span><br><span class="line">canonicalWebUrl = http://188.188.3.145</span><br><span class="line">serverId = 1426be99-788d-4ee3-9c97-657e3f82b964</span><br><span class="line">[container]</span><br><span class="line">javaOptions = <span class="string">&quot;-Dflogger.backend_factory=com.google.common.flogger.backend.log4j.Log4jBackendFactory#getInstance&quot;</span></span><br><span class="line">javaOptions = <span class="string">&quot;-Dflogger.logging_context=com.google.gerrit.server.logging.LoggingContext#getInstance&quot;</span></span><br><span class="line">user = root</span><br><span class="line">javaHome = /usr/lib/jvm/java-11-openjdk-11.0.13.0.8-1.el7_9.x86_64</span><br><span class="line">[index]</span><br><span class="line"><span class="built_in">type</span> = lucene</span><br><span class="line">[auth]</span><br><span class="line"><span class="built_in">type</span> = HTTP</span><br><span class="line">[receive]</span><br><span class="line">enableSignedPush = <span class="literal">true</span></span><br><span class="line">[sendemail]</span><br><span class="line">smtpServer = smtp.qq.com</span><br><span class="line">smtpServerPort = 465</span><br><span class="line">smtpEncryption = SSL</span><br><span class="line">smtpUser = sinath@vip.qq.com</span><br><span class="line">[sshd]</span><br><span class="line">listenAddress = *:29418</span><br><span class="line">[httpd]</span><br><span class="line">listenUrl = proxy-http://127.0.0.1:8081/</span><br><span class="line">[cache]</span><br><span class="line">directory = cache</span><br></pre></td></tr></table></figure><p>3）启动并配置开机自启动</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 管理命令</span></span><br><span class="line">$ ./gerrit/review_site/bin/gerrit.sh start</span><br><span class="line">$ ./gerrit/review_site/bin/gerrit.sh stop</span><br><span class="line">$ ./gerrit/review_site/bin/gerrit.sh status</span><br><span class="line"></span><br><span class="line">$ netstat -ltnp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      1725/mysqld         </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1102/sshd           </span><br><span class="line">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      1189/master         </span><br><span class="line">tcp6       0      0 :::29418                :::*                    LISTEN      4406/GerritCodeRevi </span><br><span class="line">tcp6       0      0 :::80                   :::*                    LISTEN      1783/httpd          </span><br><span class="line">tcp6       0      0 127.0.0.1:8081          :::*                    LISTEN      4406/GerritCodeRevi </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1102/sshd           </span><br><span class="line">tcp6       0      0 ::1:25                  :::*                    LISTEN      1189/master</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/systemd/system/gerrit.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=gerrit Server</span><br><span class="line">After=syslog.target network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/gerrit/review_site/bin/gerrit.sh start</span><br><span class="line">ExecStop=/usr/local/gerrit/review_site/bin/gerrit.sh stop</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>4）登录验证 <a href="http://server-ip/">http://server-ip</a></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211104151058542.png" alt="image-20211104151058542.png"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211104151110402.png" alt="image-20211104151110402"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211105104049204.png" alt="image-20211105104049204"></p><p><img src="https://cdn.jsdelivr.net/gh/yuikuen/picgo-cdn_images/img/image-20211105114258300.png" alt="image-20211105114258300"></p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> glpi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu配置_挂载新硬盘</title>
      <link href="/2022/04/07/ubuntu/ubuntu%E9%85%8D%E7%BD%AE_%E6%8C%82%E8%BD%BD%E6%96%B0%E7%A1%AC%E7%9B%98/"/>
      <url>/2022/04/07/ubuntu/ubuntu%E9%85%8D%E7%BD%AE_%E6%8C%82%E8%BD%BD%E6%96%B0%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<p>1）<strong>准备工作： 确保 parted 命令已安装</strong></p><ul><li>help 打印帮助信息</li><li>print 输出分区信息</li><li>mklabel 创建分区表， 即是使用 msdos（MBR）还是使用 gpt，或者是其他方式分区表- mkpart 创建新分区<ul><li>格式：mkpart PART-TYPE START END</li><li>PART-TYPE 类型主要有 primary（主分区）, extended（扩展分区）, logical（逻辑区）</li></ul></li><li>rm 删除一个分区</li><li>resizepart 调整指定的分区的大小</li><li>quit 退出该交互界面</li></ul><p>2）<strong>使用 <code>fdisk</code> 和 <code>df</code> 找到新插入的硬盘设备号 <code>dev/sd*</code></strong></p><p>输入 <code>sudo fdisk -l</code> 显示的信息中，对应的新硬盘就是一般是那个没有分区的，确保一下，这时再输入 <code>df -hf</code> 显示出来的已挂载的硬盘分区中没有这个硬盘，基本就确定了</p><p>3）<strong>使用 parted 命令分区</strong></p><ul><li>进入 <code>parted</code> 交互模式</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ parted /dev/sdb </span><br></pre></td></tr></table></figure><ul><li>指定分区表类型，一般使用 GPT</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(parted) mklabel gpt</span><br></pre></td></tr></table></figure><ul><li>创建分区</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这里以只有一个分区为例</span></span><br><span class="line"><span class="comment">#方式一：使用百分比来表示要分区的的空间大小</span></span><br><span class="line">(parted) mkpart primary 0% 100%</span><br><span class="line"><span class="comment">#方式二：使用容量表示要分区的大小（-1 这个值代表的是最后的位置）</span></span><br><span class="line">(parted) mkpart primary 0TB -1</span><br><span class="line"><span class="comment">#方法三：手动进行计算(没算准容易出现分区对不齐情况)</span></span><br><span class="line">(parted) mkpart primary 0 2000GB</span><br></pre></td></tr></table></figure><ul><li>打印创建好的分区，创建好后退出</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(parted) p</span><br><span class="line">(parted) quit</span><br></pre></td></tr></table></figure><p>4）格式化分区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkfs.ext4 /dev/sda1</span><br><span class="line"><span class="comment">#/dev/sdx 对应你的分区节点</span></span><br></pre></td></tr></table></figure><p>5）挂载分区</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 创建挂载目录</span></span><br><span class="line">$ sudo <span class="built_in">mkdir</span> /home/disk2</span><br><span class="line"><span class="comment"># 2. 挂载</span></span><br><span class="line">$ sudo mount /dev/sda1 /home/disk2</span><br></pre></td></tr></table></figure><ul><li>开机自动挂载硬盘</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 获取硬盘UUID</span></span><br><span class="line">$ sudo blkid /dev/sda1</span><br><span class="line"><span class="comment"># 2. 添加到/etc/fstab</span></span><br><span class="line">$ sudo vim /etc/fstab</span><br><span class="line"><span class="comment"># 3. 格式如下：</span></span><br><span class="line">UUID=xxxxxxxxxxxxxx /home/disk2 ext4 defaults  0 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> disk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置_加密博文测试</title>
      <link href="/2022/04/07/other/hexo%E9%85%8D%E7%BD%AE_%E5%8A%A0%E5%AF%86%E5%8D%9A%E6%96%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/04/07/other/hexo%E9%85%8D%E7%BD%AE_%E5%8A%A0%E5%AF%86%E5%8D%9A%E6%96%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7861681c423cb7e3dd848f2b6745bfa27ee7eae9e8a28ce7a574bb51d919d9b7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> encrypt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/06/other/hello-world/"/>
      <url>/2022/04/06/other/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
